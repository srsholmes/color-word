(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";require("whatwg-fetch");var _components=require("./components");require("babelify/polyfill");var React=require("react");window.React=React,React.render(React.createElement(_components.App,null),document.querySelector("div[app]"));


},{"./components":274,"babelify/polyfill":94,"react":250,"whatwg-fetch":270}],2:[function(require,module,exports){
(function (global){
"use strict";if(require("core-js/shim"),require("regenerator/runtime"),global._babelPolyfill)throw new Error("only one instance of babel/polyfill is allowed");global._babelPolyfill=!0;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9saWIvcG9seWZpbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFlBTUEsSUFKQSxRQUFRLGdCQUVSLFFBQVEsdUJBRUosT0FBTyxlQUNULEtBQU0sSUFBSSxPQUFNLGlEQUVsQixRQUFPLGdCQUFpQiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci9ydW50aW1lXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsL3BvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlOyJdfQ==
},{"core-js/shim":91,"regenerator/runtime":92}],3:[function(require,module,exports){
var $=require("./$");module.exports=function(IS_INCLUDES){return function($this,el,fromIndex){var value,O=$.toObject($this),length=$.toLength(O.length),index=$.toIndex(fromIndex,length);if(IS_INCLUDES&&el!=el){for(;length>index;)if(value=O[index++],value!=value)return!0}else for(;length>index;index++)if((IS_INCLUDES||index in O)&&O[index]===el)return IS_INCLUDES||index;return!IS_INCLUDES&&-1}};


},{"./$":24}],4:[function(require,module,exports){
var $=require("./$"),ctx=require("./$.ctx");module.exports=function(TYPE){var IS_MAP=1==TYPE,IS_FILTER=2==TYPE,IS_SOME=3==TYPE,IS_EVERY=4==TYPE,IS_FIND_INDEX=6==TYPE,NO_HOLES=5==TYPE||IS_FIND_INDEX;return function($this,callbackfn,that){for(var val,res,O=Object($.assertDefined($this)),self=$.ES5Object(O),f=ctx(callbackfn,that,3),length=$.toLength(self.length),index=0,result=IS_MAP?Array(length):IS_FILTER?[]:void 0;length>index;index++)if((NO_HOLES||index in self)&&(val=self[index],res=f(val,index,O),TYPE))if(IS_MAP)result[index]=res;else if(res)switch(TYPE){case 3:return!0;case 5:return val;case 6:return index;case 2:result.push(val)}else if(IS_EVERY)return!1;return IS_FIND_INDEX?-1:IS_SOME||IS_EVERY?IS_EVERY:result}};


},{"./$":24,"./$.ctx":12}],5:[function(require,module,exports){
function assert(condition,msg1,msg2){if(!condition)throw TypeError(msg2?msg1+msg2:msg1)}var $=require("./$");assert.def=$.assertDefined,assert.fn=function(it){if(!$.isFunction(it))throw TypeError(it+" is not a function!");return it},assert.obj=function(it){if(!$.isObject(it))throw TypeError(it+" is not an object!");return it},assert.inst=function(it,Constructor,name){if(!(it instanceof Constructor))throw TypeError(name+": use the 'new' operator!");return it},module.exports=assert;


},{"./$":24}],6:[function(require,module,exports){
var $=require("./$"),enumKeys=require("./$.enum-keys");module.exports=Object.assign||function(target,source){for(var T=Object($.assertDefined(target)),l=arguments.length,i=1;l>i;)for(var key,S=$.ES5Object(arguments[i++]),keys=enumKeys(S),length=keys.length,j=0;length>j;)T[key=keys[j++]]=S[key];return T};


},{"./$":24,"./$.enum-keys":15}],7:[function(require,module,exports){
function cof(it){return toString.call(it).slice(8,-1)}var $=require("./$"),TAG=require("./$.wks")("toStringTag"),toString={}.toString;cof.classof=function(it){var O,T;return void 0==it?void 0===it?"Undefined":"Null":"string"==typeof(T=(O=Object(it))[TAG])?T:cof(O)},cof.set=function(it,tag,stat){it&&!$.has(it=stat?it:it.prototype,TAG)&&$.hide(it,TAG,tag)},module.exports=cof;


},{"./$":24,"./$.wks":42}],8:[function(require,module,exports){
"use strict";function fastKey(it,create){if(!isObject(it))return"symbol"==typeof it?it:("string"==typeof it?"S":"P")+it;if(!$has(it,ID)){if(!isExtensible(it))return"F";if(!create)return"E";hide(it,ID,++id)}return"O"+it[ID]}function getEntry(that,key){var entry,index=fastKey(key);if("F"!==index)return that[O1][index];for(entry=that[FIRST];entry;entry=entry.n)if(entry.k==key)return entry}var $=require("./$"),ctx=require("./$.ctx"),safe=require("./$.uid").safe,assert=require("./$.assert"),forOf=require("./$.for-of"),step=require("./$.iter").step,$has=$.has,set=$.set,isObject=$.isObject,hide=$.hide,isExtensible=Object.isExtensible||isObject,ID=safe("id"),O1=safe("O1"),LAST=safe("last"),FIRST=safe("first"),ITER=safe("iter"),SIZE=$.DESC?safe("size"):"size",id=0;module.exports={getConstructor:function(wrapper,NAME,IS_MAP,ADDER){var C=wrapper(function(that,iterable){assert.inst(that,C,NAME),set(that,O1,$.create(null)),set(that,SIZE,0),set(that,LAST,void 0),set(that,FIRST,void 0),void 0!=iterable&&forOf(iterable,IS_MAP,that[ADDER],that)});return require("./$.mix")(C.prototype,{clear:function(){for(var that=this,data=that[O1],entry=that[FIRST];entry;entry=entry.n)entry.r=!0,entry.p&&(entry.p=entry.p.n=void 0),delete data[entry.i];that[FIRST]=that[LAST]=void 0,that[SIZE]=0},"delete":function(key){var that=this,entry=getEntry(that,key);if(entry){var next=entry.n,prev=entry.p;delete that[O1][entry.i],entry.r=!0,prev&&(prev.n=next),next&&(next.p=prev),that[FIRST]==entry&&(that[FIRST]=next),that[LAST]==entry&&(that[LAST]=prev),that[SIZE]--}return!!entry},forEach:function(callbackfn){for(var entry,f=ctx(callbackfn,arguments[1],3);entry=entry?entry.n:this[FIRST];)for(f(entry.v,entry.k,this);entry&&entry.r;)entry=entry.p},has:function(key){return!!getEntry(this,key)}}),$.DESC&&$.setDesc(C.prototype,"size",{get:function(){return assert.def(this[SIZE])}}),C},def:function(that,key,value){var prev,index,entry=getEntry(that,key);return entry?entry.v=value:(that[LAST]=entry={i:index=fastKey(key,!0),k:key,v:value,p:prev=that[LAST],n:void 0,r:!1},that[FIRST]||(that[FIRST]=entry),prev&&(prev.n=entry),that[SIZE]++,"F"!==index&&(that[O1][index]=entry)),that},getEntry:getEntry,setIter:function(C,NAME,IS_MAP){require("./$.iter-define")(C,NAME,function(iterated,kind){set(this,ITER,{o:iterated,k:kind})},function(){for(var iter=this[ITER],kind=iter.k,entry=iter.l;entry&&entry.r;)entry=entry.p;return iter.o&&(iter.l=entry=entry?entry.n:iter.o[FIRST])?"keys"==kind?step(0,entry.k):"values"==kind?step(0,entry.v):step(0,[entry.k,entry.v]):(iter.o=void 0,step(1))},IS_MAP?"entries":"values",!IS_MAP,!0)}};


},{"./$":24,"./$.assert":5,"./$.ctx":12,"./$.for-of":16,"./$.iter":23,"./$.iter-define":21,"./$.mix":26,"./$.uid":40}],9:[function(require,module,exports){
var $def=require("./$.def"),forOf=require("./$.for-of");module.exports=function(NAME){$def($def.P,NAME,{toJSON:function(){var arr=[];return forOf(this,!1,arr.push,arr),arr}})};


},{"./$.def":13,"./$.for-of":16}],10:[function(require,module,exports){
"use strict";function findFrozen(store,key){return find(store.array,function(it){return it[0]===key})}function leakStore(that){return that[LEAK]||hide(that,LEAK,{array:[],get:function(key){var entry=findFrozen(this,key);return entry?entry[1]:void 0},has:function(key){return!!findFrozen(this,key)},set:function(key,value){var entry=findFrozen(this,key);entry?entry[1]=value:this.array.push([key,value])},"delete":function(key){var index=findIndex(this.array,function(it){return it[0]===key});return~index&&this.array.splice(index,1),!!~index}})[LEAK]}var $=require("./$"),safe=require("./$.uid").safe,assert=require("./$.assert"),forOf=require("./$.for-of"),$has=$.has,isObject=$.isObject,hide=$.hide,isExtensible=Object.isExtensible||isObject,id=0,ID=safe("id"),WEAK=safe("weak"),LEAK=safe("leak"),method=require("./$.array-methods"),find=method(5),findIndex=method(6);module.exports={getConstructor:function(wrapper,NAME,IS_MAP,ADDER){var C=wrapper(function(that,iterable){$.set(assert.inst(that,C,NAME),ID,id++),void 0!=iterable&&forOf(iterable,IS_MAP,that[ADDER],that)});return require("./$.mix")(C.prototype,{"delete":function(key){return isObject(key)?isExtensible(key)?$has(key,WEAK)&&$has(key[WEAK],this[ID])&&delete key[WEAK][this[ID]]:leakStore(this)["delete"](key):!1},has:function(key){return isObject(key)?isExtensible(key)?$has(key,WEAK)&&$has(key[WEAK],this[ID]):leakStore(this).has(key):!1}}),C},def:function(that,key,value){return isExtensible(assert.obj(key))?($has(key,WEAK)||hide(key,WEAK,{}),key[WEAK][that[ID]]=value):leakStore(that).set(key,value),that},leakStore:leakStore,WEAK:WEAK,ID:ID};


},{"./$":24,"./$.array-methods":4,"./$.assert":5,"./$.for-of":16,"./$.mix":26,"./$.uid":40}],11:[function(require,module,exports){
"use strict";var $=require("./$"),$def=require("./$.def"),BUGGY=require("./$.iter").BUGGY,forOf=require("./$.for-of"),species=require("./$.species"),assertInstance=require("./$.assert").inst;module.exports=function(NAME,wrapper,methods,common,IS_MAP,IS_WEAK){function fixMethod(KEY){var fn=proto[KEY];require("./$.redef")(proto,KEY,"delete"==KEY?function(a){return fn.call(this,0===a?0:a)}:"has"==KEY?function(a){return fn.call(this,0===a?0:a)}:"get"==KEY?function(a){return fn.call(this,0===a?0:a)}:"add"==KEY?function(a){return fn.call(this,0===a?0:a),this}:function(a,b){return fn.call(this,0===a?0:a,b),this})}var Base=$.g[NAME],C=Base,ADDER=IS_MAP?"set":"add",proto=C&&C.prototype,O={};if($.isFunction(C)&&(IS_WEAK||!BUGGY&&proto.forEach&&proto.entries)){var buggyZero,inst=new C,chain=inst[ADDER](IS_WEAK?{}:-0,1);require("./$.iter-detect")(function(iter){new C(iter)})||(C=wrapper(function(target,iterable){assertInstance(target,C,NAME);var that=new Base;return void 0!=iterable&&forOf(iterable,IS_MAP,that[ADDER],that),that}),C.prototype=proto,proto.constructor=C),IS_WEAK||inst.forEach(function(val,key){buggyZero=1/key===-(1/0)}),buggyZero&&(fixMethod("delete"),fixMethod("has"),IS_MAP&&fixMethod("get")),(buggyZero||chain!==inst)&&fixMethod(ADDER)}else C=common.getConstructor(wrapper,NAME,IS_MAP,ADDER),require("./$.mix")(C.prototype,methods);return require("./$.cof").set(C,NAME),O[NAME]=C,$def($def.G+$def.W+$def.F*(C!=Base),O),species(C),species($.core[NAME]),IS_WEAK||common.setIter(C,NAME,IS_MAP),C};


},{"./$":24,"./$.assert":5,"./$.cof":7,"./$.def":13,"./$.for-of":16,"./$.iter":23,"./$.iter-detect":22,"./$.mix":26,"./$.redef":29,"./$.species":34}],12:[function(require,module,exports){
var assertFunction=require("./$.assert").fn;module.exports=function(fn,that,length){if(assertFunction(fn),~length&&void 0===that)return fn;switch(length){case 1:return function(a){return fn.call(that,a)};case 2:return function(a,b){return fn.call(that,a,b)};case 3:return function(a,b,c){return fn.call(that,a,b,c)}}return function(){return fn.apply(that,arguments)}};


},{"./$.assert":5}],13:[function(require,module,exports){
function ctx(fn,that){return function(){return fn.apply(that,arguments)}}function $def(type,name,source){var key,own,out,exp,isGlobal=type&$def.G,isProto=type&$def.P,target=isGlobal?global:type&$def.S?global[name]:(global[name]||{}).prototype,exports=isGlobal?core:core[name]||(core[name]={});isGlobal&&(source=name);for(key in source)own=!(type&$def.F)&&target&&key in target,out=(own?target:source)[key],exp=type&$def.B&&own?ctx(out,global):isProto&&isFunction(out)?ctx(Function.call,out):out,target&&!own&&$redef(target,key,out),exports[key]!=out&&$.hide(exports,key,exp),isProto&&((exports.prototype||(exports.prototype={}))[key]=out)}var $=require("./$"),global=$.g,core=$.core,isFunction=$.isFunction,$redef=require("./$.redef");global.core=core,$def.F=1,$def.G=2,$def.S=4,$def.P=8,$def.B=16,$def.W=32,module.exports=$def;


},{"./$":24,"./$.redef":29}],14:[function(require,module,exports){
var $=require("./$"),document=$.g.document,isObject=$.isObject,is=isObject(document)&&isObject(document.createElement);module.exports=function(it){return is?document.createElement(it):{}};


},{"./$":24}],15:[function(require,module,exports){
var $=require("./$");module.exports=function(it){var keys=$.getKeys(it),getDesc=$.getDesc,getSymbols=$.getSymbols;return getSymbols&&$.each.call(getSymbols(it),function(key){getDesc(it,key).enumerable&&keys.push(key)}),keys};


},{"./$":24}],16:[function(require,module,exports){
var ctx=require("./$.ctx"),get=require("./$.iter").get,call=require("./$.iter-call");module.exports=function(iterable,entries,fn,that){for(var step,iterator=get(iterable),f=ctx(fn,that,entries?2:1);!(step=iterator.next()).done;)if(call(iterator,f,step.value,entries)===!1)return call.close(iterator)};


},{"./$.ctx":12,"./$.iter":23,"./$.iter-call":20}],17:[function(require,module,exports){
module.exports=function($){return $.FW=!0,$.path=$.g,$};


},{}],18:[function(require,module,exports){
function getWindowNames(it){try{return getNames(it)}catch(e){return windowNames.slice()}}var $=require("./$"),toString={}.toString,getNames=$.getNames,windowNames="object"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];module.exports.get=function(it){return windowNames&&"[object Window]"==toString.call(it)?getWindowNames(it):getNames($.toObject(it))};


},{"./$":24}],19:[function(require,module,exports){
module.exports=function(fn,args,that){var un=void 0===that;switch(args.length){case 0:return un?fn():fn.call(that);case 1:return un?fn(args[0]):fn.call(that,args[0]);case 2:return un?fn(args[0],args[1]):fn.call(that,args[0],args[1]);case 3:return un?fn(args[0],args[1],args[2]):fn.call(that,args[0],args[1],args[2]);case 4:return un?fn(args[0],args[1],args[2],args[3]):fn.call(that,args[0],args[1],args[2],args[3]);case 5:return un?fn(args[0],args[1],args[2],args[3],args[4]):fn.call(that,args[0],args[1],args[2],args[3],args[4])}return fn.apply(that,args)};


},{}],20:[function(require,module,exports){
function close(iterator){var ret=iterator["return"];void 0!==ret&&assertObject(ret.call(iterator))}function call(iterator,fn,value,entries){try{return entries?fn(assertObject(value)[0],value[1]):fn(value)}catch(e){throw close(iterator),e}}var assertObject=require("./$.assert").obj;call.close=close,module.exports=call;


},{"./$.assert":5}],21:[function(require,module,exports){
var $def=require("./$.def"),$redef=require("./$.redef"),$=require("./$"),cof=require("./$.cof"),$iter=require("./$.iter"),SYMBOL_ITERATOR=require("./$.wks")("iterator"),FF_ITERATOR="@@iterator",KEYS="keys",VALUES="values",Iterators=$iter.Iterators;module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCE){function createMethod(kind){function $$(that){return new Constructor(that,kind)}switch(kind){case KEYS:return function(){return $$(this)};case VALUES:return function(){return $$(this)}}return function(){return $$(this)}}$iter.create(Constructor,NAME,next);var methods,key,TAG=NAME+" Iterator",proto=Base.prototype,_native=proto[SYMBOL_ITERATOR]||proto[FF_ITERATOR]||DEFAULT&&proto[DEFAULT],_default=_native||createMethod(DEFAULT);if(_native){var IteratorPrototype=$.getProto(_default.call(new Base));cof.set(IteratorPrototype,TAG,!0),$.FW&&$.has(proto,FF_ITERATOR)&&$iter.set(IteratorPrototype,$.that)}if(($.FW||FORCE)&&$iter.set(proto,_default),Iterators[NAME]=_default,Iterators[TAG]=$.that,DEFAULT)if(methods={keys:IS_SET?_default:createMethod(KEYS),values:DEFAULT==VALUES?_default:createMethod(VALUES),entries:DEFAULT!=VALUES?_default:createMethod("entries")},FORCE)for(key in methods)key in proto||$redef(proto,key,methods[key]);else $def($def.P+$def.F*$iter.BUGGY,NAME,methods)};


},{"./$":24,"./$.cof":7,"./$.def":13,"./$.iter":23,"./$.redef":29,"./$.wks":42}],22:[function(require,module,exports){
var SYMBOL_ITERATOR=require("./$.wks")("iterator"),SAFE_CLOSING=!1;try{var riter=[7][SYMBOL_ITERATOR]();riter["return"]=function(){SAFE_CLOSING=!0},Array.from(riter,function(){throw 2})}catch(e){}module.exports=function(exec){if(!SAFE_CLOSING)return!1;var safe=!1;try{var arr=[7],iter=arr[SYMBOL_ITERATOR]();iter.next=function(){safe=!0},arr[SYMBOL_ITERATOR]=function(){return iter},exec(arr)}catch(e){}return safe};


},{"./$.wks":42}],23:[function(require,module,exports){
"use strict";function setIterator(O,value){$.hide(O,SYMBOL_ITERATOR,value),FF_ITERATOR in[]&&$.hide(O,FF_ITERATOR,value)}var $=require("./$"),cof=require("./$.cof"),classof=cof.classof,assert=require("./$.assert"),assertObject=assert.obj,SYMBOL_ITERATOR=require("./$.wks")("iterator"),FF_ITERATOR="@@iterator",Iterators=require("./$.shared")("iterators"),IteratorPrototype={};setIterator(IteratorPrototype,$.that),module.exports={BUGGY:"keys"in[]&&!("next"in[].keys()),Iterators:Iterators,step:function(done,value){return{value:value,done:!!done}},is:function(it){var O=Object(it),Symbol=$.g.Symbol;return(Symbol&&Symbol.iterator||FF_ITERATOR)in O||SYMBOL_ITERATOR in O||$.has(Iterators,classof(O))},get:function(it){var getIter,Symbol=$.g.Symbol;return void 0!=it&&(getIter=it[Symbol&&Symbol.iterator||FF_ITERATOR]||it[SYMBOL_ITERATOR]||Iterators[classof(it)]),assert($.isFunction(getIter),it," is not iterable!"),assertObject(getIter.call(it))},set:setIterator,create:function(Constructor,NAME,next,proto){Constructor.prototype=$.create(proto||IteratorPrototype,{next:$.desc(1,next)}),cof.set(Constructor,NAME+" Iterator")}};


},{"./$":24,"./$.assert":5,"./$.cof":7,"./$.shared":33,"./$.wks":42}],24:[function(require,module,exports){
"use strict";function toInteger(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it)}function desc(bitmap,value){return{enumerable:!(1&bitmap),configurable:!(2&bitmap),writable:!(4&bitmap),value:value}}function simpleSet(object,key,value){return object[key]=value,object}function createDefiner(bitmap){return DESC?function(object,key,value){return $.setDesc(object,key,desc(bitmap,value))}:simpleSet}function isObject(it){return null!==it&&("object"==typeof it||"function"==typeof it)}function isFunction(it){return"function"==typeof it}function assertDefined(it){if(void 0==it)throw TypeError("Can't call method on  "+it);return it}var global="undefined"!=typeof self?self:Function("return this")(),core={},defineProperty=Object.defineProperty,hasOwnProperty={}.hasOwnProperty,ceil=Math.ceil,floor=Math.floor,max=Math.max,min=Math.min,DESC=!!function(){try{return 2==defineProperty({},"a",{get:function(){return 2}}).a}catch(e){}}(),hide=createDefiner(1),$=module.exports=require("./$.fw")({g:global,core:core,html:global.document&&document.documentElement,isObject:isObject,isFunction:isFunction,that:function(){return this},toInteger:toInteger,toLength:function(it){return it>0?min(toInteger(it),9007199254740991):0},toIndex:function(index,length){return index=toInteger(index),0>index?max(index+length,0):min(index,length)},has:function(it,key){return hasOwnProperty.call(it,key)},create:Object.create,getProto:Object.getPrototypeOf,DESC:DESC,desc:desc,getDesc:Object.getOwnPropertyDescriptor,setDesc:defineProperty,setDescs:Object.defineProperties,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:assertDefined,ES5Object:Object,toObject:function(it){return $.ES5Object(assertDefined(it))},hide:hide,def:createDefiner(0),set:global.Symbol?simpleSet:hide,each:[].forEach});"undefined"!=typeof __e&&(__e=core),"undefined"!=typeof __g&&(__g=global);


},{"./$.fw":17}],25:[function(require,module,exports){
var $=require("./$");module.exports=function(object,el){for(var key,O=$.toObject(object),keys=$.getKeys(O),length=keys.length,index=0;length>index;)if(O[key=keys[index++]]===el)return key};


},{"./$":24}],26:[function(require,module,exports){
var $redef=require("./$.redef");module.exports=function(target,src){for(var key in src)$redef(target,key,src[key]);return target};


},{"./$.redef":29}],27:[function(require,module,exports){
var $=require("./$"),assertObject=require("./$.assert").obj;module.exports=function(it){assertObject(it);var keys=$.getNames(it),getSymbols=$.getSymbols;return getSymbols?keys.concat(getSymbols(it)):keys};


},{"./$":24,"./$.assert":5}],28:[function(require,module,exports){
"use strict";var $=require("./$"),invoke=require("./$.invoke"),assertFunction=require("./$.assert").fn;module.exports=function(){for(var fn=assertFunction(this),length=arguments.length,pargs=Array(length),i=0,_=$.path._,holder=!1;length>i;)(pargs[i]=arguments[i++])===_&&(holder=!0);return function(){var args,that=this,_length=arguments.length,j=0,k=0;if(!holder&&!_length)return invoke(fn,pargs,that);if(args=pargs.slice(),holder)for(;length>j;j++)args[j]===_&&(args[j]=arguments[k++]);for(;_length>k;)args.push(arguments[k++]);return invoke(fn,args,that)}};


},{"./$":24,"./$.assert":5,"./$.invoke":19}],29:[function(require,module,exports){
function $redef(O,key,val,safe){if($.isFunction(val)){var base=O[key];$.hide(val,SRC,base?String(base):tpl.replace(/hasOwnProperty/,String(key))),"name"in val||(val.name=key)}O===$.g?O[key]=val:(safe||delete O[key],$.hide(O,key,val))}var $=require("./$"),tpl=String({}.hasOwnProperty),SRC=require("./$.uid").safe("src"),_toString=Function.toString;$redef(Function.prototype,"toString",function(){return $.has(this,SRC)?this[SRC]:_toString.call(this)}),$.core.inspectSource=function(it){return _toString.call(it)},module.exports=$redef;


},{"./$":24,"./$.uid":40}],30:[function(require,module,exports){
"use strict";module.exports=function(regExp,replace,isStatic){var replacer=replace===Object(replace)?function(part){return replace[part]}:replace;return function(it){return String(isStatic?it:this).replace(regExp,replacer)}};


},{}],31:[function(require,module,exports){
module.exports=Object.is||function(x,y){return x===y?0!==x||1/x===1/y:x!=x&&y!=y};


},{}],32:[function(require,module,exports){
function check(O,proto){assert.obj(O),assert(null===proto||$.isObject(proto),proto,": can't set as prototype!")}var $=require("./$"),assert=require("./$.assert");module.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(buggy,set){try{set=require("./$.ctx")(Function.call,$.getDesc(Object.prototype,"__proto__").set,2),set({},[])}catch(e){buggy=!0}return function(O,proto){return check(O,proto),buggy?O.__proto__=proto:set(O,proto),O}}():void 0),check:check};


},{"./$":24,"./$.assert":5,"./$.ctx":12}],33:[function(require,module,exports){
var $=require("./$"),SHARED="__core-js_shared__",store=$.g[SHARED]||($.g[SHARED]={});module.exports=function(key){return store[key]||(store[key]={})};


},{"./$":24}],34:[function(require,module,exports){
var $=require("./$"),SPECIES=require("./$.wks")("species");module.exports=function(C){!$.DESC||SPECIES in C||$.setDesc(C,SPECIES,{configurable:!0,get:$.that})};


},{"./$":24,"./$.wks":42}],35:[function(require,module,exports){
var $=require("./$");module.exports=function(TO_STRING){return function(that,pos){var a,b,s=String($.assertDefined(that)),i=$.toInteger(pos),l=s.length;return 0>i||i>=l?TO_STRING?"":void 0:(a=s.charCodeAt(i),55296>a||a>56319||i+1===l||(b=s.charCodeAt(i+1))<56320||b>57343?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):(a-55296<<10)+(b-56320)+65536)}};


},{"./$":24}],36:[function(require,module,exports){
var $=require("./$"),repeat=require("./$.string-repeat");module.exports=function(that,minLength,fillChar,left){var S=String($.assertDefined(that));if(void 0===minLength)return S;var intMinLength=$.toInteger(minLength),fillLen=intMinLength-S.length;if(0>fillLen||fillLen===1/0)throw new RangeError("Cannot satisfy string length "+minLength+" for string: "+S);var sFillStr=void 0===fillChar?" ":String(fillChar),sFillVal=repeat.call(sFillStr,Math.ceil(fillLen/sFillStr.length));return sFillVal.length>fillLen&&(sFillVal=left?sFillVal.slice(sFillVal.length-fillLen):sFillVal.slice(0,fillLen)),left?sFillVal.concat(S):S.concat(sFillVal)};


},{"./$":24,"./$.string-repeat":37}],37:[function(require,module,exports){
"use strict";var $=require("./$");module.exports=function(count){var str=String($.assertDefined(this)),res="",n=$.toInteger(count);if(0>n||n==1/0)throw RangeError("Count can't be negative");for(;n>0;(n>>>=1)&&(str+=str))1&n&&(res+=str);return res};


},{"./$":24}],38:[function(require,module,exports){
"use strict";function run(){var id=+this;if($.has(queue,id)){var fn=queue[id];delete queue[id],fn()}}function listner(event){run.call(event.data)}var $=require("./$"),ctx=require("./$.ctx"),cof=require("./$.cof"),invoke=require("./$.invoke"),cel=require("./$.dom-create"),global=$.g,isFunction=$.isFunction,html=$.html,process=global.process,setTask=global.setImmediate,clearTask=global.clearImmediate,MessageChannel=global.MessageChannel,counter=0,queue={},ONREADYSTATECHANGE="onreadystatechange",defer,channel,port;isFunction(setTask)&&isFunction(clearTask)||(setTask=function(fn){for(var args=[],i=1;arguments.length>i;)args.push(arguments[i++]);return queue[++counter]=function(){invoke(isFunction(fn)?fn:Function(fn),args)},defer(counter),counter},clearTask=function(id){delete queue[id]},"process"==cof(process)?defer=function(id){process.nextTick(ctx(run,id,1))}:global.addEventListener&&isFunction(global.postMessage)&&!global.importScripts?(defer=function(id){global.postMessage(id,"*")},global.addEventListener("message",listner,!1)):isFunction(MessageChannel)?(channel=new MessageChannel,port=channel.port2,channel.port1.onmessage=listner,defer=ctx(port.postMessage,port,1)):defer=ONREADYSTATECHANGE in cel("script")?function(id){html.appendChild(cel("script"))[ONREADYSTATECHANGE]=function(){html.removeChild(this),run.call(id)}}:function(id){setTimeout(ctx(run,id,1),0)}),module.exports={set:setTask,clear:clearTask};


},{"./$":24,"./$.cof":7,"./$.ctx":12,"./$.dom-create":14,"./$.invoke":19}],39:[function(require,module,exports){
module.exports=function(exec){try{return exec(),!1}catch(e){return!0}};


},{}],40:[function(require,module,exports){
function uid(key){return"Symbol(".concat(void 0===key?"":key,")_",(++sid+Math.random()).toString(36))}var sid=0;uid.safe=require("./$").g.Symbol||uid,module.exports=uid;


},{"./$":24}],41:[function(require,module,exports){
var UNSCOPABLES=require("./$.wks")("unscopables");UNSCOPABLES in[]||require("./$").hide(Array.prototype,UNSCOPABLES,{}),module.exports=function(key){[][UNSCOPABLES][key]=!0};


},{"./$":24,"./$.wks":42}],42:[function(require,module,exports){
var global=require("./$").g,store=require("./$.shared")("wks");module.exports=function(name){return store[name]||(store[name]=global.Symbol&&global.Symbol[name]||require("./$.uid").safe("Symbol."+name))};


},{"./$":24,"./$.shared":33,"./$.uid":40}],43:[function(require,module,exports){
function createGetKeys(names,length){return function(object){var key,O=toObject(object),i=0,result=[];for(key in O)key!=IE_PROTO&&has(O,key)&&result.push(key);for(;length>i;)has(O,key=names[i++])&&(~$indexOf(result,key)||result.push(key));return result}}function Empty(){}function createArrayReduce(isRight){return function(callbackfn,memo){assert.fn(callbackfn);var O=toObject(this),length=toLength(O.length),index=isRight?length-1:0,i=isRight?-1:1;if(arguments.length<2)for(;;){if(index in O){memo=O[index],index+=i;break}index+=i,assert(isRight?index>=0:length>index,"Reduce of empty array with no initial value")}for(;isRight?index>=0:length>index;index+=i)index in O&&(memo=callbackfn(memo,O[index],index,this));return memo}}function lz(num){return num>9?num:"0"+num}var $=require("./$"),cel=require("./$.dom-create"),cof=require("./$.cof"),$def=require("./$.def"),invoke=require("./$.invoke"),arrayMethod=require("./$.array-methods"),IE_PROTO=require("./$.uid").safe("__proto__"),assert=require("./$.assert"),assertObject=assert.obj,ObjectProto=Object.prototype,html=$.html,A=[],_slice=A.slice,_join=A.join,classof=cof.classof,has=$.has,defineProperty=$.setDesc,getOwnDescriptor=$.getDesc,defineProperties=$.setDescs,isFunction=$.isFunction,isObject=$.isObject,toObject=$.toObject,toLength=$.toLength,toIndex=$.toIndex,IE8_DOM_DEFINE=!1,$indexOf=require("./$.array-includes")(!1),$forEach=arrayMethod(0),$map=arrayMethod(1),$filter=arrayMethod(2),$some=arrayMethod(3),$every=arrayMethod(4);if(!$.DESC){try{IE8_DOM_DEFINE=8==defineProperty(cel("div"),"x",{get:function(){return 8}}).x}catch(e){}$.setDesc=function(O,P,Attributes){if(IE8_DOM_DEFINE)try{return defineProperty(O,P,Attributes)}catch(e){}if("get"in Attributes||"set"in Attributes)throw TypeError("Accessors not supported!");return"value"in Attributes&&(assertObject(O)[P]=Attributes.value),O},$.getDesc=function(O,P){if(IE8_DOM_DEFINE)try{return getOwnDescriptor(O,P)}catch(e){}return has(O,P)?$.desc(!ObjectProto.propertyIsEnumerable.call(O,P),O[P]):void 0},$.setDescs=defineProperties=function(O,Properties){assertObject(O);for(var P,keys=$.getKeys(Properties),length=keys.length,i=0;length>i;)$.setDesc(O,P=keys[i++],Properties[P]);return O}}$def($def.S+$def.F*!$.DESC,"Object",{getOwnPropertyDescriptor:$.getDesc,defineProperty:$.setDesc,defineProperties:defineProperties});var keys1="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),keys2=keys1.concat("length","prototype"),keysLen1=keys1.length,createDict=function(){var iframeDocument,iframe=cel("iframe"),i=keysLen1,gt=">";for(iframe.style.display="none",html.appendChild(iframe),iframe.src="javascript:",iframeDocument=iframe.contentWindow.document,iframeDocument.open(),iframeDocument.write("<script>document.F=Object</script"+gt),iframeDocument.close(),createDict=iframeDocument.F;i--;)delete createDict.prototype[keys1[i]];return createDict()};$def($def.S,"Object",{getPrototypeOf:$.getProto=$.getProto||function(O){return O=Object(assert.def(O)),has(O,IE_PROTO)?O[IE_PROTO]:isFunction(O.constructor)&&O instanceof O.constructor?O.constructor.prototype:O instanceof Object?ObjectProto:null},getOwnPropertyNames:$.getNames=$.getNames||createGetKeys(keys2,keys2.length,!0),create:$.create=$.create||function(O,Properties){var result;return null!==O?(Empty.prototype=assertObject(O),result=new Empty,Empty.prototype=null,result[IE_PROTO]=O):result=createDict(),void 0===Properties?result:defineProperties(result,Properties)},keys:$.getKeys=$.getKeys||createGetKeys(keys1,keysLen1,!1),seal:function(it){return it},freeze:function(it){return it},preventExtensions:function(it){return it},isSealed:function(it){return!isObject(it)},isFrozen:function(it){return!isObject(it)},isExtensible:function(it){return isObject(it)}}),$def($def.P,"Function",{bind:function(that){function bound(){var args=partArgs.concat(_slice.call(arguments)),constr=this instanceof bound,ctx=constr?$.create(fn.prototype):that,result=invoke(fn,args,ctx);return constr?ctx:result}var fn=assert.fn(this),partArgs=_slice.call(arguments,1);return fn.prototype&&(bound.prototype=fn.prototype),bound}}),0 in Object("z")&&"z"=="z"[0]||($.ES5Object=function(it){return"String"==cof(it)?it.split(""):Object(it)});var buggySlice=!0;try{html&&_slice.call(html),buggySlice=!1}catch(e){}$def($def.P+$def.F*buggySlice,"Array",{slice:function(begin,end){var len=toLength(this.length),klass=cof(this);if(end=void 0===end?len:end,"Array"==klass)return _slice.call(this,begin,end);for(var start=toIndex(begin,len),upTo=toIndex(end,len),size=toLength(upTo-start),cloned=Array(size),i=0;size>i;i++)cloned[i]="String"==klass?this.charAt(start+i):this[start+i];return cloned}}),$def($def.P+$def.F*($.ES5Object!=Object),"Array",{join:function(){return _join.apply($.ES5Object(this),arguments)}}),$def($def.S,"Array",{isArray:function(arg){return"Array"==cof(arg)}}),$def($def.P,"Array",{forEach:$.each=$.each||function(callbackfn){return $forEach(this,callbackfn,arguments[1])},map:function(callbackfn){return $map(this,callbackfn,arguments[1])},filter:function(callbackfn){return $filter(this,callbackfn,arguments[1])},some:function(callbackfn){return $some(this,callbackfn,arguments[1])},every:function(callbackfn){return $every(this,callbackfn,arguments[1])},reduce:createArrayReduce(!1),reduceRight:createArrayReduce(!0),indexOf:function(el){return $indexOf(this,el,arguments[1])},lastIndexOf:function(el,fromIndex){var O=toObject(this),length=toLength(O.length),index=length-1;for(arguments.length>1&&(index=Math.min(index,$.toInteger(fromIndex))),0>index&&(index=toLength(length+index));index>=0;index--)if(index in O&&O[index]===el)return index;return-1}}),$def($def.P,"String",{trim:require("./$.replacer")(/^\s*([\s\S]*\S)?\s*$/,"$1")}),$def($def.S,"Date",{now:function(){return+new Date}});var date=new Date(-5e13-1),brokenDate=!(date.toISOString&&"0385-07-25T07:06:39.999Z"==date.toISOString()&&require("./$.throws")(function(){new Date(NaN).toISOString()}));$def($def.P+$def.F*brokenDate,"Date",{toISOString:function(){if(!isFinite(this))throw RangeError("Invalid time value");var d=this,y=d.getUTCFullYear(),m=d.getUTCMilliseconds(),s=0>y?"-":y>9999?"+":"";return s+("00000"+Math.abs(y)).slice(s?-6:-4)+"-"+lz(d.getUTCMonth()+1)+"-"+lz(d.getUTCDate())+"T"+lz(d.getUTCHours())+":"+lz(d.getUTCMinutes())+":"+lz(d.getUTCSeconds())+"."+(m>99?m:"0"+lz(m))+"Z"}}),"Object"==classof(function(){return arguments}())&&(cof.classof=function(it){var tag=classof(it);return"Object"==tag&&isFunction(it.callee)?"Arguments":tag});


},{"./$":24,"./$.array-includes":3,"./$.array-methods":4,"./$.assert":5,"./$.cof":7,"./$.def":13,"./$.dom-create":14,"./$.invoke":19,"./$.replacer":30,"./$.throws":39,"./$.uid":40}],44:[function(require,module,exports){
"use strict";var $=require("./$"),$def=require("./$.def"),toIndex=$.toIndex;$def($def.P,"Array",{copyWithin:function(target,start){var O=Object($.assertDefined(this)),len=$.toLength(O.length),to=toIndex(target,len),from=toIndex(start,len),end=arguments[2],fin=void 0===end?len:toIndex(end,len),count=Math.min(fin-from,len-to),inc=1;for(to>from&&from+count>to&&(inc=-1,from=from+count-1,to=to+count-1);count-->0;)from in O?O[to]=O[from]:delete O[to],to+=inc,from+=inc;return O}}),require("./$.unscope")("copyWithin");


},{"./$":24,"./$.def":13,"./$.unscope":41}],45:[function(require,module,exports){
"use strict";var $=require("./$"),$def=require("./$.def"),toIndex=$.toIndex;$def($def.P,"Array",{fill:function(value){for(var O=Object($.assertDefined(this)),length=$.toLength(O.length),index=toIndex(arguments[1],length),end=arguments[2],endPos=void 0===end?length:toIndex(end,length);endPos>index;)O[index++]=value;return O}}),require("./$.unscope")("fill");


},{"./$":24,"./$.def":13,"./$.unscope":41}],46:[function(require,module,exports){
"use strict";var KEY="findIndex",$def=require("./$.def"),forced=!0,$find=require("./$.array-methods")(6);KEY in[]&&Array(1)[KEY](function(){forced=!1}),$def($def.P+$def.F*forced,"Array",{findIndex:function(callbackfn){return $find(this,callbackfn,arguments[1])}}),require("./$.unscope")(KEY);


},{"./$.array-methods":4,"./$.def":13,"./$.unscope":41}],47:[function(require,module,exports){
"use strict";var KEY="find",$def=require("./$.def"),forced=!0,$find=require("./$.array-methods")(5);KEY in[]&&Array(1)[KEY](function(){forced=!1}),$def($def.P+$def.F*forced,"Array",{find:function(callbackfn){return $find(this,callbackfn,arguments[1])}}),require("./$.unscope")(KEY);


},{"./$.array-methods":4,"./$.def":13,"./$.unscope":41}],48:[function(require,module,exports){
var $=require("./$"),ctx=require("./$.ctx"),$def=require("./$.def"),$iter=require("./$.iter"),call=require("./$.iter-call");$def($def.S+$def.F*!require("./$.iter-detect")(function(iter){Array.from(iter)}),"Array",{from:function(arrayLike){var length,result,step,iterator,O=Object($.assertDefined(arrayLike)),mapfn=arguments[1],mapping=void 0!==mapfn,f=mapping?ctx(mapfn,arguments[2],2):void 0,index=0;if($iter.is(O))for(iterator=$iter.get(O),result=new("function"==typeof this?this:Array);!(step=iterator.next()).done;index++)result[index]=mapping?call(iterator,f,[step.value,index],!0):step.value;else for(result=new("function"==typeof this?this:Array)(length=$.toLength(O.length));length>index;index++)result[index]=mapping?f(O[index],index):O[index];return result.length=index,result}});


},{"./$":24,"./$.ctx":12,"./$.def":13,"./$.iter":23,"./$.iter-call":20,"./$.iter-detect":22}],49:[function(require,module,exports){
var $=require("./$"),setUnscope=require("./$.unscope"),ITER=require("./$.uid").safe("iter"),$iter=require("./$.iter"),step=$iter.step,Iterators=$iter.Iterators;require("./$.iter-define")(Array,"Array",function(iterated,kind){$.set(this,ITER,{o:$.toObject(iterated),i:0,k:kind})},function(){var iter=this[ITER],O=iter.o,kind=iter.k,index=iter.i++;return!O||index>=O.length?(iter.o=void 0,step(1)):"keys"==kind?step(0,index):"values"==kind?step(0,O[index]):step(0,[index,O[index]])},"values"),Iterators.Arguments=Iterators.Array,setUnscope("keys"),setUnscope("values"),setUnscope("entries");


},{"./$":24,"./$.iter":23,"./$.iter-define":21,"./$.uid":40,"./$.unscope":41}],50:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Array",{of:function(){for(var index=0,length=arguments.length,result=new("function"==typeof this?this:Array)(length);length>index;)result[index]=arguments[index++];return result.length=length,result}});


},{"./$.def":13}],51:[function(require,module,exports){
require("./$.species")(Array);


},{"./$.species":34}],52:[function(require,module,exports){
var $=require("./$"),HAS_INSTANCE=require("./$.wks")("hasInstance"),FunctionProto=Function.prototype;HAS_INSTANCE in FunctionProto||$.setDesc(FunctionProto,HAS_INSTANCE,{value:function(O){if(!$.isFunction(this)||!$.isObject(O))return!1;if(!$.isObject(this.prototype))return O instanceof this;for(;O=$.getProto(O);)if(this.prototype===O)return!0;return!1}});


},{"./$":24,"./$.wks":42}],53:[function(require,module,exports){
"use strict";var $=require("./$"),NAME="name",setDesc=$.setDesc,FunctionProto=Function.prototype;NAME in FunctionProto||$.FW&&$.DESC&&setDesc(FunctionProto,NAME,{configurable:!0,get:function(){var match=String(this).match(/^\s*function ([^ (]*)/),name=match?match[1]:"";return $.has(this,NAME)||setDesc(this,NAME,$.desc(5,name)),name},set:function(value){$.has(this,NAME)||setDesc(this,NAME,$.desc(0,value))}});


},{"./$":24}],54:[function(require,module,exports){
"use strict";var strong=require("./$.collection-strong");require("./$.collection")("Map",function(get){return function(){return get(this,arguments[0])}},{get:function(key){var entry=strong.getEntry(this,key);return entry&&entry.v},set:function(key,value){return strong.def(this,0===key?0:key,value)}},strong,!0);


},{"./$.collection":11,"./$.collection-strong":8}],55:[function(require,module,exports){
function roundTiesToEven(n){return n+1/EPSILON-1/EPSILON}function sign(x){return 0==(x=+x)||x!=x?x:0>x?-1:1}function asinh(x){return isFinite(x=+x)&&0!=x?0>x?-asinh(-x):log(x+sqrt(x*x+1)):x}function expm1(x){return 0==(x=+x)?x:x>-1e-6&&1e-6>x?x+x*x/2:exp(x)-1}var Infinity=1/0,$def=require("./$.def"),E=Math.E,pow=Math.pow,abs=Math.abs,exp=Math.exp,log=Math.log,sqrt=Math.sqrt,ceil=Math.ceil,floor=Math.floor,EPSILON=pow(2,-52),EPSILON32=pow(2,-23),MAX32=pow(2,127)*(2-EPSILON32),MIN32=pow(2,-126);$def($def.S,"Math",{acosh:function(x){return(x=+x)<1?NaN:isFinite(x)?log(x/E+sqrt(x+1)*sqrt(x-1)/E)+1:x},asinh:asinh,atanh:function(x){return 0==(x=+x)?x:log((1+x)/(1-x))/2},cbrt:function(x){return sign(x=+x)*pow(abs(x),1/3)},clz32:function(x){return(x>>>=0)?31-floor(log(x+.5)*Math.LOG2E):32},cosh:function(x){return(exp(x=+x)+exp(-x))/2},expm1:expm1,fround:function(x){var a,result,$abs=abs(x),$sign=sign(x);return MIN32>$abs?$sign*roundTiesToEven($abs/MIN32/EPSILON32)*MIN32*EPSILON32:(a=(1+EPSILON32/EPSILON)*$abs,result=a-(a-$abs),result>MAX32||result!=result?$sign*Infinity:$sign*result)},hypot:function(value1,value2){for(var arg,div,sum=0,i=0,len=arguments.length,larg=0;len>i;)arg=abs(arguments[i++]),arg>larg?(div=larg/arg,sum=sum*div*div+1,larg=arg):arg>0?(div=arg/larg,sum+=div*div):sum+=arg;return larg===Infinity?Infinity:larg*sqrt(sum)},imul:function(x,y){var UInt16=65535,xn=+x,yn=+y,xl=UInt16&xn,yl=UInt16&yn;return 0|xl*yl+((UInt16&xn>>>16)*yl+xl*(UInt16&yn>>>16)<<16>>>0)},log1p:function(x){return(x=+x)>-1e-8&&1e-8>x?x-x*x/2:log(1+x)},log10:function(x){return log(x)/Math.LN10},log2:function(x){return log(x)/Math.LN2},sign:sign,sinh:function(x){return abs(x=+x)<1?(expm1(x)-expm1(-x))/2:(exp(x-1)-exp(-x-1))*(E/2)},tanh:function(x){var a=expm1(x=+x),b=expm1(-x);return a==Infinity?1:b==Infinity?-1:(a-b)/(exp(x)+exp(-x))},trunc:function(it){return(it>0?floor:ceil)(it)}});


},{"./$.def":13}],56:[function(require,module,exports){
"use strict";function toPrimitive(it){var fn,val;if(isFunction(fn=it.valueOf)&&!isObject(val=fn.call(it)))return val;if(isFunction(fn=it.toString)&&!isObject(val=fn.call(it)))return val;throw TypeError("Can't convert object to number")}function toNumber(it){if(isObject(it)&&(it=toPrimitive(it)),"string"==typeof it&&it.length>2&&48==it.charCodeAt(0)){var binary=!1;switch(it.charCodeAt(1)){case 66:case 98:binary=!0;case 79:case 111:return parseInt(it.slice(2),binary?2:8)}}return+it}var $=require("./$"),isObject=$.isObject,isFunction=$.isFunction,NUMBER="Number",$Number=$.g[NUMBER],Base=$Number,proto=$Number.prototype;!$.FW||$Number("0o1")&&$Number("0b1")||($Number=function(it){return this instanceof $Number?new Base(toNumber(it)):toNumber(it)},$.each.call($.DESC?$.getNames(Base):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),function(key){$.has(Base,key)&&!$.has($Number,key)&&$.setDesc($Number,key,$.getDesc(Base,key))}),$Number.prototype=proto,proto.constructor=$Number,require("./$.redef")($.g,NUMBER,$Number));


},{"./$":24,"./$.redef":29}],57:[function(require,module,exports){
function isInteger(it){return!$.isObject(it)&&_isFinite(it)&&floor(it)===it}var $=require("./$"),$def=require("./$.def"),abs=Math.abs,floor=Math.floor,_isFinite=$.g.isFinite,MAX_SAFE_INTEGER=9007199254740991;$def($def.S,"Number",{EPSILON:Math.pow(2,-52),isFinite:function(it){return"number"==typeof it&&_isFinite(it)},isInteger:isInteger,isNaN:function(number){return number!=number},isSafeInteger:function(number){return isInteger(number)&&abs(number)<=MAX_SAFE_INTEGER},MAX_SAFE_INTEGER:MAX_SAFE_INTEGER,MIN_SAFE_INTEGER:-MAX_SAFE_INTEGER,parseFloat:parseFloat,parseInt:parseInt});


},{"./$":24,"./$.def":13}],58:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{assign:require("./$.assign")});


},{"./$.assign":6,"./$.def":13}],59:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{is:require("./$.same")});


},{"./$.def":13,"./$.same":31}],60:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"Object",{setPrototypeOf:require("./$.set-proto").set});


},{"./$.def":13,"./$.set-proto":32}],61:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def"),isObject=$.isObject,toObject=$.toObject;$.each.call("freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames".split(","),function(KEY,ID){var fn=($.core.Object||{})[KEY]||Object[KEY],forced=0,method={};method[KEY]=0==ID?function(it){return isObject(it)?fn(it):it}:1==ID?function(it){return isObject(it)?fn(it):it}:2==ID?function(it){return isObject(it)?fn(it):it}:3==ID?function(it){return isObject(it)?fn(it):!0}:4==ID?function(it){return isObject(it)?fn(it):!0}:5==ID?function(it){return isObject(it)?fn(it):!1}:6==ID?function(it,key){return fn(toObject(it),key)}:7==ID?function(it){return fn(Object($.assertDefined(it)))}:8==ID?function(it){return fn(toObject(it))}:require("./$.get-names").get;try{fn("z")}catch(e){forced=1}$def($def.S+$def.F*forced,"Object",method)});


},{"./$":24,"./$.def":13,"./$.get-names":18}],62:[function(require,module,exports){
"use strict";var cof=require("./$.cof"),tmp={};tmp[require("./$.wks")("toStringTag")]="z",require("./$").FW&&"z"!=cof(tmp)&&require("./$.redef")(Object.prototype,"toString",function(){return"[object "+cof.classof(this)+"]"},!0);


},{"./$":24,"./$.cof":7,"./$.redef":29,"./$.wks":42}],63:[function(require,module,exports){
"use strict";function testResolve(sub){var test=new P(function(){});return sub&&(test.constructor=Object),P.resolve(test)===test}function isPromise(it){return isObject(it)&&(useNative?"Promise"==cof.classof(it):RECORD in it)}function sameConstructor(a,b){return $.FW||a!==P||b!==Wrapper?same(a,b):!0}function getConstructor(C){var S=assertObject(C)[SPECIES];return void 0!=S?S:C}function isThenable(it){var then;return isObject(it)&&(then=it.then),isFunction(then)?then:!1}function notify(record){var chain=record.c;chain.length&&asap.call(global,function(){function run(react){var ret,then,cb=ok?react.ok:react.fail;try{cb?(ok||(record.h=!0),ret=cb===!0?value:cb(value),ret===react.P?react.rej(TypeError("Promise-chain cycle")):(then=isThenable(ret))?then.call(ret,react.res,react.rej):react.res(ret)):react.rej(value)}catch(err){react.rej(err)}}for(var value=record.v,ok=1==record.s,i=0;chain.length>i;)run(chain[i++]);chain.length=0})}function isUnhandled(promise){var react,record=promise[RECORD],chain=record.a||record.c,i=0;if(record.h)return!1;for(;chain.length>i;)if(react=chain[i++],react.fail||!isUnhandled(react.P))return!1;return!0}function $reject(value){var promise,record=this;record.d||(record.d=!0,record=record.r||record,record.v=value,record.s=2,record.a=record.c.slice(),setTimeout(function(){asap.call(global,function(){isUnhandled(promise=record.p)&&(isNode?process.emit("unhandledRejection",value,promise):global.console&&console.error&&console.error("Unhandled promise rejection",value)),record.a=void 0})},1),notify(record))}function $resolve(value){var then,record=this;if(!record.d){record.d=!0,record=record.r||record;try{(then=isThenable(value))?asap.call(global,function(){var wrapper={r:record,d:!1};try{then.call(value,ctx($resolve,wrapper,1),ctx($reject,wrapper,1))}catch(e){$reject.call(wrapper,e)}}):(record.v=value,record.s=1,notify(record))}catch(e){$reject.call({r:record,d:!1},e)}}}var $=require("./$"),ctx=require("./$.ctx"),cof=require("./$.cof"),$def=require("./$.def"),assert=require("./$.assert"),forOf=require("./$.for-of"),setProto=require("./$.set-proto").set,same=require("./$.same"),species=require("./$.species"),SPECIES=require("./$.wks")("species"),RECORD=require("./$.uid").safe("record"),PROMISE="Promise",global=$.g,process=global.process,isNode="process"==cof(process),asap=process&&process.nextTick||require("./$.task").set,P=global[PROMISE],isFunction=$.isFunction,isObject=$.isObject,assertFunction=assert.fn,assertObject=assert.obj,Wrapper,useNative=function(){function P2(x){var self=new P(x);return setProto(self,P2.prototype),self}var works=!1;try{if(works=isFunction(P)&&isFunction(P.resolve)&&testResolve(),setProto(P2,P),P2.prototype=$.create(P.prototype,{constructor:{value:P2}}),P2.resolve(5).then(function(){})instanceof P2||(works=!1),works&&$.DESC){var thenableThenGotten=!1;P.resolve($.setDesc({},"then",{get:function(){thenableThenGotten=!0}})),works=thenableThenGotten}}catch(e){works=!1}return works}();useNative||(P=function(executor){assertFunction(executor);var record={p:assert.inst(this,P,PROMISE),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1};$.hide(this,RECORD,record);try{executor(ctx($resolve,record,1),ctx($reject,record,1))}catch(err){$reject.call(record,err)}},require("./$.mix")(P.prototype,{then:function(onFulfilled,onRejected){var S=assertObject(assertObject(this).constructor)[SPECIES],react={ok:isFunction(onFulfilled)?onFulfilled:!0,fail:isFunction(onRejected)?onRejected:!1},promise=react.P=new(void 0!=S?S:P)(function(res,rej){react.res=assertFunction(res),react.rej=assertFunction(rej)}),record=this[RECORD];return record.c.push(react),record.a&&record.a.push(react),record.s&&notify(record),promise},"catch":function(onRejected){return this.then(void 0,onRejected)}})),$def($def.G+$def.W+$def.F*!useNative,{Promise:P}),cof.set(P,PROMISE),species(P),species(Wrapper=$.core[PROMISE]),$def($def.S+$def.F*!useNative,PROMISE,{reject:function(r){return new(getConstructor(this))(function(res,rej){rej(r)})}}),$def($def.S+$def.F*(!useNative||testResolve(!0)),PROMISE,{resolve:function(x){return isPromise(x)&&sameConstructor(x.constructor,this)?x:new this(function(res){res(x)})}}),$def($def.S+$def.F*!(useNative&&require("./$.iter-detect")(function(iter){P.all(iter)["catch"](function(){})})),PROMISE,{all:function(iterable){var C=getConstructor(this),values=[];return new C(function(res,rej){forOf(iterable,!1,values.push,values);var remaining=values.length,results=Array(remaining);remaining?$.each.call(values,function(promise,index){C.resolve(promise).then(function(value){results[index]=value,--remaining||res(results)},rej)}):res(results)})},race:function(iterable){var C=getConstructor(this);return new C(function(res,rej){forOf(iterable,!1,function(promise){C.resolve(promise).then(res,rej)})})}});


},{"./$":24,"./$.assert":5,"./$.cof":7,"./$.ctx":12,"./$.def":13,"./$.for-of":16,"./$.iter-detect":22,"./$.mix":26,"./$.same":31,"./$.set-proto":32,"./$.species":34,"./$.task":38,"./$.uid":40,"./$.wks":42}],64:[function(require,module,exports){
function Enumerate(iterated){$.set(this,ITER,{o:iterated,k:void 0,i:0})}var $=require("./$"),$def=require("./$.def"),setProto=require("./$.set-proto"),$iter=require("./$.iter"),ITERATOR=require("./$.wks")("iterator"),ITER=require("./$.uid").safe("iter"),step=$iter.step,assert=require("./$.assert"),isObject=$.isObject,getProto=$.getProto,$Reflect=$.g.Reflect,_apply=Function.apply,assertObject=assert.obj,_isExtensible=Object.isExtensible||isObject,_preventExtensions=Object.preventExtensions,buggyEnumerate=!($Reflect&&$Reflect.enumerate&&ITERATOR in $Reflect.enumerate({}));$iter.create(Enumerate,"Object",function(){var key,iter=this[ITER],keys=iter.k;if(void 0==keys){iter.k=keys=[];for(key in iter.o)keys.push(key)}do if(iter.i>=keys.length)return step(1);while(!((key=keys[iter.i++])in iter.o));return step(0,key)});var reflect={apply:function(target,thisArgument,argumentsList){return _apply.call(target,thisArgument,argumentsList)},construct:function(target,argumentsList){var proto=assert.fn(arguments.length<3?target:arguments[2]).prototype,instance=$.create(isObject(proto)?proto:Object.prototype),result=_apply.call(target,instance,argumentsList);return isObject(result)?result:instance},defineProperty:function(target,propertyKey,attributes){assertObject(target);try{return $.setDesc(target,propertyKey,attributes),!0}catch(e){return!1}},deleteProperty:function(target,propertyKey){var desc=$.getDesc(assertObject(target),propertyKey);return desc&&!desc.configurable?!1:delete target[propertyKey]},get:function get(target,propertyKey){var proto,receiver=arguments.length<3?target:arguments[2],desc=$.getDesc(assertObject(target),propertyKey);return desc?$.has(desc,"value")?desc.value:void 0===desc.get?void 0:desc.get.call(receiver):isObject(proto=getProto(target))?get(proto,propertyKey,receiver):void 0},getOwnPropertyDescriptor:function(target,propertyKey){return $.getDesc(assertObject(target),propertyKey)},getPrototypeOf:function(target){return getProto(assertObject(target))},has:function(target,propertyKey){return propertyKey in target},isExtensible:function(target){return _isExtensible(assertObject(target))},ownKeys:require("./$.own-keys"),preventExtensions:function(target){assertObject(target);try{return _preventExtensions&&_preventExtensions(target),!0}catch(e){return!1}},set:function set(target,propertyKey,V){var existingDescriptor,proto,receiver=arguments.length<4?target:arguments[3],ownDesc=$.getDesc(assertObject(target),propertyKey);if(!ownDesc){if(isObject(proto=getProto(target)))return set(proto,propertyKey,V,receiver);ownDesc=$.desc(0)}return $.has(ownDesc,"value")?ownDesc.writable!==!1&&isObject(receiver)?(existingDescriptor=$.getDesc(receiver,propertyKey)||$.desc(0),existingDescriptor.value=V,$.setDesc(receiver,propertyKey,existingDescriptor),!0):!1:void 0===ownDesc.set?!1:(ownDesc.set.call(receiver,V),!0)}};setProto&&(reflect.setPrototypeOf=function(target,proto){setProto.check(target,proto);try{return setProto.set(target,proto),!0}catch(e){return!1}}),$def($def.G,{Reflect:{}}),$def($def.S+$def.F*buggyEnumerate,"Reflect",{enumerate:function(target){return new Enumerate(assertObject(target))}}),$def($def.S,"Reflect",reflect);


},{"./$":24,"./$.assert":5,"./$.def":13,"./$.iter":23,"./$.own-keys":27,"./$.set-proto":32,"./$.uid":40,"./$.wks":42}],65:[function(require,module,exports){
var $=require("./$"),cof=require("./$.cof"),$RegExp=$.g.RegExp,Base=$RegExp,proto=$RegExp.prototype,re=/a/g,CORRECT_NEW=new $RegExp(re)!==re,ALLOWS_RE_WITH_FLAGS=function(){try{return"/a/i"==$RegExp(re,"i")}catch(e){}}();$.FW&&$.DESC&&(CORRECT_NEW&&ALLOWS_RE_WITH_FLAGS||($RegExp=function(pattern,flags){var patternIsRegExp="RegExp"==cof(pattern),flagsIsUndefined=void 0===flags;return this instanceof $RegExp||!patternIsRegExp||!flagsIsUndefined?CORRECT_NEW?new Base(patternIsRegExp&&!flagsIsUndefined?pattern.source:pattern,flags):new Base(patternIsRegExp?pattern.source:pattern,patternIsRegExp&&flagsIsUndefined?pattern.flags:flags):pattern},$.each.call($.getNames(Base),function(key){key in $RegExp||$.setDesc($RegExp,key,{configurable:!0,get:function(){return Base[key]},set:function(it){Base[key]=it}})}),proto.constructor=$RegExp,$RegExp.prototype=proto,require("./$.redef")($.g,"RegExp",$RegExp)),"g"!=/./g.flags&&$.setDesc(proto,"flags",{configurable:!0,get:require("./$.replacer")(/^.*\/(\w*)$/,"$1")})),require("./$.species")($RegExp);


},{"./$":24,"./$.cof":7,"./$.redef":29,"./$.replacer":30,"./$.species":34}],66:[function(require,module,exports){
"use strict";var strong=require("./$.collection-strong");require("./$.collection")("Set",function(get){return function(){return get(this,arguments[0])}},{add:function(value){return strong.def(this,value=0===value?0:value,value)}},strong);


},{"./$.collection":11,"./$.collection-strong":8}],67:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$at=require("./$.string-at")(!1);$def($def.P,"String",{codePointAt:function(pos){return $at(this,pos)}});


},{"./$.def":13,"./$.string-at":35}],68:[function(require,module,exports){
"use strict";var $=require("./$"),cof=require("./$.cof"),$def=require("./$.def"),toLength=$.toLength;$def($def.P+$def.F*!require("./$.throws")(function(){"q".endsWith(/./)}),"String",{endsWith:function(searchString){if("RegExp"==cof(searchString))throw TypeError();var that=String($.assertDefined(this)),endPosition=arguments[1],len=toLength(that.length),end=void 0===endPosition?len:Math.min(toLength(endPosition),len);return searchString+="",that.slice(end-searchString.length,end)===searchString}});


},{"./$":24,"./$.cof":7,"./$.def":13,"./$.throws":39}],69:[function(require,module,exports){
var $def=require("./$.def"),toIndex=require("./$").toIndex,fromCharCode=String.fromCharCode,$fromCodePoint=String.fromCodePoint;$def($def.S+$def.F*(!!$fromCodePoint&&1!=$fromCodePoint.length),"String",{fromCodePoint:function(x){for(var code,res=[],len=arguments.length,i=0;len>i;){if(code=+arguments[i++],toIndex(code,1114111)!==code)throw RangeError(code+" is not a valid code point");res.push(65536>code?fromCharCode(code):fromCharCode(((code-=65536)>>10)+55296,code%1024+56320))}return res.join("")}});


},{"./$":24,"./$.def":13}],70:[function(require,module,exports){
"use strict";var $=require("./$"),cof=require("./$.cof"),$def=require("./$.def");$def($def.P,"String",{includes:function(searchString){if("RegExp"==cof(searchString))throw TypeError();return!!~String($.assertDefined(this)).indexOf(searchString,arguments[1])}});


},{"./$":24,"./$.cof":7,"./$.def":13}],71:[function(require,module,exports){
var set=require("./$").set,$at=require("./$.string-at")(!0),ITER=require("./$.uid").safe("iter"),$iter=require("./$.iter"),step=$iter.step;require("./$.iter-define")(String,"String",function(iterated){set(this,ITER,{o:String(iterated),i:0})},function(){var point,iter=this[ITER],O=iter.o,index=iter.i;return index>=O.length?step(1):(point=$at(O,index),iter.i+=point.length,step(0,point))});


},{"./$":24,"./$.iter":23,"./$.iter-define":21,"./$.string-at":35,"./$.uid":40}],72:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def");$def($def.S,"String",{raw:function(callSite){for(var tpl=$.toObject(callSite.raw),len=$.toLength(tpl.length),sln=arguments.length,res=[],i=0;len>i;)res.push(String(tpl[i++])),sln>i&&res.push(String(arguments[i]));return res.join("")}});


},{"./$":24,"./$.def":13}],73:[function(require,module,exports){
var $def=require("./$.def");$def($def.P,"String",{repeat:require("./$.string-repeat")});


},{"./$.def":13,"./$.string-repeat":37}],74:[function(require,module,exports){
"use strict";var $=require("./$"),cof=require("./$.cof"),$def=require("./$.def");$def($def.P+$def.F*!require("./$.throws")(function(){"q".startsWith(/./)}),"String",{startsWith:function(searchString){if("RegExp"==cof(searchString))throw TypeError();var that=String($.assertDefined(this)),index=$.toLength(Math.min(arguments[1],that.length));return searchString+="",that.slice(index,index+searchString.length)===searchString}});


},{"./$":24,"./$.cof":7,"./$.def":13,"./$.throws":39}],75:[function(require,module,exports){
"use strict";function wrap(tag){var sym=AllSymbols[tag]=$.set($create($Symbol.prototype),TAG,tag);return DESC&&setter&&setSymbolDesc(ObjectProto,tag,{configurable:!0,set:function(value){has(this,HIDDEN)&&has(this[HIDDEN],tag)&&(this[HIDDEN][tag]=!1),setSymbolDesc(this,tag,desc(1,value))}}),sym}function defineProperty(it,key,D){return D&&has(AllSymbols,key)?(D.enumerable?(has(it,HIDDEN)&&it[HIDDEN][key]&&(it[HIDDEN][key]=!1),D=$create(D,{enumerable:desc(0,!1)})):(has(it,HIDDEN)||setDesc(it,HIDDEN,desc(1,{})),it[HIDDEN][key]=!0),setSymbolDesc(it,key,D)):setDesc(it,key,D)}function defineProperties(it,P){assertObject(it);for(var key,keys=enumKeys(P=toObject(P)),i=0,l=keys.length;l>i;)defineProperty(it,key=keys[i++],P[key]);return it}function create(it,P){return void 0===P?$create(it):defineProperties($create(it),P)}function propertyIsEnumerable(key){var E=_propertyIsEnumerable.call(this,key);return E||!has(this,key)||!has(AllSymbols,key)||has(this,HIDDEN)&&this[HIDDEN][key]?E:!0}function getOwnPropertyDescriptor(it,key){var D=getDesc(it=toObject(it),key);return!D||!has(AllSymbols,key)||has(it,HIDDEN)&&it[HIDDEN][key]||(D.enumerable=!0),D}function getOwnPropertyNames(it){for(var key,names=getNames(toObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])||key==HIDDEN||result.push(key);return result}function getOwnPropertySymbols(it){for(var key,names=getNames(toObject(it)),result=[],i=0;names.length>i;)has(AllSymbols,key=names[i++])&&result.push(AllSymbols[key]);return result}var $=require("./$"),setTag=require("./$.cof").set,uid=require("./$.uid"),shared=require("./$.shared"),$def=require("./$.def"),$redef=require("./$.redef"),keyOf=require("./$.keyof"),enumKeys=require("./$.enum-keys"),assertObject=require("./$.assert").obj,ObjectProto=Object.prototype,DESC=$.DESC,has=$.has,$create=$.create,getDesc=$.getDesc,setDesc=$.setDesc,desc=$.desc,$names=require("./$.get-names"),getNames=$names.get,toObject=$.toObject,$Symbol=$.g.Symbol,setter=!1,TAG=uid("tag"),HIDDEN=uid("hidden"),_propertyIsEnumerable={}.propertyIsEnumerable,SymbolRegistry=shared("symbol-registry"),AllSymbols=shared("symbols"),useNative=$.isFunction($Symbol),setSymbolDesc=DESC?function(){try{return $create(setDesc({},HIDDEN,{get:function(){return setDesc(this,HIDDEN,{value:!1})[HIDDEN]}}))[HIDDEN]||setDesc}catch(e){return function(it,key,D){var protoDesc=getDesc(ObjectProto,key);protoDesc&&delete ObjectProto[key],setDesc(it,key,D),protoDesc&&it!==ObjectProto&&setDesc(ObjectProto,key,protoDesc)}}}():setDesc;useNative||($Symbol=function(){if(this instanceof $Symbol)throw TypeError("Symbol is not a constructor");return wrap(uid(arguments[0]))},$redef($Symbol.prototype,"toString",function(){return this[TAG]}),$.create=create,$.setDesc=defineProperty,$.getDesc=getOwnPropertyDescriptor,$.setDescs=defineProperties,$.getNames=$names.get=getOwnPropertyNames,$.getSymbols=getOwnPropertySymbols,$.DESC&&$.FW&&$redef(ObjectProto,"propertyIsEnumerable",propertyIsEnumerable,!0));var symbolStatics={"for":function(key){return has(SymbolRegistry,key+="")?SymbolRegistry[key]:SymbolRegistry[key]=$Symbol(key)},keyFor:function(key){return keyOf(SymbolRegistry,key)},useSetter:function(){setter=!0},useSimple:function(){setter=!1}};$.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(it){var sym=require("./$.wks")(it);symbolStatics[it]=useNative?sym:wrap(sym)}),setter=!0,$def($def.G+$def.W,{Symbol:$Symbol}),$def($def.S,"Symbol",symbolStatics),$def($def.S+$def.F*!useNative,"Object",{create:create,defineProperty:defineProperty,defineProperties:defineProperties,getOwnPropertyDescriptor:getOwnPropertyDescriptor,getOwnPropertyNames:getOwnPropertyNames,getOwnPropertySymbols:getOwnPropertySymbols}),setTag($Symbol,"Symbol"),setTag(Math,"Math",!0),setTag($.g.JSON,"JSON",!0);


},{"./$":24,"./$.assert":5,"./$.cof":7,"./$.def":13,"./$.enum-keys":15,"./$.get-names":18,"./$.keyof":25,"./$.redef":29,"./$.shared":33,"./$.uid":40,"./$.wks":42}],76:[function(require,module,exports){
"use strict";var $=require("./$"),weak=require("./$.collection-weak"),leakStore=weak.leakStore,ID=weak.ID,WEAK=weak.WEAK,has=$.has,isObject=$.isObject,isExtensible=Object.isExtensible||isObject,tmp={},$WeakMap=require("./$.collection")("WeakMap",function(get){return function(){return get(this,arguments[0])}},{get:function(key){if(isObject(key)){if(!isExtensible(key))return leakStore(this).get(key);if(has(key,WEAK))return key[WEAK][this[ID]]}},set:function(key,value){return weak.def(this,key,value)}},weak,!0,!0);7!=(new $WeakMap).set((Object.freeze||Object)(tmp),7).get(tmp)&&$.each.call(["delete","has","get","set"],function(key){var proto=$WeakMap.prototype,method=proto[key];require("./$.redef")(proto,key,function(a,b){if(isObject(a)&&!isExtensible(a)){var result=leakStore(this)[key](a,b);return"set"==key?this:result}return method.call(this,a,b)})});


},{"./$":24,"./$.collection":11,"./$.collection-weak":10,"./$.redef":29}],77:[function(require,module,exports){
"use strict";var weak=require("./$.collection-weak");require("./$.collection")("WeakSet",function(get){return function(){return get(this,arguments[0])}},{add:function(value){return weak.def(this,value,!0)}},weak,!1,!0);


},{"./$.collection":11,"./$.collection-weak":10}],78:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$includes=require("./$.array-includes")(!0);$def($def.P,"Array",{includes:function(el){return $includes(this,el,arguments[1])}}),require("./$.unscope")("includes");


},{"./$.array-includes":3,"./$.def":13,"./$.unscope":41}],79:[function(require,module,exports){
require("./$.collection-to-json")("Map");


},{"./$.collection-to-json":9}],80:[function(require,module,exports){
var $=require("./$"),$def=require("./$.def"),ownKeys=require("./$.own-keys");$def($def.S,"Object",{getOwnPropertyDescriptors:function(object){var O=$.toObject(object),result={};return $.each.call(ownKeys(O),function(key){$.setDesc(result,key,$.desc(0,$.getDesc(O,key)))}),result}});


},{"./$":24,"./$.def":13,"./$.own-keys":27}],81:[function(require,module,exports){
function createObjectToArray(isEntries){return function(object){var key,O=$.toObject(object),keys=$.getKeys(O),length=keys.length,i=0,result=Array(length);if(isEntries)for(;length>i;)result[i]=[key=keys[i++],O[key]];else for(;length>i;)result[i]=O[keys[i++]];return result}}var $=require("./$"),$def=require("./$.def");$def($def.S,"Object",{values:createObjectToArray(!1),entries:createObjectToArray(!0)});


},{"./$":24,"./$.def":13}],82:[function(require,module,exports){
var $def=require("./$.def");$def($def.S,"RegExp",{escape:require("./$.replacer")(/[\\^$*+?.()|[\]{}]/g,"\\$&",!0)});


},{"./$.def":13,"./$.replacer":30}],83:[function(require,module,exports){
require("./$.collection-to-json")("Set");


},{"./$.collection-to-json":9}],84:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$at=require("./$.string-at")(!0);$def($def.P,"String",{at:function(pos){return $at(this,pos)}});


},{"./$.def":13,"./$.string-at":35}],85:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$pad=require("./$.string-pad");$def($def.P,"String",{lpad:function(n){return $pad(this,n,arguments[1],!0)}});


},{"./$.def":13,"./$.string-pad":36}],86:[function(require,module,exports){
"use strict";var $def=require("./$.def"),$pad=require("./$.string-pad");$def($def.P,"String",{rpad:function(n){return $pad(this,n,arguments[1],!1)}});


},{"./$.def":13,"./$.string-pad":36}],87:[function(require,module,exports){
function setStatics(keys,length){$.each.call(keys.split(","),function(key){void 0==length&&key in $Array?statics[key]=$Array[key]:key in[]&&(statics[key]=require("./$.ctx")(Function.call,[][key],length))})}var $=require("./$"),$def=require("./$.def"),$Array=$.core.Array||Array,statics={};setStatics("pop,reverse,shift,keys,values,entries",1),setStatics("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),setStatics("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill,turn"),$def($def.S,"Array",statics);


},{"./$":24,"./$.ctx":12,"./$.def":13}],88:[function(require,module,exports){
require("./es6.array.iterator");var $=require("./$"),Iterators=require("./$.iter").Iterators,ITERATOR=require("./$.wks")("iterator"),ArrayValues=Iterators.Array,NL=$.g.NodeList,HTC=$.g.HTMLCollection,NLProto=NL&&NL.prototype,HTCProto=HTC&&HTC.prototype;$.FW&&(!NL||ITERATOR in NLProto||$.hide(NLProto,ITERATOR,ArrayValues),!HTC||ITERATOR in HTCProto||$.hide(HTCProto,ITERATOR,ArrayValues)),Iterators.NodeList=Iterators.HTMLCollection=ArrayValues;


},{"./$":24,"./$.iter":23,"./$.wks":42,"./es6.array.iterator":49}],89:[function(require,module,exports){
var $def=require("./$.def"),$task=require("./$.task");$def($def.G+$def.B,{setImmediate:$task.set,clearImmediate:$task.clear});


},{"./$.def":13,"./$.task":38}],90:[function(require,module,exports){
function wrap(set){return MSIE?function(fn,time){return set(invoke(partial,[].slice.call(arguments,2),$.isFunction(fn)?fn:Function(fn)),time)}:set}var $=require("./$"),$def=require("./$.def"),invoke=require("./$.invoke"),partial=require("./$.partial"),navigator=$.g.navigator,MSIE=!!navigator&&/MSIE .\./.test(navigator.userAgent);$def($def.G+$def.B+$def.F*MSIE,{setTimeout:wrap($.g.setTimeout),setInterval:wrap($.g.setInterval)});


},{"./$":24,"./$.def":13,"./$.invoke":19,"./$.partial":28}],91:[function(require,module,exports){
require("./modules/es5"),require("./modules/es6.symbol"),require("./modules/es6.object.assign"),require("./modules/es6.object.is"),require("./modules/es6.object.set-prototype-of"),require("./modules/es6.object.to-string"),require("./modules/es6.object.statics-accept-primitives"),require("./modules/es6.function.name"),require("./modules/es6.function.has-instance"),require("./modules/es6.number.constructor"),require("./modules/es6.number.statics"),require("./modules/es6.math"),require("./modules/es6.string.from-code-point"),require("./modules/es6.string.raw"),require("./modules/es6.string.iterator"),require("./modules/es6.string.code-point-at"),require("./modules/es6.string.ends-with"),require("./modules/es6.string.includes"),require("./modules/es6.string.repeat"),require("./modules/es6.string.starts-with"),require("./modules/es6.array.from"),require("./modules/es6.array.of"),require("./modules/es6.array.iterator"),require("./modules/es6.array.species"),require("./modules/es6.array.copy-within"),require("./modules/es6.array.fill"),require("./modules/es6.array.find"),require("./modules/es6.array.find-index"),require("./modules/es6.regexp"),require("./modules/es6.promise"),require("./modules/es6.map"),require("./modules/es6.set"),require("./modules/es6.weak-map"),require("./modules/es6.weak-set"),require("./modules/es6.reflect"),require("./modules/es7.array.includes"),require("./modules/es7.string.at"),require("./modules/es7.string.lpad"),require("./modules/es7.string.rpad"),require("./modules/es7.regexp.escape"),require("./modules/es7.object.get-own-property-descriptors"),require("./modules/es7.object.to-array"),require("./modules/es7.map.to-json"),require("./modules/es7.set.to-json"),require("./modules/js.array.statics"),require("./modules/web.timers"),require("./modules/web.immediate"),require("./modules/web.dom.iterable"),module.exports=require("./modules/$").core;


},{"./modules/$":24,"./modules/es5":43,"./modules/es6.array.copy-within":44,"./modules/es6.array.fill":45,"./modules/es6.array.find":47,"./modules/es6.array.find-index":46,"./modules/es6.array.from":48,"./modules/es6.array.iterator":49,"./modules/es6.array.of":50,"./modules/es6.array.species":51,"./modules/es6.function.has-instance":52,"./modules/es6.function.name":53,"./modules/es6.map":54,"./modules/es6.math":55,"./modules/es6.number.constructor":56,"./modules/es6.number.statics":57,"./modules/es6.object.assign":58,"./modules/es6.object.is":59,"./modules/es6.object.set-prototype-of":60,"./modules/es6.object.statics-accept-primitives":61,"./modules/es6.object.to-string":62,"./modules/es6.promise":63,"./modules/es6.reflect":64,"./modules/es6.regexp":65,"./modules/es6.set":66,"./modules/es6.string.code-point-at":67,"./modules/es6.string.ends-with":68,"./modules/es6.string.from-code-point":69,"./modules/es6.string.includes":70,"./modules/es6.string.iterator":71,"./modules/es6.string.raw":72,"./modules/es6.string.repeat":73,"./modules/es6.string.starts-with":74,"./modules/es6.symbol":75,"./modules/es6.weak-map":76,"./modules/es6.weak-set":77,"./modules/es7.array.includes":78,"./modules/es7.map.to-json":79,"./modules/es7.object.get-own-property-descriptors":80,"./modules/es7.object.to-array":81,"./modules/es7.regexp.escape":82,"./modules/es7.set.to-json":83,"./modules/es7.string.at":84,"./modules/es7.string.lpad":85,"./modules/es7.string.rpad":86,"./modules/js.array.statics":87,"./modules/web.dom.iterable":88,"./modules/web.immediate":89,"./modules/web.timers":90}],92:[function(require,module,exports){
(function (process,global){
!function(global){"use strict";function wrap(innerFn,outerFn,self,tryLocsList){var generator=Object.create((outerFn||Generator).prototype);return generator._invoke=makeInvokeMethod(innerFn,self||null,new Context(tryLocsList||[])),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){prototype[method]=function(arg){return this._invoke(method,arg)}})}function AwaitArgument(arg){this.arg=arg}function AsyncIterator(generator){function invoke(method,arg){var result=generator[method](arg),value=result.value;return value instanceof AwaitArgument?Promise.resolve(value.arg).then(invokeNext,invokeThrow):Promise.resolve(value).then(function(unwrapped){return result.value=unwrapped,result})}function enqueue(method,arg){var enqueueResult=previousPromise?previousPromise.then(function(){return invoke(method,arg)}):new Promise(function(resolve){resolve(invoke(method,arg))});return previousPromise=enqueueResult["catch"](function(ignored){}),enqueueResult}"object"==typeof process&&process.domain&&(invoke=process.domain.bind(invoke));var previousPromise,invokeNext=invoke.bind(generator,"next"),invokeThrow=invoke.bind(generator,"throw");invoke.bind(generator,"return");this._invoke=enqueue}function makeInvokeMethod(innerFn,self,context){var state=GenStateSuspendedStart;return function(method,arg){if(state===GenStateExecuting)throw new Error("Generator is already running");if(state===GenStateCompleted){if("throw"===method)throw arg;return doneResult()}for(;;){var delegate=context.delegate;if(delegate){if("return"===method||"throw"===method&&delegate.iterator[method]===undefined){context.delegate=null;var returnMethod=delegate.iterator["return"];if(returnMethod){var record=tryCatch(returnMethod,delegate.iterator,arg);if("throw"===record.type){method="throw",arg=record.arg;continue}}if("return"===method)continue}var record=tryCatch(delegate.iterator[method],delegate.iterator,arg);if("throw"===record.type){context.delegate=null,method="throw",arg=record.arg;continue}method="next",arg=undefined;var info=record.arg;if(!info.done)return state=GenStateSuspendedYield,info;context[delegate.resultName]=info.value,context.next=delegate.nextLoc,context.delegate=null}if("next"===method)state===GenStateSuspendedYield?context.sent=arg:context.sent=undefined;else if("throw"===method){if(state===GenStateSuspendedStart)throw state=GenStateCompleted,arg;context.dispatchException(arg)&&(method="next",arg=undefined)}else"return"===method&&context.abrupt("return",arg);state=GenStateExecuting;var record=tryCatch(innerFn,self,context);if("normal"===record.type){state=context.done?GenStateCompleted:GenStateSuspendedYield;var info={value:record.arg,done:context.done};if(record.arg!==ContinueSentinel)return info;context.delegate&&"next"===method&&(arg=undefined)}else"throw"===record.type&&(state=GenStateCompleted,method="throw",arg=record.arg)}}}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:undefined,done:!0}}var undefined,hasOwn=Object.prototype.hasOwnProperty,iteratorSymbol="function"==typeof Symbol&&Symbol.iterator||"@@iterator",inModule="object"==typeof module,runtime=global.regeneratorRuntime;if(runtime)return void(inModule&&(module.exports=runtime));runtime=global.regeneratorRuntime=inModule?module.exports:{},runtime.wrap=wrap;var GenStateSuspendedStart="suspendedStart",GenStateSuspendedYield="suspendedYield",GenStateExecuting="executing",GenStateCompleted="completed",ContinueSentinel={},Gp=GeneratorFunctionPrototype.prototype=Generator.prototype;GeneratorFunction.prototype=Gp.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunction.displayName="GeneratorFunction",runtime.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return ctor?ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name):!1},runtime.mark=function(genFun){return genFun.__proto__=GeneratorFunctionPrototype,genFun.prototype=Object.create(Gp),genFun},runtime.awrap=function(arg){return new AwaitArgument(arg)},defineIteratorMethods(AsyncIterator.prototype),runtime.async=function(innerFn,outerFn,self,tryLocsList){var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList));return runtime.isGeneratorFunction(outerFn)?iter:iter.next().then(function(result){return result.done?result.value:iter.next()})},defineIteratorMethods(Gp),Gp[iteratorSymbol]=function(){return this},Gp.toString=function(){return"[object Generator]"},runtime.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},runtime.values=values,Context.prototype={constructor:Context,reset:function(skipTempReset){if(this.prev=0,this.next=0,this.sent=undefined,this.done=!1,this.delegate=null,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined)},stop:function(){this.done=!0;var rootEntry=this.tryEntries[0],rootRecord=rootEntry.completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function(exception){function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,!!caught}if(this.done)throw exception;for(var context=this,i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?this.next=finallyEntry.finallyLoc:this.complete(record),ContinueSentinel},complete:function(record,afterLoc){if("throw"===record.type)throw record.arg;"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=record.arg,this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc)},finish:function(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},"catch":function(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},ContinueSentinel}}}("object"==typeof global?global:"object"==typeof window?window:"object"==typeof self?self:this);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"_process":95}],93:[function(require,module,exports){
module.exports=require("./lib/polyfill");


},{"./lib/polyfill":2}],94:[function(require,module,exports){
module.exports=require("babel-core/polyfill");


},{"babel-core/polyfill":93}],95:[function(require,module,exports){
function drainQueue(){if(!draining){draining=!0;for(var currentQueue,len=queue.length;len;){currentQueue=queue,queue=[];for(var i=-1;++i<len;)currentQueue[i]();len=queue.length}draining=!1}}function noop(){}var process=module.exports={},queue=[],draining=!1;process.nextTick=function(fun){queue.push(fun),draining||setTimeout(drainQueue,0)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(name){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(dir){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};


},{}],96:[function(require,module,exports){
"use strict";var focusNode=require("./focusNode"),AutoFocusMixin={componentDidMount:function(){this.props.autoFocus&&focusNode(this.getDOMNode())}};module.exports=AutoFocusMixin;


},{"./focusNode":214}],97:[function(require,module,exports){
"use strict";function isPresto(){var opera=window.opera;return"object"==typeof opera&&"function"==typeof opera.version&&parseInt(opera.version(),10)<=12}function isKeypressCommand(nativeEvent){return(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&!(nativeEvent.ctrlKey&&nativeEvent.altKey)}function getCompositionEventType(topLevelType){switch(topLevelType){case topLevelTypes.topCompositionStart:return eventTypes.compositionStart;case topLevelTypes.topCompositionEnd:return eventTypes.compositionEnd;case topLevelTypes.topCompositionUpdate:return eventTypes.compositionUpdate}}function isFallbackCompositionStart(topLevelType,nativeEvent){return topLevelType===topLevelTypes.topKeyDown&&nativeEvent.keyCode===START_KEYCODE}function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case topLevelTypes.topKeyUp:return-1!==END_KEYCODES.indexOf(nativeEvent.keyCode);case topLevelTypes.topKeyDown:return nativeEvent.keyCode!==START_KEYCODE;case topLevelTypes.topKeyPress:case topLevelTypes.topMouseDown:case topLevelTypes.topBlur:return!0;default:return!1}}function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;return"object"==typeof detail&&"data"in detail?detail.data:null}function extractCompositionEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var eventType,fallbackData;if(canUseCompositionEvent?eventType=getCompositionEventType(topLevelType):currentComposition?isFallbackCompositionEnd(topLevelType,nativeEvent)&&(eventType=eventTypes.compositionEnd):isFallbackCompositionStart(topLevelType,nativeEvent)&&(eventType=eventTypes.compositionStart),!eventType)return null;useFallbackCompositionData&&(currentComposition||eventType!==eventTypes.compositionStart?eventType===eventTypes.compositionEnd&&currentComposition&&(fallbackData=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(topLevelTarget));var event=SyntheticCompositionEvent.getPooled(eventType,topLevelTargetID,nativeEvent);if(fallbackData)event.data=fallbackData;else{var customData=getDataFromCustomEvent(nativeEvent);null!==customData&&(event.data=customData)}return EventPropagators.accumulateTwoPhaseDispatches(event),event}function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case topLevelTypes.topCompositionEnd:return getDataFromCustomEvent(nativeEvent);case topLevelTypes.topKeyPress:var which=nativeEvent.which;return which!==SPACEBAR_CODE?null:(hasSpaceKeypress=!0,SPACEBAR_CHAR);case topLevelTypes.topTextInput:var chars=nativeEvent.data;return chars===SPACEBAR_CHAR&&hasSpaceKeypress?null:chars;default:return null}}function getFallbackBeforeInputChars(topLevelType,nativeEvent){if(currentComposition){if(topLevelType===topLevelTypes.topCompositionEnd||isFallbackCompositionEnd(topLevelType,nativeEvent)){var chars=currentComposition.getData();return FallbackCompositionState.release(currentComposition),currentComposition=null,chars}return null}switch(topLevelType){case topLevelTypes.topPaste:return null;case topLevelTypes.topKeyPress:return nativeEvent.which&&!isKeypressCommand(nativeEvent)?String.fromCharCode(nativeEvent.which):null;case topLevelTypes.topCompositionEnd:return useFallbackCompositionData?null:nativeEvent.data;default:return null}}function extractBeforeInputEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var chars;if(chars=canUseTextInputEvent?getNativeBeforeInputChars(topLevelType,nativeEvent):getFallbackBeforeInputChars(topLevelType,nativeEvent),!chars)return null;var event=SyntheticInputEvent.getPooled(eventTypes.beforeInput,topLevelTargetID,nativeEvent);return event.data=chars,EventPropagators.accumulateTwoPhaseDispatches(event),event}var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("./ExecutionEnvironment"),FallbackCompositionState=require("./FallbackCompositionState"),SyntheticCompositionEvent=require("./SyntheticCompositionEvent"),SyntheticInputEvent=require("./SyntheticInputEvent"),keyOf=require("./keyOf"),END_KEYCODES=[9,13,27,32],START_KEYCODE=229,canUseCompositionEvent=ExecutionEnvironment.canUseDOM&&"CompositionEvent"in window,documentMode=null;ExecutionEnvironment.canUseDOM&&"documentMode"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=ExecutionEnvironment.canUseDOM&&"TextEvent"in window&&!documentMode&&!isPresto(),useFallbackCompositionData=ExecutionEnvironment.canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&11>=documentMode),SPACEBAR_CODE=32,SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE),topLevelTypes=EventConstants.topLevelTypes,eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:keyOf({onBeforeInput:null}),captured:keyOf({onBeforeInputCapture:null})},dependencies:[topLevelTypes.topCompositionEnd,topLevelTypes.topKeyPress,topLevelTypes.topTextInput,topLevelTypes.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:keyOf({onCompositionEnd:null}),captured:keyOf({onCompositionEndCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionEnd,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:keyOf({onCompositionStart:null}),captured:keyOf({onCompositionStartCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionStart,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:keyOf({onCompositionUpdate:null}),captured:keyOf({onCompositionUpdateCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionUpdate,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]}},hasSpaceKeypress=!1,currentComposition=null,BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){return[extractCompositionEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent),extractBeforeInputEvent(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent)]}};module.exports=BeforeInputEventPlugin;


},{"./EventConstants":109,"./EventPropagators":114,"./ExecutionEnvironment":115,"./FallbackCompositionState":116,"./SyntheticCompositionEvent":188,"./SyntheticInputEvent":192,"./keyOf":236}],98:[function(require,module,exports){
"use strict";function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1)}var isUnitlessNumber={boxFlex:!0,boxFlexGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},prefixes=["Webkit","ms","Moz","O"];Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop]})});var shorthandPropertyExpansions={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},CSSProperty={isUnitlessNumber:isUnitlessNumber,shorthandPropertyExpansions:shorthandPropertyExpansions};module.exports=CSSProperty;


},{}],99:[function(require,module,exports){
(function (process){
"use strict";var CSSProperty=require("./CSSProperty"),ExecutionEnvironment=require("./ExecutionEnvironment"),camelizeStyleName=require("./camelizeStyleName"),dangerousStyleValue=require("./dangerousStyleValue"),hyphenateStyleName=require("./hyphenateStyleName"),memoizeStringOnly=require("./memoizeStringOnly"),warning=require("./warning"),processStyleName=memoizeStringOnly(function(styleName){return hyphenateStyleName(styleName)}),styleFloatAccessor="cssFloat";if(ExecutionEnvironment.canUseDOM&&void 0===document.documentElement.style.cssFloat&&(styleFloatAccessor="styleFloat"),"production"!==process.env.NODE_ENV)var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/,badStyleValueWithSemicolonPattern=/;\s*$/,warnedStyleNames={},warnedStyleValues={},warnHyphenatedStyleName=function(name){warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]||(warnedStyleNames[name]=!0,"production"!==process.env.NODE_ENV?warning(!1,"Unsupported style property %s. Did you mean %s?",name,camelizeStyleName(name)):null)},warnBadVendoredStyleName=function(name){warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]||(warnedStyleNames[name]=!0,"production"!==process.env.NODE_ENV?warning(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?",name,name.charAt(0).toUpperCase()+name.slice(1)):null)},warnStyleValueWithSemicolon=function(name,value){warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]||(warnedStyleValues[value]=!0,"production"!==process.env.NODE_ENV?warning(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,"")):null)},warnValidStyle=function(name,value){name.indexOf("-")>-1?warnHyphenatedStyleName(name):badVendoredStyleNamePattern.test(name)?warnBadVendoredStyleName(name):badStyleValueWithSemicolonPattern.test(value)&&warnStyleValueWithSemicolon(name,value)};var CSSPropertyOperations={createMarkupForStyles:function(styles){var serialized="";for(var styleName in styles)if(styles.hasOwnProperty(styleName)){var styleValue=styles[styleName];"production"!==process.env.NODE_ENV&&warnValidStyle(styleName,styleValue),null!=styleValue&&(serialized+=processStyleName(styleName)+":",serialized+=dangerousStyleValue(styleName,styleValue)+";")}return serialized||null},setValueForStyles:function(node,styles){var style=node.style;for(var styleName in styles)if(styles.hasOwnProperty(styleName)){"production"!==process.env.NODE_ENV&&warnValidStyle(styleName,styles[styleName]);var styleValue=dangerousStyleValue(styleName,styles[styleName]);if("float"===styleName&&(styleName=styleFloatAccessor),styleValue)style[styleName]=styleValue;else{var expansion=CSSProperty.shorthandPropertyExpansions[styleName];if(expansion)for(var individualStyleName in expansion)style[individualStyleName]="";else style[styleName]=""}}}};module.exports=CSSPropertyOperations;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./CSSProperty":98,"./ExecutionEnvironment":115,"./camelizeStyleName":203,"./dangerousStyleValue":208,"./hyphenateStyleName":228,"./memoizeStringOnly":238,"./warning":249,"_process":95}],100:[function(require,module,exports){
(function (process){
"use strict";function CallbackQueue(){this._callbacks=null,this._contexts=null}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),invariant=require("./invariant");assign(CallbackQueue.prototype,{enqueue:function(callback,context){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(callback),this._contexts.push(context)},notifyAll:function(){var callbacks=this._callbacks,contexts=this._contexts;if(callbacks){"production"!==process.env.NODE_ENV?invariant(callbacks.length===contexts.length,"Mismatched list of contexts in callback queue"):invariant(callbacks.length===contexts.length),this._callbacks=null,this._contexts=null;for(var i=0,l=callbacks.length;l>i;i++)callbacks[i].call(contexts[i]);callbacks.length=0,contexts.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),PooledClass.addPoolingTo(CallbackQueue),module.exports=CallbackQueue;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQ2FsbGJhY2tRdWV1ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFrQkEsU0FBUyxpQkFDUCxLQUFLLFdBQWEsS0FDbEIsS0FBSyxVQUFZLEtBbEJuQixHQUFJLGFBQWMsUUFBUSxpQkFFdEIsT0FBUyxRQUFRLG1CQUNqQixVQUFZLFFBQVEsY0FrQnhCLFFBQU8sY0FBYyxXQVNuQixRQUFTLFNBQVMsU0FBVSxTQUMxQixLQUFLLFdBQWEsS0FBSyxlQUN2QixLQUFLLFVBQVksS0FBSyxjQUN0QixLQUFLLFdBQVcsS0FBSyxVQUNyQixLQUFLLFVBQVUsS0FBSyxVQVN0QixVQUFXLFdBQ1QsR0FBSSxXQUFZLEtBQUssV0FDakIsU0FBVyxLQUFLLFNBQ3BCLElBQUksVUFBVyxDQUNaLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3ZDLFVBQVUsU0FBVyxTQUFTLE9BQzlCLGlEQUNFLFVBQVUsVUFBVSxTQUFXLFNBQVMsUUFDNUMsS0FBSyxXQUFhLEtBQ2xCLEtBQUssVUFBWSxJQUNqQixLQUFLLEdBQUksR0FBSSxFQUFHLEVBQUksVUFBVSxPQUFZLEVBQUosRUFBTyxJQUMzQyxVQUFVLEdBQUcsS0FBSyxTQUFTLEdBRTdCLFdBQVUsT0FBUyxFQUNuQixTQUFTLE9BQVMsSUFTdEIsTUFBTyxXQUNMLEtBQUssV0FBYSxLQUNsQixLQUFLLFVBQVksTUFNbkIsV0FBWSxXQUNWLEtBQUssV0FLVCxZQUFZLGFBQWEsZUFFekIsT0FBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ2FsbGJhY2tRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHBzZXVkby1ldmVudCBtb2R1bGUgdG8gaGVscCBrZWVwIHRyYWNrIG9mIGNvbXBvbmVudHMgd2FpdGluZyB0b1xuICogYmUgbm90aWZpZWQgd2hlbiB0aGVpciBET00gcmVwcmVzZW50YXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHVzZS5cbiAqXG4gKiBUaGlzIGltcGxlbWVudHMgYFBvb2xlZENsYXNzYCwgc28geW91IHNob3VsZCBuZXZlciBuZWVkIHRvIGluc3RhbnRpYXRlIHRoaXMuXG4gKiBJbnN0ZWFkLCB1c2UgYENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKClgLlxuICpcbiAqIEBjbGFzcyBSZWFjdE1vdW50UmVhZHlcbiAqIEBpbXBsZW1lbnRzIFBvb2xlZENsYXNzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gQ2FsbGJhY2tRdWV1ZSgpIHtcbiAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xufVxuXG5hc3NpZ24oQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUsIHtcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgSW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gY29udGV4dCBDb250ZXh0IHRvIGNhbGwgYGNhbGxiYWNrYCB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWU6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IFtdO1xuICAgIHRoaXMuX2NvbnRleHRzID0gdGhpcy5fY29udGV4dHMgfHwgW107XG4gICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRoaXMuX2NvbnRleHRzLnB1c2goY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZXMgYWxsIGVucXVldWVkIGNhbGxiYWNrcyBhbmQgY2xlYXJzIHRoZSBxdWV1ZS4gVGhpcyBpcyBpbnZva2VkIGFmdGVyXG4gICAqIHRoZSBET00gcmVwcmVzZW50YXRpb24gb2YgYSBjb21wb25lbnQgaGFzIGJlZW4gY3JlYXRlZCBvciB1cGRhdGVkLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG5vdGlmeUFsbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgICB2YXIgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cztcbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgsXG4gICAgICAgICdNaXNtYXRjaGVkIGxpc3Qgb2YgY29udGV4dHMgaW4gY2FsbGJhY2sgcXVldWUnXG4gICAgICApIDogaW52YXJpYW50KGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkpO1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSk7XG4gICAgICB9XG4gICAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGludGVybmFsIHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENhbGxiYWNrUXVldWUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbGxiYWNrUXVldWU7XG4iXX0=
},{"./Object.assign":121,"./PooledClass":122,"./invariant":230,"_process":95}],101:[function(require,module,exports){
"use strict";function shouldUseChangeEvent(elem){return"SELECT"===elem.nodeName||"INPUT"===elem.nodeName&&"file"===elem.type}function manualDispatchChangeEvent(nativeEvent){var event=SyntheticEvent.getPooled(eventTypes.change,activeElementID,nativeEvent);EventPropagators.accumulateTwoPhaseDispatches(event),ReactUpdates.batchedUpdates(runEventInBatch,event)}function runEventInBatch(event){EventPluginHub.enqueueEvents(event),EventPluginHub.processEventQueue()}function startWatchingForChangeEventIE8(target,targetID){activeElement=target,activeElementID=targetID,activeElement.attachEvent("onchange",manualDispatchChangeEvent)}function stopWatchingForChangeEventIE8(){activeElement&&(activeElement.detachEvent("onchange",manualDispatchChangeEvent),activeElement=null,activeElementID=null)}function getTargetIDForChangeEvent(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType===topLevelTypes.topChange?topLevelTargetID:void 0}function handleEventsForChangeEventIE8(topLevelType,topLevelTarget,topLevelTargetID){topLevelType===topLevelTypes.topFocus?(stopWatchingForChangeEventIE8(),startWatchingForChangeEventIE8(topLevelTarget,topLevelTargetID)):topLevelType===topLevelTypes.topBlur&&stopWatchingForChangeEventIE8()}function startWatchingForValueChange(target,targetID){activeElement=target,activeElementID=targetID,activeElementValue=target.value,activeElementValueProp=Object.getOwnPropertyDescriptor(target.constructor.prototype,"value"),Object.defineProperty(activeElement,"value",newValueProp),activeElement.attachEvent("onpropertychange",handlePropertyChange)}function stopWatchingForValueChange(){activeElement&&(delete activeElement.value,activeElement.detachEvent("onpropertychange",handlePropertyChange),activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null)}function handlePropertyChange(nativeEvent){if("value"===nativeEvent.propertyName){var value=nativeEvent.srcElement.value;value!==activeElementValue&&(activeElementValue=value,manualDispatchChangeEvent(nativeEvent))}}function getTargetIDForInputEvent(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType===topLevelTypes.topInput?topLevelTargetID:void 0}function handleEventsForInputEventIE(topLevelType,topLevelTarget,topLevelTargetID){topLevelType===topLevelTypes.topFocus?(stopWatchingForValueChange(),startWatchingForValueChange(topLevelTarget,topLevelTargetID)):topLevelType===topLevelTypes.topBlur&&stopWatchingForValueChange()}function getTargetIDForInputEventIE(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType!==topLevelTypes.topSelectionChange&&topLevelType!==topLevelTypes.topKeyUp&&topLevelType!==topLevelTypes.topKeyDown||!activeElement||activeElement.value===activeElementValue?void 0:(activeElementValue=activeElement.value,activeElementID)}function shouldUseClickEvent(elem){return"INPUT"===elem.nodeName&&("checkbox"===elem.type||"radio"===elem.type)}function getTargetIDForClickEvent(topLevelType,topLevelTarget,topLevelTargetID){return topLevelType===topLevelTypes.topClick?topLevelTargetID:void 0}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("./ExecutionEnvironment"),ReactUpdates=require("./ReactUpdates"),SyntheticEvent=require("./SyntheticEvent"),isEventSupported=require("./isEventSupported"),isTextInputElement=require("./isTextInputElement"),keyOf=require("./keyOf"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={change:{phasedRegistrationNames:{bubbled:keyOf({onChange:null}),captured:keyOf({onChangeCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topChange,topLevelTypes.topClick,topLevelTypes.topFocus,topLevelTypes.topInput,topLevelTypes.topKeyDown,topLevelTypes.topKeyUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null,doesChangeEventBubble=!1;ExecutionEnvironment.canUseDOM&&(doesChangeEventBubble=isEventSupported("change")&&(!("documentMode"in document)||document.documentMode>8));var isInputEventSupported=!1;ExecutionEnvironment.canUseDOM&&(isInputEventSupported=isEventSupported("input")&&(!("documentMode"in document)||document.documentMode>9));var newValueProp={get:function(){return activeElementValueProp.get.call(this)},set:function(val){activeElementValue=""+val,activeElementValueProp.set.call(this,val)}},ChangeEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var getTargetIDFunc,handleEventFunc;if(shouldUseChangeEvent(topLevelTarget)?doesChangeEventBubble?getTargetIDFunc=getTargetIDForChangeEvent:handleEventFunc=handleEventsForChangeEventIE8:isTextInputElement(topLevelTarget)?isInputEventSupported?getTargetIDFunc=getTargetIDForInputEvent:(getTargetIDFunc=getTargetIDForInputEventIE,handleEventFunc=handleEventsForInputEventIE):shouldUseClickEvent(topLevelTarget)&&(getTargetIDFunc=getTargetIDForClickEvent),getTargetIDFunc){var targetID=getTargetIDFunc(topLevelType,topLevelTarget,topLevelTargetID);if(targetID){var event=SyntheticEvent.getPooled(eventTypes.change,targetID,nativeEvent);return EventPropagators.accumulateTwoPhaseDispatches(event),event}}handleEventFunc&&handleEventFunc(topLevelType,topLevelTarget,topLevelTargetID)}};module.exports=ChangeEventPlugin;


},{"./EventConstants":109,"./EventPluginHub":111,"./EventPropagators":114,"./ExecutionEnvironment":115,"./ReactUpdates":182,"./SyntheticEvent":190,"./isEventSupported":231,"./isTextInputElement":233,"./keyOf":236}],102:[function(require,module,exports){
"use strict";var nextReactRootIndex=0,ClientReactRootIndex={createReactRootIndex:function(){return nextReactRootIndex++}};module.exports=ClientReactRootIndex;


},{}],103:[function(require,module,exports){
(function (process){
"use strict";function insertChildAt(parentNode,childNode,index){parentNode.insertBefore(childNode,parentNode.childNodes[index]||null)}var Danger=require("./Danger"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),setTextContent=require("./setTextContent"),invariant=require("./invariant"),DOMChildrenOperations={dangerouslyReplaceNodeWithMarkup:Danger.dangerouslyReplaceNodeWithMarkup,updateTextContent:setTextContent,processUpdates:function(updates,markupList){for(var update,initialChildren=null,updatedChildren=null,i=0;i<updates.length;i++)if(update=updates[i],update.type===ReactMultiChildUpdateTypes.MOVE_EXISTING||update.type===ReactMultiChildUpdateTypes.REMOVE_NODE){var updatedIndex=update.fromIndex,updatedChild=update.parentNode.childNodes[updatedIndex],parentID=update.parentID;"production"!==process.env.NODE_ENV?invariant(updatedChild,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",updatedIndex,parentID):invariant(updatedChild),initialChildren=initialChildren||{},initialChildren[parentID]=initialChildren[parentID]||[],initialChildren[parentID][updatedIndex]=updatedChild,updatedChildren=updatedChildren||[],updatedChildren.push(updatedChild)}var renderedMarkup=Danger.dangerouslyRenderMarkup(markupList);if(updatedChildren)for(var j=0;j<updatedChildren.length;j++)updatedChildren[j].parentNode.removeChild(updatedChildren[j]);for(var k=0;k<updates.length;k++)switch(update=updates[k],update.type){case ReactMultiChildUpdateTypes.INSERT_MARKUP:insertChildAt(update.parentNode,renderedMarkup[update.markupIndex],update.toIndex);break;case ReactMultiChildUpdateTypes.MOVE_EXISTING:insertChildAt(update.parentNode,initialChildren[update.parentID][update.fromIndex],update.toIndex);break;case ReactMultiChildUpdateTypes.TEXT_CONTENT:setTextContent(update.parentNode,update.textContent);break;case ReactMultiChildUpdateTypes.REMOVE_NODE:}}};module.exports=DOMChildrenOperations;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFZQSxZQWdCQSxTQUFTLGVBQWMsV0FBWSxVQUFXLE9BSzVDLFdBQVcsYUFDVCxVQUNBLFdBQVcsV0FBVyxRQUFVLE1BckJwQyxHQUFJLFFBQVMsUUFBUSxZQUNqQiwyQkFBNkIsUUFBUSxnQ0FFckMsZUFBaUIsUUFBUSxvQkFDekIsVUFBWSxRQUFRLGVBd0JwQix1QkFFRixpQ0FBa0MsT0FBTyxpQ0FFekMsa0JBQW1CLGVBVW5CLGVBQWdCLFNBQVMsUUFBUyxZQU9oQyxJQUFLLEdBTkQsUUFFQSxnQkFBa0IsS0FFbEIsZ0JBQWtCLEtBRWIsRUFBSSxFQUFHLEVBQUksUUFBUSxPQUFRLElBRWxDLEdBREEsT0FBUyxRQUFRLEdBQ2IsT0FBTyxPQUFTLDJCQUEyQixlQUMzQyxPQUFPLE9BQVMsMkJBQTJCLFlBQWEsQ0FDMUQsR0FBSSxjQUFlLE9BQU8sVUFDdEIsYUFBZSxPQUFPLFdBQVcsV0FBVyxjQUM1QyxTQUFXLE9BQU8sUUFFckIsZ0JBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3ZDLGFBQ0EsbVZBTUEsYUFDQSxVQUNFLFVBQVUsY0FFZCxnQkFBa0Isb0JBQ2xCLGdCQUFnQixVQUFZLGdCQUFnQixjQUM1QyxnQkFBZ0IsVUFBVSxjQUFnQixhQUUxQyxnQkFBa0Isb0JBQ2xCLGdCQUFnQixLQUFLLGNBSXpCLEdBQUksZ0JBQWlCLE9BQU8sd0JBQXdCLFdBR3BELElBQUksZ0JBQ0YsSUFBSyxHQUFJLEdBQUksRUFBRyxFQUFJLGdCQUFnQixPQUFRLElBQzFDLGdCQUFnQixHQUFHLFdBQVcsWUFBWSxnQkFBZ0IsR0FJOUQsS0FBSyxHQUFJLEdBQUksRUFBRyxFQUFJLFFBQVEsT0FBUSxJQUVsQyxPQURBLE9BQVMsUUFBUSxHQUNULE9BQU8sTUFDYixJQUFLLDRCQUEyQixjQUM5QixjQUNFLE9BQU8sV0FDUCxlQUFlLE9BQU8sYUFDdEIsT0FBTyxRQUVULE1BQ0YsS0FBSyw0QkFBMkIsY0FDOUIsY0FDRSxPQUFPLFdBQ1AsZ0JBQWdCLE9BQU8sVUFBVSxPQUFPLFdBQ3hDLE9BQU8sUUFFVCxNQUNGLEtBQUssNEJBQTJCLGFBQzlCLGVBQ0UsT0FBTyxXQUNQLE9BQU8sWUFFVCxNQUNGLEtBQUssNEJBQTJCLGVBU3hDLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTUNoaWxkcmVuT3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEYW5nZXIgPSByZXF1aXJlKFwiLi9EYW5nZXJcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKFwiLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1wiKTtcblxudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZShcIi4vc2V0VGV4dENvbnRlbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEluc2VydHMgYGNoaWxkTm9kZWAgYXMgYSBjaGlsZCBvZiBgcGFyZW50Tm9kZWAgYXQgdGhlIGBpbmRleGAuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnROb2RlIFBhcmVudCBub2RlIGluIHdoaWNoIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY2hpbGROb2RlIENoaWxkIG5vZGUgdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGluZGV4KSB7XG4gIC8vIEJ5IGV4cGxvaXRpbmcgYXJyYXlzIHJldHVybmluZyBgdW5kZWZpbmVkYCBmb3IgYW4gdW5kZWZpbmVkIGluZGV4LCB3ZSBjYW5cbiAgLy8gcmVseSBleGNsdXNpdmVseSBvbiBgaW5zZXJ0QmVmb3JlKG5vZGUsIG51bGwpYCBpbnN0ZWFkIG9mIGFsc28gdXNpbmdcbiAgLy8gYGFwcGVuZENoaWxkKG5vZGUpYC4gSG93ZXZlciwgdXNpbmcgYHVuZGVmaW5lZGAgaXMgbm90IGFsbG93ZWQgYnkgYWxsXG4gIC8vIGJyb3dzZXJzIHNvIHdlIG11c3QgcmVwbGFjZSBpdCB3aXRoIGBudWxsYC5cbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoXG4gICAgY2hpbGROb2RlLFxuICAgIHBhcmVudE5vZGUuY2hpbGROb2Rlc1tpbmRleF0gfHwgbnVsbFxuICApO1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIHVwZGF0aW5nIHdpdGggRE9NIGNoaWxkcmVuLlxuICovXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0ge1xuXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAsXG5cbiAgdXBkYXRlVGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYnkgcHJvY2Vzc2luZyBhIHNlcmllcyBvZiB1cGRhdGVzLiBUaGVcbiAgICogdXBkYXRlIGNvbmZpZ3VyYXRpb25zIGFyZSBlYWNoIGV4cGVjdGVkIHRvIGhhdmUgYSBgcGFyZW50Tm9kZWAgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8b2JqZWN0Pn0gdXBkYXRlcyBMaXN0IG9mIHVwZGF0ZSBjb25maWd1cmF0aW9ucy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXBMaXN0IExpc3Qgb2YgbWFya3VwIHN0cmluZ3MuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHJvY2Vzc1VwZGF0ZXM6IGZ1bmN0aW9uKHVwZGF0ZXMsIG1hcmt1cExpc3QpIHtcbiAgICB2YXIgdXBkYXRlO1xuICAgIC8vIE1hcHBpbmcgZnJvbSBwYXJlbnQgSURzIHRvIGluaXRpYWwgY2hpbGQgb3JkZXJpbmdzLlxuICAgIHZhciBpbml0aWFsQ2hpbGRyZW4gPSBudWxsO1xuICAgIC8vIExpc3Qgb2YgY2hpbGRyZW4gdGhhdCB3aWxsIGJlIG1vdmVkIG9yIHJlbW92ZWQuXG4gICAgdmFyIHVwZGF0ZWRDaGlsZHJlbiA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNbaV07XG4gICAgICBpZiAodXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcgfHxcbiAgICAgICAgICB1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUpIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRJbmRleCA9IHVwZGF0ZS5mcm9tSW5kZXg7XG4gICAgICAgIHZhciB1cGRhdGVkQ2hpbGQgPSB1cGRhdGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzW3VwZGF0ZWRJbmRleF07XG4gICAgICAgIHZhciBwYXJlbnRJRCA9IHVwZGF0ZS5wYXJlbnRJRDtcblxuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIHVwZGF0ZWRDaGlsZCxcbiAgICAgICAgICAncHJvY2Vzc1VwZGF0ZXMoKTogVW5hYmxlIHRvIGZpbmQgY2hpbGQgJXMgb2YgZWxlbWVudC4gVGhpcyAnICtcbiAgICAgICAgICAncHJvYmFibHkgbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSAnICtcbiAgICAgICAgICAnYnJvd3NlciksIHVzdWFsbHkgZHVlIHRvIGZvcmdldHRpbmcgYSA8dGJvZHk+IHdoZW4gdXNpbmcgdGFibGVzLCAnICtcbiAgICAgICAgICAnbmVzdGluZyB0YWdzIGxpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyAnICtcbiAgICAgICAgICAnaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgJyArXG4gICAgICAgICAgJ3dpdGggUmVhY3QgSUQgYCVzYC4nLFxuICAgICAgICAgIHVwZGF0ZWRJbmRleCxcbiAgICAgICAgICBwYXJlbnRJRFxuICAgICAgICApIDogaW52YXJpYW50KHVwZGF0ZWRDaGlsZCkpO1xuXG4gICAgICAgIGluaXRpYWxDaGlsZHJlbiA9IGluaXRpYWxDaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XSA9IHVwZGF0ZWRDaGlsZDtcblxuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbi5wdXNoKHVwZGF0ZWRDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlcmVkTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVuZGVyTWFya3VwKG1hcmt1cExpc3QpO1xuXG4gICAgLy8gUmVtb3ZlIHVwZGF0ZWQgY2hpbGRyZW4gZmlyc3Qgc28gdGhhdCBgdG9JbmRleGAgaXMgY29uc2lzdGVudC5cbiAgICBpZiAodXBkYXRlZENoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHVwZGF0ZWRDaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICB1cGRhdGVkQ2hpbGRyZW5bal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh1cGRhdGVkQ2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdXBkYXRlcy5sZW5ndGg7IGsrKykge1xuICAgICAgdXBkYXRlID0gdXBkYXRlc1trXTtcbiAgICAgIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQOlxuICAgICAgICAgIGluc2VydENoaWxkQXQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIHJlbmRlcmVkTWFya3VwW3VwZGF0ZS5tYXJrdXBJbmRleF0sXG4gICAgICAgICAgICB1cGRhdGUudG9JbmRleFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORzpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICBpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSxcbiAgICAgICAgICAgIHVwZGF0ZS50b0luZGV4XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIHVwZGF0ZS50ZXh0Q29udGVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgLy8gQWxyZWFkeSByZW1vdmVkIGJ5IHRoZSBmb3ItbG9vcCBhYm92ZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7XG4iXX0=
},{"./Danger":106,"./ReactMultiChildUpdateTypes":167,"./invariant":230,"./setTextContent":244,"_process":95}],104:[function(require,module,exports){
(function (process){
"use strict";function checkMask(value,bitmask){return(value&bitmask)===bitmask}var invariant=require("./invariant"),DOMPropertyInjection={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(domPropertyConfig){var Properties=domPropertyConfig.Properties||{},DOMAttributeNames=domPropertyConfig.DOMAttributeNames||{},DOMPropertyNames=domPropertyConfig.DOMPropertyNames||{},DOMMutationMethods=domPropertyConfig.DOMMutationMethods||{};domPropertyConfig.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);for(var propName in Properties){"production"!==process.env.NODE_ENV?invariant(!DOMProperty.isStandardName.hasOwnProperty(propName),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",propName):invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)),DOMProperty.isStandardName[propName]=!0;var lowerCased=propName.toLowerCase();if(DOMProperty.getPossibleStandardName[lowerCased]=propName,DOMAttributeNames.hasOwnProperty(propName)){var attributeName=DOMAttributeNames[propName];DOMProperty.getPossibleStandardName[attributeName]=propName,DOMProperty.getAttributeName[propName]=attributeName}else DOMProperty.getAttributeName[propName]=lowerCased;DOMProperty.getPropertyName[propName]=DOMPropertyNames.hasOwnProperty(propName)?DOMPropertyNames[propName]:propName,DOMMutationMethods.hasOwnProperty(propName)?DOMProperty.getMutationMethod[propName]=DOMMutationMethods[propName]:DOMProperty.getMutationMethod[propName]=null;var propConfig=Properties[propName];DOMProperty.mustUseAttribute[propName]=checkMask(propConfig,DOMPropertyInjection.MUST_USE_ATTRIBUTE),DOMProperty.mustUseProperty[propName]=checkMask(propConfig,DOMPropertyInjection.MUST_USE_PROPERTY),DOMProperty.hasSideEffects[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_SIDE_EFFECTS),DOMProperty.hasBooleanValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_BOOLEAN_VALUE),DOMProperty.hasNumericValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_NUMERIC_VALUE),DOMProperty.hasPositiveNumericValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE),DOMProperty.hasOverloadedBooleanValue[propName]=checkMask(propConfig,DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE),"production"!==process.env.NODE_ENV?invariant(!DOMProperty.mustUseAttribute[propName]||!DOMProperty.mustUseProperty[propName],"DOMProperty: Cannot require using both attribute and property: %s",propName):invariant(!DOMProperty.mustUseAttribute[propName]||!DOMProperty.mustUseProperty[propName]),"production"!==process.env.NODE_ENV?invariant(DOMProperty.mustUseProperty[propName]||!DOMProperty.hasSideEffects[propName],"DOMProperty: Properties that have side effects must use property: %s",propName):invariant(DOMProperty.mustUseProperty[propName]||!DOMProperty.hasSideEffects[propName]),"production"!==process.env.NODE_ENV?invariant(!!DOMProperty.hasBooleanValue[propName]+!!DOMProperty.hasNumericValue[propName]+!!DOMProperty.hasOverloadedBooleanValue[propName]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",propName):invariant(!!DOMProperty.hasBooleanValue[propName]+!!DOMProperty.hasNumericValue[propName]+!!DOMProperty.hasOverloadedBooleanValue[propName]<=1)}}},defaultValueCache={},DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(attributeName){for(var i=0;i<DOMProperty._isCustomAttributeFunctions.length;i++){var isCustomAttributeFn=DOMProperty._isCustomAttributeFunctions[i];if(isCustomAttributeFn(attributeName))return!0}return!1},getDefaultValueForProperty:function(nodeName,prop){var testElement,nodeDefaults=defaultValueCache[nodeName];return nodeDefaults||(defaultValueCache[nodeName]=nodeDefaults={}),prop in nodeDefaults||(testElement=document.createElement(nodeName),nodeDefaults[prop]=testElement[prop]),nodeDefaults[prop]},injection:DOMPropertyInjection};module.exports=DOMProperty;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./invariant":230,"_process":95}],105:[function(require,module,exports){
(function (process){
"use strict";function shouldIgnoreValue(name,value){return null==value||DOMProperty.hasBooleanValue[name]&&!value||DOMProperty.hasNumericValue[name]&&isNaN(value)||DOMProperty.hasPositiveNumericValue[name]&&1>value||DOMProperty.hasOverloadedBooleanValue[name]&&value===!1}var DOMProperty=require("./DOMProperty"),quoteAttributeValueForBrowser=require("./quoteAttributeValueForBrowser"),warning=require("./warning");if("production"!==process.env.NODE_ENV)var reactProps={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},warnedProperties={},warnUnknownProperty=function(name){if(!(reactProps.hasOwnProperty(name)&&reactProps[name]||warnedProperties.hasOwnProperty(name)&&warnedProperties[name])){warnedProperties[name]=!0;var lowerCasedName=name.toLowerCase(),standardName=DOMProperty.isCustomAttribute(lowerCasedName)?lowerCasedName:DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName)?DOMProperty.getPossibleStandardName[lowerCasedName]:null;"production"!==process.env.NODE_ENV?warning(null==standardName,"Unknown DOM property %s. Did you mean %s?",name,standardName):null}};var DOMPropertyOperations={createMarkupForID:function(id){return DOMProperty.ID_ATTRIBUTE_NAME+"="+quoteAttributeValueForBrowser(id)},createMarkupForProperty:function(name,value){if(DOMProperty.isStandardName.hasOwnProperty(name)&&DOMProperty.isStandardName[name]){if(shouldIgnoreValue(name,value))return"";var attributeName=DOMProperty.getAttributeName[name];return DOMProperty.hasBooleanValue[name]||DOMProperty.hasOverloadedBooleanValue[name]&&value===!0?attributeName:attributeName+"="+quoteAttributeValueForBrowser(value)}return DOMProperty.isCustomAttribute(name)?null==value?"":name+"="+quoteAttributeValueForBrowser(value):("production"!==process.env.NODE_ENV&&warnUnknownProperty(name),null)},setValueForProperty:function(node,name,value){if(DOMProperty.isStandardName.hasOwnProperty(name)&&DOMProperty.isStandardName[name]){var mutationMethod=DOMProperty.getMutationMethod[name];if(mutationMethod)mutationMethod(node,value);else if(shouldIgnoreValue(name,value))this.deleteValueForProperty(node,name);else if(DOMProperty.mustUseAttribute[name])node.setAttribute(DOMProperty.getAttributeName[name],""+value);else{var propName=DOMProperty.getPropertyName[name];DOMProperty.hasSideEffects[name]&&""+node[propName]==""+value||(node[propName]=value)}}else DOMProperty.isCustomAttribute(name)?null==value?node.removeAttribute(name):node.setAttribute(name,""+value):"production"!==process.env.NODE_ENV&&warnUnknownProperty(name)},deleteValueForProperty:function(node,name){if(DOMProperty.isStandardName.hasOwnProperty(name)&&DOMProperty.isStandardName[name]){var mutationMethod=DOMProperty.getMutationMethod[name];if(mutationMethod)mutationMethod(node,void 0);else if(DOMProperty.mustUseAttribute[name])node.removeAttribute(DOMProperty.getAttributeName[name]);else{var propName=DOMProperty.getPropertyName[name],defaultValue=DOMProperty.getDefaultValueForProperty(node.nodeName,propName);DOMProperty.hasSideEffects[name]&&""+node[propName]===defaultValue||(node[propName]=defaultValue)}}else DOMProperty.isCustomAttribute(name)?node.removeAttribute(name):"production"!==process.env.NODE_ENV&&warnUnknownProperty(name)}};module.exports=DOMPropertyOperations;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./DOMProperty":104,"./quoteAttributeValueForBrowser":242,"./warning":249,"_process":95}],106:[function(require,module,exports){
(function (process){
"use strict";function getNodeName(markup){return markup.substring(1,markup.indexOf(" "))}var ExecutionEnvironment=require("./ExecutionEnvironment"),createNodesFromMarkup=require("./createNodesFromMarkup"),emptyFunction=require("./emptyFunction"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),OPEN_TAG_NAME_EXP=/^(<[^ \/>]+)/,RESULT_INDEX_ATTR="data-danger-index",Danger={dangerouslyRenderMarkup:function(markupList){"production"!==process.env.NODE_ENV?invariant(ExecutionEnvironment.canUseDOM,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):invariant(ExecutionEnvironment.canUseDOM);for(var nodeName,markupByNodeName={},i=0;i<markupList.length;i++)"production"!==process.env.NODE_ENV?invariant(markupList[i],"dangerouslyRenderMarkup(...): Missing markup."):invariant(markupList[i]),nodeName=getNodeName(markupList[i]),nodeName=getMarkupWrap(nodeName)?nodeName:"*",markupByNodeName[nodeName]=markupByNodeName[nodeName]||[],markupByNodeName[nodeName][i]=markupList[i];var resultList=[],resultListAssignmentCount=0;for(nodeName in markupByNodeName)if(markupByNodeName.hasOwnProperty(nodeName)){var resultIndex,markupListByNodeName=markupByNodeName[nodeName];for(resultIndex in markupListByNodeName)if(markupListByNodeName.hasOwnProperty(resultIndex)){var markup=markupListByNodeName[resultIndex];markupListByNodeName[resultIndex]=markup.replace(OPEN_TAG_NAME_EXP,"$1 "+RESULT_INDEX_ATTR+'="'+resultIndex+'" ')}for(var renderNodes=createNodesFromMarkup(markupListByNodeName.join(""),emptyFunction),j=0;j<renderNodes.length;++j){var renderNode=renderNodes[j];renderNode.hasAttribute&&renderNode.hasAttribute(RESULT_INDEX_ATTR)?(resultIndex=+renderNode.getAttribute(RESULT_INDEX_ATTR),renderNode.removeAttribute(RESULT_INDEX_ATTR),"production"!==process.env.NODE_ENV?invariant(!resultList.hasOwnProperty(resultIndex),"Danger: Assigning to an already-occupied result index."):invariant(!resultList.hasOwnProperty(resultIndex)),resultList[resultIndex]=renderNode,resultListAssignmentCount+=1):"production"!==process.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",renderNode)}}return"production"!==process.env.NODE_ENV?invariant(resultListAssignmentCount===resultList.length,"Danger: Did not assign to every index of resultList."):invariant(resultListAssignmentCount===resultList.length),"production"!==process.env.NODE_ENV?invariant(resultList.length===markupList.length,"Danger: Expected markup to render %s nodes, but rendered %s.",markupList.length,resultList.length):invariant(resultList.length===markupList.length),resultList},dangerouslyReplaceNodeWithMarkup:function(oldChild,markup){"production"!==process.env.NODE_ENV?invariant(ExecutionEnvironment.canUseDOM,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):invariant(ExecutionEnvironment.canUseDOM),"production"!==process.env.NODE_ENV?invariant(markup,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):invariant(markup),"production"!==process.env.NODE_ENV?invariant("html"!==oldChild.tagName.toLowerCase(),"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See React.renderToString()."):invariant("html"!==oldChild.tagName.toLowerCase());var newChild=createNodesFromMarkup(markup,emptyFunction)[0];oldChild.parentNode.replaceChild(newChild,oldChild)}};module.exports=Danger;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ExecutionEnvironment":115,"./createNodesFromMarkup":207,"./emptyFunction":209,"./getMarkupWrap":222,"./invariant":230,"_process":95}],107:[function(require,module,exports){
"use strict";var keyOf=require("./keyOf"),DefaultEventPluginOrder=[keyOf({ResponderEventPlugin:null}),keyOf({SimpleEventPlugin:null}),keyOf({TapEventPlugin:null}),keyOf({EnterLeaveEventPlugin:null}),keyOf({ChangeEventPlugin:null}),keyOf({SelectEventPlugin:null}),keyOf({BeforeInputEventPlugin:null}),keyOf({AnalyticsEventPlugin:null}),keyOf({MobileSafariClickEventPlugin:null})];module.exports=DefaultEventPluginOrder;


},{"./keyOf":236}],108:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),ReactMount=require("./ReactMount"),keyOf=require("./keyOf"),topLevelTypes=EventConstants.topLevelTypes,getFirstReactDOM=ReactMount.getFirstReactDOM,eventTypes={mouseEnter:{registrationName:keyOf({onMouseEnter:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]},mouseLeave:{registrationName:keyOf({onMouseLeave:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]}},extractedEvents=[null,null],EnterLeaveEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){if(topLevelType===topLevelTypes.topMouseOver&&(nativeEvent.relatedTarget||nativeEvent.fromElement))return null;if(topLevelType!==topLevelTypes.topMouseOut&&topLevelType!==topLevelTypes.topMouseOver)return null;var win;if(topLevelTarget.window===topLevelTarget)win=topLevelTarget;else{var doc=topLevelTarget.ownerDocument;win=doc?doc.defaultView||doc.parentWindow:window}var from,to;if(topLevelType===topLevelTypes.topMouseOut?(from=topLevelTarget,to=getFirstReactDOM(nativeEvent.relatedTarget||nativeEvent.toElement)||win):(from=win,to=topLevelTarget),from===to)return null;var fromID=from?ReactMount.getID(from):"",toID=to?ReactMount.getID(to):"",leave=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,fromID,nativeEvent);leave.type="mouseleave",leave.target=from,leave.relatedTarget=to;var enter=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,toID,nativeEvent);return enter.type="mouseenter",enter.target=to,enter.relatedTarget=from,EventPropagators.accumulateEnterLeaveDispatches(leave,enter,fromID,toID),extractedEvents[0]=leave,extractedEvents[1]=enter,extractedEvents}};module.exports=EnterLeaveEventPlugin;


},{"./EventConstants":109,"./EventPropagators":114,"./ReactMount":165,"./SyntheticMouseEvent":194,"./keyOf":236}],109:[function(require,module,exports){
"use strict";var keyMirror=require("./keyMirror"),PropagationPhases=keyMirror({bubbled:null,captured:null}),topLevelTypes=keyMirror({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),EventConstants={topLevelTypes:topLevelTypes,PropagationPhases:PropagationPhases};module.exports=EventConstants;


},{"./keyMirror":235}],110:[function(require,module,exports){
(function (process){
var emptyFunction=require("./emptyFunction"),EventListener={listen:function(target,eventType,callback){return target.addEventListener?(target.addEventListener(eventType,callback,!1),{remove:function(){target.removeEventListener(eventType,callback,!1)}}):target.attachEvent?(target.attachEvent("on"+eventType,callback),{remove:function(){target.detachEvent("on"+eventType,callback)}}):void 0},capture:function(target,eventType,callback){return target.addEventListener?(target.addEventListener(eventType,callback,!0),{remove:function(){target.removeEventListener(eventType,callback,!0)}}):("production"!==process.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:emptyFunction})},registerDefault:function(){}};module.exports=EventListener;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRMaXN0ZW5lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBbUJBLEdBQUksZUFBZ0IsUUFBUSxtQkFNeEIsZUFTRixPQUFRLFNBQVMsT0FBUSxVQUFXLFVBQ2xDLE1BQUksUUFBTyxrQkFDVCxPQUFPLGlCQUFpQixVQUFXLFVBQVUsSUFFM0MsT0FBUSxXQUNOLE9BQU8sb0JBQW9CLFVBQVcsVUFBVSxNQUczQyxPQUFPLGFBQ2hCLE9BQU8sWUFBWSxLQUFPLFVBQVcsV0FFbkMsT0FBUSxXQUNOLE9BQU8sWUFBWSxLQUFPLFVBQVcsYUFKcEMsUUFrQlQsUUFBUyxTQUFTLE9BQVEsVUFBVyxVQUNuQyxNQUFLLFFBQU8sa0JBWVYsT0FBTyxpQkFBaUIsVUFBVyxVQUFVLElBRTNDLE9BQVEsV0FDTixPQUFPLG9CQUFvQixVQUFXLFVBQVUsT0FkaEQsZUFBaUIsUUFBUSxJQUFJLFVBQy9CLFFBQVEsTUFDTixnS0FNRixPQUFRLGlCQVlkLGdCQUFpQixhQUduQixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICtcbiAgICAgICAgICAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArXG4gICAgICAgICAgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24oKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuIl19
},{"./emptyFunction":209,"_process":95}],111:[function(require,module,exports){
(function (process){
"use strict";function validateInstanceHandle(){var valid=InstanceHandle&&InstanceHandle.traverseTwoPhase&&InstanceHandle.traverseEnterLeave;"production"!==process.env.NODE_ENV?invariant(valid,"InstanceHandle not injected before use!"):invariant(valid)}var EventPluginRegistry=require("./EventPluginRegistry"),EventPluginUtils=require("./EventPluginUtils"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("./invariant"),listenerBank={},eventQueue=null,executeDispatchesAndRelease=function(event){if(event){var executeDispatch=EventPluginUtils.executeDispatch,PluginModule=EventPluginRegistry.getPluginModuleForEvent(event);PluginModule&&PluginModule.executeDispatch&&(executeDispatch=PluginModule.executeDispatch),EventPluginUtils.executeDispatchesInOrder(event,executeDispatch),event.isPersistent()||event.constructor.release(event)}},InstanceHandle=null,EventPluginHub={injection:{injectMount:EventPluginUtils.injection.injectMount,injectInstanceHandle:function(InjectedInstanceHandle){InstanceHandle=InjectedInstanceHandle,"production"!==process.env.NODE_ENV&&validateInstanceHandle()},getInstanceHandle:function(){return"production"!==process.env.NODE_ENV&&validateInstanceHandle(),InstanceHandle},injectEventPluginOrder:EventPluginRegistry.injectEventPluginOrder,injectEventPluginsByName:EventPluginRegistry.injectEventPluginsByName},eventNameDispatchConfigs:EventPluginRegistry.eventNameDispatchConfigs,registrationNameModules:EventPluginRegistry.registrationNameModules,putListener:function(id,registrationName,listener){"production"!==process.env.NODE_ENV?invariant(!listener||"function"==typeof listener,"Expected %s listener to be a function, instead got type %s",registrationName,typeof listener):invariant(!listener||"function"==typeof listener);var bankForRegistrationName=listenerBank[registrationName]||(listenerBank[registrationName]={});bankForRegistrationName[id]=listener},getListener:function(id,registrationName){var bankForRegistrationName=listenerBank[registrationName];return bankForRegistrationName&&bankForRegistrationName[id]},deleteListener:function(id,registrationName){var bankForRegistrationName=listenerBank[registrationName];bankForRegistrationName&&delete bankForRegistrationName[id]},deleteAllListeners:function(id){for(var registrationName in listenerBank)delete listenerBank[registrationName][id]},extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){for(var events,plugins=EventPluginRegistry.plugins,i=0,l=plugins.length;l>i;i++){var possiblePlugin=plugins[i];if(possiblePlugin){var extractedEvents=possiblePlugin.extractEvents(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent);extractedEvents&&(events=accumulateInto(events,extractedEvents))}}return events},enqueueEvents:function(events){events&&(eventQueue=accumulateInto(eventQueue,events))},processEventQueue:function(){var processingEventQueue=eventQueue;eventQueue=null,forEachAccumulated(processingEventQueue,executeDispatchesAndRelease),"production"!==process.env.NODE_ENV?invariant(!eventQueue,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):invariant(!eventQueue)},__purge:function(){listenerBank={}},__getListenerBank:function(){return listenerBank}};module.exports=EventPluginHub;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./EventPluginRegistry":112,"./EventPluginUtils":113,"./accumulateInto":200,"./forEachAccumulated":215,"./invariant":230,"_process":95}],112:[function(require,module,exports){
(function (process){
"use strict";function recomputePluginOrdering(){if(EventPluginOrder)for(var pluginName in namesToPlugins){var PluginModule=namesToPlugins[pluginName],pluginIndex=EventPluginOrder.indexOf(pluginName);if("production"!==process.env.NODE_ENV?invariant(pluginIndex>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",pluginName):invariant(pluginIndex>-1),!EventPluginRegistry.plugins[pluginIndex]){"production"!==process.env.NODE_ENV?invariant(PluginModule.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",pluginName):invariant(PluginModule.extractEvents),EventPluginRegistry.plugins[pluginIndex]=PluginModule;var publishedEvents=PluginModule.eventTypes;for(var eventName in publishedEvents)"production"!==process.env.NODE_ENV?invariant(publishEventForPlugin(publishedEvents[eventName],PluginModule,eventName),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",eventName,pluginName):invariant(publishEventForPlugin(publishedEvents[eventName],PluginModule,eventName))}}}function publishEventForPlugin(dispatchConfig,PluginModule,eventName){"production"!==process.env.NODE_ENV?invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",eventName):invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)),EventPluginRegistry.eventNameDispatchConfigs[eventName]=dispatchConfig;var phasedRegistrationNames=dispatchConfig.phasedRegistrationNames;if(phasedRegistrationNames){for(var phaseName in phasedRegistrationNames)if(phasedRegistrationNames.hasOwnProperty(phaseName)){var phasedRegistrationName=phasedRegistrationNames[phaseName];publishRegistrationName(phasedRegistrationName,PluginModule,eventName)}return!0}return dispatchConfig.registrationName?(publishRegistrationName(dispatchConfig.registrationName,PluginModule,eventName),!0):!1}function publishRegistrationName(registrationName,PluginModule,eventName){"production"!==process.env.NODE_ENV?invariant(!EventPluginRegistry.registrationNameModules[registrationName],"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",registrationName):invariant(!EventPluginRegistry.registrationNameModules[registrationName]),EventPluginRegistry.registrationNameModules[registrationName]=PluginModule,EventPluginRegistry.registrationNameDependencies[registrationName]=PluginModule.eventTypes[eventName].dependencies}var invariant=require("./invariant"),EventPluginOrder=null,namesToPlugins={},EventPluginRegistry={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(InjectedEventPluginOrder){"production"!==process.env.NODE_ENV?invariant(!EventPluginOrder,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):invariant(!EventPluginOrder),EventPluginOrder=Array.prototype.slice.call(InjectedEventPluginOrder),recomputePluginOrdering()},injectEventPluginsByName:function(injectedNamesToPlugins){var isOrderingDirty=!1;for(var pluginName in injectedNamesToPlugins)if(injectedNamesToPlugins.hasOwnProperty(pluginName)){var PluginModule=injectedNamesToPlugins[pluginName];namesToPlugins.hasOwnProperty(pluginName)&&namesToPlugins[pluginName]===PluginModule||("production"!==process.env.NODE_ENV?invariant(!namesToPlugins[pluginName],"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",pluginName):invariant(!namesToPlugins[pluginName]),namesToPlugins[pluginName]=PluginModule,isOrderingDirty=!0)}isOrderingDirty&&recomputePluginOrdering()},getPluginModuleForEvent:function(event){var dispatchConfig=event.dispatchConfig;if(dispatchConfig.registrationName)return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName]||null;for(var phase in dispatchConfig.phasedRegistrationNames)if(dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)){var PluginModule=EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];if(PluginModule)return PluginModule}return null},_resetEventPlugins:function(){EventPluginOrder=null;for(var pluginName in namesToPlugins)namesToPlugins.hasOwnProperty(pluginName)&&delete namesToPlugins[pluginName];EventPluginRegistry.plugins.length=0;var eventNameDispatchConfigs=EventPluginRegistry.eventNameDispatchConfigs;for(var eventName in eventNameDispatchConfigs)eventNameDispatchConfigs.hasOwnProperty(eventName)&&delete eventNameDispatchConfigs[eventName];var registrationNameModules=EventPluginRegistry.registrationNameModules;for(var registrationName in registrationNameModules)registrationNameModules.hasOwnProperty(registrationName)&&delete registrationNameModules[registrationName]}};module.exports=EventPluginRegistry;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./invariant":230,"_process":95}],113:[function(require,module,exports){
(function (process){
"use strict";function isEndish(topLevelType){return topLevelType===topLevelTypes.topMouseUp||topLevelType===topLevelTypes.topTouchEnd||topLevelType===topLevelTypes.topTouchCancel}function isMoveish(topLevelType){return topLevelType===topLevelTypes.topMouseMove||topLevelType===topLevelTypes.topTouchMove}function isStartish(topLevelType){return topLevelType===topLevelTypes.topMouseDown||topLevelType===topLevelTypes.topTouchStart}function forEachEventDispatch(event,cb){var dispatchListeners=event._dispatchListeners,dispatchIDs=event._dispatchIDs;if("production"!==process.env.NODE_ENV&&validateEventDispatches(event),Array.isArray(dispatchListeners))for(var i=0;i<dispatchListeners.length&&!event.isPropagationStopped();i++)cb(event,dispatchListeners[i],dispatchIDs[i]);else dispatchListeners&&cb(event,dispatchListeners,dispatchIDs)}function executeDispatch(event,listener,domID){event.currentTarget=injection.Mount.getNode(domID);var returnValue=listener(event,domID);return event.currentTarget=null,returnValue}function executeDispatchesInOrder(event,cb){forEachEventDispatch(event,cb),event._dispatchListeners=null,event._dispatchIDs=null}function executeDispatchesInOrderStopAtTrueImpl(event){var dispatchListeners=event._dispatchListeners,dispatchIDs=event._dispatchIDs;if("production"!==process.env.NODE_ENV&&validateEventDispatches(event),Array.isArray(dispatchListeners)){for(var i=0;i<dispatchListeners.length&&!event.isPropagationStopped();i++)if(dispatchListeners[i](event,dispatchIDs[i]))return dispatchIDs[i]}else if(dispatchListeners&&dispatchListeners(event,dispatchIDs))return dispatchIDs;return null}function executeDispatchesInOrderStopAtTrue(event){var ret=executeDispatchesInOrderStopAtTrueImpl(event);return event._dispatchIDs=null,event._dispatchListeners=null,ret}function executeDirectDispatch(event){"production"!==process.env.NODE_ENV&&validateEventDispatches(event);var dispatchListener=event._dispatchListeners,dispatchID=event._dispatchIDs;"production"!==process.env.NODE_ENV?invariant(!Array.isArray(dispatchListener),"executeDirectDispatch(...): Invalid `event`."):invariant(!Array.isArray(dispatchListener));var res=dispatchListener?dispatchListener(event,dispatchID):null;return event._dispatchListeners=null,event._dispatchIDs=null,res}function hasDispatches(event){return!!event._dispatchListeners}var EventConstants=require("./EventConstants"),invariant=require("./invariant"),injection={Mount:null,injectMount:function(InjectedMount){injection.Mount=InjectedMount,"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?invariant(InjectedMount&&InjectedMount.getNode,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode."):invariant(InjectedMount&&InjectedMount.getNode))}},topLevelTypes=EventConstants.topLevelTypes,validateEventDispatches;"production"!==process.env.NODE_ENV&&(validateEventDispatches=function(event){var dispatchListeners=event._dispatchListeners,dispatchIDs=event._dispatchIDs,listenersIsArr=Array.isArray(dispatchListeners),idsIsArr=Array.isArray(dispatchIDs),IDsLen=idsIsArr?dispatchIDs.length:dispatchIDs?1:0,listenersLen=listenersIsArr?dispatchListeners.length:dispatchListeners?1:0;"production"!==process.env.NODE_ENV?invariant(idsIsArr===listenersIsArr&&IDsLen===listenersLen,"EventPluginUtils: Invalid `event`."):invariant(idsIsArr===listenersIsArr&&IDsLen===listenersLen)});var EventPluginUtils={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatch:executeDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,injection:injection,useTouchEvents:!1};module.exports=EventPluginUtils;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./EventConstants":109,"./invariant":230,"_process":95}],114:[function(require,module,exports){
(function (process){
"use strict";function listenerAtPhase(id,event,propagationPhase){var registrationName=event.dispatchConfig.phasedRegistrationNames[propagationPhase];return getListener(id,registrationName)}function accumulateDirectionalDispatches(domID,upwards,event){if("production"!==process.env.NODE_ENV&&!domID)throw new Error("Dispatching id must not be null");var phase=upwards?PropagationPhases.bubbled:PropagationPhases.captured,listener=listenerAtPhase(domID,event,phase);listener&&(event._dispatchListeners=accumulateInto(event._dispatchListeners,listener),event._dispatchIDs=accumulateInto(event._dispatchIDs,domID))}function accumulateTwoPhaseDispatchesSingle(event){event&&event.dispatchConfig.phasedRegistrationNames&&EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker,accumulateDirectionalDispatches,event)}function accumulateDispatches(id,ignoredDirection,event){if(event&&event.dispatchConfig.registrationName){var registrationName=event.dispatchConfig.registrationName,listener=getListener(id,registrationName);listener&&(event._dispatchListeners=accumulateInto(event._dispatchListeners,listener),event._dispatchIDs=accumulateInto(event._dispatchIDs,id))}}function accumulateDirectDispatchesSingle(event){event&&event.dispatchConfig.registrationName&&accumulateDispatches(event.dispatchMarker,null,event)}function accumulateTwoPhaseDispatches(events){forEachAccumulated(events,accumulateTwoPhaseDispatchesSingle)}function accumulateEnterLeaveDispatches(leave,enter,fromID,toID){EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID,toID,accumulateDispatches,leave,enter)}function accumulateDirectDispatches(events){forEachAccumulated(events,accumulateDirectDispatchesSingle)}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),PropagationPhases=EventConstants.PropagationPhases,getListener=EventPluginHub.getListener,EventPropagators={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches};module.exports=EventPropagators;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFlQSxTQUFTLGlCQUFnQixHQUFJLE1BQU8sa0JBQ2xDLEdBQUksa0JBQ0YsTUFBTSxlQUFlLHdCQUF3QixpQkFDL0MsT0FBTyxhQUFZLEdBQUksa0JBU3pCLFFBQVMsaUNBQWdDLE1BQU8sUUFBUyxPQUN2RCxHQUFJLGVBQWlCLFFBQVEsSUFBSSxXQUMxQixNQUNILEtBQU0sSUFBSSxPQUFNLGtDQUdwQixJQUFJLE9BQVEsUUFBVSxrQkFBa0IsUUFBVSxrQkFBa0IsU0FDaEUsU0FBVyxnQkFBZ0IsTUFBTyxNQUFPLE1BQ3pDLFlBQ0YsTUFBTSxtQkFDSixlQUFlLE1BQU0sbUJBQW9CLFVBQzNDLE1BQU0sYUFBZSxlQUFlLE1BQU0sYUFBYyxRQVc1RCxRQUFTLG9DQUFtQyxPQUN0QyxPQUFTLE1BQU0sZUFBZSx5QkFDaEMsZUFBZSxVQUFVLG9CQUFvQixpQkFDM0MsTUFBTSxlQUNOLGdDQUNBLE9BV04sUUFBUyxzQkFBcUIsR0FBSSxpQkFBa0IsT0FDbEQsR0FBSSxPQUFTLE1BQU0sZUFBZSxpQkFBa0IsQ0FDbEQsR0FBSSxrQkFBbUIsTUFBTSxlQUFlLGlCQUN4QyxTQUFXLFlBQVksR0FBSSxpQkFDM0IsWUFDRixNQUFNLG1CQUNKLGVBQWUsTUFBTSxtQkFBb0IsVUFDM0MsTUFBTSxhQUFlLGVBQWUsTUFBTSxhQUFjLE1BVTlELFFBQVMsa0NBQWlDLE9BQ3BDLE9BQVMsTUFBTSxlQUFlLGtCQUNoQyxxQkFBcUIsTUFBTSxlQUFnQixLQUFNLE9BSXJELFFBQVMsOEJBQTZCLFFBQ3BDLG1CQUFtQixPQUFRLG9DQUc3QixRQUFTLGdDQUErQixNQUFPLE1BQU8sT0FBUSxNQUM1RCxlQUFlLFVBQVUsb0JBQW9CLG1CQUMzQyxPQUNBLEtBQ0EscUJBQ0EsTUFDQSxPQUtKLFFBQVMsNEJBQTJCLFFBQ2xDLG1CQUFtQixPQUFRLGtDQXRHN0IsR0FBSSxnQkFBaUIsUUFBUSxvQkFDekIsZUFBaUIsUUFBUSxvQkFFekIsZUFBaUIsUUFBUSxvQkFDekIsbUJBQXFCLFFBQVEsd0JBRTdCLGtCQUFvQixlQUFlLGtCQUNuQyxZQUFjLGVBQWUsWUErRzdCLGtCQUNGLDZCQUE4Qiw2QkFDOUIsMkJBQTRCLDJCQUM1QiwrQkFBZ0MsK0JBR2xDLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoXCIuL2FjY3VtdWxhdGVJbnRvXCIpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG52YXIgZ2V0TGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcjtcblxuLyoqXG4gKiBTb21lIGV2ZW50IHR5cGVzIGhhdmUgYSBub3Rpb24gb2YgZGlmZmVyZW50IHJlZ2lzdHJhdGlvbiBuYW1lcyBmb3IgZGlmZmVyZW50XG4gKiBcInBoYXNlc1wiIG9mIHByb3BhZ2F0aW9uLiBUaGlzIGZpbmRzIGxpc3RlbmVycyBieSBhIGdpdmVuIHBoYXNlLlxuICovXG5mdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaWQsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID1cbiAgICBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twcm9wYWdhdGlvblBoYXNlXTtcbiAgcmV0dXJuIGdldExpc3RlbmVyKGlkLCByZWdpc3RyYXRpb25OYW1lKTtcbn1cblxuLyoqXG4gKiBUYWdzIGEgYFN5bnRoZXRpY0V2ZW50YCB3aXRoIGRpc3BhdGNoZWQgbGlzdGVuZXJzLiBDcmVhdGluZyB0aGlzIGZ1bmN0aW9uXG4gKiBoZXJlLCBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gYmluZCBvciBjcmVhdGUgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50LlxuICogTXV0YXRpbmcgdGhlIGV2ZW50J3MgbWVtYmVycyBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gY3JlYXRlIGEgd3JhcHBpbmdcbiAqIFwiZGlzcGF0Y2hcIiBvYmplY3QgdGhhdCBwYWlycyB0aGUgZXZlbnQgd2l0aCB0aGUgbGlzdGVuZXIuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoZG9tSUQsIHVwd2FyZHMsIGV2ZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBpZiAoIWRvbUlEKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIGlkIG11c3Qgbm90IGJlIG51bGwnKTtcbiAgICB9XG4gIH1cbiAgdmFyIHBoYXNlID0gdXB3YXJkcyA/IFByb3BhZ2F0aW9uUGhhc2VzLmJ1YmJsZWQgOiBQcm9wYWdhdGlvblBoYXNlcy5jYXB0dXJlZDtcbiAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBdFBoYXNlKGRvbUlELCBldmVudCwgcGhhc2UpO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPVxuICAgICAgYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBkb21JRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRpc3BhdGNoZXMgKG11c3QgYmUgZW50aXJlbHkgY29sbGVjdGVkIGJlZm9yZSBkaXNwYXRjaGluZyAtIHNlZSB1bml0XG4gKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcbiAqIGVhY2ggZXZlbnQgYW5kIHBlcmZvcm0gdGhlIHRyYXZlcnNhbCBmb3IgZWFjaCBvbmUuIFdlIGNhbiBub3QgcGVyZm9ybSBhXG4gKiBzaW5nbGUgdHJhdmVyc2FsIGZvciB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgZXZlbnRzIGJlY2F1c2UgZWFjaCBldmVudCBtYXlcbiAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlVHdvUGhhc2UoXG4gICAgICBldmVudC5kaXNwYXRjaE1hcmtlcixcbiAgICAgIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsXG4gICAgICBldmVudFxuICAgICk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIHdpdGhvdXQgcmVnYXJkIHRvIGRpcmVjdGlvbiwgZG9lcyBub3QgbG9vayBmb3IgcGhhc2VkXG4gKiByZWdpc3RyYXRpb24gbmFtZXMuIFNhbWUgYXMgYGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlYCBidXQgd2l0aG91dFxuICogcmVxdWlyaW5nIHRoYXQgdGhlIGBkaXNwYXRjaE1hcmtlcmAgYmUgdGhlIHNhbWUgYXMgdGhlIGRpc3BhdGNoZWQgSUQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGlkLCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZTtcbiAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPVxuICAgICAgICBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgaWQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGRpc3BhdGNoZXMgb24gYW4gYFN5bnRoZXRpY0V2ZW50YCwgYnV0IG9ubHkgZm9yIHRoZVxuICogYGRpc3BhdGNoTWFya2VyYC5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIG51bGwsIGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKSB7XG4gIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlRW50ZXJMZWF2ZShcbiAgICBmcm9tSUQsXG4gICAgdG9JRCxcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyxcbiAgICBsZWF2ZSxcbiAgICBlbnRlclxuICApO1xufVxuXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cblxuXG4vKipcbiAqIEEgc21hbGwgc2V0IG9mIHByb3BhZ2F0aW9uIHBhdHRlcm5zLCBlYWNoIG9mIHdoaWNoIHdpbGwgYWNjZXB0IGEgc21hbGwgYW1vdW50XG4gKiBvZiBpbmZvcm1hdGlvbiwgYW5kIGdlbmVyYXRlIGEgc2V0IG9mIFwiZGlzcGF0Y2ggcmVhZHkgZXZlbnQgb2JqZWN0c1wiIC0gd2hpY2hcbiAqIGFyZSBzZXRzIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFubm90YXRlZCB3aXRoIGEgc2V0IG9mIGRpc3BhdGNoZWRcbiAqIGxpc3RlbmVyIGZ1bmN0aW9ucy9pZHMuIFRoZSBBUEkgaXMgZGVzaWduZWQgdGhpcyB3YXkgdG8gZGlzY291cmFnZSB0aGVzZVxuICogcHJvcGFnYXRpb24gc3RyYXRlZ2llcyBmcm9tIGFjdHVhbGx5IGV4ZWN1dGluZyB0aGUgZGlzcGF0Y2hlcywgc2luY2Ugd2VcbiAqIGFsd2F5cyB3YW50IHRvIGNvbGxlY3QgdGhlIGVudGlyZSBzZXQgb2YgZGlzcGF0Y2hlcyBiZWZvcmUgZXhlY3V0aW5nIGV2ZW50IGFcbiAqIHNpbmdsZSBvbmUuXG4gKlxuICogQGNvbnN0cnVjdG9yIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSB7XG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQcm9wYWdhdG9ycztcbiJdfQ==
},{"./EventConstants":109,"./EventPluginHub":111,"./accumulateInto":200,"./forEachAccumulated":215,"_process":95}],115:[function(require,module,exports){
"use strict";var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:canUseDOM&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:canUseDOM&&!!window.screen,isInWorker:!canUseDOM};module.exports=ExecutionEnvironment;


},{}],116:[function(require,module,exports){
"use strict";function FallbackCompositionState(root){this._root=root,this._startText=this.getText(),this._fallbackText=null}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),getTextContentAccessor=require("./getTextContentAccessor");assign(FallbackCompositionState.prototype,{getText:function(){return"value"in this._root?this._root.value:this._root[getTextContentAccessor()]},getData:function(){if(this._fallbackText)return this._fallbackText;var start,end,startValue=this._startText,startLength=startValue.length,endValue=this.getText(),endLength=endValue.length;for(start=0;startLength>start&&startValue[start]===endValue[start];start++);var minEnd=startLength-start;for(end=1;minEnd>=end&&startValue[startLength-end]===endValue[endLength-end];end++);var sliceTail=end>1?1-end:void 0;return this._fallbackText=endValue.slice(start,sliceTail),this._fallbackText}}),PooledClass.addPoolingTo(FallbackCompositionState),module.exports=FallbackCompositionState;


},{"./Object.assign":121,"./PooledClass":122,"./getTextContentAccessor":225}],117:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),ExecutionEnvironment=require("./ExecutionEnvironment"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,MUST_USE_PROPERTY=DOMProperty.injection.MUST_USE_PROPERTY,HAS_BOOLEAN_VALUE=DOMProperty.injection.HAS_BOOLEAN_VALUE,HAS_SIDE_EFFECTS=DOMProperty.injection.HAS_SIDE_EFFECTS,HAS_NUMERIC_VALUE=DOMProperty.injection.HAS_NUMERIC_VALUE,HAS_POSITIVE_NUMERIC_VALUE=DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE,HAS_OVERLOADED_BOOLEAN_VALUE=DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE,hasSVG;if(ExecutionEnvironment.canUseDOM){var implementation=document.implementation;hasSVG=implementation&&implementation.hasFeature&&implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var HTMLDOMPropertyConfig={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,allowTransparency:MUST_USE_ATTRIBUTE,alt:null,async:HAS_BOOLEAN_VALUE,autoComplete:null,autoPlay:HAS_BOOLEAN_VALUE,cellPadding:null,cellSpacing:null,charSet:MUST_USE_ATTRIBUTE,checked:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,classID:MUST_USE_ATTRIBUTE,className:hasSVG?MUST_USE_ATTRIBUTE:MUST_USE_PROPERTY,cols:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,colSpan:null,content:null,contentEditable:null,contextMenu:MUST_USE_ATTRIBUTE,controls:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,coords:null,crossOrigin:null,data:null,dateTime:MUST_USE_ATTRIBUTE,defer:HAS_BOOLEAN_VALUE,dir:null,disabled:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,download:HAS_OVERLOADED_BOOLEAN_VALUE,draggable:null,encType:null,form:MUST_USE_ATTRIBUTE,formAction:MUST_USE_ATTRIBUTE,formEncType:MUST_USE_ATTRIBUTE,formMethod:MUST_USE_ATTRIBUTE,formNoValidate:HAS_BOOLEAN_VALUE,formTarget:MUST_USE_ATTRIBUTE,frameBorder:MUST_USE_ATTRIBUTE,headers:null,height:MUST_USE_ATTRIBUTE,hidden:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:MUST_USE_PROPERTY,label:null,lang:null,list:MUST_USE_ATTRIBUTE,loop:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,low:null,manifest:MUST_USE_ATTRIBUTE,marginHeight:null,marginWidth:null,max:null,maxLength:MUST_USE_ATTRIBUTE,media:MUST_USE_ATTRIBUTE,mediaGroup:null,method:null,min:null,multiple:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,muted:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,name:null,noValidate:HAS_BOOLEAN_VALUE,open:HAS_BOOLEAN_VALUE,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,rel:null,required:HAS_BOOLEAN_VALUE,role:MUST_USE_ATTRIBUTE,rows:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,rowSpan:null,sandbox:null,scope:null,scoped:HAS_BOOLEAN_VALUE,scrolling:null,seamless:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,selected:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,shape:null,size:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,sizes:MUST_USE_ATTRIBUTE,span:HAS_POSITIVE_NUMERIC_VALUE,spellCheck:null,src:null,srcDoc:MUST_USE_PROPERTY,srcSet:MUST_USE_ATTRIBUTE,start:HAS_NUMERIC_VALUE,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:MUST_USE_PROPERTY|HAS_SIDE_EFFECTS,width:MUST_USE_ATTRIBUTE,wmode:MUST_USE_ATTRIBUTE,autoCapitalize:null,autoCorrect:null,itemProp:MUST_USE_ATTRIBUTE,itemScope:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,itemType:MUST_USE_ATTRIBUTE,itemID:MUST_USE_ATTRIBUTE,itemRef:MUST_USE_ATTRIBUTE,property:null,unselectable:MUST_USE_ATTRIBUTE},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};module.exports=HTMLDOMPropertyConfig;


},{"./DOMProperty":104,"./ExecutionEnvironment":115}],118:[function(require,module,exports){
(function (process){
"use strict";function _assertSingleLink(input){"production"!==process.env.NODE_ENV?invariant(null==input.props.checkedLink||null==input.props.valueLink,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):invariant(null==input.props.checkedLink||null==input.props.valueLink)}function _assertValueLink(input){_assertSingleLink(input),"production"!==process.env.NODE_ENV?invariant(null==input.props.value&&null==input.props.onChange,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):invariant(null==input.props.value&&null==input.props.onChange)}function _assertCheckedLink(input){_assertSingleLink(input),"production"!==process.env.NODE_ENV?invariant(null==input.props.checked&&null==input.props.onChange,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):invariant(null==input.props.checked&&null==input.props.onChange)}function _handleLinkedValueChange(e){this.props.valueLink.requestChange(e.target.value)}function _handleLinkedCheckChange(e){this.props.checkedLink.requestChange(e.target.checked)}var ReactPropTypes=require("./ReactPropTypes"),invariant=require("./invariant"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},LinkedValueUtils={Mixin:{propTypes:{value:function(props,propName,componentName){return!props[propName]||hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(props,propName,componentName){return!props[propName]||props.onChange||props.readOnly||props.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:ReactPropTypes.func}},getValue:function(input){return input.props.valueLink?(_assertValueLink(input),input.props.valueLink.value):input.props.value},getChecked:function(input){return input.props.checkedLink?(_assertCheckedLink(input),input.props.checkedLink.value):input.props.checked},getOnChange:function(input){return input.props.valueLink?(_assertValueLink(input),_handleLinkedValueChange):input.props.checkedLink?(_assertCheckedLink(input),_handleLinkedCheckChange):input.props.onChange}};module.exports=LinkedValueUtils;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ReactPropTypes":173,"./invariant":230,"_process":95}],119:[function(require,module,exports){
(function (process){
"use strict";function remove(event){event.remove()}var ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("./invariant"),LocalEventTrapMixin={trapBubbledEvent:function(topLevelType,handlerBaseName){"production"!==process.env.NODE_ENV?invariant(this.isMounted(),"Must be mounted to trap events"):invariant(this.isMounted());var node=this.getDOMNode();"production"!==process.env.NODE_ENV?invariant(node,"LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered."):invariant(node);var listener=ReactBrowserEventEmitter.trapBubbledEvent(topLevelType,handlerBaseName,node);this._localEventListeners=accumulateInto(this._localEventListeners,listener)},componentWillUnmount:function(){this._localEventListeners&&forEachAccumulated(this._localEventListeners,remove)}};module.exports=LocalEventTrapMixin;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvTG9jYWxFdmVudFRyYXBNaXhpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFRQSxTQUFTLFFBQU8sT0FDZCxNQUFNLFNBUFIsR0FBSSwwQkFBMkIsUUFBUSw4QkFFbkMsZUFBaUIsUUFBUSxvQkFDekIsbUJBQXFCLFFBQVEsd0JBQzdCLFVBQVksUUFBUSxlQU1wQixxQkFDRixpQkFBaUIsU0FBUyxhQUFjLGlCQUNyQyxlQUFpQixRQUFRLElBQUksU0FBVyxVQUFVLEtBQUssWUFBYSxrQ0FBb0MsVUFBVSxLQUFLLFlBR3hILElBQUksTUFBTyxLQUFLLFlBQ2YsZ0JBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3ZDLEtBQ0EsNEVBQ0UsVUFBVSxLQUNkLElBQUksVUFBVyx5QkFBeUIsaUJBQ3RDLGFBQ0EsZ0JBQ0EsS0FFRixNQUFLLHFCQUNILGVBQWUsS0FBSyxxQkFBc0IsV0FNOUMscUJBQXFCLFdBQ2YsS0FBSyxzQkFDUCxtQkFBbUIsS0FBSyxxQkFBc0IsU0FLcEQsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTG9jYWxFdmVudFRyYXBNaXhpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIik7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuZnVuY3Rpb24gcmVtb3ZlKGV2ZW50KSB7XG4gIGV2ZW50LnJlbW92ZSgpO1xufVxuXG52YXIgTG9jYWxFdmVudFRyYXBNaXhpbiA9IHtcbiAgdHJhcEJ1YmJsZWRFdmVudDpmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCByZW5kZXJzIHRvIG51bGwgb3IgaWYgYW5vdGhlciBjb21wb25lbnQgZmF0YWxzIGFuZCBjYXVzZXNcbiAgICAvLyB0aGUgc3RhdGUgb2YgdGhlIHRyZWUgdG8gYmUgY29ycnVwdGVkLCBgbm9kZWAgaGVyZSBjYW4gYmUgbnVsbC5cbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBub2RlLFxuICAgICAgJ0xvY2FsRXZlbnRUcmFwTWl4aW4udHJhcEJ1YmJsZWRFdmVudCguLi4pOiBSZXF1aXJlcyBub2RlIHRvIGJlIHJlbmRlcmVkLidcbiAgICApIDogaW52YXJpYW50KG5vZGUpKTtcbiAgICB2YXIgbGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIG5vZGVcbiAgICApO1xuICAgIHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMgPVxuICAgICAgYWNjdW11bGF0ZUludG8odGhpcy5fbG9jYWxFdmVudExpc3RlbmVycywgbGlzdGVuZXIpO1xuICB9LFxuXG4gIC8vIHRyYXBDYXB0dXJlZEV2ZW50IHdvdWxkIGxvb2sgbmVhcmx5IGlkZW50aWNhbC4gV2UgZG9uJ3QgaW1wbGVtZW50IHRoYXRcbiAgLy8gbWV0aG9kIGJlY2F1c2UgaXQgaXNuJ3QgY3VycmVudGx5IG5lZWRlZC5cblxuICBjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbG9jYWxFdmVudExpc3RlbmVycykge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMsIHJlbW92ZSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2FsRXZlbnRUcmFwTWl4aW47XG4iXX0=
},{"./ReactBrowserEventEmitter":125,"./accumulateInto":200,"./forEachAccumulated":215,"./invariant":230,"_process":95}],120:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),emptyFunction=require("./emptyFunction"),topLevelTypes=EventConstants.topLevelTypes,MobileSafariClickEventPlugin={eventTypes:null,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){if(topLevelType===topLevelTypes.topTouchStart){var target=nativeEvent.target;target&&!target.onclick&&(target.onclick=emptyFunction)}}};module.exports=MobileSafariClickEventPlugin;


},{"./EventConstants":109,"./emptyFunction":209}],121:[function(require,module,exports){
"use strict";function assign(target,sources){if(null==target)throw new TypeError("Object.assign target cannot be null or undefined");for(var to=Object(target),hasOwnProperty=Object.prototype.hasOwnProperty,nextIndex=1;nextIndex<arguments.length;nextIndex++){var nextSource=arguments[nextIndex];if(null!=nextSource){var from=Object(nextSource);for(var key in from)hasOwnProperty.call(from,key)&&(to[key]=from[key])}}return to}module.exports=assign;


},{}],122:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),oneArgumentPooler=function(copyFieldsFrom){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,copyFieldsFrom),instance}return new Klass(copyFieldsFrom)},twoArgumentPooler=function(a1,a2){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,a1,a2),instance}return new Klass(a1,a2)},threeArgumentPooler=function(a1,a2,a3){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,a1,a2,a3),instance}return new Klass(a1,a2,a3)},fiveArgumentPooler=function(a1,a2,a3,a4,a5){var Klass=this;if(Klass.instancePool.length){var instance=Klass.instancePool.pop();return Klass.call(instance,a1,a2,a3,a4,a5),instance}return new Klass(a1,a2,a3,a4,a5)},standardReleaser=function(instance){var Klass=this;"production"!==process.env.NODE_ENV?invariant(instance instanceof Klass,"Trying to release an instance into a pool of a different type."):invariant(instance instanceof Klass),instance.destructor&&instance.destructor(),Klass.instancePool.length<Klass.poolSize&&Klass.instancePool.push(instance)},DEFAULT_POOL_SIZE=10,DEFAULT_POOLER=oneArgumentPooler,addPoolingTo=function(CopyConstructor,pooler){var NewKlass=CopyConstructor;return NewKlass.instancePool=[],NewKlass.getPooled=pooler||DEFAULT_POOLER,NewKlass.poolSize||(NewKlass.poolSize=DEFAULT_POOL_SIZE),NewKlass.release=standardReleaser,NewKlass},PooledClass={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fiveArgumentPooler:fiveArgumentPooler};module.exports=PooledClass;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBRUEsSUFBSSxXQUFZLFFBQVEsZUFTcEIsa0JBQW9CLFNBQVMsZ0JBQy9CLEdBQUksT0FBUSxJQUNaLElBQUksTUFBTSxhQUFhLE9BQVEsQ0FDN0IsR0FBSSxVQUFXLE1BQU0sYUFBYSxLQUVsQyxPQURBLE9BQU0sS0FBSyxTQUFVLGdCQUNkLFNBRVAsTUFBTyxJQUFJLE9BQU0saUJBSWpCLGtCQUFvQixTQUFTLEdBQUksSUFDbkMsR0FBSSxPQUFRLElBQ1osSUFBSSxNQUFNLGFBQWEsT0FBUSxDQUM3QixHQUFJLFVBQVcsTUFBTSxhQUFhLEtBRWxDLE9BREEsT0FBTSxLQUFLLFNBQVUsR0FBSSxJQUNsQixTQUVQLE1BQU8sSUFBSSxPQUFNLEdBQUksS0FJckIsb0JBQXNCLFNBQVMsR0FBSSxHQUFJLElBQ3pDLEdBQUksT0FBUSxJQUNaLElBQUksTUFBTSxhQUFhLE9BQVEsQ0FDN0IsR0FBSSxVQUFXLE1BQU0sYUFBYSxLQUVsQyxPQURBLE9BQU0sS0FBSyxTQUFVLEdBQUksR0FBSSxJQUN0QixTQUVQLE1BQU8sSUFBSSxPQUFNLEdBQUksR0FBSSxLQUl6QixtQkFBcUIsU0FBUyxHQUFJLEdBQUksR0FBSSxHQUFJLElBQ2hELEdBQUksT0FBUSxJQUNaLElBQUksTUFBTSxhQUFhLE9BQVEsQ0FDN0IsR0FBSSxVQUFXLE1BQU0sYUFBYSxLQUVsQyxPQURBLE9BQU0sS0FBSyxTQUFVLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDOUIsU0FFUCxNQUFPLElBQUksT0FBTSxHQUFJLEdBQUksR0FBSSxHQUFJLEtBSWpDLGlCQUFtQixTQUFTLFVBQzlCLEdBQUksT0FBUSxJQUNYLGdCQUFpQixRQUFRLElBQUksU0FBVyxVQUN2QyxtQkFBb0IsT0FDcEIsa0VBQ0UsVUFBVSxtQkFBb0IsUUFDOUIsU0FBUyxZQUNYLFNBQVMsYUFFUCxNQUFNLGFBQWEsT0FBUyxNQUFNLFVBQ3BDLE1BQU0sYUFBYSxLQUFLLFdBSXhCLGtCQUFvQixHQUNwQixlQUFpQixrQkFXakIsYUFBZSxTQUFTLGdCQUFpQixRQUMzQyxHQUFJLFVBQVcsZUFPZixPQU5BLFVBQVMsZ0JBQ1QsU0FBUyxVQUFZLFFBQVUsZUFDMUIsU0FBUyxXQUNaLFNBQVMsU0FBVyxtQkFFdEIsU0FBUyxRQUFVLGlCQUNaLFVBR0wsYUFDRixhQUFjLGFBQ2Qsa0JBQW1CLGtCQUNuQixrQkFBbUIsa0JBQ25CLG9CQUFxQixvQkFDckIsbUJBQW9CLG1CQUd0QixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBTdGF0aWMgcG9vbGVycy4gU2V2ZXJhbCBjdXN0b20gdmVyc2lvbnMgZm9yIGVhY2ggcG90ZW50aWFsIG51bWJlciBvZlxuICogYXJndW1lbnRzLiBBIGNvbXBsZXRlbHkgZ2VuZXJpYyBwb29sZXIgaXMgZWFzeSB0byBpbXBsZW1lbnQsIGJ1dCB3b3VsZFxuICogcmVxdWlyZSBhY2Nlc3NpbmcgdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gSW4gZWFjaCBvZiB0aGVzZSwgYHRoaXNgIHJlZmVycyB0b1xuICogdGhlIENsYXNzIGl0c2VsZiwgbm90IGFuIGluc3RhbmNlLiBJZiBhbnkgb3RoZXJzIGFyZSBuZWVkZWQsIHNpbXBseSBhZGQgdGhlbVxuICogaGVyZSwgb3IgaW4gdGhlaXIgb3duIGZpbGVzLlxuICovXG52YXIgb25lQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gIH1cbn07XG5cbnZhciBmaXZlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICB9XG59O1xuXG52YXIgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcyxcbiAgICAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nXG4gICkgOiBpbnZhcmlhbnQoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykpO1xuICBpZiAoaW5zdGFuY2UuZGVzdHJ1Y3Rvcikge1xuICAgIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgfVxuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG52YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbnZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzIChvcHRpb25hbCkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb29sZXIgQ3VzdG9taXphYmxlIHBvb2xlci5cbiAqL1xudmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG4gIHZhciBOZXdLbGFzcyA9IENvcHlDb25zdHJ1Y3RvcjtcbiAgTmV3S2xhc3MuaW5zdGFuY2VQb29sID0gW107XG4gIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgaWYgKCFOZXdLbGFzcy5wb29sU2l6ZSkge1xuICAgIE5ld0tsYXNzLnBvb2xTaXplID0gREVGQVVMVF9QT09MX1NJWkU7XG4gIH1cbiAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gIHJldHVybiBOZXdLbGFzcztcbn07XG5cbnZhciBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIG9uZUFyZ3VtZW50UG9vbGVyOiBvbmVBcmd1bWVudFBvb2xlcixcbiAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICB0aHJlZUFyZ3VtZW50UG9vbGVyOiB0aHJlZUFyZ3VtZW50UG9vbGVyLFxuICBmaXZlQXJndW1lbnRQb29sZXI6IGZpdmVBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcbiJdfQ==
},{"./invariant":230,"_process":95}],123:[function(require,module,exports){
(function (process){
"use strict";var EventPluginUtils=require("./EventPluginUtils"),ReactChildren=require("./ReactChildren"),ReactComponent=require("./ReactComponent"),ReactClass=require("./ReactClass"),ReactContext=require("./ReactContext"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactDOM=require("./ReactDOM"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactDefaultInjection=require("./ReactDefaultInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),ReactPropTypes=require("./ReactPropTypes"),ReactReconciler=require("./ReactReconciler"),ReactServerRendering=require("./ReactServerRendering"),assign=require("./Object.assign"),findDOMNode=require("./findDOMNode"),onlyChild=require("./onlyChild");ReactDefaultInjection.inject();var createElement=ReactElement.createElement,createFactory=ReactElement.createFactory,cloneElement=ReactElement.cloneElement;"production"!==process.env.NODE_ENV&&(createElement=ReactElementValidator.createElement,createFactory=ReactElementValidator.createFactory,cloneElement=ReactElementValidator.cloneElement);var render=ReactPerf.measure("React","render",ReactMount.render),React={Children:{map:ReactChildren.map,forEach:ReactChildren.forEach,count:ReactChildren.count,only:onlyChild},Component:ReactComponent,DOM:ReactDOM,PropTypes:ReactPropTypes,initializeTouchEvents:function(shouldUseTouch){EventPluginUtils.useTouchEvents=shouldUseTouch},createClass:ReactClass.createClass,createElement:createElement,cloneElement:cloneElement,createFactory:createFactory,createMixin:function(mixin){return mixin},constructAndRenderComponent:ReactMount.constructAndRenderComponent,constructAndRenderComponentByID:ReactMount.constructAndRenderComponentByID,findDOMNode:findDOMNode,render:render,renderToString:ReactServerRendering.renderToString,renderToStaticMarkup:ReactServerRendering.renderToStaticMarkup,unmountComponentAtNode:ReactMount.unmountComponentAtNode,isValidElement:ReactElement.isValidElement,withContext:ReactContext.withContext,__spread:assign};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:ReactCurrentOwner,InstanceHandles:ReactInstanceHandles,Mount:ReactMount,Reconciler:ReactReconciler,TextComponent:ReactDOMTextComponent}),"production"!==process.env.NODE_ENV){var ExecutionEnvironment=require("./ExecutionEnvironment");if(ExecutionEnvironment.canUseDOM&&window.top===window.self){navigator.userAgent.indexOf("Chrome")>-1&&"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&console.debug("Download the React DevTools for a better development experience: https://fb.me/react-devtools");for(var expectedFeatures=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],i=0;i<expectedFeatures.length;i++)if(!expectedFeatures[i]){console.error("One or more ES5 shim/shams expected by React are not available: https://fb.me/react-warning-polyfills");break}}}React.version="0.13.3",module.exports=React;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./EventPluginUtils":113,"./ExecutionEnvironment":115,"./Object.assign":121,"./ReactChildren":127,"./ReactClass":128,"./ReactComponent":129,"./ReactContext":133,"./ReactCurrentOwner":134,"./ReactDOM":135,"./ReactDOMTextComponent":146,"./ReactDefaultInjection":149,"./ReactElement":152,"./ReactElementValidator":153,"./ReactInstanceHandles":161,"./ReactMount":165,"./ReactPerf":170,"./ReactPropTypes":173,"./ReactReconciler":176,"./ReactServerRendering":179,"./findDOMNode":212,"./onlyChild":239,"_process":95}],124:[function(require,module,exports){
"use strict";var findDOMNode=require("./findDOMNode"),ReactBrowserComponentMixin={getDOMNode:function(){return findDOMNode(this)}};module.exports=ReactBrowserComponentMixin;


},{"./findDOMNode":212}],125:[function(require,module,exports){
"use strict";function getListeningForDocument(mountAt){return Object.prototype.hasOwnProperty.call(mountAt,topListenersIDKey)||(mountAt[topListenersIDKey]=reactTopListenersCounter++,alreadyListeningTo[mountAt[topListenersIDKey]]={}),alreadyListeningTo[mountAt[topListenersIDKey]]}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPluginRegistry=require("./EventPluginRegistry"),ReactEventEmitterMixin=require("./ReactEventEmitterMixin"),ViewportMetrics=require("./ViewportMetrics"),assign=require("./Object.assign"),isEventSupported=require("./isEventSupported"),alreadyListeningTo={},isMonitoringScrollValue=!1,reactTopListenersCounter=0,topEventMapping={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},topListenersIDKey="_reactListenersID"+String(Math.random()).slice(2),ReactBrowserEventEmitter=assign({},ReactEventEmitterMixin,{ReactEventListener:null,injection:{injectReactEventListener:function(ReactEventListener){ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel),ReactBrowserEventEmitter.ReactEventListener=ReactEventListener}},setEnabled:function(enabled){ReactBrowserEventEmitter.ReactEventListener&&ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled)},isEnabled:function(){return!(!ReactBrowserEventEmitter.ReactEventListener||!ReactBrowserEventEmitter.ReactEventListener.isEnabled())},listenTo:function(registrationName,contentDocumentHandle){for(var mountAt=contentDocumentHandle,isListening=getListeningForDocument(mountAt),dependencies=EventPluginRegistry.registrationNameDependencies[registrationName],topLevelTypes=EventConstants.topLevelTypes,i=0,l=dependencies.length;l>i;i++){var dependency=dependencies[i];isListening.hasOwnProperty(dependency)&&isListening[dependency]||(dependency===topLevelTypes.topWheel?isEventSupported("wheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"wheel",mountAt):isEventSupported("mousewheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"mousewheel",mountAt):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"DOMMouseScroll",mountAt):dependency===topLevelTypes.topScroll?isEventSupported("scroll",!0)?ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll,"scroll",mountAt):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll,"scroll",ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE):dependency===topLevelTypes.topFocus||dependency===topLevelTypes.topBlur?(isEventSupported("focus",!0)?(ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus,"focus",mountAt),ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur,"blur",mountAt)):isEventSupported("focusin")&&(ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus,"focusin",mountAt),ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur,"focusout",mountAt)),isListening[topLevelTypes.topBlur]=!0,isListening[topLevelTypes.topFocus]=!0):topEventMapping.hasOwnProperty(dependency)&&ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency,topEventMapping[dependency],mountAt),isListening[dependency]=!0)}},trapBubbledEvent:function(topLevelType,handlerBaseName,handle){return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType,handlerBaseName,handle)},trapCapturedEvent:function(topLevelType,handlerBaseName,handle){return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType,handlerBaseName,handle)},ensureScrollValueMonitoring:function(){if(!isMonitoringScrollValue){var refresh=ViewportMetrics.refreshScrollValues;ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh),isMonitoringScrollValue=!0}},eventNameDispatchConfigs:EventPluginHub.eventNameDispatchConfigs,registrationNameModules:EventPluginHub.registrationNameModules,putListener:EventPluginHub.putListener,getListener:EventPluginHub.getListener,deleteListener:EventPluginHub.deleteListener,deleteAllListeners:EventPluginHub.deleteAllListeners});module.exports=ReactBrowserEventEmitter;


},{"./EventConstants":109,"./EventPluginHub":111,"./EventPluginRegistry":112,"./Object.assign":121,"./ReactEventEmitterMixin":156,"./ViewportMetrics":199,"./isEventSupported":231}],126:[function(require,module,exports){
"use strict";var ReactReconciler=require("./ReactReconciler"),flattenChildren=require("./flattenChildren"),instantiateReactComponent=require("./instantiateReactComponent"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),ReactChildReconciler={instantiateChildren:function(nestedChildNodes,transaction,context){var children=flattenChildren(nestedChildNodes);for(var name in children)if(children.hasOwnProperty(name)){var child=children[name],childInstance=instantiateReactComponent(child,null);children[name]=childInstance}return children},updateChildren:function(prevChildren,nextNestedChildNodes,transaction,context){var nextChildren=flattenChildren(nextNestedChildNodes);if(!nextChildren&&!prevChildren)return null;var name;for(name in nextChildren)if(nextChildren.hasOwnProperty(name)){var prevChild=prevChildren&&prevChildren[name],prevElement=prevChild&&prevChild._currentElement,nextElement=nextChildren[name];if(shouldUpdateReactComponent(prevElement,nextElement))ReactReconciler.receiveComponent(prevChild,nextElement,transaction,context),nextChildren[name]=prevChild;else{prevChild&&ReactReconciler.unmountComponent(prevChild,name);var nextChildInstance=instantiateReactComponent(nextElement,null);nextChildren[name]=nextChildInstance}}for(name in prevChildren)!prevChildren.hasOwnProperty(name)||nextChildren&&nextChildren.hasOwnProperty(name)||ReactReconciler.unmountComponent(prevChildren[name]);return nextChildren},unmountChildren:function(renderedChildren){for(var name in renderedChildren){var renderedChild=renderedChildren[name];ReactReconciler.unmountComponent(renderedChild)}}};module.exports=ReactChildReconciler;


},{"./ReactReconciler":176,"./flattenChildren":213,"./instantiateReactComponent":229,"./shouldUpdateReactComponent":246}],127:[function(require,module,exports){
(function (process){
"use strict";function ForEachBookKeeping(forEachFunction,forEachContext){this.forEachFunction=forEachFunction,this.forEachContext=forEachContext}function forEachSingleChild(traverseContext,child,name,i){var forEachBookKeeping=traverseContext;forEachBookKeeping.forEachFunction.call(forEachBookKeeping.forEachContext,child,i)}function forEachChildren(children,forEachFunc,forEachContext){if(null==children)return children;var traverseContext=ForEachBookKeeping.getPooled(forEachFunc,forEachContext);traverseAllChildren(children,forEachSingleChild,traverseContext),ForEachBookKeeping.release(traverseContext)}function MapBookKeeping(mapResult,mapFunction,mapContext){this.mapResult=mapResult,this.mapFunction=mapFunction,this.mapContext=mapContext}function mapSingleChildIntoContext(traverseContext,child,name,i){var mapBookKeeping=traverseContext,mapResult=mapBookKeeping.mapResult,keyUnique=!mapResult.hasOwnProperty(name);if("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(keyUnique,"ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",name):null),keyUnique){var mappedChild=mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext,child,i);mapResult[name]=mappedChild}}function mapChildren(children,func,context){if(null==children)return children;var mapResult={},traverseContext=MapBookKeeping.getPooled(mapResult,func,context);return traverseAllChildren(children,mapSingleChildIntoContext,traverseContext),MapBookKeeping.release(traverseContext),ReactFragment.create(mapResult)}function forEachSingleChildDummy(traverseContext,child,name,i){return null}function countChildren(children,context){return traverseAllChildren(children,forEachSingleChildDummy,null)}var PooledClass=require("./PooledClass"),ReactFragment=require("./ReactFragment"),traverseAllChildren=require("./traverseAllChildren"),warning=require("./warning"),twoArgumentPooler=PooledClass.twoArgumentPooler,threeArgumentPooler=PooledClass.threeArgumentPooler;PooledClass.addPoolingTo(ForEachBookKeeping,twoArgumentPooler),PooledClass.addPoolingTo(MapBookKeeping,threeArgumentPooler);var ReactChildren={forEach:forEachChildren,map:mapChildren,count:countChildren};module.exports=ReactChildren;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./PooledClass":122,"./ReactFragment":158,"./traverseAllChildren":248,"./warning":249,"_process":95}],128:[function(require,module,exports){
(function (process){
"use strict";function validateTypeDef(Constructor,typeDef,location){for(var propName in typeDef)typeDef.hasOwnProperty(propName)&&("production"!==process.env.NODE_ENV?warning("function"==typeof typeDef[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",Constructor.displayName||"ReactClass",ReactPropTypeLocationNames[location],propName):null)}function validateMethodOverride(proto,name){var specPolicy=ReactClassInterface.hasOwnProperty(name)?ReactClassInterface[name]:null;ReactClassMixin.hasOwnProperty(name)&&("production"!==process.env.NODE_ENV?invariant(specPolicy===SpecPolicy.OVERRIDE_BASE,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",name):invariant(specPolicy===SpecPolicy.OVERRIDE_BASE)),proto.hasOwnProperty(name)&&("production"!==process.env.NODE_ENV?invariant(specPolicy===SpecPolicy.DEFINE_MANY||specPolicy===SpecPolicy.DEFINE_MANY_MERGED,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name):invariant(specPolicy===SpecPolicy.DEFINE_MANY||specPolicy===SpecPolicy.DEFINE_MANY_MERGED))}function mixSpecIntoComponent(Constructor,spec){if(spec){"production"!==process.env.NODE_ENV?invariant("function"!=typeof spec,"ReactClass: You're attempting to use a component class as a mixin. Instead, just use a regular object."):invariant("function"!=typeof spec),"production"!==process.env.NODE_ENV?invariant(!ReactElement.isValidElement(spec),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."):invariant(!ReactElement.isValidElement(spec));var proto=Constructor.prototype;spec.hasOwnProperty(MIXINS_KEY)&&RESERVED_SPEC_KEYS.mixins(Constructor,spec.mixins);for(var name in spec)if(spec.hasOwnProperty(name)&&name!==MIXINS_KEY){var property=spec[name];if(validateMethodOverride(proto,name),RESERVED_SPEC_KEYS.hasOwnProperty(name))RESERVED_SPEC_KEYS[name](Constructor,property);else{var isReactClassMethod=ReactClassInterface.hasOwnProperty(name),isAlreadyDefined=proto.hasOwnProperty(name),markedDontBind=property&&property.__reactDontBind,isFunction="function"==typeof property,shouldAutoBind=isFunction&&!isReactClassMethod&&!isAlreadyDefined&&!markedDontBind;if(shouldAutoBind)proto.__reactAutoBindMap||(proto.__reactAutoBindMap={}),proto.__reactAutoBindMap[name]=property,proto[name]=property;else if(isAlreadyDefined){var specPolicy=ReactClassInterface[name];"production"!==process.env.NODE_ENV?invariant(isReactClassMethod&&(specPolicy===SpecPolicy.DEFINE_MANY_MERGED||specPolicy===SpecPolicy.DEFINE_MANY),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",specPolicy,name):invariant(isReactClassMethod&&(specPolicy===SpecPolicy.DEFINE_MANY_MERGED||specPolicy===SpecPolicy.DEFINE_MANY)),specPolicy===SpecPolicy.DEFINE_MANY_MERGED?proto[name]=createMergedResultFunction(proto[name],property):specPolicy===SpecPolicy.DEFINE_MANY&&(proto[name]=createChainedFunction(proto[name],property))}else proto[name]=property,"production"!==process.env.NODE_ENV&&"function"==typeof property&&spec.displayName&&(proto[name].displayName=spec.displayName+"_"+name)}}}}function mixStaticSpecIntoComponent(Constructor,statics){if(statics)for(var name in statics){var property=statics[name];if(statics.hasOwnProperty(name)){var isReserved=name in RESERVED_SPEC_KEYS;"production"!==process.env.NODE_ENV?invariant(!isReserved,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',name):invariant(!isReserved);var isInherited=name in Constructor;"production"!==process.env.NODE_ENV?invariant(!isInherited,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",name):invariant(!isInherited),Constructor[name]=property}}}function mergeIntoWithNoDuplicateKeys(one,two){"production"!==process.env.NODE_ENV?invariant(one&&two&&"object"==typeof one&&"object"==typeof two,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."):invariant(one&&two&&"object"==typeof one&&"object"==typeof two);for(var key in two)two.hasOwnProperty(key)&&("production"!==process.env.NODE_ENV?invariant(void 0===one[key],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",key):invariant(void 0===one[key]),one[key]=two[key]);return one}function createMergedResultFunction(one,two){return function(){var a=one.apply(this,arguments),b=two.apply(this,arguments);if(null==a)return b;if(null==b)return a;var c={};return mergeIntoWithNoDuplicateKeys(c,a),mergeIntoWithNoDuplicateKeys(c,b),c}}function createChainedFunction(one,two){return function(){one.apply(this,arguments),two.apply(this,arguments)}}function bindAutoBindMethod(component,method){var boundMethod=method.bind(component);if("production"!==process.env.NODE_ENV){boundMethod.__reactBoundContext=component,boundMethod.__reactBoundMethod=method,boundMethod.__reactBoundArguments=null;var componentName=component.constructor.displayName,_bind=boundMethod.bind;boundMethod.bind=function(newThis){for(var args=[],$__0=1,$__1=arguments.length;$__1>$__0;$__0++)args.push(arguments[$__0]);if(newThis!==component&&null!==newThis)"production"!==process.env.NODE_ENV?warning(!1,"bind(): React component methods may only be bound to the component instance. See %s",componentName):null;else if(!args.length)return"production"!==process.env.NODE_ENV?warning(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",componentName):null,boundMethod;var reboundMethod=_bind.apply(boundMethod,arguments);return reboundMethod.__reactBoundContext=component,reboundMethod.__reactBoundMethod=method,reboundMethod.__reactBoundArguments=args,reboundMethod}}return boundMethod}function bindAutoBindMethods(component){for(var autoBindKey in component.__reactAutoBindMap)if(component.__reactAutoBindMap.hasOwnProperty(autoBindKey)){var method=component.__reactAutoBindMap[autoBindKey];component[autoBindKey]=bindAutoBindMethod(component,ReactErrorUtils.guard(method,component.constructor.displayName+"."+autoBindKey))}}var ReactComponent=require("./ReactComponent"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactErrorUtils=require("./ReactErrorUtils"),ReactInstanceMap=require("./ReactInstanceMap"),ReactLifeCycle=require("./ReactLifeCycle"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactUpdateQueue=require("./ReactUpdateQueue"),assign=require("./Object.assign"),invariant=require("./invariant"),keyMirror=require("./keyMirror"),keyOf=require("./keyOf"),warning=require("./warning"),MIXINS_KEY=keyOf({mixins:null}),SpecPolicy=keyMirror({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),injectedMixins=[],ReactClassInterface={mixins:SpecPolicy.DEFINE_MANY,statics:SpecPolicy.DEFINE_MANY,propTypes:SpecPolicy.DEFINE_MANY,contextTypes:SpecPolicy.DEFINE_MANY,childContextTypes:SpecPolicy.DEFINE_MANY,getDefaultProps:SpecPolicy.DEFINE_MANY_MERGED,getInitialState:SpecPolicy.DEFINE_MANY_MERGED,getChildContext:SpecPolicy.DEFINE_MANY_MERGED,render:SpecPolicy.DEFINE_ONCE,componentWillMount:SpecPolicy.DEFINE_MANY,componentDidMount:SpecPolicy.DEFINE_MANY,componentWillReceiveProps:SpecPolicy.DEFINE_MANY,shouldComponentUpdate:SpecPolicy.DEFINE_ONCE,componentWillUpdate:SpecPolicy.DEFINE_MANY,componentDidUpdate:SpecPolicy.DEFINE_MANY,componentWillUnmount:SpecPolicy.DEFINE_MANY,updateComponent:SpecPolicy.OVERRIDE_BASE},RESERVED_SPEC_KEYS={displayName:function(Constructor,displayName){Constructor.displayName=displayName},mixins:function(Constructor,mixins){if(mixins)for(var i=0;i<mixins.length;i++)mixSpecIntoComponent(Constructor,mixins[i])},childContextTypes:function(Constructor,childContextTypes){"production"!==process.env.NODE_ENV&&validateTypeDef(Constructor,childContextTypes,ReactPropTypeLocations.childContext),Constructor.childContextTypes=assign({},Constructor.childContextTypes,childContextTypes)},contextTypes:function(Constructor,contextTypes){"production"!==process.env.NODE_ENV&&validateTypeDef(Constructor,contextTypes,ReactPropTypeLocations.context),Constructor.contextTypes=assign({},Constructor.contextTypes,contextTypes)},getDefaultProps:function(Constructor,getDefaultProps){Constructor.getDefaultProps?Constructor.getDefaultProps=createMergedResultFunction(Constructor.getDefaultProps,getDefaultProps):Constructor.getDefaultProps=getDefaultProps},propTypes:function(Constructor,propTypes){"production"!==process.env.NODE_ENV&&validateTypeDef(Constructor,propTypes,ReactPropTypeLocations.prop),Constructor.propTypes=assign({},Constructor.propTypes,propTypes)},statics:function(Constructor,statics){mixStaticSpecIntoComponent(Constructor,statics)}},typeDeprecationDescriptor={enumerable:!1,get:function(){var displayName=this.displayName||this.name||"Component";return"production"!==process.env.NODE_ENV?warning(!1,"%s.type is deprecated. Use %s directly to access the class.",displayName,displayName):null,Object.defineProperty(this,"type",{value:this}),this}},ReactClassMixin={replaceState:function(newState,callback){ReactUpdateQueue.enqueueReplaceState(this,newState),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},isMounted:function(){if("production"!==process.env.NODE_ENV){var owner=ReactCurrentOwner.current;null!==owner&&("production"!==process.env.NODE_ENV?warning(owner._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",owner.getName()||"A component"):null,owner._warnedAboutRefsInRender=!0)}var internalInstance=ReactInstanceMap.get(this);return internalInstance&&internalInstance!==ReactLifeCycle.currentlyMountingInstance},setProps:function(partialProps,callback){ReactUpdateQueue.enqueueSetProps(this,partialProps),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},replaceProps:function(newProps,callback){ReactUpdateQueue.enqueueReplaceProps(this,newProps),callback&&ReactUpdateQueue.enqueueCallback(this,callback)}},ReactClassComponent=function(){};assign(ReactClassComponent.prototype,ReactComponent.prototype,ReactClassMixin);var ReactClass={createClass:function(spec){var Constructor=function(props,context){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(this instanceof Constructor,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"):null),this.__reactAutoBindMap&&bindAutoBindMethods(this),this.props=props,this.context=context,this.state=null;var initialState=this.getInitialState?this.getInitialState():null;"production"!==process.env.NODE_ENV&&"undefined"==typeof initialState&&this.getInitialState._isMockFunction&&(initialState=null),"production"!==process.env.NODE_ENV?invariant("object"==typeof initialState&&!Array.isArray(initialState),"%s.getInitialState(): must return an object or null",Constructor.displayName||"ReactCompositeComponent"):invariant("object"==typeof initialState&&!Array.isArray(initialState)),this.state=initialState};Constructor.prototype=new ReactClassComponent,Constructor.prototype.constructor=Constructor,injectedMixins.forEach(mixSpecIntoComponent.bind(null,Constructor)),mixSpecIntoComponent(Constructor,spec),Constructor.getDefaultProps&&(Constructor.defaultProps=Constructor.getDefaultProps()),"production"!==process.env.NODE_ENV&&(Constructor.getDefaultProps&&(Constructor.getDefaultProps.isReactClassApproved={}),Constructor.prototype.getInitialState&&(Constructor.prototype.getInitialState.isReactClassApproved={})),"production"!==process.env.NODE_ENV?invariant(Constructor.prototype.render,"createClass(...): Class specification must implement a `render` method."):invariant(Constructor.prototype.render),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!Constructor.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",spec.displayName||"A component"):null);for(var methodName in ReactClassInterface)Constructor.prototype[methodName]||(Constructor.prototype[methodName]=null);if(Constructor.type=Constructor,"production"!==process.env.NODE_ENV)try{Object.defineProperty(Constructor,"type",typeDeprecationDescriptor)}catch(x){}return Constructor},injection:{injectMixin:function(mixin){injectedMixins.push(mixin)}}};module.exports=ReactClass;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./Object.assign":121,"./ReactComponent":129,"./ReactCurrentOwner":134,"./ReactElement":152,"./ReactErrorUtils":155,"./ReactInstanceMap":162,"./ReactLifeCycle":163,"./ReactPropTypeLocationNames":171,"./ReactPropTypeLocations":172,"./ReactUpdateQueue":181,"./invariant":230,"./keyMirror":235,"./keyOf":236,"./warning":249,"_process":95}],129:[function(require,module,exports){
(function (process){
"use strict";function ReactComponent(props,context){this.props=props,this.context=context}var ReactUpdateQueue=require("./ReactUpdateQueue"),invariant=require("./invariant"),warning=require("./warning");if(ReactComponent.prototype.setState=function(partialState,callback){"production"!==process.env.NODE_ENV?invariant("object"==typeof partialState||"function"==typeof partialState||null==partialState,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):invariant("object"==typeof partialState||"function"==typeof partialState||null==partialState),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null!=partialState,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):null),ReactUpdateQueue.enqueueSetState(this,partialState),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},ReactComponent.prototype.forceUpdate=function(callback){ReactUpdateQueue.enqueueForceUpdate(this),callback&&ReactUpdateQueue.enqueueCallback(this,callback)},"production"!==process.env.NODE_ENV){var deprecatedAPIs={getDOMNode:["getDOMNode","Use React.findDOMNode(component) instead."],isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceProps:["replaceProps","Instead, call React.render again at the top level."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."],setProps:["setProps","Instead, call React.render again at the top level."]},defineDeprecationWarning=function(methodName,info){try{Object.defineProperty(ReactComponent.prototype,methodName,{get:function(){return void("production"!==process.env.NODE_ENV?warning(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",info[0],info[1]):null)}})}catch(x){}};for(var fnName in deprecatedAPIs)deprecatedAPIs.hasOwnProperty(fnName)&&defineDeprecationWarning(fnName,deprecatedAPIs[fnName])}module.exports=ReactComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ReactUpdateQueue":181,"./invariant":230,"./warning":249,"_process":95}],130:[function(require,module,exports){
"use strict";var ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactMount=require("./ReactMount"),ReactComponentBrowserEnvironment={processChildrenUpdates:ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(rootNodeID){ReactMount.purgeID(rootNodeID)}};module.exports=ReactComponentBrowserEnvironment;


},{"./ReactDOMIDOperations":139,"./ReactMount":165}],131:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),injected=!1,ReactComponentEnvironment={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(environment){"production"!==process.env.NODE_ENV?invariant(!injected,"ReactCompositeComponent: injectEnvironment() can only be called once."):invariant(!injected),ReactComponentEnvironment.unmountIDFromEnvironment=environment.unmountIDFromEnvironment,ReactComponentEnvironment.replaceNodeWithMarkupByID=environment.replaceNodeWithMarkupByID,ReactComponentEnvironment.processChildrenUpdates=environment.processChildrenUpdates,injected=!0}}};module.exports=ReactComponentEnvironment;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFFQSxJQUFJLFdBQVksUUFBUSxlQUVwQixVQUFXLEVBRVgsMkJBT0YseUJBQTBCLEtBTTFCLDBCQUEyQixLQU0zQix1QkFBd0IsS0FFeEIsV0FDRSxrQkFBbUIsU0FBUyxhQUN6QixlQUFpQixRQUFRLElBQUksU0FBVyxXQUN0QyxTQUNELHlFQUNFLFdBQVcsVUFDZiwwQkFBMEIseUJBQ3hCLFlBQVkseUJBQ2QsMEJBQTBCLDBCQUN4QixZQUFZLDBCQUNkLDBCQUEwQix1QkFDeEIsWUFBWSx1QkFDZCxVQUFXLElBTWpCLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBpbmplY3RlZCA9IGZhbHNlO1xuXG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHtcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGVudmlyb25tZW50IGRlcGVuZGVudCBjbGVhbnVwIGhvb2suIChzZXJ2ZXIgdnMuXG4gICAqIGJyb3dzZXIgZXRjKS4gRXhhbXBsZTogQSBicm93c2VyIHN5c3RlbSBjYWNoZXMgRE9NIG5vZGVzIGJhc2VkIG9uIGNvbXBvbmVudFxuICAgKiBJRCBhbmQgbXVzdCByZW1vdmUgdGhhdCBjYWNoZSBlbnRyeSB3aGVuIHRoaXMgaW5zdGFuY2UgaXMgdW5tb3VudGVkLlxuICAgKi9cbiAgdW5tb3VudElERnJvbUVudmlyb25tZW50OiBudWxsLFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IGluamVjdGFibGUgaG9vayBmb3Igc3dhcHBpbmcgb3V0IG1vdW50IGltYWdlcyBpbiB0aGUgbWlkZGxlIG9mXG4gICAqIHRoZSB0cmVlLlxuICAgKi9cbiAgcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHByb2Nlc3NpbmcgYSBxdWV1ZSBvZiBjaGlsZCB1cGRhdGVzLiBXaWxsXG4gICAqIGxhdGVyIG1vdmUgaW50byBNdWx0aUNoaWxkQ29tcG9uZW50cy5cbiAgICovXG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgaW5qZWN0RW52aXJvbm1lbnQ6IGZ1bmN0aW9uKGVudmlyb25tZW50KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhaW5qZWN0ZWQsXG4gICAgICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogaW5qZWN0RW52aXJvbm1lbnQoKSBjYW4gb25seSBiZSBjYWxsZWQgb25jZS4nXG4gICAgICApIDogaW52YXJpYW50KCFpbmplY3RlZCkpO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQgPVxuICAgICAgICBlbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG4gICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQgPVxuICAgICAgICBlbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzID1cbiAgICAgICAgZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcztcbiAgICAgIGluamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50O1xuIl19
},{"./invariant":230,"_process":95}],132:[function(require,module,exports){
(function (process){
"use strict";function getDeclarationErrorAddendum(component){var owner=component._currentElement._owner||null;if(owner){var name=owner.getName();if(name)return" Check the render method of `"+name+"`."}return""}var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactContext=require("./ReactContext"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactInstanceMap=require("./ReactInstanceMap"),ReactLifeCycle=require("./ReactLifeCycle"),ReactNativeComponent=require("./ReactNativeComponent"),ReactPerf=require("./ReactPerf"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactReconciler=require("./ReactReconciler"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),emptyObject=require("./emptyObject"),invariant=require("./invariant"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("./warning"),nextMountID=1,ReactCompositeComponentMixin={construct:function(element){this._currentElement=element,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._isTopLevel=!1,this._pendingCallbacks=null},mountComponent:function(rootID,transaction,context){this._context=context,this._mountOrder=nextMountID++,this._rootNodeID=rootID;var publicProps=this._processProps(this._currentElement.props),publicContext=this._processContext(this._currentElement._context),Component=ReactNativeComponent.getComponentClassForElement(this._currentElement),inst=new Component(publicProps,publicContext);"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null!=inst.render,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render` in your component or you may have accidentally tried to render an element whose type is a function that isn't a React component.",Component.displayName||Component.name||"Component"):null),inst.props=publicProps,inst.context=publicContext,inst.refs=emptyObject,this._instance=inst,ReactInstanceMap.set(inst,this),"production"!==process.env.NODE_ENV&&this._warnIfContextsDiffer(this._currentElement._context,context),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!inst.getInitialState||inst.getInitialState.isReactClassApproved,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning(!inst.getDefaultProps||inst.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning(!inst.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning(!inst.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"):null,"production"!==process.env.NODE_ENV?warning("function"!=typeof inst.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"):null);var initialState=inst.state;void 0===initialState&&(inst.state=initialState=null),"production"!==process.env.NODE_ENV?invariant("object"==typeof initialState&&!Array.isArray(initialState),"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):invariant("object"==typeof initialState&&!Array.isArray(initialState)),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var childContext,renderedElement,previouslyMounting=ReactLifeCycle.currentlyMountingInstance;ReactLifeCycle.currentlyMountingInstance=this;try{inst.componentWillMount&&(inst.componentWillMount(),this._pendingStateQueue&&(inst.state=this._processPendingState(inst.props,inst.context))),childContext=this._getValidatedChildContext(context),renderedElement=this._renderValidatedComponent(childContext)}finally{ReactLifeCycle.currentlyMountingInstance=previouslyMounting}this._renderedComponent=this._instantiateReactComponent(renderedElement,this._currentElement.type);var markup=ReactReconciler.mountComponent(this._renderedComponent,rootID,transaction,this._mergeChildContext(context,childContext));return inst.componentDidMount&&transaction.getReactMountReady().enqueue(inst.componentDidMount,inst),markup},unmountComponent:function(){var inst=this._instance;if(inst.componentWillUnmount){var previouslyUnmounting=ReactLifeCycle.currentlyUnmountingInstance;ReactLifeCycle.currentlyUnmountingInstance=this;try{inst.componentWillUnmount()}finally{ReactLifeCycle.currentlyUnmountingInstance=previouslyUnmounting}}ReactReconciler.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,ReactInstanceMap.remove(inst)},_setPropsInternal:function(partialProps,callback){var element=this._pendingElement||this._currentElement;this._pendingElement=ReactElement.cloneAndReplaceProps(element,assign({},element.props,partialProps)),ReactUpdates.enqueueUpdate(this,callback)},_maskContext:function(context){var maskedContext=null;if("string"==typeof this._currentElement.type)return emptyObject;var contextTypes=this._currentElement.type.contextTypes;if(!contextTypes)return emptyObject;maskedContext={};for(var contextName in contextTypes)maskedContext[contextName]=context[contextName];return maskedContext},_processContext:function(context){var maskedContext=this._maskContext(context);if("production"!==process.env.NODE_ENV){var Component=ReactNativeComponent.getComponentClassForElement(this._currentElement);Component.contextTypes&&this._checkPropTypes(Component.contextTypes,maskedContext,ReactPropTypeLocations.context)}return maskedContext},_getValidatedChildContext:function(currentContext){var inst=this._instance,childContext=inst.getChildContext&&inst.getChildContext();if(childContext){"production"!==process.env.NODE_ENV?invariant("object"==typeof inst.constructor.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):invariant("object"==typeof inst.constructor.childContextTypes),"production"!==process.env.NODE_ENV&&this._checkPropTypes(inst.constructor.childContextTypes,childContext,ReactPropTypeLocations.childContext);for(var name in childContext)"production"!==process.env.NODE_ENV?invariant(name in inst.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",name):invariant(name in inst.constructor.childContextTypes);return childContext}return null},_mergeChildContext:function(currentContext,childContext){return childContext?assign({},currentContext,childContext):currentContext},_processProps:function(newProps){if("production"!==process.env.NODE_ENV){var Component=ReactNativeComponent.getComponentClassForElement(this._currentElement);Component.propTypes&&this._checkPropTypes(Component.propTypes,newProps,ReactPropTypeLocations.prop)}return newProps},_checkPropTypes:function(propTypes,props,location){var componentName=this.getName();for(var propName in propTypes)if(propTypes.hasOwnProperty(propName)){var error;try{"production"!==process.env.NODE_ENV?invariant("function"==typeof propTypes[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",componentName||"React class",ReactPropTypeLocationNames[location],propName):invariant("function"==typeof propTypes[propName]),error=propTypes[propName](props,propName,componentName,location)}catch(ex){error=ex}if(error instanceof Error){var addendum=getDeclarationErrorAddendum(this);location===ReactPropTypeLocations.prop?"production"!==process.env.NODE_ENV?warning(!1,"Failed Composite propType: %s%s",error.message,addendum):null:"production"!==process.env.NODE_ENV?warning(!1,"Failed Context Types: %s%s",error.message,addendum):null}}},receiveComponent:function(nextElement,transaction,nextContext){var prevElement=this._currentElement,prevContext=this._context;this._pendingElement=null,this.updateComponent(transaction,prevElement,nextElement,prevContext,nextContext)},performUpdateIfNecessary:function(transaction){null!=this._pendingElement&&ReactReconciler.receiveComponent(this,this._pendingElement||this._currentElement,transaction,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&("production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(this._currentElement),this.updateComponent(transaction,this._currentElement,this._currentElement,this._context,this._context))},_warnIfContextsDiffer:function(ownerBasedContext,parentBasedContext){ownerBasedContext=this._maskContext(ownerBasedContext),parentBasedContext=this._maskContext(parentBasedContext);for(var parentKeys=Object.keys(parentBasedContext).sort(),displayName=this.getName()||"ReactCompositeComponent",i=0;i<parentKeys.length;i++){var key=parentKeys[i];"production"!==process.env.NODE_ENV?warning(ownerBasedContext[key]===parentBasedContext[key],"owner-based and parent-based contexts differ (values: `%s` vs `%s`) for key (%s) while mounting %s (see: http://fb.me/react-context-by-parent)",ownerBasedContext[key],parentBasedContext[key],key,displayName):null}},updateComponent:function(transaction,prevParentElement,nextParentElement,prevUnmaskedContext,nextUnmaskedContext){var inst=this._instance,nextContext=inst.context,nextProps=inst.props;prevParentElement!==nextParentElement&&(nextContext=this._processContext(nextParentElement._context),nextProps=this._processProps(nextParentElement.props),"production"!==process.env.NODE_ENV&&null!=nextUnmaskedContext&&this._warnIfContextsDiffer(nextParentElement._context,nextUnmaskedContext),inst.componentWillReceiveProps&&inst.componentWillReceiveProps(nextProps,nextContext));var nextState=this._processPendingState(nextProps,nextContext),shouldUpdate=this._pendingForceUpdate||!inst.shouldComponentUpdate||inst.shouldComponentUpdate(nextProps,nextState,nextContext);"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning("undefined"!=typeof shouldUpdate,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"):null),shouldUpdate?(this._pendingForceUpdate=!1,this._performComponentUpdate(nextParentElement,nextProps,nextState,nextContext,transaction,nextUnmaskedContext)):(this._currentElement=nextParentElement,this._context=nextUnmaskedContext,inst.props=nextProps,inst.state=nextState,inst.context=nextContext)},_processPendingState:function(props,context){var inst=this._instance,queue=this._pendingStateQueue,replace=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!queue)return inst.state;if(replace&&1===queue.length)return queue[0];for(var nextState=assign({},replace?queue[0]:inst.state),i=replace?1:0;i<queue.length;i++){var partial=queue[i];assign(nextState,"function"==typeof partial?partial.call(inst,nextState,props,context):partial)}return nextState},_performComponentUpdate:function(nextElement,nextProps,nextState,nextContext,transaction,unmaskedContext){var inst=this._instance,prevProps=inst.props,prevState=inst.state,prevContext=inst.context;inst.componentWillUpdate&&inst.componentWillUpdate(nextProps,nextState,nextContext),this._currentElement=nextElement,this._context=unmaskedContext,inst.props=nextProps,inst.state=nextState,inst.context=nextContext,this._updateRenderedComponent(transaction,unmaskedContext),inst.componentDidUpdate&&transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst,prevProps,prevState,prevContext),inst)},_updateRenderedComponent:function(transaction,context){var prevComponentInstance=this._renderedComponent,prevRenderedElement=prevComponentInstance._currentElement,childContext=this._getValidatedChildContext(),nextRenderedElement=this._renderValidatedComponent(childContext);if(shouldUpdateReactComponent(prevRenderedElement,nextRenderedElement))ReactReconciler.receiveComponent(prevComponentInstance,nextRenderedElement,transaction,this._mergeChildContext(context,childContext));else{var thisID=this._rootNodeID,prevComponentID=prevComponentInstance._rootNodeID;ReactReconciler.unmountComponent(prevComponentInstance),this._renderedComponent=this._instantiateReactComponent(nextRenderedElement,this._currentElement.type);var nextMarkup=ReactReconciler.mountComponent(this._renderedComponent,thisID,transaction,this._mergeChildContext(context,childContext));this._replaceNodeWithMarkupByID(prevComponentID,nextMarkup)}},_replaceNodeWithMarkupByID:function(prevComponentID,nextMarkup){ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID,nextMarkup)},_renderValidatedComponentWithoutOwnerOrContext:function(){var inst=this._instance,renderedComponent=inst.render();return"production"!==process.env.NODE_ENV&&"undefined"==typeof renderedComponent&&inst.render._isMockFunction&&(renderedComponent=null),renderedComponent},_renderValidatedComponent:function(childContext){var renderedComponent,previousContext=ReactContext.current;ReactContext.current=this._mergeChildContext(this._currentElement._context,childContext),ReactCurrentOwner.current=this;try{renderedComponent=this._renderValidatedComponentWithoutOwnerOrContext()}finally{ReactContext.current=previousContext,ReactCurrentOwner.current=null}return"production"!==process.env.NODE_ENV?invariant(null===renderedComponent||renderedComponent===!1||ReactElement.isValidElement(renderedComponent),"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):invariant(null===renderedComponent||renderedComponent===!1||ReactElement.isValidElement(renderedComponent)),renderedComponent},attachRef:function(ref,component){var inst=this.getPublicInstance(),refs=inst.refs===emptyObject?inst.refs={}:inst.refs;refs[ref]=component.getPublicInstance()},detachRef:function(ref){var refs=this.getPublicInstance().refs;delete refs[ref]},getName:function(){var type=this._currentElement.type,constructor=this._instance&&this._instance.constructor;return type.displayName||constructor&&constructor.displayName||type.name||constructor&&constructor.name||null},getPublicInstance:function(){return this._instance},_instantiateReactComponent:null};ReactPerf.measureMethods(ReactCompositeComponentMixin,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var ReactCompositeComponent={Mixin:ReactCompositeComponentMixin};module.exports=ReactCompositeComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./Object.assign":121,"./ReactComponentEnvironment":131,"./ReactContext":133,"./ReactCurrentOwner":134,"./ReactElement":152,"./ReactElementValidator":153,"./ReactInstanceMap":162,"./ReactLifeCycle":163,"./ReactNativeComponent":168,"./ReactPerf":170,"./ReactPropTypeLocationNames":171,"./ReactPropTypeLocations":172,"./ReactReconciler":176,"./ReactUpdates":182,"./emptyObject":210,"./invariant":230,"./shouldUpdateReactComponent":246,"./warning":249,"_process":95}],133:[function(require,module,exports){
(function (process){
"use strict";var assign=require("./Object.assign"),emptyObject=require("./emptyObject"),warning=require("./warning"),didWarn=!1,ReactContext={current:emptyObject,withContext:function(newContext,scopedCallback){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(didWarn,"withContext is deprecated and will be removed in a future version. Use a wrapper component with getChildContext instead."):null,didWarn=!0);var result,previousContext=ReactContext.current;ReactContext.current=assign({},previousContext,newContext);try{result=scopedCallback()}finally{ReactContext.current=previousContext}return result}};module.exports=ReactContext;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb250ZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQSxZQUVBLElBQUksUUFBUyxRQUFRLG1CQUNqQixZQUFjLFFBQVEsaUJBQ3RCLFFBQVUsUUFBUSxhQUVsQixTQUFVLEVBUVYsY0FNRixRQUFTLFlBa0JULFlBQWEsU0FBUyxXQUFZLGdCQUM1QixlQUFpQixRQUFRLElBQUksV0FDOUIsZUFBaUIsUUFBUSxJQUFJLFNBQVcsUUFDdkMsUUFDQSw0SEFFRSxLQUVKLFNBQVUsRUFHWixJQUFJLFFBQ0EsZ0JBQWtCLGFBQWEsT0FDbkMsY0FBYSxRQUFVLFVBQVcsZ0JBQWlCLFdBQ25ELEtBQ0UsT0FBUyxpQkFDVCxRQUNBLGFBQWEsUUFBVSxnQkFFekIsTUFBTyxTQUtYLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29udGV4dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGRpZFdhcm4gPSBmYWxzZTtcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBjb250ZXh0LlxuICpcbiAqIFRoZSBjb250ZXh0IGlzIGF1dG9tYXRpY2FsbHkgcGFzc2VkIGRvd24gdGhlIGNvbXBvbmVudCBvd25lcnNoaXAgaGllcmFyY2h5XG4gKiBhbmQgaXMgYWNjZXNzaWJsZSB2aWEgYHRoaXMuY29udGV4dGAgb24gUmVhY3RDb21wb3NpdGVDb21wb25lbnRzLlxuICovXG52YXIgUmVhY3RDb250ZXh0ID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGN1cnJlbnQ6IGVtcHR5T2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUZW1wb3JhcmlseSBleHRlbmRzIHRoZSBjdXJyZW50IGNvbnRleHQgd2hpbGUgZXhlY3V0aW5nIHNjb3BlZENhbGxiYWNrLlxuICAgKlxuICAgKiBBIHR5cGljYWwgdXNlIGNhc2UgbWlnaHQgbG9vayBsaWtlXG4gICAqXG4gICAqICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENvbnRleHQud2l0aENvbnRleHQoe2ZvbzogJ2Zvbyd9LCAoKSA9PiAoXG4gICAqXG4gICAqICAgICkpO1xuICAgKiAgICByZXR1cm4gPGRpdj57Y2hpbGRyZW59PC9kaXY+O1xuICAgKiAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3Q29udGV4dCBOZXcgY29udGV4dCB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNjb3BlZENhbGxiYWNrIENhbGxiYWNrIHRvIHJ1biB3aXRoIHRoZSBuZXcgY29udGV4dFxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudHxhcnJheTxSZWFjdENvbXBvbmVudD59XG4gICAqL1xuICB3aXRoQ29udGV4dDogZnVuY3Rpb24obmV3Q29udGV4dCwgc2NvcGVkQ2FsbGJhY2spIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgZGlkV2FybixcbiAgICAgICAgJ3dpdGhDb250ZXh0IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcbiAgICAgICAgJ1VzZSBhIHdyYXBwZXIgY29tcG9uZW50IHdpdGggZ2V0Q2hpbGRDb250ZXh0IGluc3RlYWQuJ1xuICAgICAgKSA6IG51bGwpO1xuXG4gICAgICBkaWRXYXJuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IGFzc2lnbih7fSwgcHJldmlvdXNDb250ZXh0LCBuZXdDb250ZXh0KTtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gc2NvcGVkQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbnRleHQ7XG4iXX0=
},{"./Object.assign":121,"./emptyObject":210,"./warning":249,"_process":95}],134:[function(require,module,exports){
"use strict";var ReactCurrentOwner={current:null};module.exports=ReactCurrentOwner;


},{}],135:[function(require,module,exports){
(function (process){
"use strict";function createDOMFactory(tag){return"production"!==process.env.NODE_ENV?ReactElementValidator.createFactory(tag):ReactElement.createFactory(tag)}var ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),mapObject=require("./mapObject"),ReactDOM=mapObject({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},createDOMFactory);module.exports=ReactDOM;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET00uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBLFlBYUEsU0FBUyxrQkFBaUIsS0FDeEIsTUFBSSxlQUFpQixRQUFRLElBQUksU0FDeEIsc0JBQXNCLGNBQWMsS0FFdEMsYUFBYSxjQUFjLEtBZnBDLEdBQUksY0FBZSxRQUFRLGtCQUN2QixzQkFBd0IsUUFBUSwyQkFFaEMsVUFBWSxRQUFRLGVBcUJwQixTQUFXLFdBQ2IsRUFBRyxJQUNILEtBQU0sT0FDTixRQUFTLFVBQ1QsS0FBTSxPQUNOLFFBQVMsVUFDVCxNQUFPLFFBQ1AsTUFBTyxRQUNQLEVBQUcsSUFDSCxLQUFNLE9BQ04sSUFBSyxNQUNMLElBQUssTUFDTCxJQUFLLE1BQ0wsV0FBWSxhQUNaLEtBQU0sT0FDTixHQUFJLEtBQ0osT0FBUSxTQUNSLE9BQVEsU0FDUixRQUFTLFVBQ1QsS0FBTSxPQUNOLEtBQU0sT0FDTixJQUFLLE1BQ0wsU0FBVSxXQUNWLEtBQU0sT0FDTixTQUFVLFdBQ1YsR0FBSSxLQUNKLElBQUssTUFDTCxRQUFTLFVBQ1QsSUFBSyxNQUNMLE9BQVEsU0FDUixJQUFLLE1BQ0wsR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osTUFBTyxRQUNQLFNBQVUsV0FDVixXQUFZLGFBQ1osT0FBUSxTQUNSLE9BQVEsU0FDUixLQUFNLE9BQ04sR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osS0FBTSxPQUNOLE9BQVEsU0FDUixHQUFJLEtBQ0osS0FBTSxPQUNOLEVBQUcsSUFDSCxPQUFRLFNBQ1IsSUFBSyxNQUNMLE1BQU8sUUFDUCxJQUFLLE1BQ0wsSUFBSyxNQUNMLE9BQVEsU0FDUixNQUFPLFFBQ1AsT0FBUSxTQUNSLEdBQUksS0FDSixLQUFNLE9BQ04sS0FBTSxPQUNOLElBQUssTUFDTCxLQUFNLE9BQ04sS0FBTSxPQUNOLFNBQVUsV0FDVixLQUFNLE9BQ04sTUFBTyxRQUNQLElBQUssTUFDTCxTQUFVLFdBQ1YsT0FBUSxTQUNSLEdBQUksS0FDSixTQUFVLFdBQ1YsT0FBUSxTQUNSLE9BQVEsU0FDUixFQUFHLElBQ0gsTUFBTyxRQUNQLFFBQVMsVUFDVCxJQUFLLE1BQ0wsU0FBVSxXQUNWLEVBQUcsSUFDSCxHQUFJLEtBQ0osR0FBSSxLQUNKLEtBQU0sT0FDTixFQUFHLElBQ0gsS0FBTSxPQUNOLE9BQVEsU0FDUixRQUFTLFVBQ1QsT0FBUSxTQUNSLE1BQU8sUUFDUCxPQUFRLFNBQ1IsS0FBTSxPQUNOLE9BQVEsU0FDUixNQUFPLFFBQ1AsSUFBSyxNQUNMLFFBQVMsVUFDVCxJQUFLLE1BQ0wsTUFBTyxRQUNQLE1BQU8sUUFDUCxHQUFJLEtBQ0osU0FBVSxXQUNWLE1BQU8sUUFDUCxHQUFJLEtBQ0osTUFBTyxRQUNQLEtBQU0sT0FDTixNQUFPLFFBQ1AsR0FBSSxLQUNKLE1BQU8sUUFDUCxFQUFHLElBQ0gsR0FBSSxLQUNKLE1BQU8sTUFDUCxNQUFPLFFBQ1AsSUFBSyxNQUdMLE9BQVEsU0FDUixTQUFVLFdBQ1YsS0FBTSxPQUNOLFFBQVMsVUFDVCxFQUFHLElBQ0gsS0FBTSxPQUNOLGVBQWdCLGlCQUNoQixLQUFNLE9BQ04sS0FBTSxPQUNOLFFBQVMsVUFDVCxRQUFTLFVBQ1QsU0FBVSxXQUNWLGVBQWdCLGlCQUNoQixLQUFNLE9BQ04sS0FBTSxPQUNOLElBQUssTUFDTCxLQUFNLE9BQ04sTUFBTyxTQUVOLGlCQUVILFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3JcIik7XG5cbnZhciBtYXBPYmplY3QgPSByZXF1aXJlKFwiLi9tYXBPYmplY3RcIik7XG5cbi8qKlxuICogQ3JlYXRlIGEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgSFRNTCB0YWcgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUYWcgbmFtZSAoZS5nLiBgZGl2YCkuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVET01GYWN0b3J5KHRhZykge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgcmV0dXJuIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5KHRhZyk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KHRhZyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcHBpbmcgZnJvbSBzdXBwb3J0ZWQgSFRNTCB0YWdzIHRvIGBSZWFjdERPTUNvbXBvbmVudGAgY2xhc3Nlcy5cbiAqIFRoaXMgaXMgYWxzbyBhY2Nlc3NpYmxlIHZpYSBgUmVhY3QuRE9NYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBSZWFjdERPTSA9IG1hcE9iamVjdCh7XG4gIGE6ICdhJyxcbiAgYWJicjogJ2FiYnInLFxuICBhZGRyZXNzOiAnYWRkcmVzcycsXG4gIGFyZWE6ICdhcmVhJyxcbiAgYXJ0aWNsZTogJ2FydGljbGUnLFxuICBhc2lkZTogJ2FzaWRlJyxcbiAgYXVkaW86ICdhdWRpbycsXG4gIGI6ICdiJyxcbiAgYmFzZTogJ2Jhc2UnLFxuICBiZGk6ICdiZGknLFxuICBiZG86ICdiZG8nLFxuICBiaWc6ICdiaWcnLFxuICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG4gIGJvZHk6ICdib2R5JyxcbiAgYnI6ICdicicsXG4gIGJ1dHRvbjogJ2J1dHRvbicsXG4gIGNhbnZhczogJ2NhbnZhcycsXG4gIGNhcHRpb246ICdjYXB0aW9uJyxcbiAgY2l0ZTogJ2NpdGUnLFxuICBjb2RlOiAnY29kZScsXG4gIGNvbDogJ2NvbCcsXG4gIGNvbGdyb3VwOiAnY29sZ3JvdXAnLFxuICBkYXRhOiAnZGF0YScsXG4gIGRhdGFsaXN0OiAnZGF0YWxpc3QnLFxuICBkZDogJ2RkJyxcbiAgZGVsOiAnZGVsJyxcbiAgZGV0YWlsczogJ2RldGFpbHMnLFxuICBkZm46ICdkZm4nLFxuICBkaWFsb2c6ICdkaWFsb2cnLFxuICBkaXY6ICdkaXYnLFxuICBkbDogJ2RsJyxcbiAgZHQ6ICdkdCcsXG4gIGVtOiAnZW0nLFxuICBlbWJlZDogJ2VtYmVkJyxcbiAgZmllbGRzZXQ6ICdmaWVsZHNldCcsXG4gIGZpZ2NhcHRpb246ICdmaWdjYXB0aW9uJyxcbiAgZmlndXJlOiAnZmlndXJlJyxcbiAgZm9vdGVyOiAnZm9vdGVyJyxcbiAgZm9ybTogJ2Zvcm0nLFxuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBoZWFkOiAnaGVhZCcsXG4gIGhlYWRlcjogJ2hlYWRlcicsXG4gIGhyOiAnaHInLFxuICBodG1sOiAnaHRtbCcsXG4gIGk6ICdpJyxcbiAgaWZyYW1lOiAnaWZyYW1lJyxcbiAgaW1nOiAnaW1nJyxcbiAgaW5wdXQ6ICdpbnB1dCcsXG4gIGluczogJ2lucycsXG4gIGtiZDogJ2tiZCcsXG4gIGtleWdlbjogJ2tleWdlbicsXG4gIGxhYmVsOiAnbGFiZWwnLFxuICBsZWdlbmQ6ICdsZWdlbmQnLFxuICBsaTogJ2xpJyxcbiAgbGluazogJ2xpbmsnLFxuICBtYWluOiAnbWFpbicsXG4gIG1hcDogJ21hcCcsXG4gIG1hcms6ICdtYXJrJyxcbiAgbWVudTogJ21lbnUnLFxuICBtZW51aXRlbTogJ21lbnVpdGVtJyxcbiAgbWV0YTogJ21ldGEnLFxuICBtZXRlcjogJ21ldGVyJyxcbiAgbmF2OiAnbmF2JyxcbiAgbm9zY3JpcHQ6ICdub3NjcmlwdCcsXG4gIG9iamVjdDogJ29iamVjdCcsXG4gIG9sOiAnb2wnLFxuICBvcHRncm91cDogJ29wdGdyb3VwJyxcbiAgb3B0aW9uOiAnb3B0aW9uJyxcbiAgb3V0cHV0OiAnb3V0cHV0JyxcbiAgcDogJ3AnLFxuICBwYXJhbTogJ3BhcmFtJyxcbiAgcGljdHVyZTogJ3BpY3R1cmUnLFxuICBwcmU6ICdwcmUnLFxuICBwcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgcTogJ3EnLFxuICBycDogJ3JwJyxcbiAgcnQ6ICdydCcsXG4gIHJ1Ynk6ICdydWJ5JyxcbiAgczogJ3MnLFxuICBzYW1wOiAnc2FtcCcsXG4gIHNjcmlwdDogJ3NjcmlwdCcsXG4gIHNlY3Rpb246ICdzZWN0aW9uJyxcbiAgc2VsZWN0OiAnc2VsZWN0JyxcbiAgc21hbGw6ICdzbWFsbCcsXG4gIHNvdXJjZTogJ3NvdXJjZScsXG4gIHNwYW46ICdzcGFuJyxcbiAgc3Ryb25nOiAnc3Ryb25nJyxcbiAgc3R5bGU6ICdzdHlsZScsXG4gIHN1YjogJ3N1YicsXG4gIHN1bW1hcnk6ICdzdW1tYXJ5JyxcbiAgc3VwOiAnc3VwJyxcbiAgdGFibGU6ICd0YWJsZScsXG4gIHRib2R5OiAndGJvZHknLFxuICB0ZDogJ3RkJyxcbiAgdGV4dGFyZWE6ICd0ZXh0YXJlYScsXG4gIHRmb290OiAndGZvb3QnLFxuICB0aDogJ3RoJyxcbiAgdGhlYWQ6ICd0aGVhZCcsXG4gIHRpbWU6ICd0aW1lJyxcbiAgdGl0bGU6ICd0aXRsZScsXG4gIHRyOiAndHInLFxuICB0cmFjazogJ3RyYWNrJyxcbiAgdTogJ3UnLFxuICB1bDogJ3VsJyxcbiAgJ3Zhcic6ICd2YXInLFxuICB2aWRlbzogJ3ZpZGVvJyxcbiAgd2JyOiAnd2JyJyxcblxuICAvLyBTVkdcbiAgY2lyY2xlOiAnY2lyY2xlJyxcbiAgY2xpcFBhdGg6ICdjbGlwUGF0aCcsXG4gIGRlZnM6ICdkZWZzJyxcbiAgZWxsaXBzZTogJ2VsbGlwc2UnLFxuICBnOiAnZycsXG4gIGxpbmU6ICdsaW5lJyxcbiAgbGluZWFyR3JhZGllbnQ6ICdsaW5lYXJHcmFkaWVudCcsXG4gIG1hc2s6ICdtYXNrJyxcbiAgcGF0aDogJ3BhdGgnLFxuICBwYXR0ZXJuOiAncGF0dGVybicsXG4gIHBvbHlnb246ICdwb2x5Z29uJyxcbiAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gIHJhZGlhbEdyYWRpZW50OiAncmFkaWFsR3JhZGllbnQnLFxuICByZWN0OiAncmVjdCcsXG4gIHN0b3A6ICdzdG9wJyxcbiAgc3ZnOiAnc3ZnJyxcbiAgdGV4dDogJ3RleHQnLFxuICB0c3BhbjogJ3RzcGFuJ1xuXG59LCBjcmVhdGVET01GYWN0b3J5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTTtcbiJdfQ==
},{"./ReactElement":152,"./ReactElementValidator":153,"./mapObject":237,"_process":95}],136:[function(require,module,exports){
"use strict";var AutoFocusMixin=require("./AutoFocusMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),keyMirror=require("./keyMirror"),button=ReactElement.createFactory("button"),mouseListenerNames=keyMirror({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),ReactDOMButton=ReactClass.createClass({displayName:"ReactDOMButton",tagName:"BUTTON",mixins:[AutoFocusMixin,ReactBrowserComponentMixin],render:function(){var props={};for(var key in this.props)!this.props.hasOwnProperty(key)||this.props.disabled&&mouseListenerNames[key]||(props[key]=this.props[key]);return button(props,this.props.children)}});module.exports=ReactDOMButton;


},{"./AutoFocusMixin":96,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152,"./keyMirror":235}],137:[function(require,module,exports){
(function (process){
"use strict";function assertValidProps(props){props&&(null!=props.dangerouslySetInnerHTML&&("production"!==process.env.NODE_ENV?invariant(null==props.children,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):invariant(null==props.children),"production"!==process.env.NODE_ENV?invariant("object"==typeof props.dangerouslySetInnerHTML&&"__html"in props.dangerouslySetInnerHTML,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):invariant("object"==typeof props.dangerouslySetInnerHTML&&"__html"in props.dangerouslySetInnerHTML)),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null==props.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."):null,"production"!==process.env.NODE_ENV?warning(!props.contentEditable||null==props.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."):null),"production"!==process.env.NODE_ENV?invariant(null==props.style||"object"==typeof props.style,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."):invariant(null==props.style||"object"==typeof props.style))}function putListener(id,registrationName,listener,transaction){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning("onScroll"!==registrationName||isEventSupported("scroll",!0),"This browser doesn't support the `onScroll` event"):null);var container=ReactMount.findReactContainerForID(id);if(container){var doc=container.nodeType===ELEMENT_NODE_TYPE?container.ownerDocument:container;listenTo(registrationName,doc)}transaction.getPutListenerQueue().enqueuePutListener(id,registrationName,listener)}function validateDangerousTag(tag){hasOwnProperty.call(validatedTagCache,tag)||("production"!==process.env.NODE_ENV?invariant(VALID_TAG_REGEX.test(tag),"Invalid tag: %s",tag):invariant(VALID_TAG_REGEX.test(tag)),validatedTagCache[tag]=!0)}function ReactDOMComponent(tag){validateDangerousTag(tag),this._tag=tag,this._renderedChildren=null,this._previousStyleCopy=null,this._rootNodeID=null}var CSSPropertyOperations=require("./CSSPropertyOperations"),DOMProperty=require("./DOMProperty"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactMount=require("./ReactMount"),ReactMultiChild=require("./ReactMultiChild"),ReactPerf=require("./ReactPerf"),assign=require("./Object.assign"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),invariant=require("./invariant"),isEventSupported=require("./isEventSupported"),keyOf=require("./keyOf"),warning=require("./warning"),deleteListener=ReactBrowserEventEmitter.deleteListener,listenTo=ReactBrowserEventEmitter.listenTo,registrationNameModules=ReactBrowserEventEmitter.registrationNameModules,CONTENT_TYPES={string:!0,number:!0},STYLE=keyOf({style:null}),ELEMENT_NODE_TYPE=1,BackendIDOperations=null,omittedCloseTags={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},VALID_TAG_REGEX=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,validatedTagCache={},hasOwnProperty={}.hasOwnProperty;ReactDOMComponent.displayName="ReactDOMComponent",ReactDOMComponent.Mixin={construct:function(element){this._currentElement=element},mountComponent:function(rootID,transaction,context){this._rootNodeID=rootID,assertValidProps(this._currentElement.props);var closeTag=omittedCloseTags[this._tag]?"":"</"+this._tag+">";return this._createOpenTagMarkupAndPutListeners(transaction)+this._createContentMarkup(transaction,context)+closeTag},_createOpenTagMarkupAndPutListeners:function(transaction){var props=this._currentElement.props,ret="<"+this._tag;for(var propKey in props)if(props.hasOwnProperty(propKey)){var propValue=props[propKey];if(null!=propValue)if(registrationNameModules.hasOwnProperty(propKey))putListener(this._rootNodeID,propKey,propValue,transaction);else{propKey===STYLE&&(propValue&&(propValue=this._previousStyleCopy=assign({},props.style)),propValue=CSSPropertyOperations.createMarkupForStyles(propValue));var markup=DOMPropertyOperations.createMarkupForProperty(propKey,propValue);markup&&(ret+=" "+markup)}}if(transaction.renderToStaticMarkup)return ret+">";var markupForID=DOMPropertyOperations.createMarkupForID(this._rootNodeID);return ret+" "+markupForID+">"},_createContentMarkup:function(transaction,context){var prefix="";("listing"===this._tag||"pre"===this._tag||"textarea"===this._tag)&&(prefix="\n");var props=this._currentElement.props,innerHTML=props.dangerouslySetInnerHTML;if(null!=innerHTML){if(null!=innerHTML.__html)return prefix+innerHTML.__html}else{var contentToUse=CONTENT_TYPES[typeof props.children]?props.children:null,childrenToUse=null!=contentToUse?null:props.children;if(null!=contentToUse)return prefix+escapeTextContentForBrowser(contentToUse);if(null!=childrenToUse){var mountImages=this.mountChildren(childrenToUse,transaction,context);return prefix+mountImages.join("")}}return prefix},receiveComponent:function(nextElement,transaction,context){var prevElement=this._currentElement;this._currentElement=nextElement,this.updateComponent(transaction,prevElement,nextElement,context)},updateComponent:function(transaction,prevElement,nextElement,context){assertValidProps(this._currentElement.props),this._updateDOMProperties(prevElement.props,transaction),this._updateDOMChildren(prevElement.props,transaction,context)},_updateDOMProperties:function(lastProps,transaction){var propKey,styleName,styleUpdates,nextProps=this._currentElement.props;for(propKey in lastProps)if(!nextProps.hasOwnProperty(propKey)&&lastProps.hasOwnProperty(propKey))if(propKey===STYLE){var lastStyle=this._previousStyleCopy;for(styleName in lastStyle)lastStyle.hasOwnProperty(styleName)&&(styleUpdates=styleUpdates||{},styleUpdates[styleName]="");this._previousStyleCopy=null}else registrationNameModules.hasOwnProperty(propKey)?deleteListener(this._rootNodeID,propKey):(DOMProperty.isStandardName[propKey]||DOMProperty.isCustomAttribute(propKey))&&BackendIDOperations.deletePropertyByID(this._rootNodeID,propKey);for(propKey in nextProps){var nextProp=nextProps[propKey],lastProp=propKey===STYLE?this._previousStyleCopy:lastProps[propKey];if(nextProps.hasOwnProperty(propKey)&&nextProp!==lastProp)if(propKey===STYLE)if(nextProp?nextProp=this._previousStyleCopy=assign({},nextProp):this._previousStyleCopy=null,lastProp){for(styleName in lastProp)!lastProp.hasOwnProperty(styleName)||nextProp&&nextProp.hasOwnProperty(styleName)||(styleUpdates=styleUpdates||{},styleUpdates[styleName]="");for(styleName in nextProp)nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]&&(styleUpdates=styleUpdates||{},styleUpdates[styleName]=nextProp[styleName])}else styleUpdates=nextProp;else registrationNameModules.hasOwnProperty(propKey)?putListener(this._rootNodeID,propKey,nextProp,transaction):(DOMProperty.isStandardName[propKey]||DOMProperty.isCustomAttribute(propKey))&&BackendIDOperations.updatePropertyByID(this._rootNodeID,propKey,nextProp)}styleUpdates&&BackendIDOperations.updateStylesByID(this._rootNodeID,styleUpdates)},_updateDOMChildren:function(lastProps,transaction,context){var nextProps=this._currentElement.props,lastContent=CONTENT_TYPES[typeof lastProps.children]?lastProps.children:null,nextContent=CONTENT_TYPES[typeof nextProps.children]?nextProps.children:null,lastHtml=lastProps.dangerouslySetInnerHTML&&lastProps.dangerouslySetInnerHTML.__html,nextHtml=nextProps.dangerouslySetInnerHTML&&nextProps.dangerouslySetInnerHTML.__html,lastChildren=null!=lastContent?null:lastProps.children,nextChildren=null!=nextContent?null:nextProps.children,lastHasContentOrHtml=null!=lastContent||null!=lastHtml,nextHasContentOrHtml=null!=nextContent||null!=nextHtml;null!=lastChildren&&null==nextChildren?this.updateChildren(null,transaction,context):lastHasContentOrHtml&&!nextHasContentOrHtml&&this.updateTextContent(""),null!=nextContent?lastContent!==nextContent&&this.updateTextContent(""+nextContent):null!=nextHtml?lastHtml!==nextHtml&&BackendIDOperations.updateInnerHTMLByID(this._rootNodeID,nextHtml):null!=nextChildren&&this.updateChildren(nextChildren,transaction,context)},unmountComponent:function(){this.unmountChildren(),ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID),ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null}},ReactPerf.measureMethods(ReactDOMComponent,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),assign(ReactDOMComponent.prototype,ReactDOMComponent.Mixin,ReactMultiChild.Mixin),ReactDOMComponent.injection={injectIDOperations:function(IDOperations){ReactDOMComponent.BackendIDOperations=BackendIDOperations=IDOperations}},module.exports=ReactDOMComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./CSSPropertyOperations":99,"./DOMProperty":104,"./DOMPropertyOperations":105,"./Object.assign":121,"./ReactBrowserEventEmitter":125,"./ReactComponentBrowserEnvironment":130,"./ReactMount":165,"./ReactMultiChild":166,"./ReactPerf":170,"./escapeTextContentForBrowser":211,"./invariant":230,"./isEventSupported":231,"./keyOf":236,"./warning":249,"_process":95}],138:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),LocalEventTrapMixin=require("./LocalEventTrapMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),form=ReactElement.createFactory("form"),ReactDOMForm=ReactClass.createClass({displayName:"ReactDOMForm",tagName:"FORM",mixins:[ReactBrowserComponentMixin,LocalEventTrapMixin],render:function(){return form(this.props)},componentDidMount:function(){this.trapBubbledEvent(EventConstants.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit,"submit")}});module.exports=ReactDOMForm;


},{"./EventConstants":109,"./LocalEventTrapMixin":119,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152}],139:[function(require,module,exports){
(function (process){
"use strict";var CSSPropertyOperations=require("./CSSPropertyOperations"),DOMChildrenOperations=require("./DOMChildrenOperations"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),invariant=require("./invariant"),setInnerHTML=require("./setInnerHTML"),INVALID_PROPERTY_ERRORS={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},ReactDOMIDOperations={updatePropertyByID:function(id,name,value){var node=ReactMount.getNode(id);"production"!==process.env.NODE_ENV?invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),"updatePropertyByID(...): %s",INVALID_PROPERTY_ERRORS[name]):invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)),null!=value?DOMPropertyOperations.setValueForProperty(node,name,value):DOMPropertyOperations.deleteValueForProperty(node,name)},deletePropertyByID:function(id,name,value){var node=ReactMount.getNode(id);"production"!==process.env.NODE_ENV?invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name),"updatePropertyByID(...): %s",INVALID_PROPERTY_ERRORS[name]):invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)),DOMPropertyOperations.deleteValueForProperty(node,name,value)},updateStylesByID:function(id,styles){var node=ReactMount.getNode(id);CSSPropertyOperations.setValueForStyles(node,styles)},updateInnerHTMLByID:function(id,html){var node=ReactMount.getNode(id);setInnerHTML(node,html)},updateTextContentByID:function(id,content){var node=ReactMount.getNode(id);DOMChildrenOperations.updateTextContent(node,content)},dangerouslyReplaceNodeWithMarkupByID:function(id,markup){var node=ReactMount.getNode(id);DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node,markup)},dangerouslyProcessChildrenUpdates:function(updates,markup){for(var i=0;i<updates.length;i++)updates[i].parentNode=ReactMount.getNode(updates[i].parentID);DOMChildrenOperations.processUpdates(updates,markup)}};ReactPerf.measureMethods(ReactDOMIDOperations,"ReactDOMIDOperations",{updatePropertyByID:"updatePropertyByID",deletePropertyByID:"deletePropertyByID",updateStylesByID:"updateStylesByID",updateInnerHTMLByID:"updateInnerHTMLByID",updateTextContentByID:"updateTextContentByID",dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),module.exports=ReactDOMIDOperations;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./CSSPropertyOperations":99,"./DOMChildrenOperations":103,"./DOMPropertyOperations":105,"./ReactMount":165,"./ReactPerf":170,"./invariant":230,"./setInnerHTML":243,"_process":95}],140:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),LocalEventTrapMixin=require("./LocalEventTrapMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),iframe=ReactElement.createFactory("iframe"),ReactDOMIframe=ReactClass.createClass({displayName:"ReactDOMIframe",tagName:"IFRAME",mixins:[ReactBrowserComponentMixin,LocalEventTrapMixin],render:function(){return iframe(this.props)},componentDidMount:function(){this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load")}});module.exports=ReactDOMIframe;


},{"./EventConstants":109,"./LocalEventTrapMixin":119,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152}],141:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),LocalEventTrapMixin=require("./LocalEventTrapMixin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),img=ReactElement.createFactory("img"),ReactDOMImg=ReactClass.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[ReactBrowserComponentMixin,LocalEventTrapMixin],render:function(){return img(this.props)},componentDidMount:function(){this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(EventConstants.topLevelTypes.topError,"error")}});module.exports=ReactDOMImg;


},{"./EventConstants":109,"./LocalEventTrapMixin":119,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152}],142:[function(require,module,exports){
(function (process){
"use strict";function forceUpdateIfMounted(){this.isMounted()&&this.forceUpdate()}var AutoFocusMixin=require("./AutoFocusMixin"),DOMPropertyOperations=require("./DOMPropertyOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("./invariant"),input=ReactElement.createFactory("input"),instancesByReactID={},ReactDOMInput=ReactClass.createClass({displayName:"ReactDOMInput",tagName:"INPUT",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],getInitialState:function(){var defaultValue=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=defaultValue?defaultValue:null}},render:function(){var props=assign({},this.props);props.defaultChecked=null,props.defaultValue=null;var value=LinkedValueUtils.getValue(this);props.value=null!=value?value:this.state.initialValue;var checked=LinkedValueUtils.getChecked(this);return props.checked=null!=checked?checked:this.state.initialChecked,props.onChange=this._handleChange,input(props,this.props.children)},componentDidMount:function(){var id=ReactMount.getID(this.getDOMNode());instancesByReactID[id]=this},componentWillUnmount:function(){var rootNode=this.getDOMNode(),id=ReactMount.getID(rootNode);delete instancesByReactID[id]},componentDidUpdate:function(prevProps,prevState,prevContext){var rootNode=this.getDOMNode();null!=this.props.checked&&DOMPropertyOperations.setValueForProperty(rootNode,"checked",this.props.checked||!1);var value=LinkedValueUtils.getValue(this);null!=value&&DOMPropertyOperations.setValueForProperty(rootNode,"value",""+value)},_handleChange:function(event){var returnValue,onChange=LinkedValueUtils.getOnChange(this);onChange&&(returnValue=onChange.call(this,event)),ReactUpdates.asap(forceUpdateIfMounted,this);var name=this.props.name;if("radio"===this.props.type&&null!=name){for(var rootNode=this.getDOMNode(),queryRoot=rootNode;queryRoot.parentNode;)queryRoot=queryRoot.parentNode;for(var group=queryRoot.querySelectorAll("input[name="+JSON.stringify(""+name)+'][type="radio"]'),i=0,groupLen=group.length;groupLen>i;i++){var otherNode=group[i];if(otherNode!==rootNode&&otherNode.form===rootNode.form){var otherID=ReactMount.getID(otherNode);"production"!==process.env.NODE_ENV?invariant(otherID,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):invariant(otherID);var otherInstance=instancesByReactID[otherID];"production"!==process.env.NODE_ENV?invariant(otherInstance,"ReactDOMInput: Unknown radio button ID %s.",otherID):invariant(otherInstance),ReactUpdates.asap(forceUpdateIfMounted,otherInstance)}}}return returnValue}});module.exports=ReactDOMInput;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./AutoFocusMixin":96,"./DOMPropertyOperations":105,"./LinkedValueUtils":118,"./Object.assign":121,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152,"./ReactMount":165,"./ReactUpdates":182,"./invariant":230,"_process":95}],143:[function(require,module,exports){
(function (process){
"use strict";var ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),warning=require("./warning"),option=ReactElement.createFactory("option"),ReactDOMOption=ReactClass.createClass({displayName:"ReactDOMOption",tagName:"OPTION",mixins:[ReactBrowserComponentMixin],componentWillMount:function(){"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(null==this.props.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):null)},render:function(){return option(this.props,this.props.children)}});module.exports=ReactDOMOption;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01PcHRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBRUEsSUFBSSw0QkFBNkIsUUFBUSxnQ0FDckMsV0FBYSxRQUFRLGdCQUNyQixhQUFlLFFBQVEsa0JBRXZCLFFBQVUsUUFBUSxhQUVsQixPQUFTLGFBQWEsY0FBYyxVQUtwQyxlQUFpQixXQUFXLGFBQzlCLFlBQWEsaUJBQ2IsUUFBUyxTQUVULFFBQVMsNEJBRVQsbUJBQW9CLFdBRWQsZUFBaUIsUUFBUSxJQUFJLFdBQzlCLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFFBQ2hCLE1BQXZCLEtBQUssTUFBTSxTQUNYLGtHQUVFLE9BSVIsT0FBUSxXQUNOLE1BQU8sUUFBTyxLQUFLLE1BQU8sS0FBSyxNQUFNLFlBS3pDLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NT3B0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIG9wdGlvbiA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdvcHRpb24nKTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxvcHRpb24+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCB3YXJucyB3aGVuIGBzZWxlY3RlZGAgaXMgc2V0LlxuICovXG52YXIgUmVhY3RET01PcHRpb24gPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTU9wdGlvbicsXG4gIHRhZ05hbWU6ICdPUFRJT04nLFxuXG4gIG1peGluczogW1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBgc2VsZWN0ZWRgIGluIDxvcHRpb24+LlxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICB0aGlzLnByb3BzLnNlbGVjdGVkID09IG51bGwsXG4gICAgICAgICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICtcbiAgICAgICAgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9wdGlvbih0aGlzLnByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjtcbiJdfQ==
},{"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152,"./warning":249,"_process":95}],144:[function(require,module,exports){
"use strict";function updateOptionsIfPendingUpdateAndMounted(){if(this._pendingUpdate){this._pendingUpdate=!1;var value=LinkedValueUtils.getValue(this);null!=value&&this.isMounted()&&updateOptions(this,value)}}function selectValueType(props,propName,componentName){if(null==props[propName])return null;if(props.multiple){if(!Array.isArray(props[propName]))return new Error("The `"+propName+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(props[propName]))return new Error("The `"+propName+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function updateOptions(component,propValue){var selectedValue,i,l,options=component.getDOMNode().options;if(component.props.multiple){for(selectedValue={},i=0,l=propValue.length;l>i;i++)selectedValue[""+propValue[i]]=!0;for(i=0,l=options.length;l>i;i++){var selected=selectedValue.hasOwnProperty(options[i].value);options[i].selected!==selected&&(options[i].selected=selected)}}else{for(selectedValue=""+propValue,i=0,l=options.length;l>i;i++)if(options[i].value===selectedValue)return void(options[i].selected=!0);options.length&&(options[0].selected=!0)}}var AutoFocusMixin=require("./AutoFocusMixin"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),select=ReactElement.createFactory("select"),ReactDOMSelect=ReactClass.createClass({displayName:"ReactDOMSelect",tagName:"SELECT",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],propTypes:{defaultValue:selectValueType,value:selectValueType},render:function(){var props=assign({},this.props);return props.onChange=this._handleChange,props.value=null,select(props,this.props.children)},componentWillMount:function(){this._pendingUpdate=!1},componentDidMount:function(){var value=LinkedValueUtils.getValue(this);null!=value?updateOptions(this,value):null!=this.props.defaultValue&&updateOptions(this,this.props.defaultValue)},componentDidUpdate:function(prevProps){var value=LinkedValueUtils.getValue(this);null!=value?(this._pendingUpdate=!1,updateOptions(this,value)):!prevProps.multiple!=!this.props.multiple&&(null!=this.props.defaultValue?updateOptions(this,this.props.defaultValue):updateOptions(this,this.props.multiple?[]:""))},_handleChange:function(event){var returnValue,onChange=LinkedValueUtils.getOnChange(this);return onChange&&(returnValue=onChange.call(this,event)),this._pendingUpdate=!0,ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted,this),returnValue}});module.exports=ReactDOMSelect;


},{"./AutoFocusMixin":96,"./LinkedValueUtils":118,"./Object.assign":121,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152,"./ReactUpdates":182}],145:[function(require,module,exports){
"use strict";function isCollapsed(anchorNode,anchorOffset,focusNode,focusOffset){return anchorNode===focusNode&&anchorOffset===focusOffset}function getIEOffsets(node){var selection=document.selection,selectedRange=selection.createRange(),selectedLength=selectedRange.text.length,fromStart=selectedRange.duplicate();fromStart.moveToElementText(node),fromStart.setEndPoint("EndToStart",selectedRange);var startOffset=fromStart.text.length,endOffset=startOffset+selectedLength;return{start:startOffset,end:endOffset}}function getModernOffsets(node){var selection=window.getSelection&&window.getSelection();if(!selection||0===selection.rangeCount)return null;var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset,currentRange=selection.getRangeAt(0),isSelectionCollapsed=isCollapsed(selection.anchorNode,selection.anchorOffset,selection.focusNode,selection.focusOffset),rangeLength=isSelectionCollapsed?0:currentRange.toString().length,tempRange=currentRange.cloneRange();tempRange.selectNodeContents(node),tempRange.setEnd(currentRange.startContainer,currentRange.startOffset);var isTempRangeCollapsed=isCollapsed(tempRange.startContainer,tempRange.startOffset,tempRange.endContainer,tempRange.endOffset),start=isTempRangeCollapsed?0:tempRange.toString().length,end=start+rangeLength,detectionRange=document.createRange();detectionRange.setStart(anchorNode,anchorOffset),detectionRange.setEnd(focusNode,focusOffset);var isBackward=detectionRange.collapsed;return{start:isBackward?end:start,end:isBackward?start:end}}function setIEOffsets(node,offsets){var start,end,range=document.selection.createRange().duplicate();"undefined"==typeof offsets.end?(start=offsets.start,end=start):offsets.start>offsets.end?(start=offsets.end,end=offsets.start):(start=offsets.start,end=offsets.end),range.moveToElementText(node),range.moveStart("character",start),range.setEndPoint("EndToStart",range),range.moveEnd("character",end-start),range.select()}function setModernOffsets(node,offsets){if(window.getSelection){var selection=window.getSelection(),length=node[getTextContentAccessor()].length,start=Math.min(offsets.start,length),end="undefined"==typeof offsets.end?start:Math.min(offsets.end,length);if(!selection.extend&&start>end){var temp=end;end=start,start=temp}var startMarker=getNodeForCharacterOffset(node,start),endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){var range=document.createRange();range.setStart(startMarker.node,startMarker.offset),selection.removeAllRanges(),start>end?(selection.addRange(range),selection.extend(endMarker.node,endMarker.offset)):(range.setEnd(endMarker.node,endMarker.offset),selection.addRange(range))}}}var ExecutionEnvironment=require("./ExecutionEnvironment"),getNodeForCharacterOffset=require("./getNodeForCharacterOffset"),getTextContentAccessor=require("./getTextContentAccessor"),useIEOffsets=ExecutionEnvironment.canUseDOM&&"selection"in document&&!("getSelection"in window),ReactDOMSelection={getOffsets:useIEOffsets?getIEOffsets:getModernOffsets,setOffsets:useIEOffsets?setIEOffsets:setModernOffsets};module.exports=ReactDOMSelection;


},{"./ExecutionEnvironment":115,"./getNodeForCharacterOffset":223,"./getTextContentAccessor":225}],146:[function(require,module,exports){
"use strict";var DOMPropertyOperations=require("./DOMPropertyOperations"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDOMComponent=require("./ReactDOMComponent"),assign=require("./Object.assign"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),ReactDOMTextComponent=function(props){};assign(ReactDOMTextComponent.prototype,{construct:function(text){this._currentElement=text,this._stringText=""+text,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(rootID,transaction,context){this._rootNodeID=rootID;var escapedText=escapeTextContentForBrowser(this._stringText);return transaction.renderToStaticMarkup?escapedText:"<span "+DOMPropertyOperations.createMarkupForID(rootID)+">"+escapedText+"</span>"},receiveComponent:function(nextText,transaction){if(nextText!==this._currentElement){this._currentElement=nextText;var nextStringText=""+nextText;nextStringText!==this._stringText&&(this._stringText=nextStringText,ReactDOMComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID,nextStringText))}},unmountComponent:function(){ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID)}}),module.exports=ReactDOMTextComponent;


},{"./DOMPropertyOperations":105,"./Object.assign":121,"./ReactComponentBrowserEnvironment":130,"./ReactDOMComponent":137,"./escapeTextContentForBrowser":211}],147:[function(require,module,exports){
(function (process){
"use strict";function forceUpdateIfMounted(){this.isMounted()&&this.forceUpdate()}var AutoFocusMixin=require("./AutoFocusMixin"),DOMPropertyOperations=require("./DOMPropertyOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),textarea=ReactElement.createFactory("textarea"),ReactDOMTextarea=ReactClass.createClass({displayName:"ReactDOMTextarea",tagName:"TEXTAREA",mixins:[AutoFocusMixin,LinkedValueUtils.Mixin,ReactBrowserComponentMixin],getInitialState:function(){var defaultValue=this.props.defaultValue,children=this.props.children;null!=children&&("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):null),"production"!==process.env.NODE_ENV?invariant(null==defaultValue,"If you supply `defaultValue` on a <textarea>, do not pass children."):invariant(null==defaultValue),Array.isArray(children)&&("production"!==process.env.NODE_ENV?invariant(children.length<=1,"<textarea> can only have at most one child."):invariant(children.length<=1),children=children[0]),defaultValue=""+children),null==defaultValue&&(defaultValue="");var value=LinkedValueUtils.getValue(this);return{initialValue:""+(null!=value?value:defaultValue)}},render:function(){var props=assign({},this.props);return"production"!==process.env.NODE_ENV?invariant(null==props.dangerouslySetInnerHTML,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):invariant(null==props.dangerouslySetInnerHTML),props.defaultValue=null,props.value=null,props.onChange=this._handleChange,textarea(props,this.state.initialValue)},componentDidUpdate:function(prevProps,prevState,prevContext){var value=LinkedValueUtils.getValue(this);if(null!=value){var rootNode=this.getDOMNode();DOMPropertyOperations.setValueForProperty(rootNode,"value",""+value)}},_handleChange:function(event){var returnValue,onChange=LinkedValueUtils.getOnChange(this);return onChange&&(returnValue=onChange.call(this,event)),ReactUpdates.asap(forceUpdateIfMounted,this),returnValue}});module.exports=ReactDOMTextarea;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./AutoFocusMixin":96,"./DOMPropertyOperations":105,"./LinkedValueUtils":118,"./Object.assign":121,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactElement":152,"./ReactUpdates":182,"./invariant":230,"./warning":249,"_process":95}],148:[function(require,module,exports){
"use strict";function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}var ReactUpdates=require("./ReactUpdates"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),RESET_BATCHED_UPDATES={initialize:emptyFunction,close:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=!1}},FLUSH_BATCHED_UPDATES={initialize:emptyFunction,close:ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)},TRANSACTION_WRAPPERS=[FLUSH_BATCHED_UPDATES,RESET_BATCHED_UPDATES];assign(ReactDefaultBatchingStrategyTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(callback,a,b,c,d){var alreadyBatchingUpdates=ReactDefaultBatchingStrategy.isBatchingUpdates;ReactDefaultBatchingStrategy.isBatchingUpdates=!0,alreadyBatchingUpdates?callback(a,b,c,d):transaction.perform(callback,null,a,b,c,d)}};module.exports=ReactDefaultBatchingStrategy;


},{"./Object.assign":121,"./ReactUpdates":182,"./Transaction":198,"./emptyFunction":209}],149:[function(require,module,exports){
(function (process){
"use strict";function autoGenerateWrapperClass(type){return ReactClass.createClass({tagName:type.toUpperCase(),render:function(){return new ReactElement(type,null,null,null,null,this.props)}})}function inject(){if(ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener),ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder),ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles),ReactInjection.EventPluginHub.injectMount(ReactMount),ReactInjection.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,MobileSafariClickEventPlugin:MobileSafariClickEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin}),ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent),ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent),ReactInjection.NativeComponent.injectAutoWrapper(autoGenerateWrapperClass),ReactInjection.Class.injectMixin(ReactBrowserComponentMixin),ReactInjection.NativeComponent.injectComponentClasses({button:ReactDOMButton,form:ReactDOMForm,iframe:ReactDOMIframe,img:ReactDOMImg,input:ReactDOMInput,option:ReactDOMOption,select:ReactDOMSelect,textarea:ReactDOMTextarea,html:createFullPageComponent("html"),head:createFullPageComponent("head"),body:createFullPageComponent("body")}),ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig),ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig),ReactInjection.EmptyComponent.injectEmptyComponent("noscript"),ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction),ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy),ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM?ClientReactRootIndex.createReactRootIndex:ServerReactRootIndex.createReactRootIndex),ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment),ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations),"production"!==process.env.NODE_ENV){var url=ExecutionEnvironment.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(url)){var ReactDefaultPerf=require("./ReactDefaultPerf");ReactDefaultPerf.start()}}}var BeforeInputEventPlugin=require("./BeforeInputEventPlugin"),ChangeEventPlugin=require("./ChangeEventPlugin"),ClientReactRootIndex=require("./ClientReactRootIndex"),DefaultEventPluginOrder=require("./DefaultEventPluginOrder"),EnterLeaveEventPlugin=require("./EnterLeaveEventPlugin"),ExecutionEnvironment=require("./ExecutionEnvironment"),HTMLDOMPropertyConfig=require("./HTMLDOMPropertyConfig"),MobileSafariClickEventPlugin=require("./MobileSafariClickEventPlugin"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactClass=require("./ReactClass"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactDOMComponent=require("./ReactDOMComponent"),ReactDOMButton=require("./ReactDOMButton"),ReactDOMForm=require("./ReactDOMForm"),ReactDOMImg=require("./ReactDOMImg"),ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactDOMIframe=require("./ReactDOMIframe"),ReactDOMInput=require("./ReactDOMInput"),ReactDOMOption=require("./ReactDOMOption"),ReactDOMSelect=require("./ReactDOMSelect"),ReactDOMTextarea=require("./ReactDOMTextarea"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactElement=require("./ReactElement"),ReactEventListener=require("./ReactEventListener"),ReactInjection=require("./ReactInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactReconcileTransaction=require("./ReactReconcileTransaction"),SelectEventPlugin=require("./SelectEventPlugin"),ServerReactRootIndex=require("./ServerReactRootIndex"),SimpleEventPlugin=require("./SimpleEventPlugin"),SVGDOMPropertyConfig=require("./SVGDOMPropertyConfig"),createFullPageComponent=require("./createFullPageComponent");module.exports={inject:inject};

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./BeforeInputEventPlugin":97,"./ChangeEventPlugin":101,"./ClientReactRootIndex":102,"./DefaultEventPluginOrder":107,"./EnterLeaveEventPlugin":108,"./ExecutionEnvironment":115,"./HTMLDOMPropertyConfig":117,"./MobileSafariClickEventPlugin":120,"./ReactBrowserComponentMixin":124,"./ReactClass":128,"./ReactComponentBrowserEnvironment":130,"./ReactDOMButton":136,"./ReactDOMComponent":137,"./ReactDOMForm":138,"./ReactDOMIDOperations":139,"./ReactDOMIframe":140,"./ReactDOMImg":141,"./ReactDOMInput":142,"./ReactDOMOption":143,"./ReactDOMSelect":144,"./ReactDOMTextComponent":146,"./ReactDOMTextarea":147,"./ReactDefaultBatchingStrategy":148,"./ReactDefaultPerf":150,"./ReactElement":152,"./ReactEventListener":157,"./ReactInjection":159,"./ReactInstanceHandles":161,"./ReactMount":165,"./ReactReconcileTransaction":175,"./SVGDOMPropertyConfig":183,"./SelectEventPlugin":184,"./ServerReactRootIndex":185,"./SimpleEventPlugin":186,"./createFullPageComponent":206,"_process":95}],150:[function(require,module,exports){
"use strict";function roundFloat(val){return Math.floor(100*val)/100}function addValue(obj,key,val){obj[key]=(obj[key]||0)+val}var DOMProperty=require("./DOMProperty"),ReactDefaultPerfAnalysis=require("./ReactDefaultPerfAnalysis"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),performanceNow=require("./performanceNow"),ReactDefaultPerf={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){ReactDefaultPerf._injected||ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure),ReactDefaultPerf._allMeasurements.length=0,ReactPerf.enableMeasure=!0},stop:function(){ReactPerf.enableMeasure=!1},getLastMeasurements:function(){return ReactDefaultPerf._allMeasurements},printExclusive:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements;var summary=ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);console.table(summary.map(function(item){return{"Component class name":item.componentName,"Total inclusive time (ms)":roundFloat(item.inclusive),"Exclusive mount time (ms)":roundFloat(item.exclusive),"Exclusive render time (ms)":roundFloat(item.render),"Mount time per instance (ms)":roundFloat(item.exclusive/item.count),"Render time per instance (ms)":roundFloat(item.render/item.count),Instances:item.count}}))},printInclusive:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements;var summary=ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);console.table(summary.map(function(item){return{"Owner > component":item.componentName,"Inclusive time (ms)":roundFloat(item.time),Instances:item.count}})),console.log("Total time:",ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(measurements){var summary=ReactDefaultPerfAnalysis.getInclusiveSummary(measurements,!0);return summary.map(function(item){return{"Owner > component":item.componentName,"Wasted time (ms)":item.time,Instances:item.count}})},printWasted:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements,console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements)),console.log("Total time:",ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2)+" ms")},printDOM:function(measurements){measurements=measurements||ReactDefaultPerf._allMeasurements;var summary=ReactDefaultPerfAnalysis.getDOMSummary(measurements);console.table(summary.map(function(item){var result={};return result[DOMProperty.ID_ATTRIBUTE_NAME]=item.id,result.type=item.type,result.args=JSON.stringify(item.args),result})),console.log("Total time:",ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2)+" ms")},_recordWrite:function(id,fnName,totalTime,args){var writes=ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length-1].writes;writes[id]=writes[id]||[],writes[id].push({type:fnName,time:totalTime,args:args})},measure:function(moduleName,fnName,func){return function(){for(var args=[],$__0=0,$__1=arguments.length;$__1>$__0;$__0++)args.push(arguments[$__0]);var totalTime,rv,start;if("_renderNewRootComponent"===fnName||"flushBatchedUpdates"===fnName)return ReactDefaultPerf._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0}),start=performanceNow(),rv=func.apply(this,args),ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length-1].totalTime=performanceNow()-start,rv;if("_mountImageIntoNode"===fnName||"ReactDOMIDOperations"===moduleName){if(start=performanceNow(),rv=func.apply(this,args),totalTime=performanceNow()-start,"_mountImageIntoNode"===fnName){var mountID=ReactMount.getID(args[1]);ReactDefaultPerf._recordWrite(mountID,fnName,totalTime,args[0])}else"dangerouslyProcessChildrenUpdates"===fnName?args[0].forEach(function(update){var writeArgs={};null!==update.fromIndex&&(writeArgs.fromIndex=update.fromIndex),null!==update.toIndex&&(writeArgs.toIndex=update.toIndex),null!==update.textContent&&(writeArgs.textContent=update.textContent),null!==update.markupIndex&&(writeArgs.markup=args[1][update.markupIndex]),ReactDefaultPerf._recordWrite(update.parentID,update.type,totalTime,writeArgs)}):ReactDefaultPerf._recordWrite(args[0],fnName,totalTime,Array.prototype.slice.call(args,1));return rv}if("ReactCompositeComponent"!==moduleName||"mountComponent"!==fnName&&"updateComponent"!==fnName&&"_renderValidatedComponent"!==fnName)return func.apply(this,args);if("string"==typeof this._currentElement.type)return func.apply(this,args);var rootNodeID="mountComponent"===fnName?args[0]:this._rootNodeID,isRender="_renderValidatedComponent"===fnName,isMount="mountComponent"===fnName,mountStack=ReactDefaultPerf._mountStack,entry=ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length-1];if(isRender?addValue(entry.counts,rootNodeID,1):isMount&&mountStack.push(0),start=performanceNow(),rv=func.apply(this,args),totalTime=performanceNow()-start,isRender)addValue(entry.render,rootNodeID,totalTime);else if(isMount){var subMountTime=mountStack.pop();mountStack[mountStack.length-1]+=totalTime,addValue(entry.exclusive,rootNodeID,totalTime-subMountTime),addValue(entry.inclusive,rootNodeID,totalTime)}else addValue(entry.inclusive,rootNodeID,totalTime);return entry.displayNames[rootNodeID]={current:this.getName(),owner:this._currentElement._owner?this._currentElement._owner.getName():"<root>"},rv}}};module.exports=ReactDefaultPerf;


},{"./DOMProperty":104,"./ReactDefaultPerfAnalysis":151,"./ReactMount":165,"./ReactPerf":170,"./performanceNow":241}],151:[function(require,module,exports){
function getTotalTime(measurements){for(var totalTime=0,i=0;i<measurements.length;i++){var measurement=measurements[i];totalTime+=measurement.totalTime}return totalTime}function getDOMSummary(measurements){for(var items=[],i=0;i<measurements.length;i++){var id,measurement=measurements[i];for(id in measurement.writes)measurement.writes[id].forEach(function(write){items.push({id:id,type:DOM_OPERATION_TYPES[write.type]||write.type,args:write.args})})}return items}function getExclusiveSummary(measurements){for(var displayName,candidates={},i=0;i<measurements.length;i++){var measurement=measurements[i],allIDs=assign({},measurement.exclusive,measurement.inclusive);for(var id in allIDs)displayName=measurement.displayNames[id].current,candidates[displayName]=candidates[displayName]||{componentName:displayName,inclusive:0,exclusive:0,render:0,count:0},measurement.render[id]&&(candidates[displayName].render+=measurement.render[id]),measurement.exclusive[id]&&(candidates[displayName].exclusive+=measurement.exclusive[id]),measurement.inclusive[id]&&(candidates[displayName].inclusive+=measurement.inclusive[id]),measurement.counts[id]&&(candidates[displayName].count+=measurement.counts[id])}var arr=[];for(displayName in candidates)candidates[displayName].exclusive>=DONT_CARE_THRESHOLD&&arr.push(candidates[displayName]);return arr.sort(function(a,b){return b.exclusive-a.exclusive}),arr}function getInclusiveSummary(measurements,onlyClean){for(var inclusiveKey,candidates={},i=0;i<measurements.length;i++){var cleanComponents,measurement=measurements[i],allIDs=assign({},measurement.exclusive,measurement.inclusive);onlyClean&&(cleanComponents=getUnchangedComponents(measurement));for(var id in allIDs)if(!onlyClean||cleanComponents[id]){var displayName=measurement.displayNames[id];inclusiveKey=displayName.owner+" > "+displayName.current,candidates[inclusiveKey]=candidates[inclusiveKey]||{componentName:inclusiveKey,time:0,count:0},measurement.inclusive[id]&&(candidates[inclusiveKey].time+=measurement.inclusive[id]),measurement.counts[id]&&(candidates[inclusiveKey].count+=measurement.counts[id])}}var arr=[];for(inclusiveKey in candidates)candidates[inclusiveKey].time>=DONT_CARE_THRESHOLD&&arr.push(candidates[inclusiveKey]);return arr.sort(function(a,b){return b.time-a.time}),arr}function getUnchangedComponents(measurement){var cleanComponents={},dirtyLeafIDs=Object.keys(measurement.writes),allIDs=assign({},measurement.exclusive,measurement.inclusive);for(var id in allIDs){for(var isDirty=!1,i=0;i<dirtyLeafIDs.length;i++)if(0===dirtyLeafIDs[i].indexOf(id)){isDirty=!0;break}!isDirty&&measurement.counts[id]>0&&(cleanComponents[id]=!0)}return cleanComponents}var assign=require("./Object.assign"),DONT_CARE_THRESHOLD=1.2,DOM_OPERATION_TYPES={_mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",TEXT_CONTENT:"set textContent",updatePropertyByID:"update attribute",deletePropertyByID:"delete attribute",updateStylesByID:"update styles",updateInnerHTMLByID:"set innerHTML",dangerouslyReplaceNodeWithMarkupByID:"replace"},ReactDefaultPerfAnalysis={getExclusiveSummary:getExclusiveSummary,getInclusiveSummary:getInclusiveSummary,getDOMSummary:getDOMSummary,getTotalTime:getTotalTime};module.exports=ReactDefaultPerfAnalysis;


},{"./Object.assign":121}],152:[function(require,module,exports){
(function (process){
"use strict";function defineWarningProperty(object,key){Object.defineProperty(object,key,{configurable:!1,enumerable:!0,get:function(){return this._store?this._store[key]:null},set:function(value){"production"!==process.env.NODE_ENV?warning(!1,"Don't set the %s property of the React element. Instead, specify the correct value when initially creating the element.",key):null,this._store[key]=value}})}function defineMutationMembrane(prototype){try{var pseudoFrozenProperties={props:!0};for(var key in pseudoFrozenProperties)defineWarningProperty(prototype,key);useMutationMembrane=!0}catch(x){}}var ReactContext=require("./ReactContext"),ReactCurrentOwner=require("./ReactCurrentOwner"),assign=require("./Object.assign"),warning=require("./warning"),RESERVED_PROPS={key:!0,ref:!0},useMutationMembrane=!1,ReactElement=function(type,key,ref,owner,context,props){if(this.type=type,this.key=key,this.ref=ref,this._owner=owner,this._context=context,"production"!==process.env.NODE_ENV){this._store={props:props,originalProps:assign({},props)};try{Object.defineProperty(this._store,"validated",{configurable:!1,enumerable:!1,writable:!0})}catch(x){}if(this._store.validated=!1,useMutationMembrane)return void Object.freeze(this)}this.props=props};ReactElement.prototype={_isReactElement:!0},"production"!==process.env.NODE_ENV&&defineMutationMembrane(ReactElement.prototype),ReactElement.createElement=function(type,config,children){var propName,props={},key=null,ref=null;if(null!=config){ref=void 0===config.ref?null:config.ref,key=void 0===config.key?null:""+config.key;for(propName in config)config.hasOwnProperty(propName)&&!RESERVED_PROPS.hasOwnProperty(propName)&&(props[propName]=config[propName])}var childrenLength=arguments.length-2;if(1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=Array(childrenLength),i=0;childrenLength>i;i++)childArray[i]=arguments[i+2];props.children=childArray}if(type&&type.defaultProps){var defaultProps=type.defaultProps;for(propName in defaultProps)"undefined"==typeof props[propName]&&(props[propName]=defaultProps[propName])}return new ReactElement(type,key,ref,ReactCurrentOwner.current,ReactContext.current,props)},ReactElement.createFactory=function(type){var factory=ReactElement.createElement.bind(null,type);return factory.type=type,factory},ReactElement.cloneAndReplaceProps=function(oldElement,newProps){var newElement=new ReactElement(oldElement.type,oldElement.key,oldElement.ref,oldElement._owner,oldElement._context,newProps);return"production"!==process.env.NODE_ENV&&(newElement._store.validated=oldElement._store.validated),newElement},ReactElement.cloneElement=function(element,config,children){var propName,props=assign({},element.props),key=element.key,ref=element.ref,owner=element._owner;if(null!=config){void 0!==config.ref&&(ref=config.ref,owner=ReactCurrentOwner.current),void 0!==config.key&&(key=""+config.key);for(propName in config)config.hasOwnProperty(propName)&&!RESERVED_PROPS.hasOwnProperty(propName)&&(props[propName]=config[propName])}var childrenLength=arguments.length-2;if(1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=Array(childrenLength),i=0;childrenLength>i;i++)childArray[i]=arguments[i+2];props.children=childArray}return new ReactElement(element.type,key,ref,owner,element._context,props)},ReactElement.isValidElement=function(object){var isElement=!(!object||!object._isReactElement);return isElement},module.exports=ReactElement;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./Object.assign":121,"./ReactContext":133,"./ReactCurrentOwner":134,"./warning":249,"_process":95}],153:[function(require,module,exports){
(function (process){
"use strict";function getDeclarationErrorAddendum(){if(ReactCurrentOwner.current){var name=ReactCurrentOwner.current.getName();if(name)return" Check the render method of `"+name+"`."}return""}function getName(instance){var publicInstance=instance&&instance.getPublicInstance();if(!publicInstance)return void 0;var constructor=publicInstance.constructor;return constructor?constructor.displayName||constructor.name||void 0:void 0}function getCurrentOwnerDisplayName(){var current=ReactCurrentOwner.current;return current&&getName(current)||void 0}function validateExplicitKey(element,parentType){element._store.validated||null!=element.key||(element._store.validated=!0,warnAndMonitorForKeyUse('Each child in an array or iterator should have a unique "key" prop.',element,parentType))}function validatePropertyKey(name,element,parentType){NUMERIC_PROPERTY_REGEX.test(name)&&warnAndMonitorForKeyUse("Child objects should have non-numeric keys so ordering is preserved.",element,parentType)}function warnAndMonitorForKeyUse(message,element,parentType){var ownerName=getCurrentOwnerDisplayName(),parentName="string"==typeof parentType?parentType:parentType.displayName||parentType.name,useName=ownerName||parentName,memoizer=ownerHasKeyUseWarning[message]||(ownerHasKeyUseWarning[message]={});if(!memoizer.hasOwnProperty(useName)){memoizer[useName]=!0;var parentOrOwnerAddendum=ownerName?" Check the render method of "+ownerName+".":parentName?" Check the React.render call using <"+parentName+">.":"",childOwnerAddendum="";if(element&&element._owner&&element._owner!==ReactCurrentOwner.current){var childOwnerName=getName(element._owner);childOwnerAddendum=" It was passed a child from "+childOwnerName+"."}"production"!==process.env.NODE_ENV?warning(!1,message+"%s%s See https://fb.me/react-warning-keys for more information.",parentOrOwnerAddendum,childOwnerAddendum):null}}function validateChildKeys(node,parentType){if(Array.isArray(node))for(var i=0;i<node.length;i++){var child=node[i];ReactElement.isValidElement(child)&&validateExplicitKey(child,parentType)}else if(ReactElement.isValidElement(node))node._store.validated=!0;else if(node){var iteratorFn=getIteratorFn(node);if(iteratorFn){if(iteratorFn!==node.entries)for(var step,iterator=iteratorFn.call(node);!(step=iterator.next()).done;)ReactElement.isValidElement(step.value)&&validateExplicitKey(step.value,parentType)}else if("object"==typeof node){var fragment=ReactFragment.extractIfFragment(node);for(var key in fragment)fragment.hasOwnProperty(key)&&validatePropertyKey(key,fragment[key],parentType)}}}function checkPropTypes(componentName,propTypes,props,location){for(var propName in propTypes)if(propTypes.hasOwnProperty(propName)){var error;try{"production"!==process.env.NODE_ENV?invariant("function"==typeof propTypes[propName],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",componentName||"React class",ReactPropTypeLocationNames[location],propName):invariant("function"==typeof propTypes[propName]),error=propTypes[propName](props,propName,componentName,location)}catch(ex){error=ex}if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=!0;var addendum=getDeclarationErrorAddendum(this);"production"!==process.env.NODE_ENV?warning(!1,"Failed propType: %s%s",error.message,addendum):null}}}function warnForPropsMutation(propName,element){var type=element.type,elementName="string"==typeof type?type:type.displayName,ownerName=element._owner?element._owner.getPublicInstance().constructor.displayName:null,warningKey=propName+"|"+elementName+"|"+ownerName;if(!warnedPropsMutations.hasOwnProperty(warningKey)){warnedPropsMutations[warningKey]=!0;var elementInfo="";elementName&&(elementInfo=" <"+elementName+" />");var ownerInfo="";ownerName&&(ownerInfo=" The element was created by "+ownerName+"."),"production"!==process.env.NODE_ENV?warning(!1,"Don't set .props.%s of the React component%s. Instead, specify the correct value when initially creating the element or use React.cloneElement to make a new element with updated props.%s",propName,elementInfo,ownerInfo):null}}function is(a,b){return a!==a?b!==b:0===a&&0===b?1/a===1/b:a===b}function checkAndWarnForMutatedProps(element){if(element._store){var originalProps=element._store.originalProps,props=element.props;for(var propName in props)props.hasOwnProperty(propName)&&(originalProps.hasOwnProperty(propName)&&is(originalProps[propName],props[propName])||(warnForPropsMutation(propName,element),originalProps[propName]=props[propName]))}}function validatePropTypes(element){if(null!=element.type){var componentClass=ReactNativeComponent.getComponentClassForElement(element),name=componentClass.displayName||componentClass.name;componentClass.propTypes&&checkPropTypes(name,componentClass.propTypes,element.props,ReactPropTypeLocations.prop),"function"==typeof componentClass.getDefaultProps&&("production"!==process.env.NODE_ENV?warning(componentClass.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."):null)}}var ReactElement=require("./ReactElement"),ReactFragment=require("./ReactFragment"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactNativeComponent=require("./ReactNativeComponent"),getIteratorFn=require("./getIteratorFn"),invariant=require("./invariant"),warning=require("./warning"),ownerHasKeyUseWarning={},loggedTypeFailures={},NUMERIC_PROPERTY_REGEX=/^\d+$/,warnedPropsMutations={},ReactElementValidator={checkAndWarnForMutatedProps:checkAndWarnForMutatedProps,createElement:function(type,props,children){"production"!==process.env.NODE_ENV?warning(null!=type,"React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components)."):null;var element=ReactElement.createElement.apply(this,arguments);if(null==element)return element;for(var i=2;i<arguments.length;i++)validateChildKeys(arguments[i],type);return validatePropTypes(element),element},createFactory:function(type){var validatedFactory=ReactElementValidator.createElement.bind(null,type);if(validatedFactory.type=type,"production"!==process.env.NODE_ENV)try{Object.defineProperty(validatedFactory,"type",{enumerable:!1,get:function(){return"production"!==process.env.NODE_ENV?warning(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."):null,Object.defineProperty(this,"type",{value:type}),type}})}catch(x){}return validatedFactory},cloneElement:function(element,props,children){for(var newElement=ReactElement.cloneElement.apply(this,arguments),i=2;i<arguments.length;i++)validateChildKeys(arguments[i],newElement.type);return validatePropTypes(newElement),newElement}};module.exports=ReactElementValidator;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ReactCurrentOwner":134,"./ReactElement":152,"./ReactFragment":158,"./ReactNativeComponent":168,"./ReactPropTypeLocationNames":171,"./ReactPropTypeLocations":172,"./getIteratorFn":221,"./invariant":230,"./warning":249,"_process":95}],154:[function(require,module,exports){
(function (process){
"use strict";function registerNullComponentID(id){nullComponentIDsRegistry[id]=!0}function deregisterNullComponentID(id){delete nullComponentIDsRegistry[id]}function isNullComponentID(id){return!!nullComponentIDsRegistry[id]}var ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),invariant=require("./invariant"),component,nullComponentIDsRegistry={},ReactEmptyComponentInjection={injectEmptyComponent:function(emptyComponent){component=ReactElement.createFactory(emptyComponent)}},ReactEmptyComponentType=function(){};ReactEmptyComponentType.prototype.componentDidMount=function(){var internalInstance=ReactInstanceMap.get(this);internalInstance&&registerNullComponentID(internalInstance._rootNodeID)},ReactEmptyComponentType.prototype.componentWillUnmount=function(){var internalInstance=ReactInstanceMap.get(this);internalInstance&&deregisterNullComponentID(internalInstance._rootNodeID)},ReactEmptyComponentType.prototype.render=function(){return"production"!==process.env.NODE_ENV?invariant(component,"Trying to return null from a render, but no null placeholder component was injected."):invariant(component),component()};var emptyElement=ReactElement.createElement(ReactEmptyComponentType),ReactEmptyComponent={emptyElement:emptyElement,injection:ReactEmptyComponentInjection,isNullComponentID:isNullComponentID};module.exports=ReactEmptyComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbXB0eUNvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFxREEsU0FBUyx5QkFBd0IsSUFDL0IseUJBQXlCLEtBQU0sRUFPakMsUUFBUywyQkFBMEIsVUFDMUIsMEJBQXlCLElBT2xDLFFBQVMsbUJBQWtCLElBQ3pCLFFBQVMseUJBQXlCLElBcEVwQyxHQUFJLGNBQWUsUUFBUSxrQkFDdkIsaUJBQW1CLFFBQVEsc0JBRTNCLFVBQVksUUFBUSxlQUVwQixVQUdBLDRCQUVBLDhCQUNGLHFCQUFzQixTQUFTLGdCQUM3QixVQUFZLGFBQWEsY0FBYyxrQkFJdkMsd0JBQTBCLFlBQzlCLHlCQUF3QixVQUFVLGtCQUFvQixXQUNwRCxHQUFJLGtCQUFtQixpQkFBaUIsSUFBSSxLQUt2QyxtQkFHTCx3QkFBd0IsaUJBQWlCLGNBRTNDLHdCQUF3QixVQUFVLHFCQUF1QixXQUN2RCxHQUFJLGtCQUFtQixpQkFBaUIsSUFBSSxLQUV2QyxtQkFHTCwwQkFBMEIsaUJBQWlCLGNBRTdDLHdCQUF3QixVQUFVLE9BQVMsV0FNekMsTUFMQyxlQUFpQixRQUFRLElBQUksU0FBVyxVQUN2QyxVQUNBLHdGQUVFLFVBQVUsV0FDUCxZQUdULElBQUksY0FBZSxhQUFhLGNBQWMseUJBMEIxQyxxQkFDRixhQUFjLGFBQ2QsVUFBVyw2QkFDWCxrQkFBbUIsa0JBR3JCLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RW1wdHlDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBjb21wb25lbnQ7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHRoZSBSZWFjdCBJRHMgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCB0b1xuLy8gYG51bGxgIChpbiByZWFsaXR5IGEgcGxhY2Vob2xkZXIgc3VjaCBhcyBgbm9zY3JpcHRgKVxudmFyIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeSA9IHt9O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgaW5qZWN0RW1wdHlDb21wb25lbnQ6IGZ1bmN0aW9uKGVtcHR5Q29tcG9uZW50KSB7XG4gICAgY29tcG9uZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoZW1wdHlDb21wb25lbnQpO1xuICB9XG59O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUgPSBmdW5jdGlvbigpIHt9O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBydW4gdGhlc2UgbWV0aG9kcyBpbiB0aGUgY29ycmVjdCBvcmRlciwgd2Ugc2hvdWxkbid0XG4gIC8vIG5lZWQgdGhpcyBjaGVjay4gV2UncmUgZ29pbmcgdG8gYXNzdW1lIGlmIHdlJ3JlIGhlcmUgaXQgbWVhbnMgd2UgcmFuXG4gIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGFscmVhZHkgc28gdGhlcmUgaXMgbm8gaW50ZXJuYWwgaW5zdGFuY2UgKGl0IGdldHNcbiAgLy8gcmVtb3ZlZCBhcyBwYXJ0IG9mIHRoZSB1bm1vdW50aW5nIHByb2Nlc3MpLlxuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaW50ZXJuYWxJbnN0YW5jZS5fcm9vdE5vZGVJRCk7XG59O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gIC8vIFRPRE86IEdldCByaWQgb2YgdGhpcyBjaGVjay4gU2VlIFRPRE8gaW4gY29tcG9uZW50RGlkTW91bnQuXG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGludGVybmFsSW5zdGFuY2UuX3Jvb3ROb2RlSUQpO1xufTtcblJlYWN0RW1wdHlDb21wb25lbnRUeXBlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBjb21wb25lbnQsXG4gICAgJ1RyeWluZyB0byByZXR1cm4gbnVsbCBmcm9tIGEgcmVuZGVyLCBidXQgbm8gbnVsbCBwbGFjZWhvbGRlciBjb21wb25lbnQgJyArXG4gICAgJ3dhcyBpbmplY3RlZC4nXG4gICkgOiBpbnZhcmlhbnQoY29tcG9uZW50KSk7XG4gIHJldHVybiBjb21wb25lbnQoKTtcbn07XG5cbnZhciBlbXB0eUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudChSZWFjdEVtcHR5Q29tcG9uZW50VHlwZSk7XG5cbi8qKlxuICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFVubWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsOiBpdCByZW5kZXJzIHRvIHNvbWV0aGluZyBub3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBkZWxldGUgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZCB0byBudWxsLlxuICovXG5mdW5jdGlvbiBpc051bGxDb21wb25lbnRJRChpZCkge1xuICByZXR1cm4gISFudWxsQ29tcG9uZW50SURzUmVnaXN0cnlbaWRdO1xufVxuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgZW1wdHlFbGVtZW50OiBlbXB0eUVsZW1lbnQsXG4gIGluamVjdGlvbjogUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbixcbiAgaXNOdWxsQ29tcG9uZW50SUQ6IGlzTnVsbENvbXBvbmVudElEXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG4iXX0=
},{"./ReactElement":152,"./ReactInstanceMap":162,"./invariant":230,"_process":95}],155:[function(require,module,exports){
"use strict";var ReactErrorUtils={guard:function(func,name){return func}};module.exports=ReactErrorUtils;


},{}],156:[function(require,module,exports){
"use strict";function runEventQueueInBatch(events){EventPluginHub.enqueueEvents(events),EventPluginHub.processEventQueue()}var EventPluginHub=require("./EventPluginHub"),ReactEventEmitterMixin={handleTopLevel:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var events=EventPluginHub.extractEvents(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent);runEventQueueInBatch(events)}};module.exports=ReactEventEmitterMixin;


},{"./EventPluginHub":111}],157:[function(require,module,exports){
"use strict";function findParent(node){var nodeID=ReactMount.getID(node),rootID=ReactInstanceHandles.getReactRootIDFromNodeID(nodeID),container=ReactMount.findReactContainerForID(rootID),parent=ReactMount.getFirstReactDOM(container);return parent}function TopLevelCallbackBookKeeping(topLevelType,nativeEvent){this.topLevelType=topLevelType,this.nativeEvent=nativeEvent,this.ancestors=[]}function handleTopLevelImpl(bookKeeping){for(var topLevelTarget=ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent))||window,ancestor=topLevelTarget;ancestor;)bookKeeping.ancestors.push(ancestor),ancestor=findParent(ancestor);for(var i=0,l=bookKeeping.ancestors.length;l>i;i++){topLevelTarget=bookKeeping.ancestors[i];var topLevelTargetID=ReactMount.getID(topLevelTarget)||"";ReactEventListener._handleTopLevel(bookKeeping.topLevelType,topLevelTarget,topLevelTargetID,bookKeeping.nativeEvent)}}function scrollValueMonitor(cb){var scrollPosition=getUnboundedScrollPosition(window);cb(scrollPosition)}var EventListener=require("./EventListener"),ExecutionEnvironment=require("./ExecutionEnvironment"),PooledClass=require("./PooledClass"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),getEventTarget=require("./getEventTarget"),getUnboundedScrollPosition=require("./getUnboundedScrollPosition");assign(TopLevelCallbackBookKeeping.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),PooledClass.addPoolingTo(TopLevelCallbackBookKeeping,PooledClass.twoArgumentPooler);var ReactEventListener={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:ExecutionEnvironment.canUseDOM?window:null,setHandleTopLevel:function(handleTopLevel){ReactEventListener._handleTopLevel=handleTopLevel},setEnabled:function(enabled){ReactEventListener._enabled=!!enabled},isEnabled:function(){return ReactEventListener._enabled},trapBubbledEvent:function(topLevelType,handlerBaseName,handle){var element=handle;return element?EventListener.listen(element,handlerBaseName,ReactEventListener.dispatchEvent.bind(null,topLevelType)):null},trapCapturedEvent:function(topLevelType,handlerBaseName,handle){var element=handle;return element?EventListener.capture(element,handlerBaseName,ReactEventListener.dispatchEvent.bind(null,topLevelType)):null},monitorScrollValue:function(refresh){var callback=scrollValueMonitor.bind(null,refresh);EventListener.listen(window,"scroll",callback)},dispatchEvent:function(topLevelType,nativeEvent){if(ReactEventListener._enabled){var bookKeeping=TopLevelCallbackBookKeeping.getPooled(topLevelType,nativeEvent);try{ReactUpdates.batchedUpdates(handleTopLevelImpl,bookKeeping)}finally{TopLevelCallbackBookKeeping.release(bookKeeping)}}}};module.exports=ReactEventListener;


},{"./EventListener":110,"./ExecutionEnvironment":115,"./Object.assign":121,"./PooledClass":122,"./ReactInstanceHandles":161,"./ReactMount":165,"./ReactUpdates":182,"./getEventTarget":220,"./getUnboundedScrollPosition":226}],158:[function(require,module,exports){
(function (process){
"use strict";var ReactElement=require("./ReactElement"),warning=require("./warning");if("production"!==process.env.NODE_ENV){var fragmentKey="_reactFragment",didWarnKey="_reactDidWarn",canWarnForReactFragment=!1;try{var dummy=function(){return 1};Object.defineProperty({},fragmentKey,{enumerable:!1,value:!0}),Object.defineProperty({},"key",{enumerable:!0,get:dummy}),canWarnForReactFragment=!0}catch(x){}var proxyPropertyAccessWithWarning=function(obj,key){Object.defineProperty(obj,key,{enumerable:!0,get:function(){return"production"!==process.env.NODE_ENV?warning(this[didWarnKey],"A ReactFragment is an opaque type. Accessing any of its properties is deprecated. Pass it to one of the React.Children helpers."):null,this[didWarnKey]=!0,this[fragmentKey][key]},set:function(value){"production"!==process.env.NODE_ENV?warning(this[didWarnKey],"A ReactFragment is an immutable opaque type. Mutating its properties is deprecated."):null,this[didWarnKey]=!0,this[fragmentKey][key]=value}})},issuedWarnings={},didWarnForFragment=function(fragment){var fragmentCacheKey="";for(var key in fragment)fragmentCacheKey+=key+":"+typeof fragment[key]+",";var alreadyWarnedOnce=!!issuedWarnings[fragmentCacheKey];return issuedWarnings[fragmentCacheKey]=!0,alreadyWarnedOnce}}var ReactFragment={create:function(object){if("production"!==process.env.NODE_ENV){if("object"!=typeof object||!object||Array.isArray(object))return"production"!==process.env.NODE_ENV?warning(!1,"React.addons.createFragment only accepts a single object.",object):null,object;if(ReactElement.isValidElement(object))return"production"!==process.env.NODE_ENV?warning(!1,"React.addons.createFragment does not accept a ReactElement without a wrapper object."):null,object;if(canWarnForReactFragment){var proxy={};Object.defineProperty(proxy,fragmentKey,{enumerable:!1,value:object}),Object.defineProperty(proxy,didWarnKey,{writable:!0,enumerable:!1,value:!1});for(var key in object)proxyPropertyAccessWithWarning(proxy,key);return Object.preventExtensions(proxy),proxy}}return object},extract:function(fragment){return"production"!==process.env.NODE_ENV&&canWarnForReactFragment?fragment[fragmentKey]?fragment[fragmentKey]:("production"!==process.env.NODE_ENV?warning(didWarnForFragment(fragment),"Any use of a keyed object should be wrapped in React.addons.createFragment(object) before being passed as a child."):null,fragment):fragment},extractIfFragment:function(fragment){if("production"!==process.env.NODE_ENV&&canWarnForReactFragment){if(fragment[fragmentKey])return fragment[fragmentKey];for(var key in fragment)if(fragment.hasOwnProperty(key)&&ReactElement.isValidElement(fragment[key]))return ReactFragment.extract(fragment)}return fragment}};module.exports=ReactFragment;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ReactElement":152,"./warning":249,"_process":95}],159:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),EventPluginHub=require("./EventPluginHub"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactClass=require("./ReactClass"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactNativeComponent=require("./ReactNativeComponent"),ReactDOMComponent=require("./ReactDOMComponent"),ReactPerf=require("./ReactPerf"),ReactRootIndex=require("./ReactRootIndex"),ReactUpdates=require("./ReactUpdates"),ReactInjection={Component:ReactComponentEnvironment.injection,Class:ReactClass.injection,DOMComponent:ReactDOMComponent.injection,DOMProperty:DOMProperty.injection,EmptyComponent:ReactEmptyComponent.injection,EventPluginHub:EventPluginHub.injection,EventEmitter:ReactBrowserEventEmitter.injection,NativeComponent:ReactNativeComponent.injection,Perf:ReactPerf.injection,RootIndex:ReactRootIndex.injection,Updates:ReactUpdates.injection};module.exports=ReactInjection;


},{"./DOMProperty":104,"./EventPluginHub":111,"./ReactBrowserEventEmitter":125,"./ReactClass":128,"./ReactComponentEnvironment":131,"./ReactDOMComponent":137,"./ReactEmptyComponent":154,"./ReactNativeComponent":168,"./ReactPerf":170,"./ReactRootIndex":178,"./ReactUpdates":182}],160:[function(require,module,exports){
"use strict";function isInDocument(node){return containsNode(document.documentElement,node)}var ReactDOMSelection=require("./ReactDOMSelection"),containsNode=require("./containsNode"),focusNode=require("./focusNode"),getActiveElement=require("./getActiveElement"),ReactInputSelection={hasSelectionCapabilities:function(elem){return elem&&("INPUT"===elem.nodeName&&"text"===elem.type||"TEXTAREA"===elem.nodeName||"true"===elem.contentEditable)},getSelectionInformation:function(){var focusedElem=getActiveElement();return{focusedElem:focusedElem,selectionRange:ReactInputSelection.hasSelectionCapabilities(focusedElem)?ReactInputSelection.getSelection(focusedElem):null}},restoreSelection:function(priorSelectionInformation){var curFocusedElem=getActiveElement(),priorFocusedElem=priorSelectionInformation.focusedElem,priorSelectionRange=priorSelectionInformation.selectionRange;curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)&&(ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)&&ReactInputSelection.setSelection(priorFocusedElem,priorSelectionRange),focusNode(priorFocusedElem))},getSelection:function(input){var selection;if("selectionStart"in input)selection={start:input.selectionStart,end:input.selectionEnd};else if(document.selection&&"INPUT"===input.nodeName){var range=document.selection.createRange();range.parentElement()===input&&(selection={start:-range.moveStart("character",-input.value.length),end:-range.moveEnd("character",-input.value.length)})}else selection=ReactDOMSelection.getOffsets(input);return selection||{start:0,end:0}},setSelection:function(input,offsets){var start=offsets.start,end=offsets.end;if("undefined"==typeof end&&(end=start),"selectionStart"in input)input.selectionStart=start,input.selectionEnd=Math.min(end,input.value.length);else if(document.selection&&"INPUT"===input.nodeName){var range=input.createTextRange();range.collapse(!0),range.moveStart("character",start),range.moveEnd("character",end-start),range.select()}else ReactDOMSelection.setOffsets(input,offsets)}};module.exports=ReactInputSelection;


},{"./ReactDOMSelection":145,"./containsNode":204,"./focusNode":214,"./getActiveElement":216}],161:[function(require,module,exports){
(function (process){
"use strict";function getReactRootIDString(index){return SEPARATOR+index.toString(36)}function isBoundary(id,index){return id.charAt(index)===SEPARATOR||index===id.length}function isValidID(id){return""===id||id.charAt(0)===SEPARATOR&&id.charAt(id.length-1)!==SEPARATOR}function isAncestorIDOf(ancestorID,descendantID){return 0===descendantID.indexOf(ancestorID)&&isBoundary(descendantID,ancestorID.length)}function getParentID(id){return id?id.substr(0,id.lastIndexOf(SEPARATOR)):""}function getNextDescendantID(ancestorID,destinationID){if("production"!==process.env.NODE_ENV?invariant(isValidID(ancestorID)&&isValidID(destinationID),"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",ancestorID,destinationID):invariant(isValidID(ancestorID)&&isValidID(destinationID)),"production"!==process.env.NODE_ENV?invariant(isAncestorIDOf(ancestorID,destinationID),"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",ancestorID,destinationID):invariant(isAncestorIDOf(ancestorID,destinationID)),ancestorID===destinationID)return ancestorID;var i,start=ancestorID.length+SEPARATOR_LENGTH;for(i=start;i<destinationID.length&&!isBoundary(destinationID,i);i++);return destinationID.substr(0,i)}function getFirstCommonAncestorID(oneID,twoID){var minLength=Math.min(oneID.length,twoID.length);if(0===minLength)return"";for(var lastCommonMarkerIndex=0,i=0;minLength>=i;i++)if(isBoundary(oneID,i)&&isBoundary(twoID,i))lastCommonMarkerIndex=i;else if(oneID.charAt(i)!==twoID.charAt(i))break;var longestCommonID=oneID.substr(0,lastCommonMarkerIndex);return"production"!==process.env.NODE_ENV?invariant(isValidID(longestCommonID),"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",oneID,twoID,longestCommonID):invariant(isValidID(longestCommonID)),longestCommonID}function traverseParentPath(start,stop,cb,arg,skipFirst,skipLast){start=start||"",stop=stop||"","production"!==process.env.NODE_ENV?invariant(start!==stop,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",start):invariant(start!==stop);var traverseUp=isAncestorIDOf(stop,start);"production"!==process.env.NODE_ENV?invariant(traverseUp||isAncestorIDOf(start,stop),"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",start,stop):invariant(traverseUp||isAncestorIDOf(start,stop));for(var depth=0,traverse=traverseUp?getParentID:getNextDescendantID,id=start;;id=traverse(id,stop)){var ret;if(skipFirst&&id===start||skipLast&&id===stop||(ret=cb(id,traverseUp,arg)),ret===!1||id===stop)break;"production"!==process.env.NODE_ENV?invariant(depth++<MAX_TREE_DEPTH,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",start,stop):invariant(depth++<MAX_TREE_DEPTH)}}var ReactRootIndex=require("./ReactRootIndex"),invariant=require("./invariant"),SEPARATOR=".",SEPARATOR_LENGTH=SEPARATOR.length,MAX_TREE_DEPTH=100,ReactInstanceHandles={createReactRootID:function(){return getReactRootIDString(ReactRootIndex.createReactRootIndex())},createReactID:function(rootID,name){return rootID+name},getReactRootIDFromNodeID:function(id){if(id&&id.charAt(0)===SEPARATOR&&id.length>1){var index=id.indexOf(SEPARATOR,1);return index>-1?id.substr(0,index):id}return null},traverseEnterLeave:function(leaveID,enterID,cb,upArg,downArg){var ancestorID=getFirstCommonAncestorID(leaveID,enterID);ancestorID!==leaveID&&traverseParentPath(leaveID,ancestorID,cb,upArg,!1,!0),ancestorID!==enterID&&traverseParentPath(ancestorID,enterID,cb,downArg,!0,!1)},traverseTwoPhase:function(targetID,cb,arg){targetID&&(traverseParentPath("",targetID,cb,arg,!0,!1),traverseParentPath(targetID,"",cb,arg,!1,!0))},traverseAncestors:function(targetID,cb,arg){traverseParentPath("",targetID,cb,arg,!0,!1)},_getFirstCommonAncestorID:getFirstCommonAncestorID,_getNextDescendantID:getNextDescendantID,isAncestorIDOf:isAncestorIDOf,SEPARATOR:SEPARATOR};module.exports=ReactInstanceHandles;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ReactRootIndex":178,"./invariant":230,"_process":95}],162:[function(require,module,exports){
"use strict";var ReactInstanceMap={remove:function(key){key._reactInternalInstance=void 0},get:function(key){return key._reactInternalInstance},has:function(key){return void 0!==key._reactInternalInstance},set:function(key,value){key._reactInternalInstance=value}};module.exports=ReactInstanceMap;


},{}],163:[function(require,module,exports){
"use strict";var ReactLifeCycle={currentlyMountingInstance:null,currentlyUnmountingInstance:null};module.exports=ReactLifeCycle;


},{}],164:[function(require,module,exports){
"use strict";var adler32=require("./adler32"),ReactMarkupChecksum={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(markup){var checksum=adler32(markup);return markup.replace(">"," "+ReactMarkupChecksum.CHECKSUM_ATTR_NAME+'="'+checksum+'">')},canReuseMarkup:function(markup,element){var existingChecksum=element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);existingChecksum=existingChecksum&&parseInt(existingChecksum,10);var markupChecksum=adler32(markup);return markupChecksum===existingChecksum}};module.exports=ReactMarkupChecksum;


},{"./adler32":201}],165:[function(require,module,exports){
(function (process){
"use strict";function firstDifferenceIndex(string1,string2){for(var minLen=Math.min(string1.length,string2.length),i=0;minLen>i;i++)if(string1.charAt(i)!==string2.charAt(i))return i;return string1.length===string2.length?-1:minLen}function getReactRootID(container){var rootElement=getReactRootElementInContainer(container);return rootElement&&ReactMount.getID(rootElement)}function getID(node){var id=internalGetID(node);if(id)if(nodeCache.hasOwnProperty(id)){var cached=nodeCache[id];cached!==node&&("production"!==process.env.NODE_ENV?invariant(!isValid(cached,id),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",ATTR_NAME,id):invariant(!isValid(cached,id)),nodeCache[id]=node)}else nodeCache[id]=node;return id}function internalGetID(node){return node&&node.getAttribute&&node.getAttribute(ATTR_NAME)||""}function setID(node,id){var oldID=internalGetID(node);oldID!==id&&delete nodeCache[oldID],node.setAttribute(ATTR_NAME,id),nodeCache[id]=node}function getNode(id){return nodeCache.hasOwnProperty(id)&&isValid(nodeCache[id],id)||(nodeCache[id]=ReactMount.findReactNodeByID(id)),nodeCache[id]}function getNodeFromInstance(instance){var id=ReactInstanceMap.get(instance)._rootNodeID;return ReactEmptyComponent.isNullComponentID(id)?null:(nodeCache.hasOwnProperty(id)&&isValid(nodeCache[id],id)||(nodeCache[id]=ReactMount.findReactNodeByID(id)),nodeCache[id])}function isValid(node,id){if(node){"production"!==process.env.NODE_ENV?invariant(internalGetID(node)===id,"ReactMount: Unexpected modification of `%s`",ATTR_NAME):invariant(internalGetID(node)===id);var container=ReactMount.findReactContainerForID(id);if(container&&containsNode(container,node))return!0}return!1}function purgeID(id){delete nodeCache[id]}function findDeepestCachedAncestorImpl(ancestorID){var ancestor=nodeCache[ancestorID];return ancestor&&isValid(ancestor,ancestorID)?void(deepestNodeSoFar=ancestor):!1}function findDeepestCachedAncestor(targetID){deepestNodeSoFar=null,ReactInstanceHandles.traverseAncestors(targetID,findDeepestCachedAncestorImpl);var foundNode=deepestNodeSoFar;return deepestNodeSoFar=null,foundNode}function mountComponentIntoNode(componentInstance,rootID,container,transaction,shouldReuseMarkup){var markup=ReactReconciler.mountComponent(componentInstance,rootID,transaction,emptyObject);componentInstance._isTopLevel=!0,ReactMount._mountImageIntoNode(markup,container,shouldReuseMarkup)}function batchedMountComponentIntoNode(componentInstance,rootID,container,shouldReuseMarkup){var transaction=ReactUpdates.ReactReconcileTransaction.getPooled();transaction.perform(mountComponentIntoNode,null,componentInstance,rootID,container,transaction,shouldReuseMarkup),ReactUpdates.ReactReconcileTransaction.release(transaction)}var DOMProperty=require("./DOMProperty"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),ReactUpdates=require("./ReactUpdates"),emptyObject=require("./emptyObject"),containsNode=require("./containsNode"),getReactRootElementInContainer=require("./getReactRootElementInContainer"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("./invariant"),setInnerHTML=require("./setInnerHTML"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("./warning"),SEPARATOR=ReactInstanceHandles.SEPARATOR,ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,nodeCache={},ELEMENT_NODE_TYPE=1,DOC_NODE_TYPE=9,instancesByReactRootID={},containersByReactRootID={};if("production"!==process.env.NODE_ENV)var rootElementsByReactRootID={};var findComponentRootReusableArray=[],deepestNodeSoFar=null,ReactMount={_instancesByReactRootID:instancesByReactRootID,scrollMonitor:function(container,renderCallback){renderCallback()},_updateRootComponent:function(prevComponent,nextElement,container,callback){return"production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(nextElement),ReactMount.scrollMonitor(container,function(){ReactUpdateQueue.enqueueElementInternal(prevComponent,nextElement),callback&&ReactUpdateQueue.enqueueCallbackInternal(prevComponent,callback)}),"production"!==process.env.NODE_ENV&&(rootElementsByReactRootID[getReactRootID(container)]=getReactRootElementInContainer(container)),prevComponent},_registerComponent:function(nextComponent,container){"production"!==process.env.NODE_ENV?invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE),"_registerComponent(...): Target container is not a DOM element."):invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE)),ReactBrowserEventEmitter.ensureScrollValueMonitoring();var reactRootID=ReactMount.registerContainer(container);return instancesByReactRootID[reactRootID]=nextComponent,reactRootID},_renderNewRootComponent:function(nextElement,container,shouldReuseMarkup){"production"!==process.env.NODE_ENV?warning(null==ReactCurrentOwner.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var componentInstance=instantiateReactComponent(nextElement,null),reactRootID=ReactMount._registerComponent(componentInstance,container);return ReactUpdates.batchedUpdates(batchedMountComponentIntoNode,componentInstance,reactRootID,container,shouldReuseMarkup),"production"!==process.env.NODE_ENV&&(rootElementsByReactRootID[reactRootID]=getReactRootElementInContainer(container)),componentInstance},render:function(nextElement,container,callback){"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(nextElement),"React.render(): Invalid component element.%s","string"==typeof nextElement?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":"function"==typeof nextElement?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":null!=nextElement&&void 0!==nextElement.props?" This may be caused by unintentionally loading two independent copies of React.":""):invariant(ReactElement.isValidElement(nextElement));var prevComponent=instancesByReactRootID[getReactRootID(container)];if(prevComponent){var prevElement=prevComponent._currentElement;if(shouldUpdateReactComponent(prevElement,nextElement))return ReactMount._updateRootComponent(prevComponent,nextElement,container,callback).getPublicInstance();ReactMount.unmountComponentAtNode(container)}var reactRootElement=getReactRootElementInContainer(container),containerHasReactMarkup=reactRootElement&&ReactMount.isRenderedByReact(reactRootElement);if("production"!==process.env.NODE_ENV&&(!containerHasReactMarkup||reactRootElement.nextSibling))for(var rootElementSibling=reactRootElement;rootElementSibling;){if(ReactMount.isRenderedByReact(rootElementSibling)){"production"!==process.env.NODE_ENV?warning(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."):null;break}rootElementSibling=rootElementSibling.nextSibling}var shouldReuseMarkup=containerHasReactMarkup&&!prevComponent,component=ReactMount._renderNewRootComponent(nextElement,container,shouldReuseMarkup).getPublicInstance();return callback&&callback.call(component),component},constructAndRenderComponent:function(constructor,props,container){var element=ReactElement.createElement(constructor,props);return ReactMount.render(element,container)},constructAndRenderComponentByID:function(constructor,props,id){var domNode=document.getElementById(id);return"production"!==process.env.NODE_ENV?invariant(domNode,'Tried to get element with id of "%s" but it is not present on the page.',id):invariant(domNode),ReactMount.constructAndRenderComponent(constructor,props,domNode)},registerContainer:function(container){var reactRootID=getReactRootID(container);return reactRootID&&(reactRootID=ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID)),reactRootID||(reactRootID=ReactInstanceHandles.createReactRootID()),containersByReactRootID[reactRootID]=container,reactRootID},unmountComponentAtNode:function(container){"production"!==process.env.NODE_ENV?warning(null==ReactCurrentOwner.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,"production"!==process.env.NODE_ENV?invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE),"unmountComponentAtNode(...): Target container is not a DOM element."):invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE));var reactRootID=getReactRootID(container),component=instancesByReactRootID[reactRootID];return component?(ReactMount.unmountComponentFromNode(component,container),delete instancesByReactRootID[reactRootID],delete containersByReactRootID[reactRootID],"production"!==process.env.NODE_ENV&&delete rootElementsByReactRootID[reactRootID],!0):!1},unmountComponentFromNode:function(instance,container){for(ReactReconciler.unmountComponent(instance),container.nodeType===DOC_NODE_TYPE&&(container=container.documentElement);container.lastChild;)container.removeChild(container.lastChild)},findReactContainerForID:function(id){var reactRootID=ReactInstanceHandles.getReactRootIDFromNodeID(id),container=containersByReactRootID[reactRootID];if("production"!==process.env.NODE_ENV){var rootElement=rootElementsByReactRootID[reactRootID];if(rootElement&&rootElement.parentNode!==container){"production"!==process.env.NODE_ENV?invariant(internalGetID(rootElement)===reactRootID,"ReactMount: Root element ID differed from reactRootID."):invariant(internalGetID(rootElement)===reactRootID);var containerChild=container.firstChild;containerChild&&reactRootID===internalGetID(containerChild)?rootElementsByReactRootID[reactRootID]=containerChild:"production"!==process.env.NODE_ENV?warning(!1,"ReactMount: Root element has been removed from its original container. New container:",rootElement.parentNode):null}}return container},findReactNodeByID:function(id){var reactRoot=ReactMount.findReactContainerForID(id);return ReactMount.findComponentRoot(reactRoot,id)},isRenderedByReact:function(node){if(1!==node.nodeType)return!1;var id=ReactMount.getID(node);return id?id.charAt(0)===SEPARATOR:!1},getFirstReactDOM:function(node){for(var current=node;current&&current.parentNode!==current;){if(ReactMount.isRenderedByReact(current))return current;current=current.parentNode}return null},findComponentRoot:function(ancestorNode,targetID){var firstChildren=findComponentRootReusableArray,childIndex=0,deepestAncestor=findDeepestCachedAncestor(targetID)||ancestorNode;for(firstChildren[0]=deepestAncestor.firstChild,firstChildren.length=1;childIndex<firstChildren.length;){for(var targetChild,child=firstChildren[childIndex++];child;){var childID=ReactMount.getID(child);childID?targetID===childID?targetChild=child:ReactInstanceHandles.isAncestorIDOf(childID,targetID)&&(firstChildren.length=childIndex=0,firstChildren.push(child.firstChild)):firstChildren.push(child.firstChild),child=child.nextSibling}if(targetChild)return firstChildren.length=0,targetChild}firstChildren.length=0,"production"!==process.env.NODE_ENV?invariant(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",targetID,ReactMount.getID(ancestorNode)):invariant(!1)},_mountImageIntoNode:function(markup,container,shouldReuseMarkup){if("production"!==process.env.NODE_ENV?invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE),"mountComponentIntoNode(...): Target container is not valid."):invariant(container&&(container.nodeType===ELEMENT_NODE_TYPE||container.nodeType===DOC_NODE_TYPE)),shouldReuseMarkup){var rootElement=getReactRootElementInContainer(container);if(ReactMarkupChecksum.canReuseMarkup(markup,rootElement))return;var checksum=rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);var rootMarkup=rootElement.outerHTML;rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME,checksum);var diffIndex=firstDifferenceIndex(markup,rootMarkup),difference=" (client) "+markup.substring(diffIndex-20,diffIndex+20)+"\n (server) "+rootMarkup.substring(diffIndex-20,diffIndex+20);"production"!==process.env.NODE_ENV?invariant(container.nodeType!==DOC_NODE_TYPE,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",difference):invariant(container.nodeType!==DOC_NODE_TYPE),"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",difference):null)}"production"!==process.env.NODE_ENV?invariant(container.nodeType!==DOC_NODE_TYPE,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See React.renderToString() for server rendering."):invariant(container.nodeType!==DOC_NODE_TYPE),setInnerHTML(container,markup)},getReactRootID:getReactRootID,getID:getID,setID:setID,getNode:getNode,getNodeFromInstance:getNodeFromInstance,purgeID:purgeID};ReactPerf.measureMethods(ReactMount,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),module.exports=ReactMount;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./DOMProperty":104,"./ReactBrowserEventEmitter":125,"./ReactCurrentOwner":134,"./ReactElement":152,"./ReactElementValidator":153,"./ReactEmptyComponent":154,"./ReactInstanceHandles":161,"./ReactInstanceMap":162,"./ReactMarkupChecksum":164,"./ReactPerf":170,"./ReactReconciler":176,"./ReactUpdateQueue":181,"./ReactUpdates":182,"./containsNode":204,"./emptyObject":210,"./getReactRootElementInContainer":224,"./instantiateReactComponent":229,"./invariant":230,"./setInnerHTML":243,"./shouldUpdateReactComponent":246,"./warning":249,"_process":95}],166:[function(require,module,exports){
"use strict";function enqueueMarkup(parentID,markup,toIndex){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.INSERT_MARKUP,markupIndex:markupQueue.push(markup)-1,textContent:null,fromIndex:null,toIndex:toIndex})}function enqueueMove(parentID,fromIndex,toIndex){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:fromIndex,toIndex:toIndex})}function enqueueRemove(parentID,fromIndex){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:fromIndex,toIndex:null})}function enqueueTextContent(parentID,textContent){updateQueue.push({parentID:parentID,parentNode:null,type:ReactMultiChildUpdateTypes.TEXT_CONTENT,markupIndex:null,textContent:textContent,fromIndex:null,toIndex:null})}function processQueue(){updateQueue.length&&(ReactComponentEnvironment.processChildrenUpdates(updateQueue,markupQueue),clearQueue())}function clearQueue(){updateQueue.length=0,markupQueue.length=0}var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),ReactReconciler=require("./ReactReconciler"),ReactChildReconciler=require("./ReactChildReconciler"),updateDepth=0,updateQueue=[],markupQueue=[],ReactMultiChild={Mixin:{mountChildren:function(nestedChildren,transaction,context){var children=ReactChildReconciler.instantiateChildren(nestedChildren,transaction,context);this._renderedChildren=children;var mountImages=[],index=0;for(var name in children)if(children.hasOwnProperty(name)){var child=children[name],rootID=this._rootNodeID+name,mountImage=ReactReconciler.mountComponent(child,rootID,transaction,context);child._mountIndex=index,mountImages.push(mountImage),index++}return mountImages},updateTextContent:function(nextContent){updateDepth++;var errorThrown=!0;try{var prevChildren=this._renderedChildren;ReactChildReconciler.unmountChildren(prevChildren);for(var name in prevChildren)prevChildren.hasOwnProperty(name)&&this._unmountChildByName(prevChildren[name],name);this.setTextContent(nextContent),errorThrown=!1}finally{updateDepth--,updateDepth||(errorThrown?clearQueue():processQueue())}},updateChildren:function(nextNestedChildren,transaction,context){updateDepth++;var errorThrown=!0;try{this._updateChildren(nextNestedChildren,transaction,context),errorThrown=!1}finally{updateDepth--,updateDepth||(errorThrown?clearQueue():processQueue())}},_updateChildren:function(nextNestedChildren,transaction,context){var prevChildren=this._renderedChildren,nextChildren=ReactChildReconciler.updateChildren(prevChildren,nextNestedChildren,transaction,context);if(this._renderedChildren=nextChildren,nextChildren||prevChildren){var name,lastIndex=0,nextIndex=0;for(name in nextChildren)if(nextChildren.hasOwnProperty(name)){var prevChild=prevChildren&&prevChildren[name],nextChild=nextChildren[name];prevChild===nextChild?(this.moveChild(prevChild,nextIndex,lastIndex),lastIndex=Math.max(prevChild._mountIndex,lastIndex),prevChild._mountIndex=nextIndex):(prevChild&&(lastIndex=Math.max(prevChild._mountIndex,lastIndex),this._unmountChildByName(prevChild,name)),this._mountChildByNameAtIndex(nextChild,name,nextIndex,transaction,context)),nextIndex++}for(name in prevChildren)!prevChildren.hasOwnProperty(name)||nextChildren&&nextChildren.hasOwnProperty(name)||this._unmountChildByName(prevChildren[name],name)}},unmountChildren:function(){var renderedChildren=this._renderedChildren;ReactChildReconciler.unmountChildren(renderedChildren),this._renderedChildren=null},moveChild:function(child,toIndex,lastIndex){child._mountIndex<lastIndex&&enqueueMove(this._rootNodeID,child._mountIndex,toIndex)},createChild:function(child,mountImage){enqueueMarkup(this._rootNodeID,mountImage,child._mountIndex)},removeChild:function(child){enqueueRemove(this._rootNodeID,child._mountIndex)},setTextContent:function(textContent){enqueueTextContent(this._rootNodeID,textContent)},_mountChildByNameAtIndex:function(child,name,index,transaction,context){var rootID=this._rootNodeID+name,mountImage=ReactReconciler.mountComponent(child,rootID,transaction,context);child._mountIndex=index,this.createChild(child,mountImage)},_unmountChildByName:function(child,name){this.removeChild(child),child._mountIndex=null}}};module.exports=ReactMultiChild;


},{"./ReactChildReconciler":126,"./ReactComponentEnvironment":131,"./ReactMultiChildUpdateTypes":167,"./ReactReconciler":176}],167:[function(require,module,exports){
"use strict";var keyMirror=require("./keyMirror"),ReactMultiChildUpdateTypes=keyMirror({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});module.exports=ReactMultiChildUpdateTypes;


},{"./keyMirror":235}],168:[function(require,module,exports){
(function (process){
"use strict";function getComponentClassForElement(element){if("function"==typeof element.type)return element.type;var tag=element.type,componentClass=tagToComponentClass[tag];return null==componentClass&&(tagToComponentClass[tag]=componentClass=autoGenerateWrapperClass(tag)),componentClass}function createInternalComponent(element){return"production"!==process.env.NODE_ENV?invariant(genericComponentClass,"There is no registered component for the tag %s",element.type):invariant(genericComponentClass),new genericComponentClass(element.type,element.props)}function createInstanceForText(text){return new textComponentClass(text)}function isTextComponent(component){return component instanceof textComponentClass}var assign=require("./Object.assign"),invariant=require("./invariant"),autoGenerateWrapperClass=null,genericComponentClass=null,tagToComponentClass={},textComponentClass=null,ReactNativeComponentInjection={injectGenericComponentClass:function(componentClass){genericComponentClass=componentClass},injectTextComponentClass:function(componentClass){textComponentClass=componentClass},injectComponentClasses:function(componentClasses){assign(tagToComponentClass,componentClasses)},injectAutoWrapper:function(wrapperFactory){autoGenerateWrapperClass=wrapperFactory}},ReactNativeComponent={getComponentClassForElement:getComponentClassForElement,createInternalComponent:createInternalComponent,createInstanceForText:createInstanceForText,isTextComponent:isTextComponent,injection:ReactNativeComponentInjection};module.exports=ReactNativeComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBd0NBLFNBQVMsNkJBQTRCLFNBQ25DLEdBQTRCLGtCQUFqQixTQUFRLEtBQ2pCLE1BQU8sU0FBUSxJQUVqQixJQUFJLEtBQU0sUUFBUSxLQUNkLGVBQWlCLG9CQUFvQixJQUl6QyxPQUhzQixPQUFsQixpQkFDRixvQkFBb0IsS0FBTyxlQUFpQix5QkFBeUIsTUFFaEUsZUFTVCxRQUFTLHlCQUF3QixTQU0vQixNQUxDLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3ZDLHNCQUNBLGtEQUNBLFFBQVEsTUFDTixVQUFVLHVCQUNQLEdBQUksdUJBQXNCLFFBQVEsS0FBTSxRQUFRLE9BT3pELFFBQVMsdUJBQXNCLE1BQzdCLE1BQU8sSUFBSSxvQkFBbUIsTUFPaEMsUUFBUyxpQkFBZ0IsV0FDdkIsTUFBTyxxQkFBcUIsb0JBOUU5QixHQUFJLFFBQVMsUUFBUSxtQkFDakIsVUFBWSxRQUFRLGVBRXBCLHlCQUEyQixLQUMzQixzQkFBd0IsS0FFeEIsdUJBQ0EsbUJBQXFCLEtBRXJCLCtCQUdGLDRCQUE2QixTQUFTLGdCQUNwQyxzQkFBd0IsZ0JBSTFCLHlCQUEwQixTQUFTLGdCQUNqQyxtQkFBcUIsZ0JBSXZCLHVCQUF3QixTQUFTLGtCQUMvQixPQUFPLG9CQUFxQixtQkFJOUIsa0JBQW1CLFNBQVMsZ0JBQzFCLHlCQUEyQixpQkFxRDNCLHNCQUNGLDRCQUE2Qiw0QkFDN0Isd0JBQXlCLHdCQUN6QixzQkFBdUIsc0JBQ3ZCLGdCQUFpQixnQkFDakIsVUFBVyw4QkFHYixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5hdGl2ZUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gbnVsbDtcbnZhciBnZW5lcmljQ29tcG9uZW50Q2xhc3MgPSBudWxsO1xuLy8gVGhpcyByZWdpc3RyeSBrZWVwcyB0cmFjayBvZiB3cmFwcGVyIGNsYXNzZXMgYXJvdW5kIG5hdGl2ZSB0YWdzXG52YXIgdGFnVG9Db21wb25lbnRDbGFzcyA9IHt9O1xudmFyIHRleHRDb21wb25lbnRDbGFzcyA9IG51bGw7XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgLy8gVGhpcyBhY2NlcHRzIGEgY2xhc3MgdGhhdCByZWNlaXZlcyB0aGUgdGFnIHN0cmluZy4gVGhpcyBpcyBhIGNhdGNoIGFsbFxuICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuICBpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIHRleHQgY29tcG9uZW50IGNsYXNzIHRoYXQgdGFrZXMgdGhlIHRleHQgc3RyaW5nIHRvIGJlXG4gIC8vIHJlbmRlcmVkIGFzIHByb3BzLlxuICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgdGV4dENvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIGtleWVkIG9iamVjdCB3aXRoIGNsYXNzZXMgYXMgdmFsdWVzLiBFYWNoIGtleSByZXByZXNlbnRzIGFcbiAgLy8gdGFnLiBUaGF0IHBhcnRpY3VsYXIgdGFnIHdpbGwgdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiB0aGUgZ2VuZXJpYyBvbmUuXG4gIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICBhc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gIH0sXG4gIC8vIFRlbXBvcmFyeSBoYWNrIHNpbmNlIHdlIGV4cGVjdCBET00gcmVmcyB0byBiZWhhdmUgbGlrZSBjb21wb3NpdGVzLFxuICAvLyBmb3IgdGhpcyByZWxlYXNlLlxuICBpbmplY3RBdXRvV3JhcHBlcjogZnVuY3Rpb24od3JhcHBlckZhY3RvcnkpIHtcbiAgICBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3MgPSB3cmFwcGVyRmFjdG9yeTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgYSBjb21wb3NpdGUgY29tcG9uZW50IHdyYXBwZXIgY2xhc3MgZm9yIGEgc3BlY2lmaWMgdGFnLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IFRoZSB0YWcgZm9yIHdoaWNoIHRvIGdldCB0aGUgY2xhc3MuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIFJlYWN0IGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbGVtZW50LnR5cGU7XG4gIH1cbiAgdmFyIHRhZyA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGNvbXBvbmVudENsYXNzID0gdGFnVG9Db21wb25lbnRDbGFzc1t0YWddO1xuICBpZiAoY29tcG9uZW50Q2xhc3MgPT0gbnVsbCkge1xuICAgIHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXSA9IGNvbXBvbmVudENsYXNzID0gYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzKHRhZyk7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xufVxuXG4vKipcbiAqIEdldCBhIG5hdGl2ZSBpbnRlcm5hbCBjb21wb25lbnQgY2xhc3MgZm9yIGEgc3BlY2lmaWMgdGFnLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGNyZWF0ZS5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgaW50ZXJuYWwgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBnZW5lcmljQ29tcG9uZW50Q2xhc3MsXG4gICAgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJyxcbiAgICBlbGVtZW50LnR5cGVcbiAgKSA6IGludmFyaWFudChnZW5lcmljQ29tcG9uZW50Q2xhc3MpKTtcbiAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3MoZWxlbWVudC50eXBlLCBlbGVtZW50LnByb3BzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlRm9yVGV4dCh0ZXh0KSB7XG4gIHJldHVybiBuZXcgdGV4dENvbXBvbmVudENsYXNzKHRleHQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Q29tcG9uZW50KGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgdGV4dENvbXBvbmVudENsYXNzO1xufVxuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSB7XG4gIGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudDogZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50LFxuICBjcmVhdGVJbnRlcm5hbENvbXBvbmVudDogY3JlYXRlSW50ZXJuYWxDb21wb25lbnQsXG4gIGNyZWF0ZUluc3RhbmNlRm9yVGV4dDogY3JlYXRlSW5zdGFuY2VGb3JUZXh0LFxuICBpc1RleHRDb21wb25lbnQ6IGlzVGV4dENvbXBvbmVudCxcbiAgaW5qZWN0aW9uOiBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudDtcbiJdfQ==
},{"./Object.assign":121,"./invariant":230,"_process":95}],169:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),ReactOwner={isValidOwner:function(object){return!(!object||"function"!=typeof object.attachRef||"function"!=typeof object.detachRef)},addComponentAsRefTo:function(component,ref,owner){"production"!==process.env.NODE_ENV?invariant(ReactOwner.isValidOwner(owner),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):invariant(ReactOwner.isValidOwner(owner)),owner.attachRef(ref,component)},removeComponentAsRefFrom:function(component,ref,owner){"production"!==process.env.NODE_ENV?invariant(ReactOwner.isValidOwner(owner),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):invariant(ReactOwner.isValidOwner(owner)),owner.getPublicInstance().refs[ref]===component.getPublicInstance()&&owner.detachRef(ref)}};module.exports=ReactOwner;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RPd25lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFFQSxJQUFJLFdBQVksUUFBUSxlQWdDcEIsWUFPRixhQUFjLFNBQVMsUUFDckIsU0FDRyxRQUMyQixrQkFBckIsUUFBTyxXQUF3RCxrQkFBckIsUUFBTyxZQWE1RCxvQkFBcUIsU0FBUyxVQUFXLElBQUssT0FDM0MsZUFBaUIsUUFBUSxJQUFJLFNBQVcsVUFDdkMsV0FBVyxhQUFhLE9BQ3hCLCtUQUtFLFVBQVUsV0FBVyxhQUFhLFFBQ3RDLE1BQU0sVUFBVSxJQUFLLFlBWXZCLHlCQUEwQixTQUFTLFVBQVcsSUFBSyxPQUNoRCxlQUFpQixRQUFRLElBQUksU0FBVyxVQUN2QyxXQUFXLGFBQWEsT0FDeEIsdVVBS0UsVUFBVSxXQUFXLGFBQWEsUUFHbEMsTUFBTSxvQkFBb0IsS0FBSyxPQUFTLFVBQVUscUJBQ3BELE1BQU0sVUFBVSxNQU10QixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE93bmVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcblxuICAvKipcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIG93bmVyLlxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzVmFsaWRPd25lcjogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgKG9iamVjdCAmJlxuICAgICAgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbicpXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkcyBhIGNvbXBvbmVudCBieSByZWYgdG8gYW4gb3duZXIgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHJlZmVyZW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIGJ5IHdoaWNoIHRvIHJlZmVyIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSB7UmVhY3RPd25lcn0gb3duZXIgQ29tcG9uZW50IG9uIHdoaWNoIHRvIHJlY29yZCB0aGUgcmVmLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhZGRDb21wb25lbnRBc1JlZlRvOiBmdW5jdGlvbihjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpLFxuICAgICAgJ2FkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gVGhpcyAnICtcbiAgICAgICd1c3VhbGx5IG1lYW5zIHRoYXQgeW91XFwncmUgdHJ5aW5nIHRvIGFkZCBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0ICcgK1xuICAgICAgJ2RvZXNuXFwndCBoYXZlIGFuIG93bmVyICh0aGF0IGlzLCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIG9mIGFub3RoZXIgJyArXG4gICAgICAnY29tcG9uZW50XFwncyBgcmVuZGVyYCBtZXRob2QpLiBUcnkgcmVuZGVyaW5nIHRoaXMgY29tcG9uZW50IGluc2lkZSBvZiAnICtcbiAgICAgICdhIG5ldyB0b3AtbGV2ZWwgY29tcG9uZW50IHdoaWNoIHdpbGwgaG9sZCB0aGUgcmVmLidcbiAgICApIDogaW52YXJpYW50KFJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSkpO1xuICAgIG93bmVyLmF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjb21wb25lbnQgYnkgcmVmIGZyb20gYW4gb3duZXIgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgb2YgdGhlIHJlZiB0byByZW1vdmUuXG4gICAqIEBwYXJhbSB7UmVhY3RPd25lcn0gb3duZXIgQ29tcG9uZW50IG9uIHdoaWNoIHRoZSByZWYgaXMgcmVjb3JkZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbTogZnVuY3Rpb24oY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIFJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSxcbiAgICAgICdyZW1vdmVDb21wb25lbnRBc1JlZkZyb20oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gVGhpcyAnICtcbiAgICAgICd1c3VhbGx5IG1lYW5zIHRoYXQgeW91XFwncmUgdHJ5aW5nIHRvIHJlbW92ZSBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0ICcgK1xuICAgICAgJ2RvZXNuXFwndCBoYXZlIGFuIG93bmVyICh0aGF0IGlzLCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIG9mIGFub3RoZXIgJyArXG4gICAgICAnY29tcG9uZW50XFwncyBgcmVuZGVyYCBtZXRob2QpLiBUcnkgcmVuZGVyaW5nIHRoaXMgY29tcG9uZW50IGluc2lkZSBvZiAnICtcbiAgICAgICdhIG5ldyB0b3AtbGV2ZWwgY29tcG9uZW50IHdoaWNoIHdpbGwgaG9sZCB0aGUgcmVmLidcbiAgICApIDogaW52YXJpYW50KFJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSkpO1xuICAgIC8vIENoZWNrIHRoYXQgYGNvbXBvbmVudGAgaXMgc3RpbGwgdGhlIGN1cnJlbnQgcmVmIGJlY2F1c2Ugd2UgZG8gbm90IHdhbnQgdG9cbiAgICAvLyBkZXRhY2ggdGhlIHJlZiBpZiBhbm90aGVyIGNvbXBvbmVudCBzdG9sZSBpdC5cbiAgICBpZiAob3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5yZWZzW3JlZl0gPT09IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKSB7XG4gICAgICBvd25lci5kZXRhY2hSZWYocmVmKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE93bmVyO1xuIl19
},{"./invariant":230,"_process":95}],170:[function(require,module,exports){
(function (process){
"use strict";function _noMeasure(objName,fnName,func){return func}var ReactPerf={enableMeasure:!1,storedMeasure:_noMeasure,measureMethods:function(object,objectName,methodNames){if("production"!==process.env.NODE_ENV)for(var key in methodNames)methodNames.hasOwnProperty(key)&&(object[key]=ReactPerf.measure(objectName,methodNames[key],object[key]))},measure:function(objName,fnName,func){if("production"!==process.env.NODE_ENV){var measuredFunc=null,wrapper=function(){return ReactPerf.enableMeasure?(measuredFunc||(measuredFunc=ReactPerf.storedMeasure(objName,fnName,func)),measuredFunc.apply(this,arguments)):func.apply(this,arguments)};return wrapper.displayName=objName+"_"+fnName,wrapper}return func},injection:{injectMeasure:function(measure){ReactPerf.storedMeasure=measure}}};module.exports=ReactPerf;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQZXJmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFZQSxZQW1GQSxTQUFTLFlBQVcsUUFBUyxPQUFRLE1BQ25DLE1BQU8sTUE5RVQsR0FBSSxZQUtGLGVBQWUsRUFNZixjQUFlLFdBT2YsZUFBZ0IsU0FBUyxPQUFRLFdBQVksYUFDM0MsR0FBSSxlQUFpQixRQUFRLElBQUksU0FDL0IsSUFBSyxHQUFJLE9BQU8sYUFDVCxZQUFZLGVBQWUsT0FHaEMsT0FBTyxLQUFPLFVBQVUsUUFDdEIsV0FDQSxZQUFZLEtBQ1osT0FBTyxRQWNmLFFBQVMsU0FBUyxRQUFTLE9BQVEsTUFDakMsR0FBSSxlQUFpQixRQUFRLElBQUksU0FBVSxDQUN6QyxHQUFJLGNBQWUsS0FDZixRQUFVLFdBQ1osTUFBSSxXQUFVLGVBQ1AsZUFDSCxhQUFlLFVBQVUsY0FBYyxRQUFTLE9BQVEsT0FFbkQsYUFBYSxNQUFNLEtBQU0sWUFFM0IsS0FBSyxNQUFNLEtBQU0sV0FHMUIsT0FEQSxTQUFRLFlBQWMsUUFBVSxJQUFNLE9BQy9CLFFBRVQsTUFBTyxPQUdULFdBSUUsY0FBZSxTQUFTLFNBQ3RCLFVBQVUsY0FBZ0IsVUFpQmhDLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UGVyZlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVhY3RQZXJmIGlzIGEgZ2VuZXJhbCBBT1Agc3lzdGVtIGRlc2lnbmVkIHRvIG1lYXN1cmUgcGVyZm9ybWFuY2UuIFRoaXNcbiAqIG1vZHVsZSBvbmx5IGhhcyB0aGUgaG9va3M6IHNlZSBSZWFjdERlZmF1bHRQZXJmIGZvciB0aGUgYW5hbHlzaXMgdG9vbC5cbiAqL1xudmFyIFJlYWN0UGVyZiA9IHtcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZW5hYmxlL2Rpc2FibGUgbWVhc3VyZW1lbnQuIFNldCB0byBmYWxzZSBieSBkZWZhdWx0IHRvIHByZXZlbnRcbiAgICogYWNjaWRlbnRhbCBsb2dnaW5nIGFuZCBwZXJmIGxvc3MuXG4gICAqL1xuICBlbmFibGVNZWFzdXJlOiBmYWxzZSxcblxuICAvKipcbiAgICogSG9sZHMgb250byB0aGUgbWVhc3VyZSBmdW5jdGlvbiBpbiB1c2UuIEJ5IGRlZmF1bHQsIGRvbid0IG1lYXN1cmVcbiAgICogYW55dGhpbmcsIGJ1dCB3ZSdsbCBvdmVycmlkZSB0aGlzIGlmIHdlIGluamVjdCBhIG1lYXN1cmUgZnVuY3Rpb24uXG4gICAqL1xuICBzdG9yZWRNZWFzdXJlOiBfbm9NZWFzdXJlLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3ROYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0PHN0cmluZz59IG1ldGhvZE5hbWVzXG4gICAqL1xuICBtZWFzdXJlTWV0aG9kczogZnVuY3Rpb24ob2JqZWN0LCBvYmplY3ROYW1lLCBtZXRob2ROYW1lcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2ROYW1lcykge1xuICAgICAgICBpZiAoIW1ldGhvZE5hbWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAgICAgICAgIG9iamVjdE5hbWUsXG4gICAgICAgICAgbWV0aG9kTmFtZXNba2V5XSxcbiAgICAgICAgICBvYmplY3Rba2V5XVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXNlIHRoaXMgdG8gd3JhcCBtZXRob2RzIHlvdSB3YW50IHRvIG1lYXN1cmUuIFplcm8gb3ZlcmhlYWQgaW4gcHJvZHVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgKi9cbiAgbWVhc3VyZTogZnVuY3Rpb24ob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIG1lYXN1cmVkRnVuYyA9IG51bGw7XG4gICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUpIHtcbiAgICAgICAgICBpZiAoIW1lYXN1cmVkRnVuYykge1xuICAgICAgICAgICAgbWVhc3VyZWRGdW5jID0gUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1lYXN1cmVkRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgd3JhcHBlci5kaXNwbGF5TmFtZSA9IG9iak5hbWUgKyAnXycgKyBmbk5hbWU7XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWVhc3VyZVxuICAgICAqL1xuICAgIGluamVjdE1lYXN1cmU6IGZ1bmN0aW9uKG1lYXN1cmUpIHtcbiAgICAgIFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlID0gbWVhc3VyZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU2ltcGx5IHBhc3NlcyB0aHJvdWdoIHRoZSBtZWFzdXJlZCBmdW5jdGlvbiwgd2l0aG91dCBtZWFzdXJpbmcgaXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBfbm9NZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICByZXR1cm4gZnVuYztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFBlcmY7XG4iXX0=
},{"_process":95}],171:[function(require,module,exports){
(function (process){
"use strict";var ReactPropTypeLocationNames={};"production"!==process.env.NODE_ENV&&(ReactPropTypeLocationNames={prop:"prop",context:"context",childContext:"child context"}),module.exports=ReactPropTypeLocationNames;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBRUEsSUFBSSw4QkFFQSxnQkFBaUIsUUFBUSxJQUFJLFdBQy9CLDRCQUNFLEtBQU0sT0FDTixRQUFTLFVBQ1QsYUFBYyxrQkFJbEIsT0FBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge1xuICAgIHByb3A6ICdwcm9wJyxcbiAgICBjb250ZXh0OiAnY29udGV4dCcsXG4gICAgY2hpbGRDb250ZXh0OiAnY2hpbGQgY29udGV4dCdcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcbiJdfQ==
},{"_process":95}],172:[function(require,module,exports){
"use strict";var keyMirror=require("./keyMirror"),ReactPropTypeLocations=keyMirror({prop:null,context:null,childContext:null});module.exports=ReactPropTypeLocations;


},{"./keyMirror":235}],173:[function(require,module,exports){
"use strict";function createChainableTypeChecker(validate){function checkType(isRequired,props,propName,componentName,location){if(componentName=componentName||ANONYMOUS,null==props[propName]){var locationName=ReactPropTypeLocationNames[location];return isRequired?new Error("Required "+locationName+" `"+propName+"` was not specified in "+("`"+componentName+"`.")):null}return validate(props,propName,componentName,location)}var chainedCheckType=checkType.bind(null,!1);return chainedCheckType.isRequired=checkType.bind(null,!0),chainedCheckType}function createPrimitiveTypeChecker(expectedType){function validate(props,propName,componentName,location){var propValue=props[propName],propType=getPropType(propValue);if(propType!==expectedType){var locationName=ReactPropTypeLocationNames[location],preciseType=getPreciseType(propValue);return new Error("Invalid "+locationName+" `"+propName+"` of type `"+preciseType+"` "+("supplied to `"+componentName+"`, expected `"+expectedType+"`."))}return null}return createChainableTypeChecker(validate)}function createAnyTypeChecker(){return createChainableTypeChecker(emptyFunction.thatReturns(null))}function createArrayOfTypeChecker(typeChecker){function validate(props,propName,componentName,location){var propValue=props[propName];if(!Array.isArray(propValue)){var locationName=ReactPropTypeLocationNames[location],propType=getPropType(propValue);return new Error("Invalid "+locationName+" `"+propName+"` of type "+("`"+propType+"` supplied to `"+componentName+"`, expected an array."))}for(var i=0;i<propValue.length;i++){var error=typeChecker(propValue,i,componentName,location);if(error instanceof Error)return error}return null}return createChainableTypeChecker(validate)}function createElementTypeChecker(){function validate(props,propName,componentName,location){if(!ReactElement.isValidElement(props[propName])){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`, expected a ReactElement."))}return null}return createChainableTypeChecker(validate)}function createInstanceTypeChecker(expectedClass){function validate(props,propName,componentName,location){if(!(props[propName]instanceof expectedClass)){var locationName=ReactPropTypeLocationNames[location],expectedClassName=expectedClass.name||ANONYMOUS;return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`, expected instance of `"+expectedClassName+"`."))}return null}return createChainableTypeChecker(validate)}function createEnumTypeChecker(expectedValues){function validate(props,propName,componentName,location){for(var propValue=props[propName],i=0;i<expectedValues.length;i++)if(propValue===expectedValues[i])return null;var locationName=ReactPropTypeLocationNames[location],valuesString=JSON.stringify(expectedValues);return new Error("Invalid "+locationName+" `"+propName+"` of value `"+propValue+"` "+("supplied to `"+componentName+"`, expected one of "+valuesString+"."))}return createChainableTypeChecker(validate)}function createObjectOfTypeChecker(typeChecker){function validate(props,propName,componentName,location){var propValue=props[propName],propType=getPropType(propValue);if("object"!==propType){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` of type "+("`"+propType+"` supplied to `"+componentName+"`, expected an object."))}for(var key in propValue)if(propValue.hasOwnProperty(key)){var error=typeChecker(propValue,key,componentName,location);if(error instanceof Error)return error}return null}return createChainableTypeChecker(validate)}function createUnionTypeChecker(arrayOfTypeCheckers){function validate(props,propName,componentName,location){for(var i=0;i<arrayOfTypeCheckers.length;i++){var checker=arrayOfTypeCheckers[i];if(null==checker(props,propName,componentName,location))return null}var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`."))}return createChainableTypeChecker(validate)}function createNodeChecker(){function validate(props,propName,componentName,location){if(!isNode(props[propName])){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` supplied to "+("`"+componentName+"`, expected a ReactNode."))}return null}return createChainableTypeChecker(validate)}function createShapeTypeChecker(shapeTypes){function validate(props,propName,componentName,location){var propValue=props[propName],propType=getPropType(propValue);if("object"!==propType){var locationName=ReactPropTypeLocationNames[location];return new Error("Invalid "+locationName+" `"+propName+"` of type `"+propType+"` "+("supplied to `"+componentName+"`, expected `object`."))}for(var key in shapeTypes){var checker=shapeTypes[key];if(checker){var error=checker(propValue,key,componentName,location);if(error)return error}}return null}return createChainableTypeChecker(validate)}function isNode(propValue){switch(typeof propValue){case"number":case"string":case"undefined":return!0;case"boolean":return!propValue;case"object":if(Array.isArray(propValue))return propValue.every(isNode);if(null===propValue||ReactElement.isValidElement(propValue))return!0;propValue=ReactFragment.extractIfFragment(propValue);for(var k in propValue)if(!isNode(propValue[k]))return!1;return!0;default:return!1}}function getPropType(propValue){var propType=typeof propValue;return Array.isArray(propValue)?"array":propValue instanceof RegExp?"object":propType}function getPreciseType(propValue){var propType=getPropType(propValue);if("object"===propType){if(propValue instanceof Date)return"date";if(propValue instanceof RegExp)return"regexp"}return propType}var ReactElement=require("./ReactElement"),ReactFragment=require("./ReactFragment"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),emptyFunction=require("./emptyFunction"),ANONYMOUS="<<anonymous>>",elementTypeChecker=createElementTypeChecker(),nodeTypeChecker=createNodeChecker(),ReactPropTypes={array:createPrimitiveTypeChecker("array"),bool:createPrimitiveTypeChecker("boolean"),func:createPrimitiveTypeChecker("function"),number:createPrimitiveTypeChecker("number"),object:createPrimitiveTypeChecker("object"),string:createPrimitiveTypeChecker("string"),any:createAnyTypeChecker(),arrayOf:createArrayOfTypeChecker,element:elementTypeChecker,instanceOf:createInstanceTypeChecker,node:nodeTypeChecker,objectOf:createObjectOfTypeChecker,oneOf:createEnumTypeChecker,oneOfType:createUnionTypeChecker,shape:createShapeTypeChecker};module.exports=ReactPropTypes;


},{"./ReactElement":152,"./ReactFragment":158,"./ReactPropTypeLocationNames":171,"./emptyFunction":209}],174:[function(require,module,exports){
"use strict";function ReactPutListenerQueue(){this.listenersToPut=[]}var PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),assign=require("./Object.assign");assign(ReactPutListenerQueue.prototype,{enqueuePutListener:function(rootNodeID,propKey,propValue){this.listenersToPut.push({rootNodeID:rootNodeID,propKey:propKey,propValue:propValue})},putListeners:function(){for(var i=0;i<this.listenersToPut.length;i++){var listenerToPut=this.listenersToPut[i];ReactBrowserEventEmitter.putListener(listenerToPut.rootNodeID,listenerToPut.propKey,listenerToPut.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),PooledClass.addPoolingTo(ReactPutListenerQueue),module.exports=ReactPutListenerQueue;


},{"./Object.assign":121,"./PooledClass":122,"./ReactBrowserEventEmitter":125}],175:[function(require,module,exports){
"use strict";function ReactReconcileTransaction(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=CallbackQueue.getPooled(null),this.putListenerQueue=ReactPutListenerQueue.getPooled()}var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactInputSelection=require("./ReactInputSelection"),ReactPutListenerQueue=require("./ReactPutListenerQueue"),Transaction=require("./Transaction"),assign=require("./Object.assign"),SELECTION_RESTORATION={initialize:ReactInputSelection.getSelectionInformation,close:ReactInputSelection.restoreSelection},EVENT_SUPPRESSION={initialize:function(){var currentlyEnabled=ReactBrowserEventEmitter.isEnabled();return ReactBrowserEventEmitter.setEnabled(!1),currentlyEnabled},close:function(previouslyEnabled){ReactBrowserEventEmitter.setEnabled(previouslyEnabled)}},ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},PUT_LISTENER_QUEUEING={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},TRANSACTION_WRAPPERS=[PUT_LISTENER_QUEUEING,SELECTION_RESTORATION,EVENT_SUPPRESSION,ON_DOM_READY_QUEUEING],Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null,ReactPutListenerQueue.release(this.putListenerQueue),this.putListenerQueue=null}};assign(ReactReconcileTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactReconcileTransaction),module.exports=ReactReconcileTransaction;


},{"./CallbackQueue":100,"./Object.assign":121,"./PooledClass":122,"./ReactBrowserEventEmitter":125,"./ReactInputSelection":160,"./ReactPutListenerQueue":174,"./Transaction":198}],176:[function(require,module,exports){
(function (process){
"use strict";function attachRefs(){ReactRef.attachRefs(this,this._currentElement)}var ReactRef=require("./ReactRef"),ReactElementValidator=require("./ReactElementValidator"),ReactReconciler={mountComponent:function(internalInstance,rootID,transaction,context){var markup=internalInstance.mountComponent(rootID,transaction,context);return"production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(internalInstance._currentElement),transaction.getReactMountReady().enqueue(attachRefs,internalInstance),markup},unmountComponent:function(internalInstance){ReactRef.detachRefs(internalInstance,internalInstance._currentElement),internalInstance.unmountComponent()},receiveComponent:function(internalInstance,nextElement,transaction,context){var prevElement=internalInstance._currentElement;if(nextElement!==prevElement||null==nextElement._owner){"production"!==process.env.NODE_ENV&&ReactElementValidator.checkAndWarnForMutatedProps(nextElement);var refsChanged=ReactRef.shouldUpdateRefs(prevElement,nextElement);refsChanged&&ReactRef.detachRefs(internalInstance,prevElement),internalInstance.receiveComponent(nextElement,transaction,context),refsChanged&&transaction.getReactMountReady().enqueue(attachRefs,internalInstance)}},performUpdateIfNecessary:function(internalInstance,transaction){internalInstance.performUpdateIfNecessary(transaction)}};module.exports=ReactReconciler;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWNvbmNpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQSxZQVNBLFNBQVMsY0FDUCxTQUFTLFdBQVcsS0FBTSxLQUFLLGlCQVJqQyxHQUFJLFVBQVcsUUFBUSxjQUNuQixzQkFBd0IsUUFBUSwyQkFVaEMsaUJBWUYsZUFBZ0IsU0FBUyxpQkFBa0IsT0FBUSxZQUFhLFNBQzlELEdBQUksUUFBUyxpQkFBaUIsZUFBZSxPQUFRLFlBQWEsUUFPbEUsT0FOSSxlQUFpQixRQUFRLElBQUksVUFDL0Isc0JBQXNCLDRCQUNwQixpQkFBaUIsaUJBR3JCLFlBQVkscUJBQXFCLFFBQVEsV0FBWSxrQkFDOUMsUUFTVCxpQkFBa0IsU0FBUyxrQkFDekIsU0FBUyxXQUFXLGlCQUFrQixpQkFBaUIsaUJBQ3ZELGlCQUFpQixvQkFZbkIsaUJBQWtCLFNBQ2hCLGlCQUFrQixZQUFhLFlBQWEsU0FFNUMsR0FBSSxhQUFjLGlCQUFpQixlQUVuQyxJQUFJLGNBQWdCLGFBQXFDLE1BQXRCLFlBQVksT0FBL0MsQ0FXSSxlQUFpQixRQUFRLElBQUksVUFDL0Isc0JBQXNCLDRCQUE0QixZQUdwRCxJQUFJLGFBQWMsU0FBUyxpQkFDekIsWUFDQSxZQUdFLGNBQ0YsU0FBUyxXQUFXLGlCQUFrQixhQUd4QyxpQkFBaUIsaUJBQWlCLFlBQWEsWUFBYSxTQUV4RCxhQUNGLFlBQVkscUJBQXFCLFFBQVEsV0FBWSxvQkFXekQseUJBQTBCLFNBQ3hCLGlCQUNBLGFBRUEsaUJBQWlCLHlCQUF5QixjQUs5QyxRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlZiA9IHJlcXVpcmUoXCIuL1JlYWN0UmVmXCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY2FsbCBSZWFjdFJlZi5hdHRhY2hSZWZzIHdpdGggdGhpcyBjb21wb3NpdGUgY29tcG9uZW50LCBzcGxpdCBvdXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpb25zIGluIHRoZSB0cmFuc2FjdGlvbiBtb3VudC1yZWFkeSBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG59XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSB7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbWFya3VwID0gaW50ZXJuYWxJbnN0YW5jZS5tb3VudENvbXBvbmVudChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKFxuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudFxuICAgICAgKTtcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIGNvbXBvbmVudCB1c2luZyBhIG5ldyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgaW50ZXJuYWxJbnN0YW5jZSwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuXG4gICAgaWYgKG5leHRFbGVtZW50ID09PSBwcmV2RWxlbWVudCAmJiBuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGFuIGVsZW1lbnQgY3JlYXRlZCBvdXRzaWRlIGEgY29tcG9zaXRlIHRvIGJlXG4gICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMobmV4dEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHZhciByZWZzQ2hhbmdlZCA9IFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMoXG4gICAgICBwcmV2RWxlbWVudCxcbiAgICAgIG5leHRFbGVtZW50XG4gICAgKTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBwcmV2RWxlbWVudCk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgZGlydHkgY2hhbmdlcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbihcbiAgICBpbnRlcm5hbEluc3RhbmNlLFxuICAgIHRyYW5zYWN0aW9uXG4gICkge1xuICAgIGludGVybmFsSW5zdGFuY2UucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlcjtcbiJdfQ==
},{"./ReactElementValidator":153,"./ReactRef":177,"_process":95}],177:[function(require,module,exports){
"use strict";function attachRef(ref,component,owner){"function"==typeof ref?ref(component.getPublicInstance()):ReactOwner.addComponentAsRefTo(component,ref,owner)}function detachRef(ref,component,owner){"function"==typeof ref?ref(null):ReactOwner.removeComponentAsRefFrom(component,ref,owner)}var ReactOwner=require("./ReactOwner"),ReactRef={};ReactRef.attachRefs=function(instance,element){var ref=element.ref;null!=ref&&attachRef(ref,instance,element._owner)},ReactRef.shouldUpdateRefs=function(prevElement,nextElement){return nextElement._owner!==prevElement._owner||nextElement.ref!==prevElement.ref},ReactRef.detachRefs=function(instance,element){var ref=element.ref;null!=ref&&detachRef(ref,instance,element._owner)},module.exports=ReactRef;


},{"./ReactOwner":169}],178:[function(require,module,exports){
"use strict";var ReactRootIndexInjection={injectCreateReactRootIndex:function(_createReactRootIndex){ReactRootIndex.createReactRootIndex=_createReactRootIndex}},ReactRootIndex={createReactRootIndex:null,injection:ReactRootIndexInjection};module.exports=ReactRootIndex;


},{}],179:[function(require,module,exports){
(function (process){
"use strict";function renderToString(element){"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(element),"renderToString(): You must pass a valid ReactElement."):invariant(ReactElement.isValidElement(element));var transaction;try{var id=ReactInstanceHandles.createReactRootID();return transaction=ReactServerRenderingTransaction.getPooled(!1),transaction.perform(function(){var componentInstance=instantiateReactComponent(element,null),markup=componentInstance.mountComponent(id,transaction,emptyObject);return ReactMarkupChecksum.addChecksumToMarkup(markup)},null)}finally{ReactServerRenderingTransaction.release(transaction)}}function renderToStaticMarkup(element){"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(element),"renderToStaticMarkup(): You must pass a valid ReactElement."):invariant(ReactElement.isValidElement(element));var transaction;try{var id=ReactInstanceHandles.createReactRootID();return transaction=ReactServerRenderingTransaction.getPooled(!0),transaction.perform(function(){var componentInstance=instantiateReactComponent(element,null);return componentInstance.mountComponent(id,transaction,emptyObject)},null)}finally{ReactServerRenderingTransaction.release(transaction)}}var ReactElement=require("./ReactElement"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactServerRenderingTransaction=require("./ReactServerRenderingTransaction"),emptyObject=require("./emptyObject"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("./invariant");module.exports={renderToString:renderToString,renderToStaticMarkup:renderToStaticMarkup};

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBZ0JBLFNBQVMsZ0JBQWUsU0FDckIsZUFBaUIsUUFBUSxJQUFJLFNBQVcsVUFDdkMsYUFBYSxlQUFlLFNBQzVCLHlEQUNFLFVBQVUsYUFBYSxlQUFlLFNBRTFDLElBQUksWUFDSixLQUNFLEdBQUksSUFBSyxxQkFBcUIsbUJBRzlCLE9BRkEsYUFBYyxnQ0FBZ0MsV0FBVSxHQUVqRCxZQUFZLFFBQVEsV0FDekIsR0FBSSxtQkFBb0IsMEJBQTBCLFFBQVMsTUFDdkQsT0FDRixrQkFBa0IsZUFBZSxHQUFJLFlBQWEsWUFDcEQsT0FBTyxxQkFBb0Isb0JBQW9CLFNBQzlDLE1BQ0gsUUFDQSxnQ0FBZ0MsUUFBUSxjQVM1QyxRQUFTLHNCQUFxQixTQUMzQixlQUFpQixRQUFRLElBQUksU0FBVyxVQUN2QyxhQUFhLGVBQWUsU0FDNUIsK0RBQ0UsVUFBVSxhQUFhLGVBQWUsU0FFMUMsSUFBSSxZQUNKLEtBQ0UsR0FBSSxJQUFLLHFCQUFxQixtQkFHOUIsT0FGQSxhQUFjLGdDQUFnQyxXQUFVLEdBRWpELFlBQVksUUFBUSxXQUN6QixHQUFJLG1CQUFvQiwwQkFBMEIsUUFBUyxLQUMzRCxPQUFPLG1CQUFrQixlQUFlLEdBQUksWUFBYSxjQUN4RCxNQUNILFFBQ0EsZ0NBQWdDLFFBQVEsY0F6RDVDLEdBQUksY0FBZSxRQUFRLGtCQUN2QixxQkFBdUIsUUFBUSwwQkFDL0Isb0JBQXNCLFFBQVEseUJBQzlCLGdDQUNGLFFBQVEscUNBRU4sWUFBYyxRQUFRLGlCQUN0QiwwQkFBNEIsUUFBUSwrQkFDcEMsVUFBWSxRQUFRLGNBcUR4QixRQUFPLFNBQ0wsZUFBZ0IsZUFDaEIscUJBQXNCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCIpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPVxuICByZXF1aXJlKFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RyaW5nKGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksXG4gICAgJ3JlbmRlclRvU3RyaW5nKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkpO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQoZmFsc2UpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgdmFyIG1hcmt1cCA9XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgZW1wdHlPYmplY3QpO1xuICAgICAgcmV0dXJuIFJlYWN0TWFya3VwQ2hlY2tzdW0uYWRkQ2hlY2tzdW1Ub01hcmt1cChtYXJrdXApO1xuICAgIH0sIG51bGwpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXAsIHdpdGhvdXQgdGhlIGV4dHJhIFJlYWN0IElEIGFuZCBjaGVja3N1bVxuICogKGZvciBnZW5lcmF0aW5nIHN0YXRpYyBwYWdlcylcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWNNYXJrdXAoZWxlbWVudCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSxcbiAgICAncmVuZGVyVG9TdGF0aWNNYXJrdXAoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSk7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZCh0cnVlKTtcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcbiAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0KTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW5kZXJUb1N0cmluZzogcmVuZGVyVG9TdHJpbmcsXG4gIHJlbmRlclRvU3RhdGljTWFya3VwOiByZW5kZXJUb1N0YXRpY01hcmt1cFxufTtcbiJdfQ==
},{"./ReactElement":152,"./ReactInstanceHandles":161,"./ReactMarkupChecksum":164,"./ReactServerRenderingTransaction":180,"./emptyObject":210,"./instantiateReactComponent":229,"./invariant":230,"_process":95}],180:[function(require,module,exports){
"use strict";function ReactServerRenderingTransaction(renderToStaticMarkup){this.reinitializeTransaction(),this.renderToStaticMarkup=renderToStaticMarkup,this.reactMountReady=CallbackQueue.getPooled(null),this.putListenerQueue=ReactPutListenerQueue.getPooled()}var PooledClass=require("./PooledClass"),CallbackQueue=require("./CallbackQueue"),ReactPutListenerQueue=require("./ReactPutListenerQueue"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:emptyFunction},PUT_LISTENER_QUEUEING={initialize:function(){this.putListenerQueue.reset()},close:emptyFunction},TRANSACTION_WRAPPERS=[PUT_LISTENER_QUEUEING,ON_DOM_READY_QUEUEING],Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null,ReactPutListenerQueue.release(this.putListenerQueue),this.putListenerQueue=null}};assign(ReactServerRenderingTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactServerRenderingTransaction),module.exports=ReactServerRenderingTransaction;


},{"./CallbackQueue":100,"./Object.assign":121,"./PooledClass":122,"./ReactPutListenerQueue":174,"./Transaction":198,"./emptyFunction":209}],181:[function(require,module,exports){
(function (process){
"use strict";function enqueueUpdate(internalInstance){internalInstance!==ReactLifeCycle.currentlyMountingInstance&&ReactUpdates.enqueueUpdate(internalInstance)}function getInternalInstanceReadyForUpdate(publicInstance,callerName){"production"!==process.env.NODE_ENV?invariant(null==ReactCurrentOwner.current,"%s(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.",callerName):invariant(null==ReactCurrentOwner.current);var internalInstance=ReactInstanceMap.get(publicInstance);return internalInstance?internalInstance===ReactLifeCycle.currentlyUnmountingInstance?null:internalInstance:("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(!callerName,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op.",callerName,callerName):null),null)}var ReactLifeCycle=require("./ReactLifeCycle"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),ReactUpdateQueue={enqueueCallback:function(publicInstance,callback){"production"!==process.env.NODE_ENV?invariant("function"==typeof callback,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):invariant("function"==typeof callback);var internalInstance=getInternalInstanceReadyForUpdate(publicInstance);return internalInstance&&internalInstance!==ReactLifeCycle.currentlyMountingInstance?(internalInstance._pendingCallbacks?internalInstance._pendingCallbacks.push(callback):internalInstance._pendingCallbacks=[callback],void enqueueUpdate(internalInstance)):null},enqueueCallbackInternal:function(internalInstance,callback){"production"!==process.env.NODE_ENV?invariant("function"==typeof callback,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):invariant("function"==typeof callback),internalInstance._pendingCallbacks?internalInstance._pendingCallbacks.push(callback):internalInstance._pendingCallbacks=[callback],enqueueUpdate(internalInstance)},enqueueForceUpdate:function(publicInstance){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"forceUpdate");internalInstance&&(internalInstance._pendingForceUpdate=!0,enqueueUpdate(internalInstance))},enqueueReplaceState:function(publicInstance,completeState){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"replaceState");internalInstance&&(internalInstance._pendingStateQueue=[completeState],internalInstance._pendingReplaceState=!0,enqueueUpdate(internalInstance))},enqueueSetState:function(publicInstance,partialState){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"setState");if(internalInstance){var queue=internalInstance._pendingStateQueue||(internalInstance._pendingStateQueue=[]);queue.push(partialState),enqueueUpdate(internalInstance)}},enqueueSetProps:function(publicInstance,partialProps){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"setProps");if(internalInstance){"production"!==process.env.NODE_ENV?invariant(internalInstance._isTopLevel,"setProps(...): You called `setProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):invariant(internalInstance._isTopLevel);var element=internalInstance._pendingElement||internalInstance._currentElement,props=assign({},element.props,partialProps);internalInstance._pendingElement=ReactElement.cloneAndReplaceProps(element,props),enqueueUpdate(internalInstance)}},enqueueReplaceProps:function(publicInstance,props){var internalInstance=getInternalInstanceReadyForUpdate(publicInstance,"replaceProps");if(internalInstance){"production"!==process.env.NODE_ENV?invariant(internalInstance._isTopLevel,"replaceProps(...): You called `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):invariant(internalInstance._isTopLevel);var element=internalInstance._pendingElement||internalInstance._currentElement;internalInstance._pendingElement=ReactElement.cloneAndReplaceProps(element,props),enqueueUpdate(internalInstance)}},enqueueElementInternal:function(internalInstance,newElement){internalInstance._pendingElement=newElement,enqueueUpdate(internalInstance)}};module.exports=ReactUpdateQueue;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./Object.assign":121,"./ReactCurrentOwner":134,"./ReactElement":152,"./ReactInstanceMap":162,"./ReactLifeCycle":163,"./ReactUpdates":182,"./invariant":230,"./warning":249,"_process":95}],182:[function(require,module,exports){
(function (process){
"use strict";function ensureInjected(){"production"!==process.env.NODE_ENV?invariant(ReactUpdates.ReactReconcileTransaction&&batchingStrategy,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):invariant(ReactUpdates.ReactReconcileTransaction&&batchingStrategy)}function ReactUpdatesFlushTransaction(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=CallbackQueue.getPooled(),this.reconcileTransaction=ReactUpdates.ReactReconcileTransaction.getPooled()}function batchedUpdates(callback,a,b,c,d){ensureInjected(),batchingStrategy.batchedUpdates(callback,a,b,c,d)}function mountOrderComparator(c1,c2){return c1._mountOrder-c2._mountOrder}function runBatchedUpdates(transaction){var len=transaction.dirtyComponentsLength;"production"!==process.env.NODE_ENV?invariant(len===dirtyComponents.length,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",len,dirtyComponents.length):invariant(len===dirtyComponents.length),dirtyComponents.sort(mountOrderComparator);for(var i=0;len>i;i++){var component=dirtyComponents[i],callbacks=component._pendingCallbacks;if(component._pendingCallbacks=null,ReactReconciler.performUpdateIfNecessary(component,transaction.reconcileTransaction),callbacks)for(var j=0;j<callbacks.length;j++)transaction.callbackQueue.enqueue(callbacks[j],component.getPublicInstance())}}function enqueueUpdate(component){return ensureInjected(),"production"!==process.env.NODE_ENV?warning(null==ReactCurrentOwner.current,"enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,batchingStrategy.isBatchingUpdates?void dirtyComponents.push(component):void batchingStrategy.batchedUpdates(enqueueUpdate,component)}function asap(callback,context){"production"!==process.env.NODE_ENV?invariant(batchingStrategy.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):invariant(batchingStrategy.isBatchingUpdates),asapCallbackQueue.enqueue(callback,context),asapEnqueued=!0}var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),Transaction=require("./Transaction"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),dirtyComponents=[],asapCallbackQueue=CallbackQueue.getPooled(),asapEnqueued=!1,batchingStrategy=null,NESTED_UPDATES={initialize:function(){this.dirtyComponentsLength=dirtyComponents.length},close:function(){this.dirtyComponentsLength!==dirtyComponents.length?(dirtyComponents.splice(0,this.dirtyComponentsLength),flushBatchedUpdates()):dirtyComponents.length=0}},UPDATE_QUEUEING={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},TRANSACTION_WRAPPERS=[NESTED_UPDATES,UPDATE_QUEUEING];assign(ReactUpdatesFlushTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},destructor:function(){this.dirtyComponentsLength=null,CallbackQueue.release(this.callbackQueue),this.callbackQueue=null,ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(method,scope,a){return Transaction.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,method,scope,a)}}),PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);var flushBatchedUpdates=function(){for(;dirtyComponents.length||asapEnqueued;){if(dirtyComponents.length){var transaction=ReactUpdatesFlushTransaction.getPooled();transaction.perform(runBatchedUpdates,null,transaction),ReactUpdatesFlushTransaction.release(transaction)}if(asapEnqueued){asapEnqueued=!1;var queue=asapCallbackQueue;asapCallbackQueue=CallbackQueue.getPooled(),queue.notifyAll(),CallbackQueue.release(queue)}}};flushBatchedUpdates=ReactPerf.measure("ReactUpdates","flushBatchedUpdates",flushBatchedUpdates);var ReactUpdatesInjection={injectReconcileTransaction:function(ReconcileTransaction){"production"!==process.env.NODE_ENV?invariant(ReconcileTransaction,"ReactUpdates: must provide a reconcile transaction class"):invariant(ReconcileTransaction),ReactUpdates.ReactReconcileTransaction=ReconcileTransaction},injectBatchingStrategy:function(_batchingStrategy){"production"!==process.env.NODE_ENV?invariant(_batchingStrategy,"ReactUpdates: must provide a batching strategy"):invariant(_batchingStrategy),"production"!==process.env.NODE_ENV?invariant("function"==typeof _batchingStrategy.batchedUpdates,"ReactUpdates: must provide a batchedUpdates() function"):invariant("function"==typeof _batchingStrategy.batchedUpdates),"production"!==process.env.NODE_ENV?invariant("boolean"==typeof _batchingStrategy.isBatchingUpdates,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):invariant("boolean"==typeof _batchingStrategy.isBatchingUpdates),batchingStrategy=_batchingStrategy}},ReactUpdates={ReactReconcileTransaction:null,batchedUpdates:batchedUpdates,enqueueUpdate:enqueueUpdate,flushBatchedUpdates:flushBatchedUpdates,injection:ReactUpdatesInjection,asap:asap};module.exports=ReactUpdates;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./CallbackQueue":100,"./Object.assign":121,"./PooledClass":122,"./ReactCurrentOwner":134,"./ReactPerf":170,"./ReactReconciler":176,"./Transaction":198,"./invariant":230,"./warning":249,"_process":95}],183:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,SVGDOMPropertyConfig={Properties:{clipPath:MUST_USE_ATTRIBUTE,cx:MUST_USE_ATTRIBUTE,cy:MUST_USE_ATTRIBUTE,d:MUST_USE_ATTRIBUTE,dx:MUST_USE_ATTRIBUTE,dy:MUST_USE_ATTRIBUTE,fill:MUST_USE_ATTRIBUTE,fillOpacity:MUST_USE_ATTRIBUTE,fontFamily:MUST_USE_ATTRIBUTE,fontSize:MUST_USE_ATTRIBUTE,fx:MUST_USE_ATTRIBUTE,fy:MUST_USE_ATTRIBUTE,gradientTransform:MUST_USE_ATTRIBUTE,gradientUnits:MUST_USE_ATTRIBUTE,markerEnd:MUST_USE_ATTRIBUTE,markerMid:MUST_USE_ATTRIBUTE,markerStart:MUST_USE_ATTRIBUTE,offset:MUST_USE_ATTRIBUTE,opacity:MUST_USE_ATTRIBUTE,patternContentUnits:MUST_USE_ATTRIBUTE,patternUnits:MUST_USE_ATTRIBUTE,points:MUST_USE_ATTRIBUTE,preserveAspectRatio:MUST_USE_ATTRIBUTE,r:MUST_USE_ATTRIBUTE,rx:MUST_USE_ATTRIBUTE,ry:MUST_USE_ATTRIBUTE,spreadMethod:MUST_USE_ATTRIBUTE,stopColor:MUST_USE_ATTRIBUTE,stopOpacity:MUST_USE_ATTRIBUTE,stroke:MUST_USE_ATTRIBUTE,strokeDasharray:MUST_USE_ATTRIBUTE,strokeLinecap:MUST_USE_ATTRIBUTE,strokeOpacity:MUST_USE_ATTRIBUTE,strokeWidth:MUST_USE_ATTRIBUTE,textAnchor:MUST_USE_ATTRIBUTE,transform:MUST_USE_ATTRIBUTE,version:MUST_USE_ATTRIBUTE,viewBox:MUST_USE_ATTRIBUTE,x1:MUST_USE_ATTRIBUTE,x2:MUST_USE_ATTRIBUTE,x:MUST_USE_ATTRIBUTE,y1:MUST_USE_ATTRIBUTE,y2:MUST_USE_ATTRIBUTE,y:MUST_USE_ATTRIBUTE},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};module.exports=SVGDOMPropertyConfig;


},{"./DOMProperty":104}],184:[function(require,module,exports){
"use strict";function getSelection(node){if("selectionStart"in node&&ReactInputSelection.hasSelectionCapabilities(node))return{start:node.selectionStart,end:node.selectionEnd};if(window.getSelection){var selection=window.getSelection();return{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset}}if(document.selection){var range=document.selection.createRange();return{parentElement:range.parentElement(),text:range.text,top:range.boundingTop,left:range.boundingLeft}}}function constructSelectEvent(nativeEvent){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var currentSelection=getSelection(activeElement);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var syntheticEvent=SyntheticEvent.getPooled(eventTypes.select,activeElementID,nativeEvent);return syntheticEvent.type="select",syntheticEvent.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent),syntheticEvent}}var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ReactInputSelection=require("./ReactInputSelection"),SyntheticEvent=require("./SyntheticEvent"),getActiveElement=require("./getActiveElement"),isTextInputElement=require("./isTextInputElement"),keyOf=require("./keyOf"),shallowEqual=require("./shallowEqual"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={select:{phasedRegistrationNames:{bubbled:keyOf({onSelect:null}),captured:keyOf({onSelectCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topContextMenu,topLevelTypes.topFocus,topLevelTypes.topKeyDown,topLevelTypes.topMouseDown,topLevelTypes.topMouseUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,lastSelection=null,mouseDown=!1,SelectEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){switch(topLevelType){case topLevelTypes.topFocus:(isTextInputElement(topLevelTarget)||"true"===topLevelTarget.contentEditable)&&(activeElement=topLevelTarget,activeElementID=topLevelTargetID,lastSelection=null);break;case topLevelTypes.topBlur:activeElement=null,activeElementID=null,lastSelection=null;break;case topLevelTypes.topMouseDown:mouseDown=!0;break;case topLevelTypes.topContextMenu:case topLevelTypes.topMouseUp:return mouseDown=!1,constructSelectEvent(nativeEvent);case topLevelTypes.topSelectionChange:case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:return constructSelectEvent(nativeEvent)}}};module.exports=SelectEventPlugin;


},{"./EventConstants":109,"./EventPropagators":114,"./ReactInputSelection":160,"./SyntheticEvent":190,"./getActiveElement":216,"./isTextInputElement":233,"./keyOf":236,"./shallowEqual":245}],185:[function(require,module,exports){
"use strict";var GLOBAL_MOUNT_POINT_MAX=Math.pow(2,53),ServerReactRootIndex={createReactRootIndex:function(){return Math.ceil(Math.random()*GLOBAL_MOUNT_POINT_MAX)}};module.exports=ServerReactRootIndex;


},{}],186:[function(require,module,exports){
(function (process){
"use strict";var EventConstants=require("./EventConstants"),EventPluginUtils=require("./EventPluginUtils"),EventPropagators=require("./EventPropagators"),SyntheticClipboardEvent=require("./SyntheticClipboardEvent"),SyntheticEvent=require("./SyntheticEvent"),SyntheticFocusEvent=require("./SyntheticFocusEvent"),SyntheticKeyboardEvent=require("./SyntheticKeyboardEvent"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),SyntheticDragEvent=require("./SyntheticDragEvent"),SyntheticTouchEvent=require("./SyntheticTouchEvent"),SyntheticUIEvent=require("./SyntheticUIEvent"),SyntheticWheelEvent=require("./SyntheticWheelEvent"),getEventCharCode=require("./getEventCharCode"),invariant=require("./invariant"),keyOf=require("./keyOf"),warning=require("./warning"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={blur:{phasedRegistrationNames:{bubbled:keyOf({onBlur:!0}),captured:keyOf({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:keyOf({onClick:!0}),captured:keyOf({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:keyOf({onContextMenu:!0}),captured:keyOf({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:keyOf({onCopy:!0}),captured:keyOf({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:keyOf({onCut:!0}),captured:keyOf({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:keyOf({onDoubleClick:!0}),captured:keyOf({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:keyOf({onDrag:!0}),captured:keyOf({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:keyOf({onDragEnd:!0}),captured:keyOf({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:keyOf({onDragEnter:!0}),captured:keyOf({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:keyOf({onDragExit:!0}),captured:keyOf({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:keyOf({onDragLeave:!0}),captured:keyOf({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:keyOf({onDragOver:!0}),captured:keyOf({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:keyOf({onDragStart:!0}),captured:keyOf({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:keyOf({onDrop:!0}),captured:keyOf({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:keyOf({onFocus:!0}),captured:keyOf({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:keyOf({onInput:!0}),captured:keyOf({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:keyOf({onKeyDown:!0}),captured:keyOf({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:keyOf({onKeyPress:!0}),captured:keyOf({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:keyOf({onKeyUp:!0}),captured:keyOf({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:keyOf({onLoad:!0}),captured:keyOf({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:keyOf({onError:!0}),captured:keyOf({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:keyOf({onMouseDown:!0}),captured:keyOf({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:keyOf({onMouseMove:!0}),captured:keyOf({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:keyOf({onMouseOut:!0}),captured:keyOf({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:keyOf({onMouseOver:!0}),captured:keyOf({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:keyOf({onMouseUp:!0}),captured:keyOf({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:keyOf({onPaste:!0}),captured:keyOf({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:keyOf({onReset:!0}),captured:keyOf({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:keyOf({onScroll:!0}),captured:keyOf({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:keyOf({onSubmit:!0}),captured:keyOf({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:keyOf({onTouchCancel:!0}),captured:keyOf({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:keyOf({onTouchEnd:!0}),captured:keyOf({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:keyOf({onTouchMove:!0}),captured:keyOf({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:keyOf({onTouchStart:!0}),captured:keyOf({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:keyOf({onWheel:!0}),captured:keyOf({onWheelCapture:!0})}}},topLevelEventsToDispatchConfig={topBlur:eventTypes.blur,topClick:eventTypes.click,topContextMenu:eventTypes.contextMenu,topCopy:eventTypes.copy,topCut:eventTypes.cut,topDoubleClick:eventTypes.doubleClick,topDrag:eventTypes.drag,topDragEnd:eventTypes.dragEnd,topDragEnter:eventTypes.dragEnter,topDragExit:eventTypes.dragExit,topDragLeave:eventTypes.dragLeave,topDragOver:eventTypes.dragOver,topDragStart:eventTypes.dragStart,topDrop:eventTypes.drop,topError:eventTypes.error,topFocus:eventTypes.focus,topInput:eventTypes.input,topKeyDown:eventTypes.keyDown,topKeyPress:eventTypes.keyPress,topKeyUp:eventTypes.keyUp,topLoad:eventTypes.load,topMouseDown:eventTypes.mouseDown,topMouseMove:eventTypes.mouseMove,topMouseOut:eventTypes.mouseOut,topMouseOver:eventTypes.mouseOver,topMouseUp:eventTypes.mouseUp,topPaste:eventTypes.paste,topReset:eventTypes.reset,topScroll:eventTypes.scroll,topSubmit:eventTypes.submit,topTouchCancel:eventTypes.touchCancel,topTouchEnd:eventTypes.touchEnd,topTouchMove:eventTypes.touchMove,topTouchStart:eventTypes.touchStart,topWheel:eventTypes.wheel};for(var type in topLevelEventsToDispatchConfig)topLevelEventsToDispatchConfig[type].dependencies=[type];var SimpleEventPlugin={eventTypes:eventTypes,executeDispatch:function(event,listener,domID){var returnValue=EventPluginUtils.executeDispatch(event,listener,domID);"production"!==process.env.NODE_ENV?warning("boolean"!=typeof returnValue,"Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate."):null,returnValue===!1&&(event.stopPropagation(),event.preventDefault())},extractEvents:function(topLevelType,topLevelTarget,topLevelTargetID,nativeEvent){var dispatchConfig=topLevelEventsToDispatchConfig[topLevelType];if(!dispatchConfig)return null;var EventConstructor;switch(topLevelType){case topLevelTypes.topInput:case topLevelTypes.topLoad:case topLevelTypes.topError:case topLevelTypes.topReset:case topLevelTypes.topSubmit:EventConstructor=SyntheticEvent;break;case topLevelTypes.topKeyPress:if(0===getEventCharCode(nativeEvent))return null;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:EventConstructor=SyntheticKeyboardEvent;break;case topLevelTypes.topBlur:case topLevelTypes.topFocus:EventConstructor=SyntheticFocusEvent;break;case topLevelTypes.topClick:if(2===nativeEvent.button)return null;case topLevelTypes.topContextMenu:case topLevelTypes.topDoubleClick:case topLevelTypes.topMouseDown:case topLevelTypes.topMouseMove:case topLevelTypes.topMouseOut:case topLevelTypes.topMouseOver:case topLevelTypes.topMouseUp:EventConstructor=SyntheticMouseEvent;break;case topLevelTypes.topDrag:case topLevelTypes.topDragEnd:case topLevelTypes.topDragEnter:case topLevelTypes.topDragExit:case topLevelTypes.topDragLeave:case topLevelTypes.topDragOver:case topLevelTypes.topDragStart:case topLevelTypes.topDrop:EventConstructor=SyntheticDragEvent;break;case topLevelTypes.topTouchCancel:case topLevelTypes.topTouchEnd:case topLevelTypes.topTouchMove:case topLevelTypes.topTouchStart:EventConstructor=SyntheticTouchEvent;break;case topLevelTypes.topScroll:EventConstructor=SyntheticUIEvent;break;case topLevelTypes.topWheel:EventConstructor=SyntheticWheelEvent;break;case topLevelTypes.topCopy:case topLevelTypes.topCut:case topLevelTypes.topPaste:EventConstructor=SyntheticClipboardEvent}"production"!==process.env.NODE_ENV?invariant(EventConstructor,"SimpleEventPlugin: Unhandled event type, `%s`.",topLevelType):invariant(EventConstructor);var event=EventConstructor.getPooled(dispatchConfig,topLevelTargetID,nativeEvent);return EventPropagators.accumulateTwoPhaseDispatches(event),event}};module.exports=SimpleEventPlugin;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./EventConstants":109,"./EventPluginUtils":113,"./EventPropagators":114,"./SyntheticClipboardEvent":187,"./SyntheticDragEvent":189,"./SyntheticEvent":190,"./SyntheticFocusEvent":191,"./SyntheticKeyboardEvent":193,"./SyntheticMouseEvent":194,"./SyntheticTouchEvent":195,"./SyntheticUIEvent":196,"./SyntheticWheelEvent":197,"./getEventCharCode":217,"./invariant":230,"./keyOf":236,"./warning":249,"_process":95}],187:[function(require,module,exports){
"use strict";function SyntheticClipboardEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),ClipboardEventInterface={clipboardData:function(event){return"clipboardData"in event?event.clipboardData:window.clipboardData}};SyntheticEvent.augmentClass(SyntheticClipboardEvent,ClipboardEventInterface),module.exports=SyntheticClipboardEvent;


},{"./SyntheticEvent":190}],188:[function(require,module,exports){
"use strict";function SyntheticCompositionEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),CompositionEventInterface={data:null};SyntheticEvent.augmentClass(SyntheticCompositionEvent,CompositionEventInterface),module.exports=SyntheticCompositionEvent;


},{"./SyntheticEvent":190}],189:[function(require,module,exports){
"use strict";function SyntheticDragEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticMouseEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticMouseEvent=require("./SyntheticMouseEvent"),DragEventInterface={dataTransfer:null};SyntheticMouseEvent.augmentClass(SyntheticDragEvent,DragEventInterface),module.exports=SyntheticDragEvent;


},{"./SyntheticMouseEvent":194}],190:[function(require,module,exports){
"use strict";function SyntheticEvent(dispatchConfig,dispatchMarker,nativeEvent){this.dispatchConfig=dispatchConfig,this.dispatchMarker=dispatchMarker,this.nativeEvent=nativeEvent;var Interface=this.constructor.Interface;for(var propName in Interface)if(Interface.hasOwnProperty(propName)){var normalize=Interface[propName];normalize?this[propName]=normalize(nativeEvent):this[propName]=nativeEvent[propName]}var defaultPrevented=null!=nativeEvent.defaultPrevented?nativeEvent.defaultPrevented:nativeEvent.returnValue===!1;defaultPrevented?this.isDefaultPrevented=emptyFunction.thatReturnsTrue:this.isDefaultPrevented=emptyFunction.thatReturnsFalse,this.isPropagationStopped=emptyFunction.thatReturnsFalse}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),emptyFunction=require("./emptyFunction"),getEventTarget=require("./getEventTarget"),EventInterface={type:null,target:getEventTarget,currentTarget:emptyFunction.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(event){return event.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};assign(SyntheticEvent.prototype,{preventDefault:function(){this.defaultPrevented=!0;var event=this.nativeEvent;event.preventDefault?event.preventDefault():event.returnValue=!1,this.isDefaultPrevented=emptyFunction.thatReturnsTrue},stopPropagation:function(){var event=this.nativeEvent;event.stopPropagation?event.stopPropagation():event.cancelBubble=!0,this.isPropagationStopped=emptyFunction.thatReturnsTrue},persist:function(){this.isPersistent=emptyFunction.thatReturnsTrue},isPersistent:emptyFunction.thatReturnsFalse,destructor:function(){var Interface=this.constructor.Interface;for(var propName in Interface)this[propName]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),SyntheticEvent.Interface=EventInterface,SyntheticEvent.augmentClass=function(Class,Interface){var Super=this,prototype=Object.create(Super.prototype);assign(prototype,Class.prototype),Class.prototype=prototype,Class.prototype.constructor=Class,Class.Interface=assign({},Super.Interface,Interface),Class.augmentClass=Super.augmentClass,PooledClass.addPoolingTo(Class,PooledClass.threeArgumentPooler)},PooledClass.addPoolingTo(SyntheticEvent,PooledClass.threeArgumentPooler),module.exports=SyntheticEvent;


},{"./Object.assign":121,"./PooledClass":122,"./emptyFunction":209,"./getEventTarget":220}],191:[function(require,module,exports){
"use strict";function SyntheticFocusEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),FocusEventInterface={relatedTarget:null};SyntheticUIEvent.augmentClass(SyntheticFocusEvent,FocusEventInterface),module.exports=SyntheticFocusEvent;


},{"./SyntheticUIEvent":196}],192:[function(require,module,exports){
"use strict";function SyntheticInputEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),InputEventInterface={data:null};SyntheticEvent.augmentClass(SyntheticInputEvent,InputEventInterface),module.exports=SyntheticInputEvent;


},{"./SyntheticEvent":190}],193:[function(require,module,exports){
"use strict";function SyntheticKeyboardEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventCharCode=require("./getEventCharCode"),getEventKey=require("./getEventKey"),getEventModifierState=require("./getEventModifierState"),KeyboardEventInterface={key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,charCode:function(event){return"keypress"===event.type?getEventCharCode(event):0},keyCode:function(event){return"keydown"===event.type||"keyup"===event.type?event.keyCode:0},which:function(event){return"keypress"===event.type?getEventCharCode(event):"keydown"===event.type||"keyup"===event.type?event.keyCode:0}};SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent,KeyboardEventInterface),module.exports=SyntheticKeyboardEvent;


},{"./SyntheticUIEvent":196,"./getEventCharCode":217,"./getEventKey":218,"./getEventModifierState":219}],194:[function(require,module,exports){
"use strict";function SyntheticMouseEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),ViewportMetrics=require("./ViewportMetrics"),getEventModifierState=require("./getEventModifierState"),MouseEventInterface={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:function(event){var button=event.button;return"which"in event?button:2===button?2:4===button?1:0},buttons:null,relatedTarget:function(event){return event.relatedTarget||(event.fromElement===event.srcElement?event.toElement:event.fromElement)},pageX:function(event){return"pageX"in event?event.pageX:event.clientX+ViewportMetrics.currentScrollLeft},pageY:function(event){return"pageY"in event?event.pageY:event.clientY+ViewportMetrics.currentScrollTop}};SyntheticUIEvent.augmentClass(SyntheticMouseEvent,MouseEventInterface),module.exports=SyntheticMouseEvent;


},{"./SyntheticUIEvent":196,"./ViewportMetrics":199,"./getEventModifierState":219}],195:[function(require,module,exports){
"use strict";function SyntheticTouchEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticUIEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventModifierState=require("./getEventModifierState"),TouchEventInterface={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState};SyntheticUIEvent.augmentClass(SyntheticTouchEvent,TouchEventInterface),module.exports=SyntheticTouchEvent;


},{"./SyntheticUIEvent":196,"./getEventModifierState":219}],196:[function(require,module,exports){
"use strict";function SyntheticUIEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),UIEventInterface={view:function(event){if(event.view)return event.view;var target=getEventTarget(event);if(null!=target&&target.window===target)return target;var doc=target.ownerDocument;return doc?doc.defaultView||doc.parentWindow:window},detail:function(event){return event.detail||0}};SyntheticEvent.augmentClass(SyntheticUIEvent,UIEventInterface),module.exports=SyntheticUIEvent;


},{"./SyntheticEvent":190,"./getEventTarget":220}],197:[function(require,module,exports){
"use strict";function SyntheticWheelEvent(dispatchConfig,dispatchMarker,nativeEvent){SyntheticMouseEvent.call(this,dispatchConfig,dispatchMarker,nativeEvent)}var SyntheticMouseEvent=require("./SyntheticMouseEvent"),WheelEventInterface={deltaX:function(event){return"deltaX"in event?event.deltaX:"wheelDeltaX"in event?-event.wheelDeltaX:0},deltaY:function(event){return"deltaY"in event?event.deltaY:"wheelDeltaY"in event?-event.wheelDeltaY:"wheelDelta"in event?-event.wheelDelta:0},deltaZ:null,deltaMode:null};SyntheticMouseEvent.augmentClass(SyntheticWheelEvent,WheelEventInterface),module.exports=SyntheticWheelEvent;


},{"./SyntheticMouseEvent":194}],198:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),Mixin={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(method,scope,a,b,c,d,e,f){"production"!==process.env.NODE_ENV?invariant(!this.isInTransaction(),"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):invariant(!this.isInTransaction());var errorThrown,ret;try{this._isInTransaction=!0,errorThrown=!0,this.initializeAll(0),ret=method.call(scope,a,b,c,d,e,f),errorThrown=!1}finally{try{if(errorThrown)try{this.closeAll(0)}catch(err){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return ret},initializeAll:function(startIndex){for(var transactionWrappers=this.transactionWrappers,i=startIndex;i<transactionWrappers.length;i++){var wrapper=transactionWrappers[i];try{this.wrapperInitData[i]=Transaction.OBSERVED_ERROR,this.wrapperInitData[i]=wrapper.initialize?wrapper.initialize.call(this):null}finally{if(this.wrapperInitData[i]===Transaction.OBSERVED_ERROR)try{this.initializeAll(i+1)}catch(err){}}}},closeAll:function(startIndex){"production"!==process.env.NODE_ENV?invariant(this.isInTransaction(),"Transaction.closeAll(): Cannot close transaction when none are open."):invariant(this.isInTransaction());for(var transactionWrappers=this.transactionWrappers,i=startIndex;i<transactionWrappers.length;i++){var errorThrown,wrapper=transactionWrappers[i],initData=this.wrapperInitData[i];try{errorThrown=!0,initData!==Transaction.OBSERVED_ERROR&&wrapper.close&&wrapper.close.call(this,initData),errorThrown=!1}finally{if(errorThrown)try{this.closeAll(i+1)}catch(e){}}}this.wrapperInitData.length=0}},Transaction={Mixin:Mixin,OBSERVED_ERROR:{}};module.exports=Transaction;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./invariant":230,"_process":95}],199:[function(require,module,exports){
"use strict";var ViewportMetrics={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(scrollPosition){ViewportMetrics.currentScrollLeft=scrollPosition.x,ViewportMetrics.currentScrollTop=scrollPosition.y}};module.exports=ViewportMetrics;


},{}],200:[function(require,module,exports){
(function (process){
"use strict";function accumulateInto(current,next){if("production"!==process.env.NODE_ENV?invariant(null!=next,"accumulateInto(...): Accumulated items must not be null or undefined."):invariant(null!=next),null==current)return next;var currentIsArray=Array.isArray(current),nextIsArray=Array.isArray(next);return currentIsArray&&nextIsArray?(current.push.apply(current,next),current):currentIsArray?(current.push(next),current):nextIsArray?[current].concat(next):[current,next]}var invariant=require("./invariant");module.exports=accumulateInto;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvYWNjdW11bGF0ZUludG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBa0JBLFNBQVMsZ0JBQWUsUUFBUyxNQUsvQixHQUpDLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQy9CLE1BQVIsS0FDQSx5RUFDRSxVQUFrQixNQUFSLE1BQ0MsTUFBWCxRQUNGLE1BQU8sS0FLVCxJQUFJLGdCQUFpQixNQUFNLFFBQVEsU0FDL0IsWUFBYyxNQUFNLFFBQVEsS0FFaEMsT0FBSSxpQkFBa0IsYUFDcEIsUUFBUSxLQUFLLE1BQU0sUUFBUyxNQUNyQixTQUdMLGdCQUNGLFFBQVEsS0FBSyxNQUNOLFNBR0wsYUFFTSxTQUFTLE9BQU8sT0FHbEIsUUFBUyxNQTdDbkIsR0FBSSxXQUFZLFFBQVEsY0FnRHhCLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFjY3VtdWxhdGVJbnRvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbmV4dCAhPSBudWxsLFxuICAgICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nXG4gICkgOiBpbnZhcmlhbnQobmV4dCAhPSBudWxsKSk7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5ICYmIG5leHRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bztcbiJdfQ==
},{"./invariant":230,"_process":95}],201:[function(require,module,exports){
"use strict";function adler32(data){for(var a=1,b=0,i=0;i<data.length;i++)a=(a+data.charCodeAt(i))%MOD,b=(b+a)%MOD;return a|b<<16}var MOD=65521;module.exports=adler32;


},{}],202:[function(require,module,exports){
function camelize(string){return string.replace(_hyphenPattern,function(_,character){return character.toUpperCase()})}var _hyphenPattern=/-(.)/g;module.exports=camelize;


},{}],203:[function(require,module,exports){
"use strict";function camelizeStyleName(string){return camelize(string.replace(msPattern,"ms-"))}var camelize=require("./camelize"),msPattern=/^-ms-/;module.exports=camelizeStyleName;


},{"./camelize":202}],204:[function(require,module,exports){
function containsNode(outerNode,innerNode){return outerNode&&innerNode?outerNode===innerNode?!0:isTextNode(outerNode)?!1:isTextNode(innerNode)?containsNode(outerNode,innerNode.parentNode):outerNode.contains?outerNode.contains(innerNode):outerNode.compareDocumentPosition?!!(16&outerNode.compareDocumentPosition(innerNode)):!1:!1}var isTextNode=require("./isTextNode");module.exports=containsNode;


},{"./isTextNode":234}],205:[function(require,module,exports){
function hasArrayNature(obj){return!!obj&&("object"==typeof obj||"function"==typeof obj)&&"length"in obj&&!("setInterval"in obj)&&"number"!=typeof obj.nodeType&&(Array.isArray(obj)||"callee"in obj||"item"in obj)}function createArrayFromMixed(obj){return hasArrayNature(obj)?Array.isArray(obj)?obj.slice():toArray(obj):[obj]}var toArray=require("./toArray");module.exports=createArrayFromMixed;


},{"./toArray":247}],206:[function(require,module,exports){
(function (process){
"use strict";function createFullPageComponent(tag){var elementFactory=ReactElement.createFactory(tag),FullPageComponent=ReactClass.createClass({tagName:tag.toUpperCase(),displayName:"ReactFullPageComponent"+tag,componentWillUnmount:function(){"production"!==process.env.NODE_ENV?invariant(!1,"%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this.constructor.displayName):invariant(!1)},render:function(){return elementFactory(this.props)}});return FullPageComponent}var ReactClass=require("./ReactClass"),ReactElement=require("./ReactElement"),invariant=require("./invariant");module.exports=createFullPageComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBLFlBbUJBLFNBQVMseUJBQXdCLEtBQy9CLEdBQUksZ0JBQWlCLGFBQWEsY0FBYyxLQUU1QyxrQkFBb0IsV0FBVyxhQUNqQyxRQUFTLElBQUksY0FDYixZQUFhLHlCQUEyQixJQUV4QyxxQkFBc0IsV0FDbkIsZUFBaUIsUUFBUSxJQUFJLFNBQVcsV0FDdkMsRUFDQSxpUUFJQSxLQUFLLFlBQVksYUFDZixXQUFVLElBR2hCLE9BQVEsV0FDTixNQUFPLGdCQUFlLEtBQUssU0FJL0IsT0FBTyxtQkF2Q1QsR0FBSSxZQUFhLFFBQVEsZ0JBQ3JCLGFBQWUsUUFBUSxrQkFFdkIsVUFBWSxRQUFRLGNBdUN4QixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIERlZmVhdCBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IHJlcXVpcmluZyB0aGlzIGRpcmVjdGx5LlxudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjb21wb25lbnQgdGhhdCB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIHVubW91bnRlZC5cbiAqXG4gKiBDb21wb25lbnRzIGxpa2UgPGh0bWw+IDxoZWFkPiBhbmQgPGJvZHk+IGNhbid0IGJlIHJlbW92ZWQgb3IgYWRkZWRcbiAqIGVhc2lseSBpbiBhIGNyb3NzLWJyb3dzZXIgd2F5LCBob3dldmVyIGl0J3MgdmFsdWFibGUgdG8gYmUgYWJsZSB0b1xuICogdGFrZSBhZHZhbnRhZ2Ugb2YgUmVhY3QncyByZWNvbmNpbGlhdGlvbiBmb3Igc3R5bGluZyBhbmQgPHRpdGxlPlxuICogbWFuYWdlbWVudC4gU28gd2UganVzdCBkb2N1bWVudCBpdCBhbmQgdGhyb3cgaW4gZGFuZ2Vyb3VzIGNhc2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIHRhZyB0byB3cmFwXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gY29udmVuaWVuY2UgY29uc3RydWN0b3Igb2YgbmV3IGNvbXBvbmVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCh0YWcpIHtcbiAgdmFyIGVsZW1lbnRGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcblxuICB2YXIgRnVsbFBhZ2VDb21wb25lbnQgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgICB0YWdOYW1lOiB0YWcudG9VcHBlckNhc2UoKSxcbiAgICBkaXNwbGF5TmFtZTogJ1JlYWN0RnVsbFBhZ2VDb21wb25lbnQnICsgdGFnLFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICclcyB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgK1xuICAgICAgICAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCAnICtcbiAgICAgICAgJ2FuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSBzaW5nbGUgJyArXG4gICAgICAgICd0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlIGVsZW1lbnRzLicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbGVtZW50RmFjdG9yeSh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBGdWxsUGFnZUNvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudDtcbiJdfQ==
},{"./ReactClass":128,"./ReactElement":152,"./invariant":230,"_process":95}],207:[function(require,module,exports){
(function (process){
function getNodeName(markup){var nodeNameMatch=markup.match(nodeNamePattern);return nodeNameMatch&&nodeNameMatch[1].toLowerCase()}function createNodesFromMarkup(markup,handleScript){var node=dummyNode;"production"!==process.env.NODE_ENV?invariant(!!dummyNode,"createNodesFromMarkup dummy not initialized"):invariant(!!dummyNode);var nodeName=getNodeName(markup),wrap=nodeName&&getMarkupWrap(nodeName);if(wrap){node.innerHTML=wrap[1]+markup+wrap[2];for(var wrapDepth=wrap[0];wrapDepth--;)node=node.lastChild}else node.innerHTML=markup;var scripts=node.getElementsByTagName("script");scripts.length&&("production"!==process.env.NODE_ENV?invariant(handleScript,"createNodesFromMarkup(...): Unexpected <script> element rendered."):invariant(handleScript),createArrayFromMixed(scripts).forEach(handleScript));for(var nodes=createArrayFromMixed(node.childNodes);node.lastChild;)node.removeChild(node.lastChild);return nodes}var ExecutionEnvironment=require("./ExecutionEnvironment"),createArrayFromMixed=require("./createArrayFromMixed"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,nodeNamePattern=/^\s*<(\w+)/;module.exports=createNodesFromMarkup;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFxQ0EsUUFBUyxhQUFZLFFBQ25CLEdBQUksZUFBZ0IsT0FBTyxNQUFNLGdCQUNqQyxPQUFPLGdCQUFpQixjQUFjLEdBQUcsY0FhM0MsUUFBUyx1QkFBc0IsT0FBUSxjQUNyQyxHQUFJLE1BQU8sU0FDVixnQkFBaUIsUUFBUSxJQUFJLFNBQVcsWUFBWSxVQUFXLCtDQUFpRCxZQUFZLFVBQzdILElBQUksVUFBVyxZQUFZLFFBRXZCLEtBQU8sVUFBWSxjQUFjLFNBQ3JDLElBQUksS0FBTSxDQUNSLEtBQUssVUFBWSxLQUFLLEdBQUssT0FBUyxLQUFLLEVBR3pDLEtBREEsR0FBSSxXQUFZLEtBQUssR0FDZCxhQUNMLEtBQU8sS0FBSyxjQUdkLE1BQUssVUFBWSxNQUduQixJQUFJLFNBQVUsS0FBSyxxQkFBcUIsU0FDcEMsU0FBUSxTQUNULGVBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3ZDLGFBQ0EscUVBQ0UsVUFBVSxjQUNkLHFCQUFxQixTQUFTLFFBQVEsY0FJeEMsS0FEQSxHQUFJLE9BQVEscUJBQXFCLEtBQUssWUFDL0IsS0FBSyxXQUNWLEtBQUssWUFBWSxLQUFLLFVBRXhCLE9BQU8sT0FwRVQsR0FBSSxzQkFBdUIsUUFBUSwwQkFFL0IscUJBQXVCLFFBQVEsMEJBQy9CLGNBQWdCLFFBQVEsbUJBQ3hCLFVBQVksUUFBUSxlQUtwQixVQUNGLHFCQUFxQixVQUFZLFNBQVMsY0FBYyxPQUFTLEtBSy9ELGdCQUFrQixZQXdEdEIsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlTm9kZXNGcm9tTWFya3VwXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUsIHN1YjogdHJ1ZSAqL1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNyZWF0ZUFycmF5RnJvbU1peGVkID0gcmVxdWlyZShcIi4vY3JlYXRlQXJyYXlGcm9tTWl4ZWRcIik7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoXCIuL2dldE1hcmt1cFdyYXBcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIHJlbmRlciBhbGwgbWFya3VwLlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFBhdHRlcm4gdXNlZCBieSBgZ2V0Tm9kZU5hbWVgLlxuICovXG52YXIgbm9kZU5hbWVQYXR0ZXJuID0gL15cXHMqPChcXHcrKS87XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgdmFyIG5vZGVOYW1lTWF0Y2ggPSBtYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtcbiAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbm9kZXMgcmVuZGVyZWQgZnJvbSB0aGUgc3VwcGxpZWQgbWFya3VwLiBUaGVcbiAqIG9wdGlvbmFsbHkgc3VwcGxpZWQgYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZm9yIGVhY2hcbiAqIDxzY3JpcHQ+IGVsZW1lbnQgdGhhdCBpcyByZW5kZXJlZC4gSWYgbm8gYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gaXMgc3VwcGxpZWQsXG4gKiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGlmIGFueSA8c2NyaXB0PiBlbGVtZW50cyBhcmUgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBBIHN0cmluZyBvZiB2YWxpZCBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBoYW5kbGVTY3JpcHQgSW52b2tlZCBvbmNlIGZvciBlYWNoIHJlbmRlcmVkIDxzY3JpcHQ+LlxuICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudHxET01UZXh0Tm9kZT59IEFuIGFycmF5IG9mIHJlbmRlcmVkIG5vZGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBoYW5kbGVTY3JpcHQpIHtcbiAgdmFyIG5vZGUgPSBkdW1teU5vZGU7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgdmFyIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwKTtcblxuICB2YXIgd3JhcCA9IG5vZGVOYW1lICYmIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpO1xuICBpZiAod3JhcCkge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gd3JhcFsxXSArIG1hcmt1cCArIHdyYXBbMl07XG5cbiAgICB2YXIgd3JhcERlcHRoID0gd3JhcFswXTtcbiAgICB3aGlsZSAod3JhcERlcHRoLS0pIHtcbiAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG4gIH1cblxuICB2YXIgc2NyaXB0cyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgaGFuZGxlU2NyaXB0LFxuICAgICAgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoaGFuZGxlU2NyaXB0KSk7XG4gICAgY3JlYXRlQXJyYXlGcm9tTWl4ZWQoc2NyaXB0cykuZm9yRWFjaChoYW5kbGVTY3JpcHQpO1xuICB9XG5cbiAgdmFyIG5vZGVzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQobm9kZS5jaGlsZE5vZGVzKTtcbiAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7XG4gICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cDtcbiJdfQ==
},{"./ExecutionEnvironment":115,"./createArrayFromMixed":205,"./getMarkupWrap":222,"./invariant":230,"_process":95}],208:[function(require,module,exports){
"use strict";function dangerousStyleValue(name,value){var isEmpty=null==value||"boolean"==typeof value||""===value;if(isEmpty)return"";var isNonNumeric=isNaN(value);return isNonNumeric||0===value||isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name]?""+value:("string"==typeof value&&(value=value.trim()),value+"px")}var CSSProperty=require("./CSSProperty"),isUnitlessNumber=CSSProperty.isUnitlessNumber;module.exports=dangerousStyleValue;


},{"./CSSProperty":98}],209:[function(require,module,exports){
function makeEmptyFunction(arg){return function(){return arg}}function emptyFunction(){}emptyFunction.thatReturns=makeEmptyFunction,emptyFunction.thatReturnsFalse=makeEmptyFunction(!1),emptyFunction.thatReturnsTrue=makeEmptyFunction(!0),emptyFunction.thatReturnsNull=makeEmptyFunction(null),emptyFunction.thatReturnsThis=function(){return this},emptyFunction.thatReturnsArgument=function(arg){return arg},module.exports=emptyFunction;


},{}],210:[function(require,module,exports){
(function (process){
"use strict";var emptyObject={};"production"!==process.env.NODE_ENV&&Object.freeze(emptyObject),module.exports=emptyObject;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZW1wdHlPYmplY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVdBLFlBRUEsSUFBSSxlQUVBLGdCQUFpQixRQUFRLElBQUksVUFDL0IsT0FBTyxPQUFPLGFBR2hCLE9BQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5T2JqZWN0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0O1xuIl19
},{"_process":95}],211:[function(require,module,exports){
"use strict";function escaper(match){return ESCAPE_LOOKUP[match]}function escapeTextContentForBrowser(text){return(""+text).replace(ESCAPE_REGEX,escaper)}var ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},ESCAPE_REGEX=/[&><"']/g;module.exports=escapeTextContentForBrowser;


},{}],212:[function(require,module,exports){
(function (process){
"use strict";function findDOMNode(componentOrElement){if("production"!==process.env.NODE_ENV){var owner=ReactCurrentOwner.current;null!==owner&&("production"!==process.env.NODE_ENV?warning(owner._warnedAboutRefsInRender,"%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",owner.getName()||"A component"):null,owner._warnedAboutRefsInRender=!0)}return null==componentOrElement?null:isNode(componentOrElement)?componentOrElement:ReactInstanceMap.has(componentOrElement)?ReactMount.getNodeFromInstance(componentOrElement):("production"!==process.env.NODE_ENV?invariant(null==componentOrElement.render||"function"!=typeof componentOrElement.render,"Component (with keys: %s) contains `render` method but is not mounted in the DOM",Object.keys(componentOrElement)):invariant(null==componentOrElement.render||"function"!=typeof componentOrElement.render),void("production"!==process.env.NODE_ENV?invariant(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(componentOrElement)):invariant(!1)))}var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMount=require("./ReactMount"),invariant=require("./invariant"),isNode=require("./isNode"),warning=require("./warning");module.exports=findDOMNode;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZmluZERPTU5vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBLFlBZ0JBLFNBQVMsYUFBWSxvQkFDbkIsR0FBSSxlQUFpQixRQUFRLElBQUksU0FBVSxDQUN6QyxHQUFJLE9BQVEsa0JBQWtCLE9BQ2hCLFFBQVYsUUFDRCxlQUFpQixRQUFRLElBQUksU0FBVyxRQUN2QyxNQUFNLHlCQUNOLCtSQUtBLE1BQU0sV0FBYSxlQUNqQixLQUNKLE1BQU0sMEJBQTJCLEdBR3JDLE1BQTBCLE9BQXRCLG1CQUNLLEtBRUwsT0FBTyxvQkFDRixtQkFFTCxpQkFBaUIsSUFBSSxvQkFDaEIsV0FBVyxvQkFBb0IscUJBRXZDLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ1YsTUFBN0IsbUJBQW1CLFFBQ2tCLGtCQUE5QixvQkFBbUIsT0FDMUIsbUZBRUEsT0FBTyxLQUFLLHFCQUNWLFVBQXVDLE1BQTdCLG1CQUFtQixRQUNJLGtCQUE5QixvQkFBbUIsYUFDekIsZUFBaUIsUUFBUSxJQUFJLFNBQVcsV0FDdkMsRUFDQSxzRUFDQSxPQUFPLEtBQUsscUJBQ1YsV0FBVSxLQW5EaEIsR0FBSSxtQkFBb0IsUUFBUSx1QkFDNUIsaUJBQW1CLFFBQVEsc0JBQzNCLFdBQWEsUUFBUSxnQkFFckIsVUFBWSxRQUFRLGVBQ3BCLE9BQVMsUUFBUSxZQUNqQixRQUFVLFFBQVEsWUFnRHRCLFFBQU8sUUFBVSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZpbmRET01Ob2RlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgaXNOb2RlID0gcmVxdWlyZShcIi4vaXNOb2RlXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIERPTSBub2RlIHJlbmRlcmVkIGJ5IHRoaXMgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fERPTUVsZW1lbnR9IGNvbXBvbmVudE9yRWxlbWVudFxuICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICBpZiAob3duZXIgIT09IG51bGwpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXG4gICAgICAgICclcyBpcyBhY2Nlc3NpbmcgZ2V0RE9NTm9kZSBvciBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiAnICtcbiAgICAgICAgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArXG4gICAgICAgICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICtcbiAgICAgICAgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgK1xuICAgICAgICAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChjb21wb25lbnRPckVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc05vZGUoY29tcG9uZW50T3JFbGVtZW50KSkge1xuICAgIHJldHVybiBjb21wb25lbnRPckVsZW1lbnQ7XG4gIH1cbiAgaWYgKFJlYWN0SW5zdGFuY2VNYXAuaGFzKGNvbXBvbmVudE9yRWxlbWVudCkpIHtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5nZXROb2RlRnJvbUluc3RhbmNlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH1cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09IG51bGwgfHxcbiAgICB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAnQ29tcG9uZW50ICh3aXRoIGtleXM6ICVzKSBjb250YWlucyBgcmVuZGVyYCBtZXRob2QgJyArXG4gICAgJ2J1dCBpcyBub3QgbW91bnRlZCBpbiB0aGUgRE9NJyxcbiAgICBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpXG4gICkgOiBpbnZhcmlhbnQoY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciA9PSBudWxsIHx8XG4gIHR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyICE9PSAnZnVuY3Rpb24nKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgZmFsc2UsXG4gICAgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcyknLFxuICAgIE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudClcbiAgKSA6IGludmFyaWFudChmYWxzZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRET01Ob2RlO1xuIl19
},{"./ReactCurrentOwner":134,"./ReactInstanceMap":162,"./ReactMount":165,"./invariant":230,"./isNode":232,"./warning":249,"_process":95}],213:[function(require,module,exports){
(function (process){
"use strict";function flattenSingleChildIntoContext(traverseContext,child,name){var result=traverseContext,keyUnique=!result.hasOwnProperty(name);"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(keyUnique,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",name):null),keyUnique&&null!=child&&(result[name]=child)}function flattenChildren(children){if(null==children)return children;var result={};return traverseAllChildren(children,flattenSingleChildIntoContext,result),result}var traverseAllChildren=require("./traverseAllChildren"),warning=require("./warning");module.exports=flattenChildren;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZmxhdHRlbkNoaWxkcmVuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQSxZQVVBLFNBQVMsK0JBQThCLGdCQUFpQixNQUFPLE1BRTdELEdBQUksUUFBUyxnQkFDVCxXQUFhLE9BQU8sZUFBZSxLQUNuQyxnQkFBaUIsUUFBUSxJQUFJLFdBQzlCLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFFBQ3ZDLFVBQ0EsdUtBR0EsTUFDRSxNQUVGLFdBQXNCLE1BQVQsUUFDZixPQUFPLE1BQVEsT0FTbkIsUUFBUyxpQkFBZ0IsVUFDdkIsR0FBZ0IsTUFBWixTQUNGLE1BQU8sU0FFVCxJQUFJLFVBRUosT0FEQSxxQkFBb0IsU0FBVSw4QkFBK0IsUUFDdEQsT0FyQ1QsR0FBSSxxQkFBc0IsUUFBUSx5QkFDOUIsUUFBVSxRQUFRLFlBdUN0QixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmbGF0dGVuQ2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBwYXNzZWQgdGhyb3VnaCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9SZWFjdENvbXBvbmVudH0gY2hpbGQgUmVhY3QgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIga2V5VW5pcXVlID0gIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAga2V5VW5pcXVlLFxuICAgICAgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgK1xuICAgICAgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgK1xuICAgICAgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJyxcbiAgICAgIG5hbWVcbiAgICApIDogbnVsbCk7XG4gIH1cbiAgaWYgKGtleVVuaXF1ZSAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuIEFueSBudWxsXG4gKiBjaGlsZHJlbiB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuQ2hpbGRyZW47XG4iXX0=
},{"./traverseAllChildren":248,"./warning":249,"_process":95}],214:[function(require,module,exports){
"use strict";function focusNode(node){try{node.focus()}catch(e){}}module.exports=focusNode;


},{}],215:[function(require,module,exports){
"use strict";var forEachAccumulated=function(arr,cb,scope){Array.isArray(arr)?arr.forEach(cb,scope):arr&&cb.call(scope,arr)};module.exports=forEachAccumulated;


},{}],216:[function(require,module,exports){
function getActiveElement(){try{return document.activeElement||document.body}catch(e){return document.body}}module.exports=getActiveElement;


},{}],217:[function(require,module,exports){
"use strict";function getEventCharCode(nativeEvent){var charCode,keyCode=nativeEvent.keyCode;return"charCode"in nativeEvent?(charCode=nativeEvent.charCode,0===charCode&&13===keyCode&&(charCode=13)):charCode=keyCode,charCode>=32||13===charCode?charCode:0}module.exports=getEventCharCode;


},{}],218:[function(require,module,exports){
"use strict";function getEventKey(nativeEvent){if(nativeEvent.key){var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if("Unidentified"!==key)return key}if("keypress"===nativeEvent.type){var charCode=getEventCharCode(nativeEvent);return 13===charCode?"Enter":String.fromCharCode(charCode)}return"keydown"===nativeEvent.type||"keyup"===nativeEvent.type?translateToKey[nativeEvent.keyCode]||"Unidentified":""}var getEventCharCode=require("./getEventCharCode"),normalizeKey={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},translateToKey={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};module.exports=getEventKey;


},{"./getEventCharCode":217}],219:[function(require,module,exports){
"use strict";function modifierStateGetter(keyArg){var syntheticEvent=this,nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState)return nativeEvent.getModifierState(keyArg);var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:!1}function getEventModifierState(nativeEvent){return modifierStateGetter}var modifierKeyToProp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};module.exports=getEventModifierState;


},{}],220:[function(require,module,exports){
"use strict";function getEventTarget(nativeEvent){var target=nativeEvent.target||nativeEvent.srcElement||window;return 3===target.nodeType?target.parentNode:target}module.exports=getEventTarget;


},{}],221:[function(require,module,exports){
"use strict";function getIteratorFn(maybeIterable){var iteratorFn=maybeIterable&&(ITERATOR_SYMBOL&&maybeIterable[ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL]);return"function"==typeof iteratorFn?iteratorFn:void 0}var ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator";module.exports=getIteratorFn;


},{}],222:[function(require,module,exports){
(function (process){
function getMarkupWrap(nodeName){return"production"!==process.env.NODE_ENV?invariant(!!dummyNode,"Markup wrapping node not initialized"):invariant(!!dummyNode),markupWrap.hasOwnProperty(nodeName)||(nodeName="*"),shouldWrap.hasOwnProperty(nodeName)||("*"===nodeName?dummyNode.innerHTML="<link />":dummyNode.innerHTML="<"+nodeName+"></"+nodeName+">",shouldWrap[nodeName]=!dummyNode.firstChild),shouldWrap[nodeName]?markupWrap[nodeName]:null}var ExecutionEnvironment=require("./ExecutionEnvironment"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,shouldWrap={circle:!0,clipPath:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},selectWrap=[1,'<select multiple="true">',"</select>"],tableWrap=[1,"<table>","</table>"],trWrap=[3,"<table><tbody><tr>","</tr></tbody></table>"],svgWrap=[1,"<svg>","</svg>"],markupWrap={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:selectWrap,option:selectWrap,caption:tableWrap,colgroup:tableWrap,tbody:tableWrap,tfoot:tableWrap,thead:tableWrap,td:trWrap,th:trWrap,circle:svgWrap,clipPath:svgWrap,defs:svgWrap,ellipse:svgWrap,g:svgWrap,line:svgWrap,linearGradient:svgWrap,path:svgWrap,polygon:svgWrap,polyline:svgWrap,radialGradient:svgWrap,rect:svgWrap,stop:svgWrap,text:svgWrap};module.exports=getMarkupWrap;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0TWFya3VwV3JhcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBaUdBLFFBQVMsZUFBYyxVQWFyQixNQVpDLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFlBQVksVUFBVyx3Q0FBMEMsWUFBWSxXQUNqSCxXQUFXLGVBQWUsWUFDN0IsU0FBVyxLQUVSLFdBQVcsZUFBZSxZQUNaLE1BQWIsU0FDRixVQUFVLFVBQVksV0FFdEIsVUFBVSxVQUFZLElBQU0sU0FBVyxNQUFRLFNBQVcsSUFFNUQsV0FBVyxXQUFhLFVBQVUsWUFFN0IsV0FBVyxVQUFZLFdBQVcsVUFBWSxLQW5HdkQsR0FBSSxzQkFBdUIsUUFBUSwwQkFFL0IsVUFBWSxRQUFRLGVBS3BCLFVBQ0YscUJBQXFCLFVBQVksU0FBUyxjQUFjLE9BQVMsS0FRL0QsWUFHRixRQUFVLEVBQ1YsVUFBWSxFQUNaLE1BQVEsRUFDUixTQUFXLEVBQ1gsR0FBSyxFQUNMLE1BQVEsRUFDUixnQkFBa0IsRUFDbEIsTUFBUSxFQUNSLFNBQVcsRUFDWCxVQUFZLEVBQ1osZ0JBQWtCLEVBQ2xCLE1BQVEsRUFDUixNQUFRLEVBQ1IsTUFBUSxHQUdOLFlBQWMsRUFBRywyQkFBNEIsYUFDN0MsV0FBYSxFQUFHLFVBQVcsWUFDM0IsUUFBVSxFQUFHLHFCQUFzQix5QkFFbkMsU0FBVyxFQUFHLFFBQVMsVUFFdkIsWUFDRixLQUFNLEVBQUcsU0FBVSxVQUVuQixNQUFTLEVBQUcsUUFBUyxVQUNyQixLQUFRLEVBQUcsbUNBQW9DLHVCQUMvQyxRQUFXLEVBQUcsYUFBYyxlQUM1QixPQUFVLEVBQUcsV0FBWSxhQUN6QixJQUFPLEVBQUcsaUJBQWtCLG9CQUU1QixTQUFZLFdBQ1osT0FBVSxXQUVWLFFBQVcsVUFDWCxTQUFZLFVBQ1osTUFBUyxVQUNULE1BQVMsVUFDVCxNQUFTLFVBRVQsR0FBTSxPQUNOLEdBQU0sT0FFTixPQUFVLFFBQ1YsU0FBWSxRQUNaLEtBQVEsUUFDUixRQUFXLFFBQ1gsRUFBSyxRQUNMLEtBQVEsUUFDUixlQUFrQixRQUNsQixLQUFRLFFBQ1IsUUFBVyxRQUNYLFNBQVksUUFDWixlQUFrQixRQUNsQixLQUFRLFFBQ1IsS0FBUSxRQUNSLEtBQVEsUUE0QlYsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0TWFya3VwV3JhcFxuICovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xudmFyIHNob3VsZFdyYXAgPSB7XG4gIC8vIEZvcmNlIHdyYXBwaW5nIGZvciBTVkcgZWxlbWVudHMgYmVjYXVzZSBpZiB0aGV5IGdldCBjcmVhdGVkIGluc2lkZSBhIDxkaXY+LFxuICAvLyB0aGV5IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxuICAnY2lyY2xlJzogdHJ1ZSxcbiAgJ2NsaXBQYXRoJzogdHJ1ZSxcbiAgJ2RlZnMnOiB0cnVlLFxuICAnZWxsaXBzZSc6IHRydWUsXG4gICdnJzogdHJ1ZSxcbiAgJ2xpbmUnOiB0cnVlLFxuICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuICAncGF0aCc6IHRydWUsXG4gICdwb2x5Z29uJzogdHJ1ZSxcbiAgJ3BvbHlsaW5lJzogdHJ1ZSxcbiAgJ3JhZGlhbEdyYWRpZW50JzogdHJ1ZSxcbiAgJ3JlY3QnOiB0cnVlLFxuICAnc3RvcCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZVxufTtcblxudmFyIHNlbGVjdFdyYXAgPSBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJ0cnVlXCI+JywgJzwvc2VsZWN0PiddO1xudmFyIHRhYmxlV3JhcCA9IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddO1xudmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXG52YXIgc3ZnV3JhcCA9IFsxLCAnPHN2Zz4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXAsXG5cbiAgJ2NpcmNsZSc6IHN2Z1dyYXAsXG4gICdjbGlwUGF0aCc6IHN2Z1dyYXAsXG4gICdkZWZzJzogc3ZnV3JhcCxcbiAgJ2VsbGlwc2UnOiBzdmdXcmFwLFxuICAnZyc6IHN2Z1dyYXAsXG4gICdsaW5lJzogc3ZnV3JhcCxcbiAgJ2xpbmVhckdyYWRpZW50Jzogc3ZnV3JhcCxcbiAgJ3BhdGgnOiBzdmdXcmFwLFxuICAncG9seWdvbic6IHN2Z1dyYXAsXG4gICdwb2x5bGluZSc6IHN2Z1dyYXAsXG4gICdyYWRpYWxHcmFkaWVudCc6IHN2Z1dyYXAsXG4gICdyZWN0Jzogc3ZnV3JhcCxcbiAgJ3N0b3AnOiBzdmdXcmFwLFxuICAndGV4dCc6IHN2Z1dyYXBcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cHBsaWVkIGBub2RlTmFtZWAuXG4gKlxuICogTk9URTogVGhpcyBsYXppbHkgZGV0ZWN0cyB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5IGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBMb3dlcmNhc2UgYG5vZGVOYW1lYC5cbiAqIEByZXR1cm4gez9hcnJheX0gTWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KCEhZHVtbXlOb2RlLCAnTWFya3VwIHdyYXBwaW5nIG5vZGUgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcmt1cFdyYXA7XG4iXX0=
},{"./ExecutionEnvironment":115,"./invariant":230,"_process":95}],223:[function(require,module,exports){
"use strict";function getLeafNode(node){for(;node&&node.firstChild;)node=node.firstChild;return node}function getSiblingNode(node){for(;node;){if(node.nextSibling)return node.nextSibling;node=node.parentNode}}function getNodeForCharacterOffset(root,offset){for(var node=getLeafNode(root),nodeStart=0,nodeEnd=0;node;){if(3===node.nodeType){if(nodeEnd=nodeStart+node.textContent.length,offset>=nodeStart&&nodeEnd>=offset)return{node:node,offset:offset-nodeStart};nodeStart=nodeEnd}node=getLeafNode(getSiblingNode(node))}}module.exports=getNodeForCharacterOffset;


},{}],224:[function(require,module,exports){
"use strict";function getReactRootElementInContainer(container){return container?container.nodeType===DOC_NODE_TYPE?container.documentElement:container.firstChild:null}var DOC_NODE_TYPE=9;module.exports=getReactRootElementInContainer;


},{}],225:[function(require,module,exports){
"use strict";function getTextContentAccessor(){return!contentKey&&ExecutionEnvironment.canUseDOM&&(contentKey="textContent"in document.documentElement?"textContent":"innerText"),contentKey}var ExecutionEnvironment=require("./ExecutionEnvironment"),contentKey=null;module.exports=getTextContentAccessor;


},{"./ExecutionEnvironment":115}],226:[function(require,module,exports){
"use strict";function getUnboundedScrollPosition(scrollable){return scrollable===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:scrollable.scrollLeft,y:scrollable.scrollTop}}module.exports=getUnboundedScrollPosition;


},{}],227:[function(require,module,exports){
function hyphenate(string){return string.replace(_uppercasePattern,"-$1").toLowerCase()}var _uppercasePattern=/([A-Z])/g;module.exports=hyphenate;


},{}],228:[function(require,module,exports){
"use strict";function hyphenateStyleName(string){return hyphenate(string).replace(msPattern,"-ms-")}var hyphenate=require("./hyphenate"),msPattern=/^ms-/;module.exports=hyphenateStyleName;


},{"./hyphenate":227}],229:[function(require,module,exports){
(function (process){
"use strict";function isInternalComponentType(type){return"function"==typeof type&&"undefined"!=typeof type.prototype&&"function"==typeof type.prototype.mountComponent&&"function"==typeof type.prototype.receiveComponent}function instantiateReactComponent(node,parentCompositeType){var instance;if((null===node||node===!1)&&(node=ReactEmptyComponent.emptyElement),"object"==typeof node){var element=node;"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(element&&("function"==typeof element.type||"string"==typeof element.type),"Only functions or strings can be mounted as React components."):null),instance=parentCompositeType===element.type&&"string"==typeof element.type?ReactNativeComponent.createInternalComponent(element):isInternalComponentType(element.type)?new element.type(element):new ReactCompositeComponentWrapper}else"string"==typeof node||"number"==typeof node?instance=ReactNativeComponent.createInstanceForText(node):"production"!==process.env.NODE_ENV?invariant(!1,"Encountered invalid React node of type %s",typeof node):invariant(!1);return"production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning("function"==typeof instance.construct&&"function"==typeof instance.mountComponent&&"function"==typeof instance.receiveComponent&&"function"==typeof instance.unmountComponent,"Only React Components can be mounted."):null),instance.construct(node),instance._mountIndex=0,instance._mountImage=null,"production"!==process.env.NODE_ENV&&(instance._isOwnerNecessary=!1,instance._warnedAboutRefsInRender=!1),"production"!==process.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(instance),instance}var ReactCompositeComponent=require("./ReactCompositeComponent"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactNativeComponent=require("./ReactNativeComponent"),assign=require("./Object.assign"),invariant=require("./invariant"),warning=require("./warning"),ReactCompositeComponentWrapper=function(){};assign(ReactCompositeComponentWrapper.prototype,ReactCompositeComponent.Mixin,{_instantiateReactComponent:instantiateReactComponent}),module.exports=instantiateReactComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBWUEsWUEyQkEsU0FBUyx5QkFBd0IsTUFDL0IsTUFDa0Isa0JBQVQsT0FDbUIsbUJBQW5CLE1BQUssV0FDNkIsa0JBQWxDLE1BQUssVUFBVSxnQkFDcUIsa0JBQXBDLE1BQUssVUFBVSxpQkFZMUIsUUFBUywyQkFBMEIsS0FBTSxxQkFDdkMsR0FBSSxTQU1KLEtBSmEsT0FBVCxNQUFpQixRQUFTLEtBQzVCLEtBQU8sb0JBQW9CLGNBR1QsZ0JBQVQsTUFBbUIsQ0FDNUIsR0FBSSxTQUFVLElBQ1YsZ0JBQWlCLFFBQVEsSUFBSSxXQUM5QixlQUFpQixRQUFRLElBQUksU0FBVyxRQUN2QyxVQUFvQyxrQkFBakIsU0FBUSxNQUNTLGdCQUFqQixTQUFRLE1BQzNCLGlFQUNFLE1BT0osU0FIRSxzQkFBd0IsUUFBUSxNQUNSLGdCQUFqQixTQUFRLEtBRU4scUJBQXFCLHdCQUF3QixTQUcvQyx3QkFBd0IsUUFBUSxNQUk5QixHQUFJLFNBQVEsS0FBSyxTQUVqQixHQUFJLG9DQUVRLGdCQUFULE9BQXFDLGdCQUFULE1BQzVDLFNBQVcscUJBQXFCLHNCQUFzQixNQUVyRCxlQUFpQixRQUFRLElBQUksU0FBVyxXQUN2QyxFQUNBLGtEQUNPLE9BQ0wsV0FBVSxFQW1DaEIsT0FoQ0ksZUFBaUIsUUFBUSxJQUFJLFdBQzlCLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFFBQ1Qsa0JBQXZCLFVBQVMsV0FDbUIsa0JBQTVCLFVBQVMsZ0JBQ3FCLGtCQUE5QixVQUFTLGtCQUNxQixrQkFBOUIsVUFBUyxpQkFDaEIseUNBQ0UsTUFJTixTQUFTLFVBQVUsTUFLbkIsU0FBUyxZQUFjLEVBQ3ZCLFNBQVMsWUFBYyxLQUVuQixlQUFpQixRQUFRLElBQUksV0FDL0IsU0FBUyxtQkFBb0IsRUFDN0IsU0FBUywwQkFBMkIsR0FLbEMsZUFBaUIsUUFBUSxJQUFJLFVBQzNCLE9BQU8sbUJBQ1QsT0FBTyxrQkFBa0IsVUFJdEIsU0FwSFQsR0FBSSx5QkFBMEIsUUFBUSw2QkFDbEMsb0JBQXNCLFFBQVEseUJBQzlCLHFCQUF1QixRQUFRLDBCQUUvQixPQUFTLFFBQVEsbUJBQ2pCLFVBQVksUUFBUSxlQUNwQixRQUFVLFFBQVEsYUFHbEIsK0JBQWlDLFlBQ3JDLFFBQ0UsK0JBQStCLFVBQy9CLHdCQUF3QixPQUV0QiwyQkFBNEIsNEJBeUdoQyxPQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vLyBUbyBhdm9pZCBhIGN5Y2xpYyBkZXBlbmRlbmN5LCB3ZSBjcmVhdGUgdGhlIGZpbmFsIGNsYXNzIGluIHRoaXMgbW9kdWxlXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24oKSB7IH07XG5hc3NpZ24oXG4gIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUsXG4gIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLFxuICB7XG4gICAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbiAgfVxuKTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgdHlwZSByZWZlcmVuY2UgaXMgYSBrbm93biBpbnRlcm5hbCB0eXBlLiBJLmUuIG5vdCBhIHVzZXJcbiAqIHByb3ZpZGVkIGNvbXBvc2l0ZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgdmFsaWQgaW50ZXJuYWwgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNJbnRlcm5hbENvbXBvbmVudFR5cGUodHlwZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nXG4gICk7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZWFjdE5vZGUsIGNyZWF0ZSBhbiBpbnN0YW5jZSB0aGF0IHdpbGwgYWN0dWFsbHkgYmUgbW91bnRlZC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHsqfSBwYXJlbnRDb21wb3NpdGVUeXBlIFRoZSBjb21wb3NpdGUgdHlwZSB0aGF0IHJlc29sdmVkIHRoaXMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEEgbmV3IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50J3MgY29uc3RydWN0b3IuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobm9kZSwgcGFyZW50Q29tcG9zaXRlVHlwZSkge1xuICB2YXIgaW5zdGFuY2U7XG5cbiAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gZmFsc2UpIHtcbiAgICBub2RlID0gUmVhY3RFbXB0eUNvbXBvbmVudC5lbXB0eUVsZW1lbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBub2RlO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBlbGVtZW50ICYmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSxcbiAgICAgICAgJ09ubHkgZnVuY3Rpb25zIG9yIHN0cmluZ3MgY2FuIGJlIG1vdW50ZWQgYXMgUmVhY3QgY29tcG9uZW50cy4nXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHN0cmluZyB2YWx1ZXNcbiAgICBpZiAocGFyZW50Q29tcG9zaXRlVHlwZSA9PT0gZWxlbWVudC50eXBlICYmXG4gICAgICAgIHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBBdm9pZCByZWN1cnNpb24gaWYgdGhlIHdyYXBwZXIgcmVuZGVycyBpdHNlbGYuXG4gICAgICBpbnN0YW5jZSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgICAgLy8gQWxsIG5hdGl2ZSBjb21wb25lbnRzIGFyZSBjdXJyZW50bHkgd3JhcHBlZCBpbiBhIGNvbXBvc2l0ZSBzbyB3ZSdyZVxuICAgICAgLy8gc2FmZSB0byBhc3N1bWUgdGhhdCB0aGlzIGlzIHdoYXQgd2Ugc2hvdWxkIGluc3RhbnRpYXRlLlxuICAgIH0gZWxzZSBpZiAoaXNJbnRlcm5hbENvbXBvbmVudFR5cGUoZWxlbWVudC50eXBlKSkge1xuICAgICAgLy8gVGhpcyBpcyB0ZW1wb3JhcmlseSBhdmFpbGFibGUgZm9yIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIG5vdCBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VuYXRpb25zLiBJLmUuIEFSVC4gT25jZSB0aG9zZSBhcmUgdXBkYXRlZCB0byB1c2UgdGhlIHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW50YXRpb24sIHdlIGNhbiBkcm9wIHRoaXMgY29kZSBwYXRoLlxuICAgICAgaW5zdGFuY2UgPSBuZXcgZWxlbWVudC50eXBlKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlID09PSAnbnVtYmVyJykge1xuICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW5zdGFuY2VGb3JUZXh0KG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdFbmNvdW50ZXJlZCBpbnZhbGlkIFJlYWN0IG5vZGUgb2YgdHlwZSAlcycsXG4gICAgICB0eXBlb2Ygbm9kZVxuICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgfVxuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS5jb25zdHJ1Y3QgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS51bm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ09ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC4nXG4gICAgKSA6IG51bGwpO1xuICB9XG5cbiAgLy8gU2V0cyB1cCB0aGUgaW5zdGFuY2UuIFRoaXMgY2FuIHByb2JhYmx5IGp1c3QgbW92ZSBpbnRvIHRoZSBjb25zdHJ1Y3RvciBub3cuXG4gIGluc3RhbmNlLmNvbnN0cnVjdChub2RlKTtcblxuICAvLyBUaGVzZSB0d28gZmllbGRzIGFyZSB1c2VkIGJ5IHRoZSBET00gYW5kIEFSVCBkaWZmaW5nIGFsZ29yaXRobXNcbiAgLy8gcmVzcGVjdGl2ZWx5LiBJbnN0ZWFkIG9mIHVzaW5nIGV4cGFuZG9zIG9uIGNvbXBvbmVudHMsIHdlIHNob3VsZCBiZVxuICAvLyBzdG9yaW5nIHRoZSBzdGF0ZSBuZWVkZWQgYnkgdGhlIGRpZmZpbmcgYWxnb3JpdGhtcyBlbHNld2hlcmUuXG4gIGluc3RhbmNlLl9tb3VudEluZGV4ID0gMDtcbiAgaW5zdGFuY2UuX21vdW50SW1hZ2UgPSBudWxsO1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBpbnN0YW5jZS5faXNPd25lck5lY2Vzc2FyeSA9IGZhbHNlO1xuICAgIGluc3RhbmNlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSW50ZXJuYWwgaW5zdGFuY2VzIHNob3VsZCBmdWxseSBjb25zdHJ1Y3RlZCBhdCB0aGlzIHBvaW50LCBzbyB0aGV5IHNob3VsZFxuICAvLyBub3QgZ2V0IGFueSBuZXcgZmllbGRzIGFkZGVkIHRvIHRoZW0gYXQgdGhpcyBwb2ludC5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhpbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ7XG4iXX0=
},{"./Object.assign":121,"./ReactCompositeComponent":132,"./ReactEmptyComponent":154,"./ReactNativeComponent":168,"./invariant":230,"./warning":249,"_process":95}],230:[function(require,module,exports){
(function (process){
"use strict";var invariant=function(condition,format,a,b,c,d,e,f){if("production"!==process.env.NODE_ENV&&void 0===format)throw new Error("invariant requires an error message argument");if(!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error("Invariant Violation: "+format.replace(/%s/g,function(){return args[argIndex++]}))}throw error.framesToPop=1,error}};module.exports=invariant;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaW52YXJpYW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQSxZQWFBLElBQUksV0FBWSxTQUFTLFVBQVcsT0FBUSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDekQsR0FBSSxlQUFpQixRQUFRLElBQUksVUFDaEIsU0FBWCxPQUNGLEtBQU0sSUFBSSxPQUFNLCtDQUlwQixLQUFLLFVBQVcsQ0FDZCxHQUFJLE1BQ0osSUFBZSxTQUFYLE9BQ0YsTUFBUSxHQUFJLE9BQ1YscUlBR0csQ0FDTCxHQUFJLE9BQVEsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3ZCLFNBQVcsQ0FDZixPQUFRLEdBQUksT0FDVix3QkFDQSxPQUFPLFFBQVEsTUFBTyxXQUFhLE1BQU8sTUFBSyxlQUtuRCxLQURBLE9BQU0sWUFBYyxFQUNkLE9BSVYsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIl19
},{"_process":95}],231:[function(require,module,exports){
"use strict";function isEventSupported(eventNameSuffix,capture){if(!ExecutionEnvironment.canUseDOM||capture&&!("addEventListener"in document))return!1;var eventName="on"+eventNameSuffix,isSupported=eventName in document;if(!isSupported){var element=document.createElement("div");element.setAttribute(eventName,"return;"),isSupported="function"==typeof element[eventName]}return!isSupported&&useHasFeature&&"wheel"===eventNameSuffix&&(isSupported=document.implementation.hasFeature("Events.wheel","3.0")),isSupported}var ExecutionEnvironment=require("./ExecutionEnvironment"),useHasFeature;ExecutionEnvironment.canUseDOM&&(useHasFeature=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),module.exports=isEventSupported;


},{"./ExecutionEnvironment":115}],232:[function(require,module,exports){
function isNode(object){return!(!object||!("function"==typeof Node?object instanceof Node:"object"==typeof object&&"number"==typeof object.nodeType&&"string"==typeof object.nodeName))}module.exports=isNode;


},{}],233:[function(require,module,exports){
"use strict";function isTextInputElement(elem){return elem&&("INPUT"===elem.nodeName&&supportedInputTypes[elem.type]||"TEXTAREA"===elem.nodeName)}var supportedInputTypes={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};module.exports=isTextInputElement;


},{}],234:[function(require,module,exports){
function isTextNode(object){return isNode(object)&&3==object.nodeType}var isNode=require("./isNode");module.exports=isTextNode;


},{"./isNode":232}],235:[function(require,module,exports){
(function (process){
"use strict";var invariant=require("./invariant"),keyMirror=function(obj){var key,ret={};"production"!==process.env.NODE_ENV?invariant(obj instanceof Object&&!Array.isArray(obj),"keyMirror(...): Argument must be an object."):invariant(obj instanceof Object&&!Array.isArray(obj));for(key in obj)obj.hasOwnProperty(key)&&(ret[key]=key);return ret};module.exports=keyMirror;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5TWlycm9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFZQSxZQUVBLElBQUksV0FBWSxRQUFRLGVBb0JwQixVQUFZLFNBQVMsS0FDdkIsR0FDSSxLQURBLE1BRUgsZ0JBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3ZDLGNBQWUsVUFBVyxNQUFNLFFBQVEsS0FDeEMsK0NBQ0UsVUFBVSxjQUFlLFVBQVcsTUFBTSxRQUFRLEtBQ3RELEtBQUssTUFBTyxLQUNMLElBQUksZUFBZSxPQUd4QixJQUFJLEtBQU8sSUFFYixPQUFPLEtBR1QsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5TWlycm9yXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGFuIGVudW1lcmF0aW9uIHdpdGgga2V5cyBlcXVhbCB0byB0aGVpciB2YWx1ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgIHZhciBDT0xPUlMgPSBrZXlNaXJyb3Ioe2JsdWU6IG51bGwsIHJlZDogbnVsbH0pO1xuICogICB2YXIgbXlDb2xvciA9IENPTE9SUy5ibHVlO1xuICogICB2YXIgaXNDb2xvclZhbGlkID0gISFDT0xPUlNbbXlDb2xvcl07XG4gKlxuICogVGhlIGxhc3QgbGluZSBjb3VsZCBub3QgYmUgcGVyZm9ybWVkIGlmIHRoZSB2YWx1ZXMgb2YgdGhlIGdlbmVyYXRlZCBlbnVtIHdlcmVcbiAqIG5vdCBlcXVhbCB0byB0aGVpciBrZXlzLlxuICpcbiAqICAgSW5wdXQ6ICB7a2V5MTogdmFsMSwga2V5MjogdmFsMn1cbiAqICAgT3V0cHV0OiB7a2V5MToga2V5MSwga2V5Mjoga2V5Mn1cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbnZhciBrZXlNaXJyb3IgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHJldCA9IHt9O1xuICB2YXIga2V5O1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopLFxuICAgICdrZXlNaXJyb3IoLi4uKTogQXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopKSk7XG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXRba2V5XSA9IGtleTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlNaXJyb3I7XG4iXX0=
},{"./invariant":230,"_process":95}],236:[function(require,module,exports){
var keyOf=function(oneKeyObj){var key;for(key in oneKeyObj)if(oneKeyObj.hasOwnProperty(key))return key;return null};module.exports=keyOf;


},{}],237:[function(require,module,exports){
"use strict";function mapObject(object,callback,context){if(!object)return null;var result={};for(var name in object)hasOwnProperty.call(object,name)&&(result[name]=callback.call(context,object[name],name,object));return result}var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=mapObject;


},{}],238:[function(require,module,exports){
"use strict";function memoizeStringOnly(callback){var cache={};return function(string){return cache.hasOwnProperty(string)||(cache[string]=callback.call(this,string)),cache[string]}}module.exports=memoizeStringOnly;


},{}],239:[function(require,module,exports){
(function (process){
"use strict";function onlyChild(children){return"production"!==process.env.NODE_ENV?invariant(ReactElement.isValidElement(children),"onlyChild must be passed a children with exactly one child."):invariant(ReactElement.isValidElement(children)),children}var ReactElement=require("./ReactElement"),invariant=require("./invariant");module.exports=onlyChild;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvb25seUNoaWxkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFVQSxZQWlCQSxTQUFTLFdBQVUsVUFLakIsTUFKQyxlQUFpQixRQUFRLElBQUksU0FBVyxVQUN2QyxhQUFhLGVBQWUsVUFDNUIsK0RBQ0UsVUFBVSxhQUFhLGVBQWUsV0FDbkMsU0FwQlQsR0FBSSxjQUFlLFFBQVEsa0JBRXZCLFVBQVksUUFBUSxjQXFCeEIsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgb25seUNoaWxkXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzXG4gKiBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0cyBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGVcbiAqIHB1cnBvc2Ugb2YgdGhpcyBoZWxwZXIgZnVuY3Rpb24gaXMgdG8gYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmVcbiAqIG9mIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gY2hpbGRyZW4gQ2hpbGQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdENvbXBvbmVudGAgY29udGFpbmVkIGluIHRoZVxuICogc3RydWN0dXJlLlxuICovXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pLFxuICAgICdvbmx5Q2hpbGQgbXVzdCBiZSBwYXNzZWQgYSBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgb25lIGNoaWxkLidcbiAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvbmx5Q2hpbGQ7XG4iXX0=
},{"./ReactElement":152,"./invariant":230,"_process":95}],240:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),performance;ExecutionEnvironment.canUseDOM&&(performance=window.performance||window.msPerformance||window.webkitPerformance),module.exports=performance||{};


},{"./ExecutionEnvironment":115}],241:[function(require,module,exports){
var performance=require("./performance");performance&&performance.now||(performance=Date);var performanceNow=performance.now.bind(performance);module.exports=performanceNow;


},{"./performance":240}],242:[function(require,module,exports){
"use strict";function quoteAttributeValueForBrowser(value){return'"'+escapeTextContentForBrowser(value)+'"'}var escapeTextContentForBrowser=require("./escapeTextContentForBrowser");module.exports=quoteAttributeValueForBrowser;


},{"./escapeTextContentForBrowser":211}],243:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),WHITESPACE_TEST=/^[ \r\n\t\f]/,NONVISIBLE_TEST=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,setInnerHTML=function(node,html){node.innerHTML=html};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(setInnerHTML=function(node,html){MSApp.execUnsafeLocalFunction(function(){node.innerHTML=html})}),ExecutionEnvironment.canUseDOM){var testElement=document.createElement("div");testElement.innerHTML=" ",""===testElement.innerHTML&&(setInnerHTML=function(node,html){if(node.parentNode&&node.parentNode.replaceChild(node,node),WHITESPACE_TEST.test(html)||"<"===html[0]&&NONVISIBLE_TEST.test(html)){node.innerHTML="\ufeff"+html;var textNode=node.firstChild;1===textNode.data.length?node.removeChild(textNode):textNode.deleteData(0,1)}else node.innerHTML=html})}module.exports=setInnerHTML;


},{"./ExecutionEnvironment":115}],244:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("./ExecutionEnvironment"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setInnerHTML=require("./setInnerHTML"),setTextContent=function(node,text){node.textContent=text};ExecutionEnvironment.canUseDOM&&("textContent"in document.documentElement||(setTextContent=function(node,text){setInnerHTML(node,escapeTextContentForBrowser(text))})),module.exports=setTextContent;


},{"./ExecutionEnvironment":115,"./escapeTextContentForBrowser":211,"./setInnerHTML":243}],245:[function(require,module,exports){
"use strict";function shallowEqual(objA,objB){if(objA===objB)return!0;var key;for(key in objA)if(objA.hasOwnProperty(key)&&(!objB.hasOwnProperty(key)||objA[key]!==objB[key]))return!1;for(key in objB)if(objB.hasOwnProperty(key)&&!objA.hasOwnProperty(key))return!1;return!0}module.exports=shallowEqual;


},{}],246:[function(require,module,exports){
(function (process){
"use strict";function shouldUpdateReactComponent(prevElement,nextElement){if(null!=prevElement&&null!=nextElement){var prevType=typeof prevElement,nextType=typeof nextElement;if("string"===prevType||"number"===prevType)return"string"===nextType||"number"===nextType;if("object"===nextType&&prevElement.type===nextElement.type&&prevElement.key===nextElement.key){var ownersMatch=prevElement._owner===nextElement._owner,prevName=null,nextName=null,nextDisplayName=null;return"production"!==process.env.NODE_ENV&&(ownersMatch||(null!=prevElement._owner&&null!=prevElement._owner.getPublicInstance()&&null!=prevElement._owner.getPublicInstance().constructor&&(prevName=prevElement._owner.getPublicInstance().constructor.displayName),null!=nextElement._owner&&null!=nextElement._owner.getPublicInstance()&&null!=nextElement._owner.getPublicInstance().constructor&&(nextName=nextElement._owner.getPublicInstance().constructor.displayName),null!=nextElement.type&&null!=nextElement.type.displayName&&(nextDisplayName=nextElement.type.displayName),null!=nextElement.type&&"string"==typeof nextElement.type&&(nextDisplayName=nextElement.type),("string"!=typeof nextElement.type||"input"===nextElement.type||"textarea"===nextElement.type)&&(null!=prevElement._owner&&prevElement._owner._isOwnerNecessary===!1||null!=nextElement._owner&&nextElement._owner._isOwnerNecessary===!1)&&(null!=prevElement._owner&&(prevElement._owner._isOwnerNecessary=!0),null!=nextElement._owner&&(nextElement._owner._isOwnerNecessary=!0),"production"!==process.env.NODE_ENV?warning(!1,"<%s /> is being rendered by both %s and %s using the same key (%s) in the same place. Currently, this means that they don't preserve state. This behavior should be very rare so we're considering deprecating it. Please contact the React team and explain your use case so that we can take that into consideration.",nextDisplayName||"Unknown Component",prevName||"[Unknown]",nextName||"[Unknown]",prevElement.key):null))),ownersMatch}}return!1}var warning=require("./warning");module.exports=shouldUpdateReactComponent;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBLFlBZUEsU0FBUyw0QkFBMkIsWUFBYSxhQUMvQyxHQUFtQixNQUFmLGFBQXNDLE1BQWYsWUFBcUIsQ0FDOUMsR0FBSSxnQkFBa0IsYUFDbEIsZUFBa0IsWUFDdEIsSUFBaUIsV0FBYixVQUFzQyxXQUFiLFNBQzNCLE1BQXFCLFdBQWIsVUFBc0MsV0FBYixRQUVqQyxJQUFpQixXQUFiLFVBQ0EsWUFBWSxPQUFTLFlBQVksTUFDakMsWUFBWSxNQUFRLFlBQVksSUFBSyxDQUN2QyxHQUFJLGFBQWMsWUFBWSxTQUFXLFlBQVksT0FDakQsU0FBVyxLQUNYLFNBQVcsS0FDWCxnQkFBa0IsSUFvRHRCLE9BbkRJLGVBQWlCLFFBQVEsSUFBSSxXQUMxQixjQUN1QixNQUF0QixZQUFZLFFBQzhCLE1BQTFDLFlBQVksT0FBTyxxQkFDbUMsTUFBdEQsWUFBWSxPQUFPLG9CQUFvQixjQUN6QyxTQUNFLFlBQVksT0FBTyxvQkFBb0IsWUFBWSxhQUU3QixNQUF0QixZQUFZLFFBQzhCLE1BQTFDLFlBQVksT0FBTyxxQkFDbUMsTUFBdEQsWUFBWSxPQUFPLG9CQUFvQixjQUN6QyxTQUNFLFlBQVksT0FBTyxvQkFBb0IsWUFBWSxhQUUvQixNQUFwQixZQUFZLE1BQ29CLE1BQWhDLFlBQVksS0FBSyxjQUNuQixnQkFBa0IsWUFBWSxLQUFLLGFBRWIsTUFBcEIsWUFBWSxNQUE0QyxnQkFBckIsYUFBWSxPQUNqRCxnQkFBa0IsWUFBWSxPQUVBLGdCQUFyQixhQUFZLE1BQ0UsVUFBckIsWUFBWSxNQUNTLGFBQXJCLFlBQVksUUFDYSxNQUF0QixZQUFZLFFBQ2IsWUFBWSxPQUFPLHFCQUFzQixHQUNsQixNQUF0QixZQUFZLFFBQ2IsWUFBWSxPQUFPLHFCQUFzQixLQUNqQixNQUF0QixZQUFZLFNBQ2QsWUFBWSxPQUFPLG1CQUFvQixHQUVmLE1BQXRCLFlBQVksU0FDZCxZQUFZLE9BQU8sbUJBQW9CLEdBRXhDLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFNBQ3ZDLEVBQ0EsMFRBTUEsaUJBQW1CLG9CQUNuQixVQUFZLFlBQ1osVUFBWSxZQUNaLFlBQVksS0FDVixRQUtMLGFBSWIsT0FBTyxFQWxGVCxHQUFJLFNBQVUsUUFBUSxZQXFGdEIsUUFBTyxRQUFVIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogR2l2ZW4gYSBgcHJldkVsZW1lbnRgIGFuZCBgbmV4dEVsZW1lbnRgLCBkZXRlcm1pbmVzIGlmIHRoZSBleGlzdGluZ1xuICogaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQgYXMgb3Bwb3NlZCB0byBiZWluZyBkZXN0cm95ZWQgb3IgcmVwbGFjZWQgYnkgYSBuZXdcbiAqIGluc3RhbmNlLiBCb3RoIGFyZ3VtZW50cyBhcmUgZWxlbWVudHMuIFRoaXMgZW5zdXJlcyB0aGF0IHRoaXMgbG9naWMgY2FuXG4gKiBvcGVyYXRlIG9uIHN0YXRlbGVzcyB0cmVlcyB3aXRob3V0IGFueSBiYWNraW5nIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJldkVsZW1lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gbmV4dEVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV4aXN0aW5nIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkLlxuICogQHByb3RlY3RlZFxuICovXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgaWYgKHByZXZFbGVtZW50ICE9IG51bGwgJiYgbmV4dEVsZW1lbnQgIT0gbnVsbCkge1xuICAgIHZhciBwcmV2VHlwZSA9IHR5cGVvZiBwcmV2RWxlbWVudDtcbiAgICB2YXIgbmV4dFR5cGUgPSB0eXBlb2YgbmV4dEVsZW1lbnQ7XG4gICAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAobmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZXh0VHlwZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICBwcmV2RWxlbWVudC50eXBlID09PSBuZXh0RWxlbWVudC50eXBlICYmXG4gICAgICAgICAgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXkpIHtcbiAgICAgICAgdmFyIG93bmVyc01hdGNoID0gcHJldkVsZW1lbnQuX293bmVyID09PSBuZXh0RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBwcmV2TmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0TmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBuZXh0RGlzcGxheU5hbWUgPSBudWxsO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgaWYgKCFvd25lcnNNYXRjaCkge1xuICAgICAgICAgICAgaWYgKHByZXZFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJldk5hbWUgPVxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbmV4dE5hbWUgPVxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnR5cGUgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBuZXh0RGlzcGxheU5hbWUgPSBuZXh0RWxlbWVudC50eXBlLmRpc3BsYXlOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50LnR5cGUgIT0gbnVsbCAmJiB0eXBlb2YgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgbmV4dERpc3BsYXlOYW1lID0gbmV4dEVsZW1lbnQudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV4dEVsZW1lbnQudHlwZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC50eXBlID09PSAnaW5wdXQnIHx8XG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgICAgICAgICBpZiAoKHByZXZFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPT09IGZhbHNlKSB8fFxuICAgICAgICAgICAgICAgICAgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuX2lzT3duZXJOZWNlc3NhcnkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgJzwlcyAvPiBpcyBiZWluZyByZW5kZXJlZCBieSBib3RoICVzIGFuZCAlcyB1c2luZyB0aGUgc2FtZSAnICtcbiAgICAgICAgICAgICAgICAgICdrZXkgKCVzKSBpbiB0aGUgc2FtZSBwbGFjZS4gQ3VycmVudGx5LCB0aGlzIG1lYW5zIHRoYXQgJyArXG4gICAgICAgICAgICAgICAgICAndGhleSBkb25cXCd0IHByZXNlcnZlIHN0YXRlLiBUaGlzIGJlaGF2aW9yIHNob3VsZCBiZSB2ZXJ5ICcgK1xuICAgICAgICAgICAgICAgICAgJ3JhcmUgc28gd2VcXCdyZSBjb25zaWRlcmluZyBkZXByZWNhdGluZyBpdC4gUGxlYXNlIGNvbnRhY3QgJyArXG4gICAgICAgICAgICAgICAgICAndGhlIFJlYWN0IHRlYW0gYW5kIGV4cGxhaW4geW91ciB1c2UgY2FzZSBzbyB0aGF0IHdlIGNhbiAnICtcbiAgICAgICAgICAgICAgICAgICd0YWtlIHRoYXQgaW50byBjb25zaWRlcmF0aW9uLicsXG4gICAgICAgICAgICAgICAgICBuZXh0RGlzcGxheU5hbWUgfHwgJ1Vua25vd24gQ29tcG9uZW50JyxcbiAgICAgICAgICAgICAgICAgIHByZXZOYW1lIHx8ICdbVW5rbm93bl0nLFxuICAgICAgICAgICAgICAgICAgbmV4dE5hbWUgfHwgJ1tVbmtub3duXScsXG4gICAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5rZXlcbiAgICAgICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG93bmVyc01hdGNoO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7XG4iXX0=
},{"./warning":249,"_process":95}],247:[function(require,module,exports){
(function (process){
function toArray(obj){var length=obj.length;if("production"!==process.env.NODE_ENV?invariant(!Array.isArray(obj)&&("object"==typeof obj||"function"==typeof obj),"toArray: Array-like object expected"):invariant(!Array.isArray(obj)&&("object"==typeof obj||"function"==typeof obj)),"production"!==process.env.NODE_ENV?invariant("number"==typeof length,"toArray: Object needs a length property"):invariant("number"==typeof length),"production"!==process.env.NODE_ENV?invariant(0===length||length-1 in obj,"toArray: Object should have keys for indices"):invariant(0===length||length-1 in obj),obj.hasOwnProperty)try{return Array.prototype.slice.call(obj)}catch(e){}for(var ret=Array(length),ii=0;length>ii;ii++)ret[ii]=obj[ii];return ret}var invariant=require("./invariant");module.exports=toArray;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvdG9BcnJheS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBdUJBLFFBQVMsU0FBUSxLQUNmLEdBQUksUUFBUyxJQUFJLE1BMEJqQixJQXRCQyxlQUFpQixRQUFRLElBQUksU0FBVyxXQUN0QyxNQUFNLFFBQVEsT0FDQyxnQkFBUixNQUFtQyxrQkFBUixNQUNuQyx1Q0FDRSxXQUFXLE1BQU0sUUFBUSxPQUNiLGdCQUFSLE1BQW1DLGtCQUFSLE9BRWxDLGVBQWlCLFFBQVEsSUFBSSxTQUFXLFVBQ3JCLGdCQUFYLFFBQ1AsMkNBQ0UsVUFBNEIsZ0JBQVgsU0FFcEIsZUFBaUIsUUFBUSxJQUFJLFNBQVcsVUFDNUIsSUFBWCxRQUNDLE9BQVMsSUFBTSxLQUNoQixnREFDRSxVQUFxQixJQUFYLFFBQ2IsT0FBUyxJQUFNLE1BS1osSUFBSSxlQUNOLElBQ0UsTUFBTyxPQUFNLFVBQVUsTUFBTSxLQUFLLEtBQ2xDLE1BQU8sSUFRWCxJQUFLLEdBREQsS0FBTSxNQUFNLFFBQ1AsR0FBSyxFQUFRLE9BQUwsR0FBYSxLQUM1QixJQUFJLElBQU0sSUFBSSxHQUVoQixPQUFPLEtBcERULEdBQUksV0FBWSxRQUFRLGNBdUR4QixRQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0b0FycmF5XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQ29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gYXJyYXlzLlxuICpcbiAqIFRoaXMgQVBJIGFzc3VtZXMgdGhlIGNhbGxlciBrbm93cyB0aGUgY29udGVudHMgb2YgdGhlIGRhdGEgdHlwZS4gRm9yIGxlc3NcbiAqIHdlbGwgZGVmaW5lZCBpbnB1dHMgdXNlIGNyZWF0ZUFycmF5RnJvbU1peGVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufGZpbGVsaXN0fSBvYmpcbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcblxuICAvLyBTb21lIGJyb3dzZSBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdCBpblxuICAvLyBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhQXJyYXkuaXNBcnJheShvYmopICYmXG4gICAgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpLFxuICAgICd0b0FycmF5OiBBcnJheS1saWtlIG9iamVjdCBleHBlY3RlZCdcbiAgKSA6IGludmFyaWFudCghQXJyYXkuaXNBcnJheShvYmopICYmXG4gICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkpO1xuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicsXG4gICAgJ3RvQXJyYXk6IE9iamVjdCBuZWVkcyBhIGxlbmd0aCBwcm9wZXJ0eSdcbiAgKSA6IGludmFyaWFudCh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykpO1xuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbGVuZ3RoID09PSAwIHx8XG4gICAgKGxlbmd0aCAtIDEpIGluIG9iaixcbiAgICAndG9BcnJheTogT2JqZWN0IHNob3VsZCBoYXZlIGtleXMgZm9yIGluZGljZXMnXG4gICkgOiBpbnZhcmlhbnQobGVuZ3RoID09PSAwIHx8XG4gIChsZW5ndGggLSAxKSBpbiBvYmopKTtcblxuICAvLyBPbGQgSUUgZG9lc24ndCBnaXZlIGNvbGxlY3Rpb25zIGFjY2VzcyB0byBoYXNPd25Qcm9wZXJ0eS4gQXNzdW1lIGlucHV0c1xuICAvLyB3aXRob3V0IG1ldGhvZCB3aWxsIHRocm93IGR1cmluZyB0aGUgc2xpY2UgY2FsbCBhbmQgc2tpcCBzdHJhaWdodCB0byB0aGVcbiAgLy8gZmFsbGJhY2suXG4gIGlmIChvYmouaGFzT3duUHJvcGVydHkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSUUgPCA5IGRvZXMgbm90IHN1cHBvcnQgQXJyYXkjc2xpY2Ugb24gY29sbGVjdGlvbnMgb2JqZWN0c1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwgYmFjayB0byBjb3B5aW5nIGtleSBieSBrZXkuIFRoaXMgYXNzdW1lcyBhbGwga2V5cyBoYXZlIGEgdmFsdWUsXG4gIC8vIHNvIHdpbGwgbm90IHByZXNlcnZlIHNwYXJzZWx5IHBvcHVsYXRlZCBpbnB1dHMuXG4gIHZhciByZXQgPSBBcnJheShsZW5ndGgpO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuZ3RoOyBpaSsrKSB7XG4gICAgcmV0W2lpXSA9IG9ialtpaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5O1xuIl19
},{"./invariant":230,"_process":95}],248:[function(require,module,exports){
(function (process){
"use strict";function userProvidedKeyEscaper(match){return userProvidedKeyEscaperLookup[match]}function getComponentKey(component,index){return component&&null!=component.key?wrapUserProvidedKey(component.key):index.toString(36)}function escapeUserProvidedKey(text){return(""+text).replace(userProvidedKeyEscapeRegex,userProvidedKeyEscaper)}function wrapUserProvidedKey(key){return"$"+escapeUserProvidedKey(key)}function traverseAllChildrenImpl(children,nameSoFar,indexSoFar,callback,traverseContext){var type=typeof children;if(("undefined"===type||"boolean"===type)&&(children=null),null===children||"string"===type||"number"===type||ReactElement.isValidElement(children))return callback(traverseContext,children,""===nameSoFar?SEPARATOR+getComponentKey(children,0):nameSoFar,indexSoFar),1;var child,nextName,nextIndex,subtreeCount=0;if(Array.isArray(children))for(var i=0;i<children.length;i++)child=children[i],nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+getComponentKey(child,i),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext);else{var iteratorFn=getIteratorFn(children);if(iteratorFn){var step,iterator=iteratorFn.call(children);if(iteratorFn!==children.entries)for(var ii=0;!(step=iterator.next()).done;)child=step.value,nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+getComponentKey(child,ii++),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext);else for("production"!==process.env.NODE_ENV&&("production"!==process.env.NODE_ENV?warning(didWarnAboutMaps,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead."):null,didWarnAboutMaps=!0);!(step=iterator.next()).done;){var entry=step.value;entry&&(child=entry[1],nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+wrapUserProvidedKey(entry[0])+SUBSEPARATOR+getComponentKey(child,0),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext))}}else if("object"===type){"production"!==process.env.NODE_ENV?invariant(1!==children.nodeType,"traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components."):invariant(1!==children.nodeType);var fragment=ReactFragment.extract(children);for(var key in fragment)fragment.hasOwnProperty(key)&&(child=fragment[key],nextName=(""!==nameSoFar?nameSoFar+SUBSEPARATOR:SEPARATOR)+wrapUserProvidedKey(key)+SUBSEPARATOR+getComponentKey(child,0),nextIndex=indexSoFar+subtreeCount,subtreeCount+=traverseAllChildrenImpl(child,nextName,nextIndex,callback,traverseContext))}}return subtreeCount}function traverseAllChildren(children,callback,traverseContext){return null==children?0:traverseAllChildrenImpl(children,"",0,callback,traverseContext)}var ReactElement=require("./ReactElement"),ReactFragment=require("./ReactFragment"),ReactInstanceHandles=require("./ReactInstanceHandles"),getIteratorFn=require("./getIteratorFn"),invariant=require("./invariant"),warning=require("./warning"),SEPARATOR=ReactInstanceHandles.SEPARATOR,SUBSEPARATOR=":",userProvidedKeyEscaperLookup={"=":"=0",".":"=1",":":"=2"},userProvidedKeyEscapeRegex=/[=.:]/g,didWarnAboutMaps=!1;module.exports=traverseAllChildren;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"./ReactElement":152,"./ReactFragment":158,"./ReactInstanceHandles":161,"./getIteratorFn":221,"./invariant":230,"./warning":249,"_process":95}],249:[function(require,module,exports){
(function (process){
"use strict";var emptyFunction=require("./emptyFunction"),warning=emptyFunction;"production"!==process.env.NODE_ENV&&(warning=function(condition,format){for(var args=[],$__0=2,$__1=arguments.length;$__1>$__0;$__0++)args.push(arguments[$__0]);if(void 0===format)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(format.length<10||/^[s\W]*$/.test(format))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+format);if(0!==format.indexOf("Failed Composite propType: ")&&!condition){var argIndex=0,message="Warning: "+format.replace(/%s/g,function(){return args[argIndex++]});console.warn(message);try{throw new Error(message)}catch(x){}}}),module.exports=warning;

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsWUFFQSxJQUFJLGVBQWdCLFFBQVEsbUJBU3hCLFFBQVUsYUFFVixnQkFBaUIsUUFBUSxJQUFJLFdBQy9CLFFBQVUsU0FBUyxVQUFXLFFBQVUsSUFBSyxHQUFJLFNBQVEsS0FBSyxFQUFFLEtBQUssVUFBVSxPQUFZLEtBQUwsS0FBVSxPQUFRLEtBQUssS0FBSyxVQUFVLE1BQzFILElBQWUsU0FBWCxPQUNGLEtBQU0sSUFBSSxPQUNSLDRFQUtKLElBQUksT0FBTyxPQUFTLElBQU0sV0FBVyxLQUFLLFFBQ3hDLEtBQU0sSUFBSSxPQUNSLG9IQUMwRCxPQUk5RCxJQUFzRCxJQUFsRCxPQUFPLFFBQVEsaUNBSWQsVUFBVyxDQUNkLEdBQUksVUFBVyxFQUNYLFFBQVUsWUFBYyxPQUFPLFFBQVEsTUFBTyxXQUFhLE1BQU8sTUFBSyxhQUMzRSxTQUFRLEtBQUssUUFDYixLQUlFLEtBQU0sSUFBSSxPQUFNLFNBQ2hCLE1BQU0sUUFLZCxPQUFPLFFBQVUiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCApIHtmb3IgKHZhciBhcmdzPVtdLCRfXzA9MiwkX18xPWFyZ3VtZW50cy5sZW5ndGg7JF9fMDwkX18xOyRfXzArKykgYXJncy5wdXNoKGFyZ3VtZW50c1skX18wXSk7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgL15bc1xcV10qJC8udGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgIHtyZXR1cm4gYXJnc1thcmdJbmRleCsrXTt9KTtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iXX0=
},{"./emptyFunction":209,"_process":95}],250:[function(require,module,exports){
module.exports=require("./lib/React");


},{"./lib/React":123}],251:[function(require,module,exports){
module.exports=require("./src");


},{"./src":264}],252:[function(require,module,exports){
"use strict";function EE(fn,context,once){this.fn=fn,this.context=context,this.once=once||!1}function EventEmitter(){}var prefix="function"!=typeof Object.create?"~":!1;EventEmitter.prototype._events=void 0,EventEmitter.prototype.listeners=function(event,exists){var evt=prefix?prefix+event:event,available=this._events&&this._events[evt];if(exists)return!!available;if(!available)return[];if(available.fn)return[available.fn];for(var i=0,l=available.length,ee=new Array(l);l>i;i++)ee[i]=available[i].fn;return ee},EventEmitter.prototype.emit=function(event,a1,a2,a3,a4,a5){var evt=prefix?prefix+event:event;if(!this._events||!this._events[evt])return!1;var args,i,listeners=this._events[evt],len=arguments.length;if("function"==typeof listeners.fn){switch(listeners.once&&this.removeListener(event,listeners.fn,void 0,!0),len){case 1:return listeners.fn.call(listeners.context),!0;case 2:return listeners.fn.call(listeners.context,a1),!0;case 3:return listeners.fn.call(listeners.context,a1,a2),!0;case 4:return listeners.fn.call(listeners.context,a1,a2,a3),!0;case 5:return listeners.fn.call(listeners.context,a1,a2,a3,a4),!0;case 6:return listeners.fn.call(listeners.context,a1,a2,a3,a4,a5),!0}for(i=1,args=new Array(len-1);len>i;i++)args[i-1]=arguments[i];listeners.fn.apply(listeners.context,args)}else{var j,length=listeners.length;for(i=0;length>i;i++)switch(listeners[i].once&&this.removeListener(event,listeners[i].fn,void 0,!0),len){case 1:listeners[i].fn.call(listeners[i].context);break;case 2:listeners[i].fn.call(listeners[i].context,a1);break;case 3:listeners[i].fn.call(listeners[i].context,a1,a2);break;default:if(!args)for(j=1,args=new Array(len-1);len>j;j++)args[j-1]=arguments[j];listeners[i].fn.apply(listeners[i].context,args)}}return!0},EventEmitter.prototype.on=function(event,fn,context){var listener=new EE(fn,context||this),evt=prefix?prefix+event:event;return this._events||(this._events=prefix?{}:Object.create(null)),this._events[evt]?this._events[evt].fn?this._events[evt]=[this._events[evt],listener]:this._events[evt].push(listener):this._events[evt]=listener,this},EventEmitter.prototype.once=function(event,fn,context){var listener=new EE(fn,context||this,!0),evt=prefix?prefix+event:event;return this._events||(this._events=prefix?{}:Object.create(null)),this._events[evt]?this._events[evt].fn?this._events[evt]=[this._events[evt],listener]:this._events[evt].push(listener):this._events[evt]=listener,this},EventEmitter.prototype.removeListener=function(event,fn,context,once){var evt=prefix?prefix+event:event;if(!this._events||!this._events[evt])return this;var listeners=this._events[evt],events=[];if(fn)if(listeners.fn)(listeners.fn!==fn||once&&!listeners.once||context&&listeners.context!==context)&&events.push(listeners);else for(var i=0,length=listeners.length;length>i;i++)(listeners[i].fn!==fn||once&&!listeners[i].once||context&&listeners[i].context!==context)&&events.push(listeners[i]);return events.length?this._events[evt]=1===events.length?events[0]:events:delete this._events[evt],this},EventEmitter.prototype.removeAllListeners=function(event){return this._events?(event?delete this._events[prefix?prefix+event:event]:this._events=prefix?{}:Object.create(null),this):this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.addListener=EventEmitter.prototype.on,EventEmitter.prototype.setMaxListeners=function(){return this},EventEmitter.prefixed=prefix,"undefined"!=typeof module&&(module.exports=EventEmitter);


},{}],253:[function(require,module,exports){
module.exports={};


},{}],254:[function(require,module,exports){
exports.createdStores=[],exports.createdActions=[],exports.reset=function(){for(;exports.createdStores.length;)exports.createdStores.pop();for(;exports.createdActions.length;)exports.createdActions.pop()};


},{}],255:[function(require,module,exports){
var _=require("./utils"),maker=require("./joins").instanceJoinCreator,mapChildListenables=function(listenable){for(var childName,i=0,children={};i<(listenable.children||[]).length;++i)childName=listenable.children[i],listenable[childName]&&(children[childName]=listenable[childName]);return children},flattenListenables=function(listenables){var flattened={};for(var key in listenables){var listenable=listenables[key],childMap=mapChildListenables(listenable),children=flattenListenables(childMap);flattened[key]=listenable;for(var childKey in children){var childListenable=children[childKey];flattened[key+_.capitalize(childKey)]=childListenable}}return flattened};module.exports={hasListener:function(listenable){for(var j,listener,listenables,i=0;i<(this.subscriptions||[]).length;++i)for(listenables=[].concat(this.subscriptions[i].listenable),j=0;j<listenables.length;j++)if(listener=listenables[j],listener===listenable||listener.hasListener&&listener.hasListener(listenable))return!0;return!1},listenToMany:function(listenables){var allListenables=flattenListenables(listenables);for(var key in allListenables){var cbname=_.callbackName(key),localname=this[cbname]?cbname:this[key]?key:void 0;localname&&this.listenTo(allListenables[key],localname,this[cbname+"Default"]||this[localname+"Default"]||localname)}},validateListening:function(listenable){return listenable===this?"Listener is not able to listen to itself":_.isFunction(listenable.listen)?listenable.hasListener&&listenable.hasListener(this)?"Listener cannot listen to this listenable because of circular loop":void 0:listenable+" is missing a listen method"},listenTo:function(listenable,callback,defaultCallback){var desub,unsubscriber,subscriptionobj,subs=this.subscriptions=this.subscriptions||[];return _.throwIf(this.validateListening(listenable)),this.fetchInitialState(listenable,defaultCallback),desub=listenable.listen(this[callback]||callback,this),unsubscriber=function(){var index=subs.indexOf(subscriptionobj);_.throwIf(-1===index,"Tried to remove listen already gone from subscriptions list!"),subs.splice(index,1),desub()},subscriptionobj={stop:unsubscriber,listenable:listenable},subs.push(subscriptionobj),subscriptionobj},stopListeningTo:function(listenable){for(var sub,i=0,subs=this.subscriptions||[];i<subs.length;i++)if(sub=subs[i],sub.listenable===listenable)return sub.stop(),_.throwIf(-1!==subs.indexOf(sub),"Failed to remove listen from subscriptions list!"),!0;return!1},stopListeningToAll:function(){for(var remaining,subs=this.subscriptions||[];remaining=subs.length;)subs[0].stop(),_.throwIf(subs.length!==remaining-1,"Failed to remove listen from subscriptions list!")},fetchInitialState:function(listenable,defaultCallback){defaultCallback=defaultCallback&&this[defaultCallback]||defaultCallback;var me=this;if(_.isFunction(defaultCallback)&&_.isFunction(listenable.getInitialState)){var data=listenable.getInitialState();data&&_.isFunction(data.then)?data.then(function(){defaultCallback.apply(me,arguments)}):defaultCallback.call(this,data)}},joinTrailing:maker("last"),joinLeading:maker("first"),joinConcat:maker("all"),joinStrict:maker("strict")};


},{"./joins":265,"./utils":269}],256:[function(require,module,exports){
var _=require("./utils"),ListenerMethods=require("./ListenerMethods");module.exports=_.extend({componentWillUnmount:ListenerMethods.stopListeningToAll},ListenerMethods);


},{"./ListenerMethods":255,"./utils":269}],257:[function(require,module,exports){
var _=require("./utils");module.exports={preEmit:function(){},shouldEmit:function(){return!0},listen:function(callback,bindContext){bindContext=bindContext||this;var eventHandler=function(args){aborted||callback.apply(bindContext,args)},me=this,aborted=!1;return this.emitter.addListener(this.eventLabel,eventHandler),function(){aborted=!0,me.emitter.removeListener(me.eventLabel,eventHandler)}},promise:function(promise){var me=this,canHandlePromise=this.children.indexOf("completed")>=0&&this.children.indexOf("failed")>=0;if(!canHandlePromise)throw new Error('Publisher must have "completed" and "failed" child publishers');promise.then(function(response){return me.completed(response)},function(error){return me.failed(error)})},listenAndPromise:function(callback,bindContext){var me=this;bindContext=bindContext||this,this.willCallPromise=(this.willCallPromise||0)+1;var removeListen=this.listen(function(){if(!callback)throw new Error("Expected a function returning a promise but got "+callback);var args=arguments,promise=callback.apply(bindContext,args);return me.promise.call(me,promise)},bindContext);return function(){me.willCallPromise--,removeListen.call(me)}},trigger:function(){var args=arguments,pre=this.preEmit.apply(this,args);args=void 0===pre?args:_.isArguments(pre)?pre:[].concat(pre),this.shouldEmit.apply(this,args)&&this.emitter.emit(this.eventLabel,args)},triggerAsync:function(){var args=arguments,me=this;_.nextTick(function(){me.trigger.apply(me,args)})},triggerPromise:function(){var me=this,args=arguments,canHandlePromise=this.children.indexOf("completed")>=0&&this.children.indexOf("failed")>=0,promise=_.createPromise(function(resolve,reject){if(me.willCallPromise)return void _.nextTick(function(){var old_promise_method=me.promise;me.promise=function(promise){return promise.then(resolve,reject),me.promise=old_promise_method,me.promise.apply(me,arguments)},me.trigger.apply(me,args)});if(canHandlePromise)var removeSuccess=me.completed.listen(function(args){removeSuccess(),removeFailed(),resolve(args)}),removeFailed=me.failed.listen(function(args){removeSuccess(),removeFailed(),reject(args)});me.triggerAsync.apply(me,args),canHandlePromise||resolve()});return promise}};


},{"./utils":269}],258:[function(require,module,exports){
module.exports={};


},{}],259:[function(require,module,exports){
module.exports=function(store,definition){for(var name in definition)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var propertyDescriptor=Object.getOwnPropertyDescriptor(definition,name);if(!propertyDescriptor.value||"function"!=typeof propertyDescriptor.value||!definition.hasOwnProperty(name))continue;store[name]=definition[name].bind(store)}else{var property=definition[name];if("function"!=typeof property||!definition.hasOwnProperty(name))continue;store[name]=property.bind(store)}return store};


},{}],260:[function(require,module,exports){
var ListenerMethods=require("./ListenerMethods"),ListenerMixin=require("./ListenerMixin"),_=require("./utils");module.exports=function(listenable,key){return{getInitialState:function(){return _.isFunction(listenable.getInitialState)?void 0===key?listenable.getInitialState():_.object([key],[listenable.getInitialState()]):{}},componentDidMount:function(){_.extend(this,ListenerMethods);var me=this,cb=void 0===key?this.setState:function(v){("undefined"==typeof me.isMounted||me.isMounted()===!0)&&me.setState(_.object([key],[v]))};this.listenTo(listenable,cb)},componentWillUnmount:ListenerMixin.componentWillUnmount}};


},{"./ListenerMethods":255,"./ListenerMixin":256,"./utils":269}],261:[function(require,module,exports){
var ListenerMethods=require("./ListenerMethods"),ListenerMixin=require("./ListenerMixin"),_=require("./utils");module.exports=function(listenable,key,filterFunc){return filterFunc=_.isFunction(key)?key:filterFunc,{getInitialState:function(){if(_.isFunction(listenable.getInitialState)){if(_.isFunction(key))return filterFunc.call(this,listenable.getInitialState());var result=filterFunc.call(this,listenable.getInitialState());return"undefined"!=typeof result?_.object([key],[result]):{}}return{}},componentDidMount:function(){_.extend(this,ListenerMethods);var me=this,cb=function(value){if(_.isFunction(key))me.setState(filterFunc.call(me,value));else{var result=filterFunc.call(me,value);me.setState(_.object([key],[result]))}};this.listenTo(listenable,cb)},componentWillUnmount:ListenerMixin.componentWillUnmount}};


},{"./ListenerMethods":255,"./ListenerMixin":256,"./utils":269}],262:[function(require,module,exports){
var _=require("./utils"),ActionMethods=require("./ActionMethods"),PublisherMethods=require("./PublisherMethods"),Keep=require("./Keep"),allowed={preEmit:1,shouldEmit:1},createAction=function(definition){definition=definition||{},_.isObject(definition)||(definition={actionName:definition});for(var a in ActionMethods)if(!allowed[a]&&PublisherMethods[a])throw new Error("Cannot override API method "+a+" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.");for(var d in definition)if(!allowed[d]&&PublisherMethods[d])throw new Error("Cannot override API method "+d+" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.");definition.children=definition.children||[],definition.asyncResult&&(definition.children=definition.children.concat(["completed","failed"]));for(var i=0,childActions={};i<definition.children.length;i++){var name=definition.children[i];childActions[name]=createAction(name)}var context=_.extend({eventLabel:"action",emitter:new _.EventEmitter,_isAction:!0},PublisherMethods,ActionMethods,definition),functor=function(){var triggerType=functor.sync?"trigger":_.environment.hasPromises?"triggerPromise":"triggerAsync";return functor[triggerType].apply(functor,arguments)};return _.extend(functor,childActions,context),Keep.createdActions.push(functor),functor};module.exports=createAction;


},{"./ActionMethods":253,"./Keep":254,"./PublisherMethods":257,"./utils":269}],263:[function(require,module,exports){
var _=require("./utils"),Keep=require("./Keep"),mixer=require("./mixer"),allowed={preEmit:1,shouldEmit:1},bindMethods=require("./bindMethods");module.exports=function(definition){function Store(){var arr,i=0;if(this.subscriptions=[],this.emitter=new _.EventEmitter,this.eventLabel="change",bindMethods(this,definition),this.init&&_.isFunction(this.init)&&this.init(),this.listenables)for(arr=[].concat(this.listenables);i<arr.length;i++)this.listenToMany(arr[i])}var StoreMethods=require("./StoreMethods"),PublisherMethods=require("./PublisherMethods"),ListenerMethods=require("./ListenerMethods");definition=definition||{};for(var a in StoreMethods)if(!allowed[a]&&(PublisherMethods[a]||ListenerMethods[a]))throw new Error("Cannot override API method "+a+" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");for(var d in definition)if(!allowed[d]&&(PublisherMethods[d]||ListenerMethods[d]))throw new Error("Cannot override API method "+d+" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");definition=mixer(definition),_.extend(Store.prototype,ListenerMethods,PublisherMethods,StoreMethods,definition);var store=new Store;return Keep.createdStores.push(store),store};


},{"./Keep":254,"./ListenerMethods":255,"./PublisherMethods":257,"./StoreMethods":258,"./bindMethods":259,"./mixer":268,"./utils":269}],264:[function(require,module,exports){
exports.ActionMethods=require("./ActionMethods"),exports.ListenerMethods=require("./ListenerMethods"),exports.PublisherMethods=require("./PublisherMethods"),exports.StoreMethods=require("./StoreMethods"),exports.createAction=require("./createAction"),exports.createStore=require("./createStore"),exports.connect=require("./connect"),exports.connectFilter=require("./connectFilter"),exports.ListenerMixin=require("./ListenerMixin"),exports.listenTo=require("./listenTo"),exports.listenToMany=require("./listenToMany");var maker=require("./joins").staticJoinCreator;exports.joinTrailing=exports.all=maker("last"),exports.joinLeading=maker("first"),exports.joinStrict=maker("strict"),exports.joinConcat=maker("all");var _=exports.utils=require("./utils");exports.EventEmitter=_.EventEmitter,exports.Promise=_.Promise,exports.createActions=function(definitions){var actions={};for(var k in definitions)if(definitions.hasOwnProperty(k)){var val=definitions[k],actionName=_.isObject(val)?k:val;actions[actionName]=exports.createAction(val)}return actions},exports.setEventEmitter=function(ctx){exports.EventEmitter=_.EventEmitter=ctx},exports.setPromise=function(ctx){exports.Promise=_.Promise=ctx},exports.setPromiseFactory=function(factory){_.createPromise=factory},exports.nextTick=function(nextTick){_.nextTick=nextTick},exports.__keep=require("./Keep"),Function.prototype.bind||console.error("Function.prototype.bind not available. ES5 shim required. https://github.com/spoike/refluxjs#es5");


},{"./ActionMethods":253,"./Keep":254,"./ListenerMethods":255,"./ListenerMixin":256,"./PublisherMethods":257,"./StoreMethods":258,"./connect":260,"./connectFilter":261,"./createAction":262,"./createStore":263,"./joins":265,"./listenTo":266,"./listenToMany":267,"./utils":269}],265:[function(require,module,exports){
function makeStopper(subobj,cancels,context){return function(){var i,subs=context.subscriptions,index=subs?subs.indexOf(subobj):-1;for(_.throwIf(-1===index,"Tried to remove join already gone from subscriptions list!"),i=0;i<cancels.length;i++)cancels[i]();subs.splice(index,1)}}function reset(join){join.listenablesEmitted=new Array(join.numberOfListenables),join.args=new Array(join.numberOfListenables)}function newListener(i,join){return function(){var callargs=slice.call(arguments);if(join.listenablesEmitted[i])switch(join.strategy){case"strict":throw new Error("Strict join failed because listener triggered twice.");case"last":join.args[i]=callargs;break;case"all":join.args[i].push(callargs)}else join.listenablesEmitted[i]=!0,join.args[i]="all"===join.strategy?[callargs]:callargs;emitIfAllListenablesEmitted(join)}}function emitIfAllListenablesEmitted(join){for(var i=0;i<join.numberOfListenables;i++)if(!join.listenablesEmitted[i])return;join.callback.apply(join.listener,join.args),reset(join)}var slice=Array.prototype.slice,_=require("./utils"),createStore=require("./createStore"),strategyMethodNames={strict:"joinStrict",first:"joinLeading",last:"joinTrailing",all:"joinConcat"};exports.staticJoinCreator=function(strategy){return function(){var listenables=slice.call(arguments);return createStore({init:function(){this[strategyMethodNames[strategy]].apply(this,listenables.concat("triggerAsync"))}})}},exports.instanceJoinCreator=function(strategy){return function(){_.throwIf(arguments.length<2,"Cannot create a join with less than 2 listenables!");var i,subobj,listenables=slice.call(arguments),callback=listenables.pop(),numberOfListenables=listenables.length,join={numberOfListenables:numberOfListenables,callback:this[callback]||callback,listener:this,strategy:strategy},cancels=[];for(i=0;numberOfListenables>i;i++)_.throwIf(this.validateListening(listenables[i]));for(i=0;numberOfListenables>i;i++)cancels.push(listenables[i].listen(newListener(i,join),this));return reset(join),subobj={listenable:listenables},subobj.stop=makeStopper(subobj,cancels,this),this.subscriptions=(this.subscriptions||[]).concat(subobj),subobj}};


},{"./createStore":263,"./utils":269}],266:[function(require,module,exports){
var ListenerMethods=require("./ListenerMethods");module.exports=function(listenable,callback,initial){return{componentDidMount:function(){for(var m in ListenerMethods)if(this[m]!==ListenerMethods[m]){if(this[m])throw"Can't have other property '"+m+"' when using Reflux.listenTo!";this[m]=ListenerMethods[m]}this.listenTo(listenable,callback,initial)},componentWillUnmount:ListenerMethods.stopListeningToAll}};


},{"./ListenerMethods":255}],267:[function(require,module,exports){
var ListenerMethods=require("./ListenerMethods");module.exports=function(listenables){return{componentDidMount:function(){for(var m in ListenerMethods)if(this[m]!==ListenerMethods[m]){if(this[m])throw"Can't have other property '"+m+"' when using Reflux.listenToMany!";this[m]=ListenerMethods[m]}this.listenToMany(listenables)},componentWillUnmount:ListenerMethods.stopListeningToAll}};


},{"./ListenerMethods":255}],268:[function(require,module,exports){
var _=require("./utils");module.exports=function(def){var composed={init:[],preEmit:[],shouldEmit:[]},updated=function mixDef(mixin){var mixed={};return mixin.mixins&&mixin.mixins.forEach(function(subMixin){_.extend(mixed,mixDef(subMixin))}),_.extend(mixed,mixin),Object.keys(composed).forEach(function(composable){mixin.hasOwnProperty(composable)&&composed[composable].push(mixin[composable])}),mixed}(def);return composed.init.length>1&&(updated.init=function(){var args=arguments;composed.init.forEach(function(init){init.apply(this,args)},this)}),composed.preEmit.length>1&&(updated.preEmit=function(){return composed.preEmit.reduce(function(args,preEmit){var newValue=preEmit.apply(this,args);return void 0===newValue?args:[newValue]}.bind(this),arguments)}),composed.shouldEmit.length>1&&(updated.shouldEmit=function(){var args=arguments;return!composed.shouldEmit.some(function(shouldEmit){return!shouldEmit.apply(this,args)},this)}),Object.keys(composed).forEach(function(composable){1===composed[composable].length&&(updated[composable]=composed[composable][0])}),updated};


},{"./utils":269}],269:[function(require,module,exports){
exports.environment={};var isObject=exports.isObject=function(obj){var type=typeof obj;return"function"===type||"object"===type&&!!obj};exports.extend=function(obj){if(!isObject(obj))return obj;for(var source,prop,i=1,length=arguments.length;length>i;i++){source=arguments[i];for(prop in source)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var propertyDescriptor=Object.getOwnPropertyDescriptor(source,prop);Object.defineProperty(obj,prop,propertyDescriptor)}else obj[prop]=source[prop]}return obj},exports.isFunction=function(value){return"function"==typeof value},exports.EventEmitter=require("eventemitter3"),exports.nextTick=function(callback){setTimeout(callback,0)},exports.capitalize=function(string){return string.charAt(0).toUpperCase()+string.slice(1)},exports.callbackName=function(string){return"on"+exports.capitalize(string)},exports.object=function(keys,vals){for(var o={},i=0;i<keys.length;i++)o[keys[i]]=vals[i];return o};try{exports.Promise=Promise,exports.createPromise=function(resolver){return new exports.Promise(resolver)}}catch(err){exports.Promise=null,exports.createPromise=function(){}}exports.environment.hasPromises=!!exports.Promise,exports.isArguments=function(value){return"object"==typeof value&&"callee"in value&&"number"==typeof value.length},exports.throwIf=function(val,msg){if(val)throw Error(msg||val)};


},{"eventemitter3":252}],270:[function(require,module,exports){
!function(){"use strict";function normalizeName(name){if("string"!=typeof name&&(name=name.toString()),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name))throw new TypeError("Invalid character in header field name");return name.toLowerCase()}function normalizeValue(value){return"string"!=typeof value&&(value=value.toString()),value}function Headers(headers){this.map={},headers instanceof Headers?headers.forEach(function(value,name){this.append(name,value)},this):headers&&Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name])},this)}function consumed(body){return body.bodyUsed?Promise.reject(new TypeError("Already read")):void(body.bodyUsed=!0)}function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result)},reader.onerror=function(){reject(reader.error)}})}function readBlobAsArrayBuffer(blob){var reader=new FileReader;return reader.readAsArrayBuffer(blob),fileReaderReady(reader)}function readBlobAsText(blob){var reader=new FileReader;return reader.readAsText(blob),fileReaderReady(reader)}function Body(){return this.bodyUsed=!1,this._initBody=function(body){if(this._bodyInit=body,"string"==typeof body)this._bodyText=body;else if(support.blob&&Blob.prototype.isPrototypeOf(body))this._bodyBlob=body;else if(support.formData&&FormData.prototype.isPrototypeOf(body))this._bodyFormData=body;else{if(body)throw new Error("unsupported BodyInit type");this._bodyText=""}},support.blob?(this.blob=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(readBlobAsArrayBuffer)},this.text=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var rejected=consumed(this);return rejected?rejected:Promise.resolve(this._bodyText)},support.formData&&(this.formData=function(){return this.text().then(decode)}),this.json=function(){return this.text().then(JSON.parse)},this}function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method}function Request(url,options){if(options=options||{},this.url=url,this.credentials=options.credentials||"omit",this.headers=new Headers(options.headers),this.method=normalizeMethod(options.method||"GET"),this.mode=options.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&options.body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(options.body)}function decode(body){var form=new FormData;return body.trim().split("&").forEach(function(bytes){if(bytes){var split=bytes.split("="),name=split.shift().replace(/\+/g," "),value=split.join("=").replace(/\+/g," ");form.append(decodeURIComponent(name),decodeURIComponent(value))}}),form}function headers(xhr){var head=new Headers,pairs=xhr.getAllResponseHeaders().trim().split("\n");return pairs.forEach(function(header){var split=header.trim().split(":"),key=split.shift().trim(),value=split.join(":").trim();head.append(key,value)}),head}function Response(bodyInit,options){options||(options={}),this._initBody(bodyInit),this.type="default",this.url=null,this.status=options.status,this.ok=this.status>=200&&this.status<300,this.statusText=options.statusText,this.headers=options.headers instanceof Headers?options.headers:new Headers(options.headers),this.url=options.url||""}if(!self.fetch){Headers.prototype.append=function(name,value){name=normalizeName(name),value=normalizeValue(value);var list=this.map[name];list||(list=[],this.map[name]=list),list.push(value)},Headers.prototype["delete"]=function(name){delete this.map[normalizeName(name)]},Headers.prototype.get=function(name){var values=this.map[normalizeName(name)];return values?values[0]:null},Headers.prototype.getAll=function(name){return this.map[normalizeName(name)]||[]},Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name))},Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=[normalizeValue(value)]},Headers.prototype.forEach=function(callback,thisArg){Object.getOwnPropertyNames(this.map).forEach(function(name){this.map[name].forEach(function(value){callback.call(thisArg,value,name,this)},this)},this)};var support={blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in self},methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];Body.call(Request.prototype),Body.call(Response.prototype),self.Headers=Headers,self.Request=Request,self.Response=Response,self.fetch=function(input,init){var request;return request=Request.prototype.isPrototypeOf(input)&&!init?input:new Request(input,init),new Promise(function(resolve,reject){function responseURL(){return"responseURL"in xhr?xhr.responseURL:/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())?xhr.getResponseHeader("X-Request-URL"):void 0}var xhr=new XMLHttpRequest;xhr.onload=function(){var status=1223===xhr.status?204:xhr.status;if(100>status||status>599)return void reject(new TypeError("Network request failed"));var options={status:status,statusText:xhr.statusText,headers:headers(xhr),url:responseURL()},body="response"in xhr?xhr.response:xhr.responseText;resolve(new Response(body,options))},xhr.onerror=function(){reject(new TypeError("Network request failed"))},xhr.open(request.method,request.url,!0),"include"===request.credentials&&(xhr.withCredentials=!0),"responseType"in xhr&&support.blob&&(xhr.responseType="blob"),request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value)}),xhr.send("undefined"==typeof request._bodyInit?null:request._bodyInit)})},self.fetch.polyfill=!0}}();


},{}],271:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),Reflux=require("reflux"),animFrame=void 0,TIME_DURATION=4e3,Actions=Reflux.createActions({correctAnswer:{},incorrectAnswer:{},startTimer:{},progressTimer:{},stopTimer:{},restartApp:{},setElapsed:{}});Actions.startTimer.listen(function(){var start=Date.now();animFrame=requestAnimationFrame(function raf(){var elapse=Date.now()-start;elapse>TIME_DURATION?(console.log("STOPPING THE TIMER"),Actions.stopTimer(),Actions.progressTimer(TIME_DURATION)):Actions.progressTimer(elapse),animFrame=requestAnimationFrame(raf)})}),Actions.stopTimer.listen(function(){return cancelAnimationFrame(animFrame)});var resetTimer=function(){Actions.stopTimer(),Actions.startTimer()};Actions.correctAnswer.listen(resetTimer),Actions.incorrectAnswer.listen(resetTimer),exports["default"]=Actions,module.exports=exports["default"];


},{"../modules":279,"reflux":251}],272:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _=require("./"),_modules=require("../modules"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),App=React.createClass({displayName:"App",mixins:[Reflux.connect(Store)],render:function(){return React.createElement("div",null,React.createElement("h1",null,"Colour Word - ",React.createElement("span",null,"choose the colour, not the word.")),React.createElement(_.Game,{colors:this.state.colors,correctColor:this.state.correctColor}),React.createElement(_.Timer,{start:this.state.start,elapsed:this.state.elapsed}),React.createElement(_.Score,{score:this.state.score}))}});exports["default"]=App,module.exports=exports["default"];


},{"../actions/actions":271,"../modules":279,"../stores/store":281,"./":274,"react":250,"reflux":251}],273:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),Game=React.createClass({displayName:"Game",shouldComponentUpdate:function(nextProps){return nextProps.colors===this.props.colors?!1:!0},render:function(){var _props=this.props,colors=_props.colors,correctColor=_props.correctColor,word=colors[Math.floor(Math.random()*colors.length)],shuffledColors=_modules.shuffle(colors),colorList=shuffledColors.map(function(color,i){var onClickHandler=color===correctColor?Actions.correctAnswer:Actions.incorrectAnswer;return React.createElement("li",{className:"bg-"+color+" color-item",onClick:onClickHandler},React.createElement("a",null,React.createElement("span",null,color)))},this);return React.createElement("div",{className:"game-wrapper"},React.createElement("h2",{className:"color-"+correctColor},word),React.createElement("ul",{className:"color-choice-ul"},colorList))}});exports["default"]=Game,module.exports=exports["default"];


},{"../actions/actions":271,"../modules":279,"../stores/store":281,"react":250,"reflux":251}],274:[function(require,module,exports){
"use strict";function _interopRequire(obj){return obj&&obj.__esModule?obj["default"]:obj}Object.defineProperty(exports,"__esModule",{value:!0});var _AppJsx=require("./App.jsx");exports.App=_interopRequire(_AppJsx);var _gameJsx=require("./game.jsx");exports.Game=_interopRequire(_gameJsx);var _timerJsx=require("./timer.jsx");exports.Timer=_interopRequire(_timerJsx);var _scoreJsx=require("./score.jsx");exports.Score=_interopRequire(_scoreJsx);


},{"./App.jsx":272,"./game.jsx":273,"./score.jsx":275,"./timer.jsx":276}],275:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _modules=require("../modules"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=require("../stores/store"),Score=React.createClass({displayName:"Score",mixins:[Reflux.connect(Store)],shouldComponentUpdate:function(nextProps){return nextProps.score===this.props.score?!1:!0},render:function(){return React.createElement("div",{className:"score-wrap"},React.createElement("p",null,"Score: ",this.props.score))}});exports["default"]=Score,module.exports=exports["default"];


},{"../actions/actions":271,"../modules":279,"../stores/store":281,"react":250,"reflux":251}],276:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),counter=0,Store=require("../stores/store"),Timer=React.createClass({displayName:"Timer",componentDidMount:function(){console.log("componentDidMount"),Actions.startTimer()},render:function(){var elapsed=this.props.elapsed,percentageTime=(elapsed/4e3*100).toFixed(5),timerStyle={width:percentageTime+"%"};return React.createElement("div",{className:"timer-wrap"},React.createElement("div",{style:timerStyle,className:"bar"}),React.createElement("a",{onClick:this.startTimer},"Play again?"))}});exports["default"]=Timer,module.exports=exports["default"];


},{"../actions/actions":271,"../stores/store":281,"react":250,"reflux":251}],277:[function(require,module,exports){
"use strict";function classSet(obj){return Object.keys(obj).filter(function(key){return obj[key]}).join(" ")}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=classSet,module.exports=exports["default"];


},{}],278:[function(require,module,exports){
"use strict";function colors(){return["blue","red","green","orange"]}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=colors,module.exports=exports["default"];


},{}],279:[function(require,module,exports){
"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}Object.defineProperty(exports,"__esModule",{value:!0});var _shuffle=require("./shuffle"),_shuffle2=_interopRequireDefault(_shuffle),_classSet=require("./classSet"),_classSet2=_interopRequireDefault(_classSet),_colors=require("./colors"),_colors2=_interopRequireDefault(_colors);exports["default"]={shuffle:_shuffle2["default"],classSet:_classSet2["default"],colors:_colors2["default"]},module.exports=exports["default"];


},{"./classSet":277,"./colors":278,"./shuffle":280}],280:[function(require,module,exports){
"use strict";function shuffle(array){for(var temporaryValue,randomIndex,currentIndex=array.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),currentIndex-=1,temporaryValue=array[currentIndex],array[currentIndex]=array[randomIndex],array[randomIndex]=temporaryValue;return array}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=shuffle,module.exports=exports["default"];


},{}],281:[function(require,module,exports){
"use strict";var _modules=require("../modules"),React=require("react"),Reflux=require("reflux"),Actions=require("../actions/actions"),Store=Reflux.createStore({listenables:[Actions],init:function(){this.contents={score:0,elapsed:0,start:Date.now()},this._shuffleColors()},_shuffleColors:function(){this.contents.colors=_modules.colors(),this.contents.correctColor=this.contents.colors[Math.floor(Math.random()*this.contents.colors.length)]},getInitialState:function(){return this.contents},onProgressTimer:function(elapsed){this.contents.elapsed=elapsed,this.trigger(this.contents)},onIncorrectAnswer:function(){this._shuffleColors(),this.contents.score=0,this.trigger(this.contents)},onCorrectAnswer:function(){this._shuffleColors(),this.contents.score++,this.trigger(this.contents)}});module.exports=Store;


},{"../actions/actions":271,"../modules":279,"react":250,"reflux":251}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9zcmMvYXBwLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL2xpYi9wb2x5ZmlsbC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuYXJyYXktaW5jbHVkZXMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmFycmF5LW1ldGhvZHMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmFzc2VydC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuYXNzaWduLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5jb2YuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmNvbGxlY3Rpb24tc3Ryb25nLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5jb2xsZWN0aW9uLXRvLWpzb24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmNvbGxlY3Rpb24td2Vhay5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuY29sbGVjdGlvbi5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuY3R4LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5kZWYuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmRvbS1jcmVhdGUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLmVudW0ta2V5cy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuZm9yLW9mLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5mdy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuZ2V0LW5hbWVzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5pbnZva2UuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLml0ZXItY2FsbC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuaXRlci1kZWZpbmUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLml0ZXItZGV0ZWN0LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5pdGVyLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQua2V5b2YuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLm1peC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQub3duLWtleXMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnBhcnRpYWwuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnJlZGVmLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5yZXBsYWNlci5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuc2FtZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuc2V0LXByb3RvLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC5zaGFyZWQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnNwZWNpZXMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnN0cmluZy1hdC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuc3RyaW5nLXBhZC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQuc3RyaW5nLXJlcGVhdC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQudGFzay5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzLyQudGhyb3dzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvJC51aWQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLnVuc2NvcGUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy8kLndrcy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5zdGF0aWNzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zdGF0aWNzLWFjY2VwdC1wcmltaXRpdmVzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnRvLWFycmF5LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZ2V4cC5lc2NhcGUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5scGFkLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5ycGFkLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvanMuYXJyYXkuc3RhdGljcy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvYmFiZWxpZnkvbm9kZV9tb2R1bGVzL2JhYmVsLWNvcmUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9iYWJlbGlmeS9ub2RlX21vZHVsZXMvYmFiZWwtY29yZS9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci9ydW50aW1lLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L25vZGVfbW9kdWxlcy9iYWJlbC1jb3JlL3BvbHlmaWxsLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2JhYmVsaWZ5L3BvbHlmaWxsLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvQXV0b0ZvY3VzTWl4aW4uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NTU1Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL0NhbGxiYWNrUXVldWUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9DbGllbnRSZWFjdFJvb3RJbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9ET01Qcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9EYW5nZXIuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudExpc3RlbmVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9FdmVudFBsdWdpbkh1Yi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Mb2NhbEV2ZW50VHJhcE1peGluLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9PYmplY3QuYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3QuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENsYXNzLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdENvbnRleHQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01CdXR0b24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUZvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSURPcGVyYXRpb25zLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTUlmcmFtZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01JbWcuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NSW5wdXQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NT3B0aW9uLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERPTVNlbGVjdC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01TZWxlY3Rpb24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NVGV4dENvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01UZXh0YXJlYS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVycm9yVXRpbHMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RGcmFnbWVudC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RJbmplY3Rpb24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0SW5zdGFuY2VIYW5kbGVzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEluc3RhbmNlTWFwLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdExpZmVDeWNsZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNb3VudC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RNdWx0aUNoaWxkLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3ROYXRpdmVDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0T3duZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UGVyZi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFB1dExpc3RlbmVyUXVldWUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UmVjb25jaWxlci5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RSZWYuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Um9vdEluZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVRdWV1ZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RVcGRhdGVzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TVkdET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU2VsZWN0RXZlbnRQbHVnaW4uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1NlcnZlclJlYWN0Um9vdEluZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljQ2xpcGJvYXJkRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0RyYWdFdmVudC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvU3ludGhldGljRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1VJRXZlbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1N5bnRoZXRpY1doZWVsRXZlbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL1RyYW5zYWN0aW9uLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9WaWV3cG9ydE1ldHJpY3MuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9hZGxlcjMyLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW1lbGl6ZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY2FtZWxpemVTdHlsZU5hbWUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NvbnRhaW5zTm9kZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlQXJyYXlGcm9tTWl4ZWQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2Rhbmdlcm91c1N0eWxlVmFsdWUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2VtcHR5T2JqZWN0LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZpbmRET01Ob2RlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2ZvY3VzTm9kZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZm9yRWFjaEFjY3VtdWxhdGVkLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudENoYXJDb2RlLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudEtleS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0RXZlbnRNb2RpZmllclN0YXRlLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRFdmVudFRhcmdldC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0TWFya3VwV3JhcC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaHlwaGVuYXRlLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2ludmFyaWFudC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaXNFdmVudFN1cHBvcnRlZC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvaXNOb2RlLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2lzVGV4dE5vZGUuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL2tleU1pcnJvci5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIva2V5T2YuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL21hcE9iamVjdC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvbWVtb2l6ZVN0cmluZ09ubHkuanMiLCJub2RlX21vZHVsZXMvcmVhY3QvbGliL29ubHlDaGlsZC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvcGVyZm9ybWFuY2UuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3BlcmZvcm1hbmNlTm93LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlci5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2V0SW5uZXJIVE1MLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zZXRUZXh0Q29udGVudC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvc2hhbGxvd0VxdWFsLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvdG9BcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9saWIvd2FybmluZy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvaW5kZXguanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVmbHV4L25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvQWN0aW9uTWV0aG9kcy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL0tlZXAuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9MaXN0ZW5lck1ldGhvZHMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9MaXN0ZW5lck1peGluLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvUHVibGlzaGVyTWV0aG9kcy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL1N0b3JlTWV0aG9kcy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2JpbmRNZXRob2RzLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvY29ubmVjdC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2Nvbm5lY3RGaWx0ZXIuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9jcmVhdGVBY3Rpb24uanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9jcmVhdGVTdG9yZS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2luZGV4LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvam9pbnMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvcmVmbHV4L3NyYy9saXN0ZW5Uby5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL2xpc3RlblRvTWFueS5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL25vZGVfbW9kdWxlcy9yZWZsdXgvc3JjL21peGVyLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvbm9kZV9tb2R1bGVzL3JlZmx1eC9zcmMvdXRpbHMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvc3JjL2FjdGlvbnMvYWN0aW9ucy5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL3NyYy9jb21wb25lbnRzL0FwcC5qc3giLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9zcmMvY29tcG9uZW50cy9nYW1lLmpzeCIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL3NyYy9jb21wb25lbnRzL2luZGV4LmpzIiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvc3JjL2NvbXBvbmVudHMvc2NvcmUuanN4IiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvc3JjL2NvbXBvbmVudHMvdGltZXIuanN4IiwiL1VzZXJzL3NpbW9uaG9sbWVzL1NpdGVzL3BlcnNvbmFsL2NvbG9yLXdvcmQvc3JjL21vZHVsZXMvY2xhc3NTZXQuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9zcmMvbW9kdWxlcy9jb2xvcnMuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9zcmMvbW9kdWxlcy9pbmRleC5qcyIsIi9Vc2Vycy9zaW1vbmhvbG1lcy9TaXRlcy9wZXJzb25hbC9jb2xvci13b3JkL3NyYy9tb2R1bGVzL3NodWZmbGUuanMiLCIvVXNlcnMvc2ltb25ob2xtZXMvU2l0ZXMvcGVyc29uYWwvY29sb3Itd29yZC9zcmMvc3RvcmVzL3N0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO3FCQ0NPLHdDQU1hLGVBUHBCLFNBQVEsb0JBRVIsSUFBSSxPQUFRLFFBQVEsUUFHcEIsUUFBTyxNQUFRLE1BSWYsTUFBTSxPQUFPLE1BQUEsY0FBQSxZQUZKLElBQUcsTUFFUyxTQUFTLGNBQWM7O1FBUnJDLGNBQWM7O0FDRHJCLDBC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QUFRLFFBQVEsbUJBRWhCLE1BQVEsTUFBTSxpQ0FFaEIsa0JBQWlCLFdBQ2YsUUFBUSxJQUFJLHFCQUNaLFFBQVEsY0FHVixPQUFNLGNBQ0UsU0FBWSxLQUFLLE1BQWpCLFFBQ0YsZ0JBQWtCLFFBQVcsSUFBUSxLQUFLLFFBQVEsR0FDbEQsWUFDRixNQUFPLGVBQWlCLElBRTFCLE9BQ0UsT0FBQSxxQkFBSyxVQUFVLGNBQ2IsTUFBQSxjQUFBLE9BQUssTUFBTyxXQUFZLFVBQVUsUUFDbEMsTUFBQSxtQkFBRyxRQUFTLEtBQUssa0RBTVY7QUxoQmIsQUNKRixBQ05BLElETUksQUNOQSxHRE1HLEVDTkUsQ0RNQyxFQ05FLENGVUUsRUFBRSxBQ0pELENBQUMsQ0RJRSxFRVZDLENBQUMsT0RNTyxDQUFDLFNDTlMsQ0FBQyxDQUFDO0NGV3RDLENBQUMsQ0FBQyxLR2hCaUIsR0FBRyxZQ09DLFlBQVk7QUZFcEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBRlM3QixBQ0xFLEFHYkYsSUFBSSxHSmtCRyxDQUFDLEFDTEEsQ0diQyxDSGFDLENBQ04sQ0dkUSxBRUFHLEtMY0wsQ0RJUSxBQ0pQLENESVEsQUlsQkEsQ0FBQyxDRUFJLEVIQ1EsRUhpQlAsQUNKUCxDRElRLEFDSlAsQ0dkUSxDQUFDLENBQUMsRUhjTCxBS2RTLENMY1IsQ0FDdEIsRUVkeUMsQ0dBM0MsRU5pQitCLElNakJ4QixRQUFPLEtBQUssS0FBSyxPQUFPLFNBQUEsV0FBTyxLQUFJLE9BQU0sS0FBSywrRUFEOUI7QU5tQnZCLEFDSEMsQUdmRixBQ0RBLElEQ0ksQUNEQSxDTG1CQyxHQ0hHLENJaEJDLENMbUJDLEFDSEYsQUdmRSxFQ0RFLENMbUJDLEFJbEJBLElKa0JJLENBQUMsQ0tuQkMsQ0RDQyxBQ0RBLENMbUJDLEFJbEJBLEVKa0JFLENBQUMsR0tuQkcsQ0pnQmpCLEFJaEJrQixDRENDLEFDREEsQ0RDQyxDQUFDO0FKbUI5QixBQ0hHLEFDTkYsQUVURixBQ0RBLElEQ0ksQUNEQSxJRkFnQixFSG1CVixBS25CQSxDSmlCSixBR2hCSyxDRERhLENIbUJYLEFLbkJBLENEQ0MsTUNETSxDRENDLEFDREEsQ0RDQyxDRlNDLEVBQUEsSUdWTSxDQUFDLENBQUMsR0xtQkcsQ0FBQyxPSWxCTyxDQUFDLENKa0JDLEFJbEJBLEdKa0JHLEdBQUcsTUVUMUIsU0FBUyxFQUFFO0FGVWpDLEFFVEUsQUdWSixJQUFJLEVMbUJFLEVFVEUsR0dWRyxDTG1CQyxFS25CRSxDTG1CQyxFRVRFLENBQUMsQ0ZTQyxDQUFDLENLbkJDLENBQUMsQ0xtQkMsQ0VUQyxDRlNDLEdBQUcsQ0VUQyxJRlNJLEFFVEEsQ0ZTQyxBRVRBLEtBQUssQ0FBQyxFR1ZFLENBQUMsQ0FBQyxFSFVFLEVBQUUsT0FBTyxLQUFLLENBQUM7QUZVM0QsQUVURSxNRlNFLEtFVEssQ0ZTQyxBT3RCRyxHUHNCQSxBRVRBLENBQUMsS0tiUSxHSkVTLElIb0JMLEVBQUUsQ09yQjdCLE1KQzZDLENJRHJDLE9BQVEsTUFBTyxRQUFTLG9GQURUO0FQdUJyQixBSWxCSCxBQ0RBLEdIVUcsQ0VUQyxBQ0RBLEVKZUksR0dkQyxDSmtCQyxDQUFDLEFLbkJBLENEQ0MsRUprQkUsQUtuQkEsQ0xtQkMsQUtuQkEsQ0FBQyxHRENHLENBQUMsQ0VMSSxRQUFRLE1OdUJHLENBQUMsQ0FBQyxBSWxCQSxDQUFDLENBQUM7QUptQnBDLFFHdEJpQixFSHNCVixDQUFDLEVHdEJjLE9Ic0JMLEVBQUUsQ0FBQztBQUNwQixBRVRELEFFTkYsQUVWZSxJRlVYLElGTUksQ0VOQyxBRVZlLENOeUJkLEFFVEYsQ0ZTRyxDSWZDLEtBQUssQUVWZSxDRlVkLEFFVmUsR0FBRyxFQUFFLENOeUJkLENBQUMsR0VUZixDRU5tQixDQUFDLFFKZVEsQ0FBQyxDQUFDO0FLbEJ4QyxBQ05DLEdOeUJFLENLbkJDLElDTkksQ055QkMsQUtuQkEsR0FBRyxFQ05FLENBQUMsSURNSSxBQ05BLENETUMsQUNOQSxHQUFHLENIRVUsQUdGVCxDQUFDLE1BQU0sQ0FBQyxLSEVjLEFFSVQsQ0FBQyxDQUFDLEdDTlAsR0FBRyxnSUVEZiwwRUFDQywyRUFDRix5RUFHbEIsUUFBTyxVQUFBLFdBQ1AsU0FBUSxXQUFBLFdBQ1IsT0FBTSxTQUFBO0FSb0JKLFFDUnVCLENLbEJhLENOMEI3QixDQUFDLENNMUIrQixDQUFDLEdBQUcsQ0ppQlgsQUlqQlksSUppQlIsQUtsQmYsQ0xrQmdCLEVGU2hCLENBQUMsRUVUb0IsQUtsQmYsSVAyQkMsQ0FBQyxDQUFDO0FJZi9CLEFDSEYsRUNSK0MsQ04yQjVDLEFNM0I2QyxDRFE1QyxBQ1I2QyxJSmlCdkMsQUNmVSxBQ1NaLEFFWDZDLENEUTVDLEFDUjZDLENGVzVDLENBQ04sQ0NKUSxBQ1I2QyxDSEVoQyxBR0ZpQyxDSmlCMUMsQUlqQjJDLEdGWWpELEFDSk8sQ0RJTixBQ0pPLE1IU1IsQ0VMUSxDQUFDLEdDSlUsQ0hTYixBR1RjLENESU4sQ0FBQyxDQUN0QjtBSmVELEFPN0JhLENERWQsT0pnQmlCLENLbEJNLEVQNkJiLEdBQUcsQ083QmdCLEdBQUcsRUxrQkgsVUFBWixLRldpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENFWFg7QUVGNUIsQUdmRCxFUDZCQyxDQUFDLENBQUMsSU83QkksQ0FBQyxHRURNLEdGQ0EsRUFBRSxJRURPLENGQ0YsQ0hlQyxDR2ZDLENIZUQsS0toQlMsQ0ZDRCxFQUFFLElFQy9CLElGRHVDLEFFQXhDLENGQXlDLENBQUMsQ0VBVCxZTGVWLElLZjBCLEtMZWpCLEVBQUUsS0tmOUIsYUFBZSxNQUFNLE9BQ2pCLElBQU0sY0FDWCxZQUFjLEtBQUssTUFBTSxLQUFLLFNBQVcsY0FDekMsY0FBZ0IsRUFDaEIsZUFBaUIsTUFBTSxjQUN2QixNQUFNLGNBQWdCLE1BQU0sYUFDNUIsTUFBTSxhQUFlLGNBRXZCLE9BQU8saUZBVGU7QVBtQnBCLEFFRkEsQUNORixDTG9CRCxBTzdCQSxDUDZCQyxDQUFDLEtFWkssQUVGQSxDSEUrRCxHQ0EzRCxHQUFHLEVFRkUsQ0FBQyxDQ05DLEVIUUUsQUdSRixDSFFHLENFRkMsR0ZFRyxDQUFDLENFRkMsSUZFSSxBRUZBLENGRUMsQUVGQSxJRkVJLENBQUMsQUVGQSxDQUFDLEtGRUssQUVGQSxFRkVFLEFFRkEsR0ZFRyxDR1IzQixHRE0rQixFRkVFLENBQUMsRUVGRSxDQUFDLEdGRUcsQ0FBQyxDQUFDLENBQUM7QUFDN0QsQUVGQSxBQ05BLE9KT3dFLENDQ3BFLEdFRkcsQUNOQSxDQUFDLEdETUcsQUNOQSxDRE1DLEFDTkEsTUhRTSxHQUFHLFVHUlUsQ0FBQyxDQUFDLENITDVCLE9BQU8sRUFhaUIsTUFBTSxDQUFDLENBQUM7QUZhekMsQUVaSSxBR1JBLEdETUQsR0hDSyxDRGFELENBQUMsQUVaQSxHR1JHLENBQUMsS0xvQkssQUVaQSxDRllDLEVFWkUsRUdSRSxFTG9CRSxBS3BCQSxDTG9CQyxBS3BCQSxHSk5oQixJQUFJLEVDY3FCLENBQUMsQ0REckIsRUNDd0IsQ0FBQyxHRERuQixFQUFFLElBQUksQ0FBQyxBQ0NzQixLRERqQixBQ0NzQixDRERyQixDQ0N1QixDQUFDLEVBQUUsRUREcEIsQUFBQyxFQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQUFBQyxHQUFFO0dJTjlFLEdKT0ssRURZdUIsZVFqQ1gsS1JpQytCLEFDMUJwQyxDRDBCcUMsSUMxQmhDLENPUFcsQUVJUixHVGlCUixDRFk4QyxDQUFDLEdDWjFDLEVBQUUsSUFBSSxBU3JCdEIsQ1RxQnVCLEtBQUssQVNyQnBCLENUcUJxQixLQUFLLEFBQUMsRUFBQyxBU3JCcEIsT1RxQjJCLEVBQUcsQVNwQjlDLElUb0JrRCxDQUFDLEVTcEIxQyxHVG9CK0MsQ0FBQyxJU3BCeEMsR1RvQitDLEFBQUUsR0FBRSxJU25CcEUsUUFBVSxRQUFRLHNCQUtsQixNQUFRLE9BQU8sYUFDakIsYUFBYyxTQUlkLEtBQUksV0FDRixLQUFLLFVBQ0gsTUFBTyxFQUNQLFFBQVMsRUFDVCxNQUFPLEtBQUssT0FFZCxLQUFLLGtCQUdQLGVBQWMsV0FDWixLQUFLLFNBQVMsT0FBUyxTQWxCbEIsU0FtQkwsS0FBSyxTQUFTLGFBQWUsS0FBSyxTQUFTLE9BQU8sS0FBSyxNQUFNLEtBQUssU0FBVyxLQUFLLFNBQVMsT0FBTyxVQUdwRyxnQkFBZSxXQUNiLE1BQU8sTUFBSyxVQUdkLGdCQUFlLFNBQUMsU0FDZCxLQUFLLFNBQVMsUUFBVSxRQUN4QixLQUFLLFFBQVEsS0FBSyxXQUdwQixrQkFBaUIsV0FDZixLQUFLLGlCQUNMLEtBQUssU0FBUyxNQUFRLEVBQ3RCLEtBQUssUUFBUSxLQUFLLFdBR3BCLGdCQUFlLFdBQ2IsS0FBSyxpQkFDTCxLQUFLLFNBQVMsUUFDZCxLQUFLLFFBQVEsS0FBSyxZQUt0QixRQUFPLFFBQVU7QVIxQlgsQUVGSixDSlk0RCxDQUFDLENBQUMsR0NYeEQsRUdEQSxFRkVFLEFFRkYsV0tyQmdCLEdQdUJBLEdBQUcsQ0RoQkwsQUdjWixBS3JCcUIsSVB1QkMsQ0RoQkwsSUFlWixBQ0NzQixLRERqQixFQUFFLElBQUksQ0FBQyxBQ0NzQixHQUFHLEVERHBCLENBQUMsSUNDMEIsQ0REckIsQUFBQyxBQ0NxQixHRERuQixVQ0NnQyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDOUYsQUVGRixBQ05GLEtKT1UsQ0FDUCxFSVJHLEVBQUEsQ0RPRixFRkVFLFVRckJlLEtMWWIsT0taeUI7QVYrQm5DLEFTbkNlLEdSeUJaLENEVUMsSUtsQk0sQ0lqQmMsS1RtQ1YsQ0tsQkcsQ0lqQmMsQ1RtQ2QsQVNuQ2UsQ0ppQlYsSUFBSSxBSWpCVyxDSmlCVixDSWpCWSxFVG1DbkMsRUtsQjRCLENBQXRCLE9Ma0JJLEFLbEJHLEdMa0JNO0FBQ3RCLEFTbkNBLEFDREQsQ1QwQkMsQ0FBQyxDQUFDLENTMUJDLEVEQ0MsRVRtQ0csQUliRyxDSmFGLEFVcENBLENSeUJHLEVRekJBLEtOdUJRLENKYUYsQVNuQ0QsQ1B3QkksQUVGQSxBTXZCRixDVm9DQyxBVXBDQSxDVm9DQyxBRVhFLEFPeEJILEdEQUMsRU53Qk8sQU94QkgsQ0FBQyxBQ0RDLENBQUMsQ1J5QkUsQVF6QkQsRU51QkksRUt0QkQsQ1B3QkcsRU14QkYsQ053QkssYUFBYSxBQUFDLEVBQUMsT0FBTyxFQUFFLGNBQWMsQUFBQztBRlk1RSxBS25CRyxBS2pCSixJQUFJLEVOdUJJLEFLdkIwQixFVG9DMUIsQUVYRSxBR1JGLENMbUJDLENVcENDLEdBQUcsTVZvQ00sQ1NwQzZCLEFDQTVCLENWb0NDLEFVcENBLENWb0NDLEFLbkJBLEdBQUcsQ0FBQyxBQUFDLEdLakJFLENBQUMsQ0FBQyxFTGlCRyxHQUFHLElBQUksR0FBSSxHQUFHLENBQUEsQ0FBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekQsQUtqQkosQ1ZvQ0MsQ0FBQSxFVXBDRyxFREQ4QyxFSmtCMUMsR0tqQkcsR0FBRyxHREQrQyxDSmtCM0MsQUlsQjZDLEdSMkJoRCxBSVRNLEFLakJBLENBQUMsRVQwQkosa0JTMUJ3QixDQUFDLENBQUM7QUxrQnRDLEFJbEJKLFNBQU8sQ0FBQyxDSmtCQyxFQUFFLEVJbEJFLFlKa0JZLEFJbEJBLEVBQUUsQ0prQkMsR0FBRztBTG9CakMsQVNyQ0ksQUNJSixJQUFJLENMY0MsQ0FBQSxDTG1CRSxDQUFDLENVakNDLENSbUJJLEVRbkJELEdESkcsR0FBRyxBQ0lBLENBQUMsRVZpQ0UsQ0FBQyxBUXRDSCxBQ0NHLENBQUMsS1RxQ0ssQVNyQ0EsQ1RxQ0MsQVNyQ0EsQ0NJQyxDQUFDLENGTEYsQ0NDSSxDQUFDLEtUcUNLLENBQUMsQVNyQ0EsQ1RxQ0MsQ1NyQ0MsR0FBRyxZQUFZLENBQUMsQ0FBQztBVHNDM0QsQUtuQkksQUlsQkEsQUNJRixPVmlDSyxDQUFDLEFJakJXLEdDRGIsQ0RDaUIsQ0FBQyxBTWhCWCxFQUFFLENESkMsQUNJQSxFTmdCYSxDQUFDLENLcEJWLENBQUMsQ0FBQyxDVHFDQyxBVWpDQSxDVmlDQyxBSWpCVyxBTWhCWCxNVmlDTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FTcEN2QyxPTG1Cb0MsV0tuQnRCLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLEtMbUJRLENBQ1AsRUNITSxDSWpCRixDQUFDLEVQb0JVLEtBQUssQUdITCxFQUFDLEVMb0JOLENTckNPLENBQUMsR0FBRyxFVHFDSixHS3BCVyxBSWpCRixDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3pDLEdMb0JELEdDSEssR0lqQkMsQ0FBQyxDUG1CdUIsVU10QmxCLEFDR00sQ0FBQyxHQUFHLFVKaUJaLElJakIwQixDSmlCckIsQUlqQnNCLEVKaUJwQixVQUFVLEFBQUMsRUFBQyxTQUFTLEVBQUMsS0FBSyxHQUFPO0FHbkJyRCxBRU9DLENOZ0JELENBQUMsQ0FBQyxBS3BCQSxHSmlCSyxBS2JGLEVGUEUsQUVPRixDUmMrQixlUWQ1QixNRlBEO0FBQ1AsQUNHQyxBQ0lFLE9SY1MsQ0FDTixBUWZDLENGUEMsQUNHQSxBQ0lBLEtESkssQ0FBQyxFQ0lFLEdBQUcsWUZQWDtBQUNSLEFFT0ssQ0RKTCxJUG1CSSxFQUFFLEFNdEJBLEdIa0JJLENISUEsQVFmQSxDUmVDLENBQUMsQVFmQSxDQUFDLEdMV0ksRUFBRSxFREtMLEVDTFMsQ0FBQyxFREtMLEVJdkJiLE1Ia0I0QixBQUFDO0FLVjlCLENGUEwsWUVPWSxFQUFFLENBQUM7QVJnQlosQVFmRSxPTFM4QyxJSE85QyxBUWhCSyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7S0xVWCxBS1RQLENMVUEsQUtWQztBQUNGLEdMVUQsS0hJUSxBUWRILENBQUMsUVJjVyxFQUFDLElRZEUsRUFBRSxDQUFDLE9SY1M7Q0dIbEMsQ0FBQyxDQUFDLEFLVkEsR1JjSzs7QVFaTixVUllVLE1RWkksRUFBQSxDUllLLEVBQUUsQUdGUixLQUFLLEdIRVcsR0FBRyxZQUFZLEFRWjNCLEdSWThCLEVBQUUsQUFBQztBUVhoRCxRUldrRCxBUVg5QyxDQUFDLEdSV2lELEtRWHpDLENBQUMsTUFBTSxHQUFHLGFBbEJsQixNQUFNLEdBa0JvQixDQUFDO0FBQ2hDLE9SVTRELENRVnhELENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0dBQzVHLEdSVUs7O0FRUk4sVVJRVSxPUVJLLEVSUUksQVFSSixFUlFLLGlCQUFpQixRUVJuQjtBQUNoQixRUk9xQyxHUVA5QixJQUFJLENBQUMsQ1JPa0MsT1FQMUIsQ0FBQztHQUN0QixJUk1xRDtLQUM1QyxDQUNQO0FRTkgsR1JPQyxjUVBjLEVBQUEseUJBQUMsT0FBTyxFQUFFO0FBQ3ZCLENST0gsQ0FBQyxDQUFDLEtRUEssQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUNoQyxRQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUM3QixrQlJPWSxJQUFJOztBUUxqQixtQkFBaUIsRUFBQSw2QkFBRztBQUNsQixRQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDdEIsUUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLFFBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzdCOztBQUVELGlCQUFlLEVBQUEsMkJBQUc7QUFDaEIsUUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3RCLFFBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFHLENBQUM7QUFDdkIsUUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7R0FDN0I7O0NBRUYsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInJlcXVpcmUoJ2JhYmVsaWZ5L3BvbHlmaWxsJyk7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5sZXQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vL05lZWRlZCBmb3IgUmVhY3QgRGV2ZWxvcGVyIFRvb2xzXG53aW5kb3cuUmVhY3QgPSBSZWFjdDtcblxuaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9jb21wb25lbnRzJztcblxuUmVhY3QucmVuZGVyKDxBcHAvPiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W2FwcF0nKSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCl7XG5cInVzZSBzdHJpY3RcIjtpZihyZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpLHJlcXVpcmUoXCJyZWdlbmVyYXRvci9ydW50aW1lXCIpLGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCl0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC9wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO2dsb2JhbC5fYmFiZWxQb2x5ZmlsbD0hMDtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiR2xtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dFkyOXlaUzlzYVdJdmNHOXNlV1pwYkd3dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTEZsQlRVRXNTVUZLUVN4UlFVRlJMR2RDUVVWU0xGRkJRVkVzZFVKQlJVb3NUMEZCVHl4bFFVTlVMRXRCUVUwc1NVRkJTU3hQUVVGTkxHbEVRVVZzUWl4UlFVRlBMR2RDUVVGcFFpSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5KbGNYVnBjbVVvWENKamIzSmxMV3B6TDNOb2FXMWNJaWs3WEc1Y2JuSmxjWFZwY21Vb1hDSnlaV2RsYm1WeVlYUnZjaTl5ZFc1MGFXMWxYQ0lwTzF4dVhHNXBaaUFvWjJ4dlltRnNMbDlpWVdKbGJGQnZiSGxtYVd4c0tTQjdYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW05dWJIa2diMjVsSUdsdWMzUmhibU5sSUc5bUlHSmhZbVZzTDNCdmJIbG1hV3hzSUdseklHRnNiRzkzWldSY0lpazdYRzU5WEc1bmJHOWlZV3d1WDJKaFltVnNVRzlzZVdacGJHd2dQU0IwY25WbE95SmRmUT09IiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciAkID0gcmVxdWlyZSgnLi8kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gJC50b09iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gJC50b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gJC50b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXg7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTsiLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgJCAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjdHggPSByZXF1aXJlKCcuLyQuY3R4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKCR0aGlzKSlcbiAgICAgICwgc2VsZiAgID0gJC5FUzVPYmplY3QoTylcbiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpXG4gICAgICAsIGxlbmd0aCA9ICQudG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gQXJyYXkobGVuZ3RoKSA6IElTX0ZJTFRFUiA/IFtdIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07IiwidmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1zZzEsIG1zZzIpe1xuICBpZighY29uZGl0aW9uKXRocm93IFR5cGVFcnJvcihtc2cyID8gbXNnMSArIG1zZzIgOiBtc2cxKTtcbn1cbmFzc2VydC5kZWYgPSAkLmFzc2VydERlZmluZWQ7XG5hc3NlcnQuZm4gPSBmdW5jdGlvbihpdCl7XG4gIGlmKCEkLmlzRnVuY3Rpb24oaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5hc3NlcnQub2JqID0gZnVuY3Rpb24oaXQpe1xuICBpZighJC5pc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuYXNzZXJ0Lmluc3QgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUpe1xuICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXRocm93IFR5cGVFcnJvcihuYW1lICsgXCI6IHVzZSB0aGUgJ25ldycgb3BlcmF0b3IhXCIpO1xuICByZXR1cm4gaXQ7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7IiwidmFyICQgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vJC5lbnVtLWtleXMnKTtcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXtcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cbiAgdmFyIFQgPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKHRhcmdldCkpXG4gICAgLCBsID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaSA9IDE7XG4gIHdoaWxlKGwgPiBpKXtcbiAgICB2YXIgUyAgICAgID0gJC5FUzVPYmplY3QoYXJndW1lbnRzW2krK10pXG4gICAgICAsIGtleXMgICA9IGVudW1LZXlzKFMpXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGogICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGopVFtrZXkgPSBrZXlzW2orK11dID0gU1trZXldO1xuICB9XG4gIHJldHVybiBUO1xufTsiLCJ2YXIgJCAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIFRBRyAgICAgID0gcmVxdWlyZSgnLi8kLndrcycpKCd0b1N0cmluZ1RhZycpXG4gICwgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcbmZ1bmN0aW9uIGNvZihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59XG5jb2YuY2xhc3NvZiA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQ7XG4gIHJldHVybiBpdCA9PSB1bmRlZmluZWQgPyBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiAnTnVsbCdcbiAgICA6IHR5cGVvZiAoVCA9IChPID0gT2JqZWN0KGl0KSlbVEFHXSkgPT0gJ3N0cmluZycgPyBUIDogY29mKE8pO1xufTtcbmNvZi5zZXQgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgISQuaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSQuaGlkZShpdCwgVEFHLCB0YWcpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gY29mOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3R4ICAgICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCBzYWZlICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlXG4gICwgYXNzZXJ0ICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBmb3JPZiAgICA9IHJlcXVpcmUoJy4vJC5mb3Itb2YnKVxuICAsIHN0ZXAgICAgID0gcmVxdWlyZSgnLi8kLml0ZXInKS5zdGVwXG4gICwgJGhhcyAgICAgPSAkLmhhc1xuICAsIHNldCAgICAgID0gJC5zZXRcbiAgLCBpc09iamVjdCA9ICQuaXNPYmplY3RcbiAgLCBoaWRlICAgICA9ICQuaGlkZVxuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgaXNPYmplY3RcbiAgLCBJRCAgICAgICA9IHNhZmUoJ2lkJylcbiAgLCBPMSAgICAgICA9IHNhZmUoJ08xJylcbiAgLCBMQVNUICAgICA9IHNhZmUoJ2xhc3QnKVxuICAsIEZJUlNUICAgID0gc2FmZSgnZmlyc3QnKVxuICAsIElURVIgICAgID0gc2FmZSgnaXRlcicpXG4gICwgU0laRSAgICAgPSAkLkRFU0MgPyBzYWZlKCdzaXplJykgOiAnc2l6ZSdcbiAgLCBpZCAgICAgICA9IDA7XG5cbmZ1bmN0aW9uIGZhc3RLZXkoaXQsIGNyZWF0ZSl7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZighJGhhcyhpdCwgSUQpKXtcbiAgICAvLyBjYW4ndCBzZXQgaWQgdG8gZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgaWRcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3Npbmcgb2JqZWN0IGlkXG4gICAgaGlkZShpdCwgSUQsICsraWQpO1xuICAvLyByZXR1cm4gb2JqZWN0IGlkIHdpdGggcHJlZml4XG4gIH0gcmV0dXJuICdPJyArIGl0W0lEXTtcbn1cblxuZnVuY3Rpb24gZ2V0RW50cnkodGhhdCwga2V5KXtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KSwgZW50cnk7XG4gIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXRbTzFdW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXRbRklSU1RdOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYXNzZXJ0Lmluc3QodGhhdCwgQywgTkFNRSk7XG4gICAgICBzZXQodGhhdCwgTzEsICQuY3JlYXRlKG51bGwpKTtcbiAgICAgIHNldCh0aGF0LCBTSVpFLCAwKTtcbiAgICAgIHNldCh0aGF0LCBMQVNULCB1bmRlZmluZWQpO1xuICAgICAgc2V0KHRoYXQsIEZJUlNULCB1bmRlZmluZWQpO1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZXF1aXJlKCcuLyQubWl4JykoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXRbTzFdLCBlbnRyeSA9IHRoYXRbRklSU1RdOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdFtGSVJTVF0gPSB0aGF0W0xBU1RdID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXRbTzFdW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZihuZXh0KW5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYodGhhdFtGSVJTVF0gPT0gZW50cnkpdGhhdFtGSVJTVF0gPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXRbTEFTVF0gPT0gZW50cnkpdGhhdFtMQVNUXSA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0sIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzW0ZJUlNUXSl7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZigkLkRFU0MpJC5zZXREZXNjKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGFzc2VydC5kZWYodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0W0xBU1RdID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdFtMQVNUXSwgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdFtGSVJTVF0pdGhhdFtGSVJTVF0gPSBlbnRyeTtcbiAgICAgIGlmKHByZXYpcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmKGluZGV4ICE9PSAnRicpdGhhdFtPMV1baW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICBzZXRJdGVyOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIHJlcXVpcmUoJy4vJC5pdGVyLWRlZmluZScpKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHNldCh0aGlzLCBJVEVSLCB7bzogaXRlcmF0ZWQsIGs6IGtpbmR9KTtcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIGl0ZXIgID0gdGhpc1tJVEVSXVxuICAgICAgICAsIGtpbmQgID0gaXRlci5rXG4gICAgICAgICwgZW50cnkgPSBpdGVyLmw7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCFpdGVyLm8gfHwgIShpdGVyLmwgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IGl0ZXIub1tGSVJTVF0pKXtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgaXRlci5vID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuICB9XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGZvck9mID0gcmVxdWlyZSgnLi8kLmZvci1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcbiAgJGRlZigkZGVmLlAsIE5BTUUsIHtcbiAgICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpe1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgZm9yT2YodGhpcywgZmFsc2UsIGFyci5wdXNoLCBhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gIH0pO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBzYWZlICAgICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZVxuICAsIGFzc2VydCAgICA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKVxuICAsIGZvck9mICAgICA9IHJlcXVpcmUoJy4vJC5mb3Itb2YnKVxuICAsICRoYXMgICAgICA9ICQuaGFzXG4gICwgaXNPYmplY3QgID0gJC5pc09iamVjdFxuICAsIGhpZGUgICAgICA9ICQuaGlkZVxuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgaXNPYmplY3RcbiAgLCBpZCAgICAgICAgPSAwXG4gICwgSUQgICAgICAgID0gc2FmZSgnaWQnKVxuICAsIFdFQUsgICAgICA9IHNhZmUoJ3dlYWsnKVxuICAsIExFQUsgICAgICA9IHNhZmUoJ2xlYWsnKVxuICAsIG1ldGhvZCAgICA9IHJlcXVpcmUoJy4vJC5hcnJheS1tZXRob2RzJylcbiAgLCBmaW5kICAgICAgPSBtZXRob2QoNSlcbiAgLCBmaW5kSW5kZXggPSBtZXRob2QoNik7XG5mdW5jdGlvbiBmaW5kRnJvemVuKHN0b3JlLCBrZXkpe1xuICByZXR1cm4gZmluZChzdG9yZS5hcnJheSwgZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn1cbi8vIGZhbGxiYWNrIGZvciBmcm96ZW4ga2V5c1xuZnVuY3Rpb24gbGVha1N0b3JlKHRoYXQpe1xuICByZXR1cm4gdGhhdFtMRUFLXSB8fCBoaWRlKHRoYXQsIExFQUssIHtcbiAgICBhcnJheTogW10sXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpe1xuICAgICAgdmFyIGVudHJ5ID0gZmluZEZyb3plbih0aGlzLCBrZXkpO1xuICAgICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbihrZXkpe1xuICAgICAgcmV0dXJuICEhZmluZEZyb3plbih0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIHZhciBlbnRyeSA9IGZpbmRGcm96ZW4odGhpcywga2V5KTtcbiAgICAgIGlmKGVudHJ5KWVudHJ5WzFdID0gdmFsdWU7XG4gICAgICBlbHNlIHRoaXMuYXJyYXkucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgIH0sXG4gICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXgodGhpcy5hcnJheSwgZnVuY3Rpb24oaXQpe1xuICAgICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICAgIH0pO1xuICAgICAgaWYofmluZGV4KXRoaXMuYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHJldHVybiAhIX5pbmRleDtcbiAgICB9XG4gIH0pW0xFQUtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7XG4gICAgICAkLnNldChhc3NlcnQuaW5zdCh0aGF0LCBDLCBOQU1FKSwgSUQsIGlkKyspO1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZXF1aXJlKCcuLyQubWl4JykoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZighaXNFeHRlbnNpYmxlKGtleSkpcmV0dXJuIGxlYWtTdG9yZSh0aGlzKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuICRoYXMoa2V5LCBXRUFLKSAmJiAkaGFzKGtleVtXRUFLXSwgdGhpc1tJRF0pICYmIGRlbGV0ZSBrZXlbV0VBS11bdGhpc1tJRF1dO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmKCFpc0V4dGVuc2libGUoa2V5KSlyZXR1cm4gbGVha1N0b3JlKHRoaXMpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gJGhhcyhrZXksIFdFQUspICYmICRoYXMoa2V5W1dFQUtdLCB0aGlzW0lEXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShhc3NlcnQub2JqKGtleSkpKXtcbiAgICAgIGxlYWtTdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRoYXMoa2V5LCBXRUFLKSB8fCBoaWRlKGtleSwgV0VBSywge30pO1xuICAgICAga2V5W1dFQUtdW3RoYXRbSURdXSA9IHZhbHVlO1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGxlYWtTdG9yZTogbGVha1N0b3JlLFxuICBXRUFLOiBXRUFLLFxuICBJRDogSURcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIEJVR0dZID0gcmVxdWlyZSgnLi8kLml0ZXInKS5CVUdHWVxuICAsIGZvck9mID0gcmVxdWlyZSgnLi8kLmZvci1vZicpXG4gICwgc3BlY2llcyA9IHJlcXVpcmUoJy4vJC5zcGVjaWVzJylcbiAgLCBhc3NlcnRJbnN0YW5jZSA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5pbnN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKXtcbiAgdmFyIEJhc2UgID0gJC5nW05BTUVdXG4gICAgLCBDICAgICA9IEJhc2VcbiAgICAsIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJ1xuICAgICwgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlXG4gICAgLCBPICAgICA9IHt9O1xuICBmdW5jdGlvbiBmaXhNZXRob2QoS0VZKXtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlcXVpcmUoJy4vJC5yZWRlZicpKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbihhKXsgcmV0dXJuIGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgfVxuICAgICAgOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSl7IHJldHVybiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IH1cbiAgICAgIDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpeyByZXR1cm4gZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyB9XG4gICAgICA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYil7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9XG4gIGlmKCEkLmlzRnVuY3Rpb24oQykgfHwgIShJU19XRUFLIHx8ICFCVUdHWSAmJiBwcm90by5mb3JFYWNoICYmIHByb3RvLmVudHJpZXMpKXtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVxdWlyZSgnLi8kLm1peCcpKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdCAgPSBuZXcgQ1xuICAgICAgLCBjaGFpbiA9IGluc3RbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKVxuICAgICAgLCBidWdneVplcm87XG4gICAgLy8gd3JhcCBmb3IgaW5pdCBjb2xsZWN0aW9ucyBmcm9tIGl0ZXJhYmxlXG4gICAgaWYoIXJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSl7XG4gICAgICAgIGFzc2VydEluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gbmV3IEJhc2U7XG4gICAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBJU19XRUFLIHx8IGluc3QuZm9yRWFjaChmdW5jdGlvbih2YWwsIGtleSl7XG4gICAgICBidWdneVplcm8gPSAxIC8ga2V5ID09PSAtSW5maW5pdHk7XG4gICAgfSk7XG4gICAgLy8gZml4IGNvbnZlcnRpbmcgLTAga2V5IHRvICswXG4gICAgaWYoYnVnZ3laZXJvKXtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIC8vICsgZml4IC5hZGQgJiAuc2V0IGZvciBjaGFpbmluZ1xuICAgIGlmKGJ1Z2d5WmVybyB8fCBjaGFpbiAhPT0gaW5zdClmaXhNZXRob2QoQURERVIpO1xuICB9XG5cbiAgcmVxdWlyZSgnLi8kLmNvZicpLnNldChDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGRlZigkZGVmLkcgKyAkZGVmLlcgKyAkZGVmLkYgKiAoQyAhPSBCYXNlKSwgTyk7XG4gIHNwZWNpZXMoQyk7XG4gIHNwZWNpZXMoJC5jb3JlW05BTUVdKTsgLy8gZm9yIHdyYXBwZXJcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0SXRlcihDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTsiLCIvLyBPcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhc3NlcnRGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5mbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG4gIGFzc2VydEZ1bmN0aW9uKGZuKTtcbiAgaWYofmxlbmd0aCAmJiB0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfSByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgICB9O1xufTsiLCJ2YXIgJCAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgZ2xvYmFsICAgICA9ICQuZ1xuICAsIGNvcmUgICAgICAgPSAkLmNvcmVcbiAgLCBpc0Z1bmN0aW9uID0gJC5pc0Z1bmN0aW9uXG4gICwgJHJlZGVmICAgICA9IHJlcXVpcmUoJy4vJC5yZWRlZicpO1xuZnVuY3Rpb24gY3R4KGZuLCB0aGF0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGRlZi5GID0gMTsgIC8vIGZvcmNlZFxuJGRlZi5HID0gMjsgIC8vIGdsb2JhbFxuJGRlZi5TID0gNDsgIC8vIHN0YXRpY1xuJGRlZi5QID0gODsgIC8vIHByb3RvXG4kZGVmLkIgPSAxNjsgLy8gYmluZFxuJGRlZi5XID0gMzI7IC8vIHdyYXBcbmZ1bmN0aW9uICRkZWYodHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cFxuICAgICwgaXNHbG9iYWwgPSB0eXBlICYgJGRlZi5HXG4gICAgLCBpc1Byb3RvICA9IHR5cGUgJiAkZGVmLlBcbiAgICAsIHRhcmdldCAgID0gaXNHbG9iYWwgPyBnbG9iYWwgOiB0eXBlICYgJGRlZi5TXG4gICAgICAgID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSkucHJvdG90eXBlXG4gICAgLCBleHBvcnRzICA9IGlzR2xvYmFsID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIGlmKGlzR2xvYmFsKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhKHR5cGUgJiAkZGVmLkYpICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGlmKHR5cGUgJiAkZGVmLkIgJiYgb3duKWV4cCA9IGN0eChvdXQsIGdsb2JhbCk7XG4gICAgZWxzZSBleHAgPSBpc1Byb3RvICYmIGlzRnVuY3Rpb24ob3V0KSA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZih0YXJnZXQgJiYgIW93bikkcmVkZWYodGFyZ2V0LCBrZXksIG91dCk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYoZXhwb3J0c1trZXldICE9IG91dCkkLmhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmKGlzUHJvdG8pKGV4cG9ydHMucHJvdG90eXBlIHx8IChleHBvcnRzLnByb3RvdHlwZSA9IHt9KSlba2V5XSA9IG91dDtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSAkZGVmOyIsInZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgZG9jdW1lbnQgPSAkLmcuZG9jdW1lbnRcbiAgLCBpc09iamVjdCA9ICQuaXNPYmplY3RcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07IiwidmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIga2V5cyAgICAgICA9ICQuZ2V0S2V5cyhpdClcbiAgICAsIGdldERlc2MgICAgPSAkLmdldERlc2NcbiAgICAsIGdldFN5bWJvbHMgPSAkLmdldFN5bWJvbHM7XG4gIGlmKGdldFN5bWJvbHMpJC5lYWNoLmNhbGwoZ2V0U3ltYm9scyhpdCksIGZ1bmN0aW9uKGtleSl7XG4gICAgaWYoZ2V0RGVzYyhpdCwga2V5KS5lbnVtZXJhYmxlKWtleXMucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59OyIsInZhciBjdHggID0gcmVxdWlyZSgnLi8kLmN0eCcpXG4gICwgZ2V0ICA9IHJlcXVpcmUoJy4vJC5pdGVyJykuZ2V0XG4gICwgY2FsbCA9IHJlcXVpcmUoJy4vJC5pdGVyLWNhbGwnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0KXtcbiAgdmFyIGl0ZXJhdG9yID0gZ2V0KGl0ZXJhYmxlKVxuICAgICwgZiAgICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSlcbiAgICAsIHN0ZXA7XG4gIHdoaWxlKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSl7XG4gICAgaWYoY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcykgPT09IGZhbHNlKXtcbiAgICAgIHJldHVybiBjYWxsLmNsb3NlKGl0ZXJhdG9yKTtcbiAgICB9XG4gIH1cbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigkKXtcbiAgJC5GVyAgID0gdHJ1ZTtcbiAgJC5wYXRoID0gJC5nO1xuICByZXR1cm4gJDtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xyXG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpXHJcbiAgLCB0b1N0cmluZyA9IHt9LnRvU3RyaW5nXHJcbiAgLCBnZXROYW1lcyA9ICQuZ2V0TmFtZXM7XHJcblxyXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXHJcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XHJcblxyXG5mdW5jdGlvbiBnZXRXaW5kb3dOYW1lcyhpdCl7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBnZXROYW1lcyhpdCk7XHJcbiAgfSBjYXRjaChlKXtcclxuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XHJcbiAgaWYod2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScpcmV0dXJuIGdldFdpbmRvd05hbWVzKGl0KTtcclxuICByZXR1cm4gZ2V0TmFtZXMoJC50b09iamVjdChpdCkpO1xyXG59OyIsIi8vIEZhc3QgYXBwbHlcbi8vIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICBjYXNlIDU6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsInZhciBhc3NlcnRPYmplY3QgPSByZXF1aXJlKCcuLyQuYXNzZXJ0Jykub2JqO1xuZnVuY3Rpb24gY2xvc2UoaXRlcmF0b3Ipe1xuICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICBpZihyZXQgIT09IHVuZGVmaW5lZClhc3NlcnRPYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbn1cbmZ1bmN0aW9uIGNhbGwoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhc3NlcnRPYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIH0gY2F0Y2goZSl7XG4gICAgY2xvc2UoaXRlcmF0b3IpO1xuICAgIHRocm93IGU7XG4gIH1cbn1cbmNhbGwuY2xvc2UgPSBjbG9zZTtcbm1vZHVsZS5leHBvcnRzID0gY2FsbDsiLCJ2YXIgJGRlZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJHJlZGVmICAgICAgICAgID0gcmVxdWlyZSgnLi8kLnJlZGVmJylcbiAgLCAkICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNvZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRpdGVyICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyJylcbiAgLCBTWU1CT0xfSVRFUkFUT1IgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBGRl9JVEVSQVRPUiAgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICAgPSAndmFsdWVzJ1xuICAsIEl0ZXJhdG9ycyAgICAgICA9ICRpdGVyLkl0ZXJhdG9ycztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0Upe1xuICAkaXRlci5jcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICBmdW5jdGlvbiBjcmVhdGVNZXRob2Qoa2luZCl7XG4gICAgZnVuY3Rpb24gJCQodGhhdCl7XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoYXQsIGtpbmQpO1xuICAgIH1cbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiAkJCh0aGlzKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkJCh0aGlzKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiAkJCh0aGlzKTsgfTtcbiAgfVxuICB2YXIgVEFHICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIHByb3RvICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsIF9uYXRpdmUgID0gcHJvdG9bU1lNQk9MX0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgX2RlZmF1bHQgPSBfbmF0aXZlIHx8IGNyZWF0ZU1ldGhvZChERUZBVUxUKVxuICAgICwgbWV0aG9kcywga2V5O1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKF9uYXRpdmUpe1xuICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9ICQuZ2V0UHJvdG8oX2RlZmF1bHQuY2FsbChuZXcgQmFzZSkpO1xuICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICBjb2Yuc2V0KEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgIC8vIEZGIGZpeFxuICAgIGlmKCQuRlcgJiYgJC5oYXMocHJvdG8sIEZGX0lURVJBVE9SKSkkaXRlci5zZXQoSXRlcmF0b3JQcm90b3R5cGUsICQudGhhdCk7XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCQuRlcgfHwgRk9SQ0UpJGl0ZXIuc2V0KHByb3RvLCBfZGVmYXVsdCk7XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gX2RlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9ICQudGhhdDtcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgICAgICAgID8gX2RlZmF1bHQgOiBjcmVhdGVNZXRob2QoS0VZUyksXG4gICAgICB2YWx1ZXM6ICBERUZBVUxUID09IFZBTFVFUyA/IF9kZWZhdWx0IDogY3JlYXRlTWV0aG9kKFZBTFVFUyksXG4gICAgICBlbnRyaWVzOiBERUZBVUxUICE9IFZBTFVFUyA/IF9kZWZhdWx0IDogY3JlYXRlTWV0aG9kKCdlbnRyaWVzJylcbiAgICB9O1xuICAgIGlmKEZPUkNFKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpJHJlZGVmKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRkZWYoJGRlZi5QICsgJGRlZi5GICogJGl0ZXIuQlVHR1ksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG59OyIsInZhciBTWU1CT0xfSVRFUkFUT1IgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgICAgPSBmYWxzZTtcbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtTWU1CT0xfSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xufSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgaWYoIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltTWU1CT0xfSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgc2FmZSA9IHRydWU7IH07XG4gICAgYXJyW1NZTUJPTF9JVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY29mICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCBjbGFzc29mICAgICAgICAgICA9IGNvZi5jbGFzc29mXG4gICwgYXNzZXJ0ICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBhc3NlcnRPYmplY3QgICAgICA9IGFzc2VydC5vYmpcbiAgLCBTWU1CT0xfSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKVxuICAsIEZGX0lURVJBVE9SICAgICAgID0gJ0BAaXRlcmF0b3InXG4gICwgSXRlcmF0b3JzICAgICAgICAgPSByZXF1aXJlKCcuLyQuc2hhcmVkJykoJ2l0ZXJhdG9ycycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5zZXRJdGVyYXRvcihJdGVyYXRvclByb3RvdHlwZSwgJC50aGF0KTtcbmZ1bmN0aW9uIHNldEl0ZXJhdG9yKE8sIHZhbHVlKXtcbiAgJC5oaWRlKE8sIFNZTUJPTF9JVEVSQVRPUiwgdmFsdWUpO1xuICAvLyBBZGQgaXRlcmF0b3IgZm9yIEZGIGl0ZXJhdG9yIHByb3RvY29sXG4gIGlmKEZGX0lURVJBVE9SIGluIFtdKSQuaGlkZShPLCBGRl9JVEVSQVRPUiwgdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBCVUdHWTogJ2tleXMnIGluIFtdICYmICEoJ25leHQnIGluIFtdLmtleXMoKSksXG4gIEl0ZXJhdG9yczogSXRlcmF0b3JzLFxuICBzdGVwOiBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG4gICAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG4gIH0sXG4gIGlzOiBmdW5jdGlvbihpdCl7XG4gICAgdmFyIE8gICAgICA9IE9iamVjdChpdClcbiAgICAgICwgU3ltYm9sID0gJC5nLlN5bWJvbDtcbiAgICByZXR1cm4gKFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3IgfHwgRkZfSVRFUkFUT1IpIGluIE9cbiAgICAgIHx8IFNZTUJPTF9JVEVSQVRPUiBpbiBPXG4gICAgICB8fCAkLmhhcyhJdGVyYXRvcnMsIGNsYXNzb2YoTykpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgU3ltYm9sID0gJC5nLlN5bWJvbFxuICAgICAgLCBnZXRJdGVyO1xuICAgIGlmKGl0ICE9IHVuZGVmaW5lZCl7XG4gICAgICBnZXRJdGVyID0gaXRbU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvciB8fCBGRl9JVEVSQVRPUl1cbiAgICAgICAgfHwgaXRbU1lNQk9MX0lURVJBVE9SXVxuICAgICAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xuICAgIH1cbiAgICBhc3NlcnQoJC5pc0Z1bmN0aW9uKGdldEl0ZXIpLCBpdCwgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gICAgcmV0dXJuIGFzc2VydE9iamVjdChnZXRJdGVyLmNhbGwoaXQpKTtcbiAgfSxcbiAgc2V0OiBzZXRJdGVyYXRvcixcbiAgY3JlYXRlOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgcHJvdG8pe1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQuY3JlYXRlKHByb3RvIHx8IEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogJC5kZXNjKDEsIG5leHQpfSk7XG4gICAgY29mLnNldChDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKVxuICAsIGNvcmUgICA9IHt9XG4gICwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgLCBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5XG4gICwgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3JcbiAgLCBtYXggICA9IE1hdGgubWF4XG4gICwgbWluICAgPSBNYXRoLm1pbjtcbi8vIFRoZSBlbmdpbmUgd29ya3MgZmluZSB3aXRoIGRlc2NyaXB0b3JzPyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5LlxudmFyIERFU0MgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiAyOyB9fSkuYSA9PSAyO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59KCk7XG52YXIgaGlkZSA9IGNyZWF0ZURlZmluZXIoMSk7XG4vLyA3LjEuNCBUb0ludGVnZXJcbmZ1bmN0aW9uIHRvSW50ZWdlcihpdCl7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufVxuZnVuY3Rpb24gZGVzYyhiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59XG5mdW5jdGlvbiBzaW1wbGVTZXQob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlZmluZXIoYml0bWFwKXtcbiAgcmV0dXJuIERFU0MgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICAgIHJldHVybiAkLnNldERlc2Mob2JqZWN0LCBrZXksIGRlc2MoYml0bWFwLCB2YWx1ZSkpO1xuICB9IDogc2ltcGxlU2V0O1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChpdCl7XG4gIHJldHVybiBpdCAhPT0gbnVsbCAmJiAodHlwZW9mIGl0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBpdCA9PSAnZnVuY3Rpb24nKTtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhc3NlcnREZWZpbmVkKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufVxuXG52YXIgJCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmZ3Jykoe1xuICBnOiBnbG9iYWwsXG4gIGNvcmU6IGNvcmUsXG4gIGh0bWw6IGdsb2JhbC5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2NvcmUtanMtaXNvYmplY3RcbiAgaXNPYmplY3Q6ICAgaXNPYmplY3QsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIHRoYXQ6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8vIDcuMS40IFRvSW50ZWdlclxuICB0b0ludGVnZXI6IHRvSW50ZWdlcixcbiAgLy8gNy4xLjE1IFRvTGVuZ3RoXG4gIHRvTGVuZ3RoOiBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbiAgfSxcbiAgdG9JbmRleDogZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gICAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICAgIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xuICB9LFxuICBjcmVhdGU6ICAgICBPYmplY3QuY3JlYXRlLFxuICBnZXRQcm90bzogICBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gIERFU0M6ICAgICAgIERFU0MsXG4gIGRlc2M6ICAgICAgIGRlc2MsXG4gIGdldERlc2M6ICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIHNldERlc2M6ICAgIGRlZmluZVByb3BlcnR5LFxuICBzZXREZXNjczogICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyxcbiAgZ2V0S2V5czogICAgT2JqZWN0LmtleXMsXG4gIGdldE5hbWVzOiAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICBnZXRTeW1ib2xzOiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICBhc3NlcnREZWZpbmVkOiBhc3NlcnREZWZpbmVkLFxuICAvLyBEdW1teSwgZml4IGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5nIGluIGVzNSBtb2R1bGVcbiAgRVM1T2JqZWN0OiBPYmplY3QsXG4gIHRvT2JqZWN0OiBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuICQuRVM1T2JqZWN0KGFzc2VydERlZmluZWQoaXQpKTtcbiAgfSxcbiAgaGlkZTogaGlkZSxcbiAgZGVmOiBjcmVhdGVEZWZpbmVyKDApLFxuICBzZXQ6IGdsb2JhbC5TeW1ib2wgPyBzaW1wbGVTZXQgOiBoaWRlLFxuICBlYWNoOiBbXS5mb3JFYWNoXG59KTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5pZih0eXBlb2YgX19lICE9ICd1bmRlZmluZWQnKV9fZSA9IGNvcmU7XG5pZih0eXBlb2YgX19nICE9ICd1bmRlZmluZWQnKV9fZyA9IGdsb2JhbDsiLCJ2YXIgJCA9IHJlcXVpcmUoJy4vJCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9ICQudG9PYmplY3Qob2JqZWN0KVxuICAgICwga2V5cyAgID0gJC5nZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTsiLCJ2YXIgJHJlZGVmID0gcmVxdWlyZSgnLi8kLnJlZGVmJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMpe1xyXG4gIGZvcih2YXIga2V5IGluIHNyYykkcmVkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcclxuICByZXR1cm4gdGFyZ2V0O1xyXG59OyIsInZhciAkICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGFzc2VydE9iamVjdCA9IHJlcXVpcmUoJy4vJC5hc3NlcnQnKS5vYmo7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG93bktleXMoaXQpe1xuICBhc3NlcnRPYmplY3QoaXQpO1xuICB2YXIga2V5cyAgICAgICA9ICQuZ2V0TmFtZXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gJC5nZXRTeW1ib2xzO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGludm9rZSA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKVxuICAsIGFzc2VydEZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpLmZuO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigvKiAuLi5wYXJncyAqLyl7XG4gIHZhciBmbiAgICAgPSBhc3NlcnRGdW5jdGlvbih0aGlzKVxuICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKVxuICAgICwgaSAgICAgID0gMFxuICAgICwgXyAgICAgID0gJC5wYXRoLl9cbiAgICAsIGhvbGRlciA9IGZhbHNlO1xuICB3aGlsZShsZW5ndGggPiBpKWlmKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXylob2xkZXIgPSB0cnVlO1xuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgdmFyIHRoYXQgICAgPSB0aGlzXG4gICAgICAsIF9sZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGogPSAwLCBrID0gMCwgYXJncztcbiAgICBpZighaG9sZGVyICYmICFfbGVuZ3RoKXJldHVybiBpbnZva2UoZm4sIHBhcmdzLCB0aGF0KTtcbiAgICBhcmdzID0gcGFyZ3Muc2xpY2UoKTtcbiAgICBpZihob2xkZXIpZm9yKDtsZW5ndGggPiBqOyBqKyspaWYoYXJnc1tqXSA9PT0gXylhcmdzW2pdID0gYXJndW1lbnRzW2srK107XG4gICAgd2hpbGUoX2xlbmd0aCA+IGspYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07IiwidmFyICQgICA9IHJlcXVpcmUoJy4vJCcpXHJcbiAgLCB0cGwgPSBTdHJpbmcoe30uaGFzT3duUHJvcGVydHkpXHJcbiAgLCBTUkMgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZSgnc3JjJylcclxuICAsIF90b1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xyXG5cclxuZnVuY3Rpb24gJHJlZGVmKE8sIGtleSwgdmFsLCBzYWZlKXtcclxuICBpZigkLmlzRnVuY3Rpb24odmFsKSl7XHJcbiAgICB2YXIgYmFzZSA9IE9ba2V5XTtcclxuICAgICQuaGlkZSh2YWwsIFNSQywgYmFzZSA/IFN0cmluZyhiYXNlKSA6IHRwbC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eS8sIFN0cmluZyhrZXkpKSk7XHJcbiAgICBpZighKCduYW1lJyBpbiB2YWwpKXZhbC5uYW1lID0ga2V5O1xyXG4gIH1cclxuICBpZihPID09PSAkLmcpe1xyXG4gICAgT1trZXldID0gdmFsO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZighc2FmZSlkZWxldGUgT1trZXldO1xyXG4gICAgJC5oaWRlKE8sIGtleSwgdmFsKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzXHJcbi8vIHdpdGggbWV0aG9kcyBzaW1pbGFyIHRvIExvRGFzaCBpc05hdGl2ZVxyXG4kcmVkZWYoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xyXG4gIHJldHVybiAkLmhhcyh0aGlzLCBTUkMpID8gdGhpc1tTUkNdIDogX3RvU3RyaW5nLmNhbGwodGhpcyk7XHJcbn0pO1xyXG5cclxuJC5jb3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbihpdCl7XHJcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKGl0KTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gJHJlZGVmOyIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlLCBpc1N0YXRpYyl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGlzU3RhdGljID8gaXQgOiB0aGlzKS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXtcclxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcclxufTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBhc3NlcnQgPSByZXF1aXJlKCcuLyQuYXNzZXJ0Jyk7XG5mdW5jdGlvbiBjaGVjayhPLCBwcm90byl7XG4gIGFzc2VydC5vYmooTyk7XG4gIGFzc2VydChwcm90byA9PT0gbnVsbCB8fCAkLmlzT2JqZWN0KHByb3RvKSwgcHJvdG8sIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgID8gZnVuY3Rpb24oYnVnZ3ksIHNldCl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi8kLmN0eCcpKEZ1bmN0aW9uLmNhbGwsICQuZ2V0RGVzYyhPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgICBzZXQoe30sIFtdKTtcbiAgICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICAgIHJldHVybiBPO1xuICAgICAgICB9O1xuICAgICAgfSgpXG4gICAgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07IiwidmFyICQgICAgICA9IHJlcXVpcmUoJy4vJCcpXHJcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xyXG4gICwgc3RvcmUgID0gJC5nW1NIQVJFRF0gfHwgKCQuZ1tTSEFSRURdID0ge30pO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XHJcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XHJcbn07IiwidmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIFNQRUNJRVMgPSByZXF1aXJlKCcuLyQud2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQyl7XG4gIGlmKCQuREVTQyAmJiAhKFNQRUNJRVMgaW4gQykpJC5zZXREZXNjKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiAkLnRoYXRcbiAgfSk7XG59OyIsIi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZygkLmFzc2VydERlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSAkLnRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsXG4gICAgICB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59OyIsIi8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPXN0cmF3bWFuOnN0cmluZ19wYWRkaW5nXG52YXIgJCAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCByZXBlYXQgPSByZXF1aXJlKCcuLyQuc3RyaW5nLXJlcGVhdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIG1pbkxlbmd0aCwgZmlsbENoYXIsIGxlZnQpe1xuICAvLyAxLiBMZXQgTyBiZSBDaGVja09iamVjdENvZXJjaWJsZSh0aGlzIHZhbHVlKS5cbiAgLy8gMi4gTGV0IFMgYmUgVG9TdHJpbmcoTykuXG4gIHZhciBTID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGF0KSk7XG4gIC8vIDQuIElmIGludE1pbkxlbmd0aCBpcyB1bmRlZmluZWQsIHJldHVybiBTLlxuICBpZihtaW5MZW5ndGggPT09IHVuZGVmaW5lZClyZXR1cm4gUztcbiAgLy8gNC4gTGV0IGludE1pbkxlbmd0aCBiZSBUb0ludGVnZXIobWluTGVuZ3RoKS5cbiAgdmFyIGludE1pbkxlbmd0aCA9ICQudG9JbnRlZ2VyKG1pbkxlbmd0aCk7XG4gIC8vIDUuIExldCBmaWxsTGVuIGJlIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBpbiBTIG1pbnVzIGludE1pbkxlbmd0aC5cbiAgdmFyIGZpbGxMZW4gPSBpbnRNaW5MZW5ndGggLSBTLmxlbmd0aDtcbiAgLy8gNi4gSWYgZmlsbExlbiA8IDAsIHRoZW4gdGhyb3cgYSBSYW5nZUVycm9yIGV4Y2VwdGlvbi5cbiAgLy8gNy4gSWYgZmlsbExlbiBpcyAr4oieLCB0aGVuIHRocm93IGEgUmFuZ2VFcnJvciBleGNlcHRpb24uXG4gIGlmKGZpbGxMZW4gPCAwIHx8IGZpbGxMZW4gPT09IEluZmluaXR5KXtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ2Fubm90IHNhdGlzZnkgc3RyaW5nIGxlbmd0aCAnICsgbWluTGVuZ3RoICsgJyBmb3Igc3RyaW5nOiAnICsgUyk7XG4gIH1cbiAgLy8gOC4gTGV0IHNGaWxsU3RyIGJlIHRoZSBzdHJpbmcgcmVwcmVzZW50ZWQgYnkgZmlsbFN0ci5cbiAgLy8gOS4gSWYgc0ZpbGxTdHIgaXMgdW5kZWZpbmVkLCBsZXQgc0ZpbGxTdHIgYmUgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gIHZhciBzRmlsbFN0ciA9IGZpbGxDaGFyID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbENoYXIpO1xuICAvLyAxMC4gTGV0IHNGaWxsVmFsIGJlIGEgU3RyaW5nIG1hZGUgb2Ygc0ZpbGxTdHIsIHJlcGVhdGVkIHVudGlsIGZpbGxMZW4gaXMgbWV0LlxuICB2YXIgc0ZpbGxWYWwgPSByZXBlYXQuY2FsbChzRmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBzRmlsbFN0ci5sZW5ndGgpKTtcbiAgLy8gdHJ1bmNhdGUgaWYgd2Ugb3ZlcmZsb3dlZFxuICBpZihzRmlsbFZhbC5sZW5ndGggPiBmaWxsTGVuKXNGaWxsVmFsID0gbGVmdFxuICAgID8gc0ZpbGxWYWwuc2xpY2Uoc0ZpbGxWYWwubGVuZ3RoIC0gZmlsbExlbilcbiAgICA6IHNGaWxsVmFsLnNsaWNlKDAsIGZpbGxMZW4pO1xuICAvLyAxMS4gUmV0dXJuIGEgc3RyaW5nIG1hZGUgZnJvbSBzRmlsbFZhbCwgZm9sbG93ZWQgYnkgUy5cbiAgLy8gMTEuIFJldHVybiBhIFN0cmluZyBtYWRlIGZyb20gUywgZm9sbG93ZWQgYnkgc0ZpbGxWYWwuXG4gIHJldHVybiBsZWZ0ID8gc0ZpbGxWYWwuY29uY2F0KFMpIDogUy5jb25jYXQoc0ZpbGxWYWwpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCl7XG4gIHZhciBzdHIgPSBTdHJpbmcoJC5hc3NlcnREZWZpbmVkKHRoaXMpKVxuICAgICwgcmVzID0gJydcbiAgICAsIG4gICA9ICQudG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGN0eCAgICA9IHJlcXVpcmUoJy4vJC5jdHgnKVxuICAsIGNvZiAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsIGludm9rZSA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKVxuICAsIGNlbCAgICA9IHJlcXVpcmUoJy4vJC5kb20tY3JlYXRlJylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSAkLmdcbiAgLCBpc0Z1bmN0aW9uICAgICAgICAgPSAkLmlzRnVuY3Rpb25cbiAgLCBodG1sICAgICAgICAgICAgICAgPSAkLmh0bWxcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGVcbiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGVcbiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWxcbiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwXG4gICwgcXVldWUgICAgICAgICAgICAgID0ge31cbiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJ1xuICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuZnVuY3Rpb24gcnVuKCl7XG4gIHZhciBpZCA9ICt0aGlzO1xuICBpZigkLmhhcyhxdWV1ZSwgaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59XG5mdW5jdGlvbiBsaXN0bmVyKGV2ZW50KXtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighaXNGdW5jdGlvbihzZXRUYXNrKSB8fCAhaXNGdW5jdGlvbihjbGVhclRhc2spKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgaW52b2tlKGlzRnVuY3Rpb24oZm4pID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uKGlkKXtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYoY29mKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gTW9kZXJuIGJyb3dzZXJzLCBza2lwIGltcGxlbWVudGF0aW9uIGZvciBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzIG9iamVjdFxuICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwucG9zdE1lc3NhZ2UpICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RuZXIsIGZhbHNlKTtcbiAgLy8gV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoaXNGdW5jdGlvbihNZXNzYWdlQ2hhbm5lbCkpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0bmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpe1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogICBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgZXhlYygpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCJ2YXIgc2lkID0gMDtcbmZ1bmN0aW9uIHVpZChrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytzaWQgKyBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygzNikpO1xufVxudWlkLnNhZmUgPSByZXF1aXJlKCcuLyQnKS5nLlN5bWJvbCB8fCB1aWQ7XG5tb2R1bGUuZXhwb3J0cyA9IHVpZDsiLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuLyQud2tzJykoJ3Vuc2NvcGFibGVzJyk7XG5pZighKFVOU0NPUEFCTEVTIGluIFtdKSlyZXF1aXJlKCcuLyQnKS5oaWRlKEFycmF5LnByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgW11bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi8kJykuZ1xuICAsIHN0b3JlICA9IHJlcXVpcmUoJy4vJC5zaGFyZWQnKSgnd2tzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBnbG9iYWwuU3ltYm9sICYmIGdsb2JhbC5TeW1ib2xbbmFtZV0gfHwgcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTsiLCJ2YXIgJCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY2VsICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5kb20tY3JlYXRlJylcbiAgLCBjb2YgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgJGRlZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGludm9rZSAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuaW52b2tlJylcbiAgLCBhcnJheU1ldGhvZCAgICAgID0gcmVxdWlyZSgnLi8kLmFycmF5LW1ldGhvZHMnKVxuICAsIElFX1BST1RPICAgICAgICAgPSByZXF1aXJlKCcuLyQudWlkJykuc2FmZSgnX19wcm90b19fJylcbiAgLCBhc3NlcnQgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpXG4gICwgYXNzZXJ0T2JqZWN0ICAgICA9IGFzc2VydC5vYmpcbiAgLCBPYmplY3RQcm90byAgICAgID0gT2JqZWN0LnByb3RvdHlwZVxuICAsIGh0bWwgICAgICAgICAgICAgPSAkLmh0bWxcbiAgLCBBICAgICAgICAgICAgICAgID0gW11cbiAgLCBfc2xpY2UgICAgICAgICAgID0gQS5zbGljZVxuICAsIF9qb2luICAgICAgICAgICAgPSBBLmpvaW5cbiAgLCBjbGFzc29mICAgICAgICAgID0gY29mLmNsYXNzb2ZcbiAgLCBoYXMgICAgICAgICAgICAgID0gJC5oYXNcbiAgLCBkZWZpbmVQcm9wZXJ0eSAgID0gJC5zZXREZXNjXG4gICwgZ2V0T3duRGVzY3JpcHRvciA9ICQuZ2V0RGVzY1xuICAsIGRlZmluZVByb3BlcnRpZXMgPSAkLnNldERlc2NzXG4gICwgaXNGdW5jdGlvbiAgICAgICA9ICQuaXNGdW5jdGlvblxuICAsIGlzT2JqZWN0ICAgICAgICAgPSAkLmlzT2JqZWN0XG4gICwgdG9PYmplY3QgICAgICAgICA9ICQudG9PYmplY3RcbiAgLCB0b0xlbmd0aCAgICAgICAgID0gJC50b0xlbmd0aFxuICAsIHRvSW5kZXggICAgICAgICAgPSAkLnRvSW5kZXhcbiAgLCBJRThfRE9NX0RFRklORSAgID0gZmFsc2VcbiAgLCAkaW5kZXhPZiAgICAgICAgID0gcmVxdWlyZSgnLi8kLmFycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgJGZvckVhY2ggICAgICAgICA9IGFycmF5TWV0aG9kKDApXG4gICwgJG1hcCAgICAgICAgICAgICA9IGFycmF5TWV0aG9kKDEpXG4gICwgJGZpbHRlciAgICAgICAgICA9IGFycmF5TWV0aG9kKDIpXG4gICwgJHNvbWUgICAgICAgICAgICA9IGFycmF5TWV0aG9kKDMpXG4gICwgJGV2ZXJ5ICAgICAgICAgICA9IGFycmF5TWV0aG9kKDQpO1xuXG5pZighJC5ERVNDKXtcbiAgdHJ5IHtcbiAgICBJRThfRE9NX0RFRklORSA9IGRlZmluZVByb3BlcnR5KGNlbCgnZGl2JyksICd4JyxcbiAgICAgIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA4OyB9fVxuICAgICkueCA9PSA4O1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gICQuc2V0RGVzYyA9IGZ1bmN0aW9uKE8sIFAsIEF0dHJpYnV0ZXMpe1xuICAgIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gICAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICAgIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICAgIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylhc3NlcnRPYmplY3QoTylbUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgIHJldHVybiBPO1xuICB9O1xuICAkLmdldERlc2MgPSBmdW5jdGlvbihPLCBQKXtcbiAgICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgICAgcmV0dXJuIGdldE93bkRlc2NyaXB0b3IoTywgUCk7XG4gICAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICAgIGlmKGhhcyhPLCBQKSlyZXR1cm4gJC5kZXNjKCFPYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKE8sIFApLCBPW1BdKTtcbiAgfTtcbiAgJC5zZXREZXNjcyA9IGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbihPLCBQcm9wZXJ0aWVzKXtcbiAgICBhc3NlcnRPYmplY3QoTyk7XG4gICAgdmFyIGtleXMgICA9ICQuZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBpID0gMFxuICAgICAgLCBQO1xuICAgIHdoaWxlKGxlbmd0aCA+IGkpJC5zZXREZXNjKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICAgIHJldHVybiBPO1xuICB9O1xufVxuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhJC5ERVNDLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuNiAvIDE1LjIuMy4zIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkLmdldERlc2MsXG4gIC8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkLnNldERlc2MsXG4gIC8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllc1xufSk7XG5cbiAgLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xudmFyIGtleXMxID0gKCdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLCcgK1xuICAgICAgICAgICAgJ3RvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnKS5zcGxpdCgnLCcpXG4gIC8vIEFkZGl0aW9uYWwga2V5cyBmb3IgZ2V0T3duUHJvcGVydHlOYW1lc1xuICAsIGtleXMyID0ga2V5czEuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJylcbiAgLCBrZXlzTGVuMSA9IGtleXMxLmxlbmd0aDtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGNlbCgnaWZyYW1lJylcbiAgICAsIGkgICAgICA9IGtleXNMZW4xXG4gICAgLCBndCAgICAgPSAnPidcbiAgICAsIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZSgnPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDwvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdC5wcm90b3R5cGVba2V5czFbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUdldEtleXMobmFtZXMsIGxlbmd0aCl7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3Qpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdChvYmplY3QpXG4gICAgICAsIGkgICAgICA9IDBcbiAgICAgICwgcmVzdWx0ID0gW11cbiAgICAgICwga2V5O1xuICAgIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gICAgd2hpbGUobGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgICAgfiRpbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuZnVuY3Rpb24gRW1wdHkoKXt9XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbiAgZ2V0UHJvdG90eXBlT2Y6ICQuZ2V0UHJvdG8gPSAkLmdldFByb3RvIHx8IGZ1bmN0aW9uKE8pe1xuICAgIE8gPSBPYmplY3QoYXNzZXJ0LmRlZihPKSk7XG4gICAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gICAgaWYoaXNGdW5jdGlvbihPLmNvbnN0cnVjdG9yKSAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbiAgfSxcbiAgLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkLmdldE5hbWVzID0gJC5nZXROYW1lcyB8fCBjcmVhdGVHZXRLZXlzKGtleXMyLCBrZXlzMi5sZW5ndGgsIHRydWUpLFxuICAvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkLmNyZWF0ZSA9ICQuY3JlYXRlIHx8IGZ1bmN0aW9uKE8sIC8qPyovUHJvcGVydGllcyl7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZihPICE9PSBudWxsKXtcbiAgICAgIEVtcHR5LnByb3RvdHlwZSA9IGFzc2VydE9iamVjdChPKTtcbiAgICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2Ygc2hpbVxuICAgICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gICAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xuICB9LFxuICAvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbiAga2V5czogJC5nZXRLZXlzID0gJC5nZXRLZXlzIHx8IGNyZWF0ZUdldEtleXMoa2V5czEsIGtleXNMZW4xLCBmYWxzZSksXG4gIC8vIDE5LjEuMi4xNyAvIDE1LjIuMy44IE9iamVjdC5zZWFsKE8pXG4gIHNlYWw6IGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiBpdDsgLy8gPC0gY2FwXG4gIH0sXG4gIC8vIDE5LjEuMi41IC8gMTUuMi4zLjkgT2JqZWN0LmZyZWV6ZShPKVxuICBmcmVlemU6IGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuIGl0OyAvLyA8LSBjYXBcbiAgfSxcbiAgLy8gMTkuMS4yLjE1IC8gMTUuMi4zLjEwIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpe1xuICAgIHJldHVybiBpdDsgLy8gPC0gY2FwXG4gIH0sXG4gIC8vIDE5LjEuMi4xMyAvIDE1LjIuMy4xMSBPYmplY3QuaXNTZWFsZWQoTylcbiAgaXNTZWFsZWQ6IGZ1bmN0aW9uIGlzU2VhbGVkKGl0KXtcbiAgICByZXR1cm4gIWlzT2JqZWN0KGl0KTsgLy8gPC0gY2FwXG4gIH0sXG4gIC8vIDE5LjEuMi4xMiAvIDE1LjIuMy4xMiBPYmplY3QuaXNGcm96ZW4oTylcbiAgaXNGcm96ZW46IGZ1bmN0aW9uIGlzRnJvemVuKGl0KXtcbiAgICByZXR1cm4gIWlzT2JqZWN0KGl0KTsgLy8gPC0gY2FwXG4gIH0sXG4gIC8vIDE5LjEuMi4xMSAvIDE1LjIuMy4xMyBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpOyAvLyA8LSBjYXBcbiAgfVxufSk7XG5cbi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbiRkZWYoJGRlZi5QLCAnRnVuY3Rpb24nLCB7XG4gIGJpbmQ6IGZ1bmN0aW9uKHRoYXQgLyosIGFyZ3MuLi4gKi8pe1xuICAgIHZhciBmbiAgICAgICA9IGFzc2VydC5mbih0aGlzKVxuICAgICAgLCBwYXJ0QXJncyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLyl7XG4gICAgICB2YXIgYXJncyAgID0gcGFydEFyZ3MuY29uY2F0KF9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICwgY29uc3RyID0gdGhpcyBpbnN0YW5jZW9mIGJvdW5kXG4gICAgICAgICwgY3R4ICAgID0gY29uc3RyID8gJC5jcmVhdGUoZm4ucHJvdG90eXBlKSA6IHRoYXRcbiAgICAgICAgLCByZXN1bHQgPSBpbnZva2UoZm4sIGFyZ3MsIGN0eCk7XG4gICAgICByZXR1cm4gY29uc3RyID8gY3R4IDogcmVzdWx0O1xuICAgIH1cbiAgICBpZihmbi5wcm90b3R5cGUpYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICAgIHJldHVybiBib3VuZDtcbiAgfVxufSk7XG5cbi8vIEZpeCBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZyBhbmQgRE9NIG9iamVjdHNcbmlmKCEoMCBpbiBPYmplY3QoJ3onKSAmJiAneidbMF0gPT0gJ3onKSl7XG4gICQuRVM1T2JqZWN0ID0gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbiAgfTtcbn1cblxudmFyIGJ1Z2d5U2xpY2UgPSB0cnVlO1xudHJ5IHtcbiAgaWYoaHRtbClfc2xpY2UuY2FsbChodG1sKTtcbiAgYnVnZ3lTbGljZSA9IGZhbHNlO1xufSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXG4kZGVmKCRkZWYuUCArICRkZWYuRiAqIGJ1Z2d5U2xpY2UsICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpe1xuICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKVxuICAgICAgLCBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBfc2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgID0gdG9JbmRleChiZWdpbiwgbGVuKVxuICAgICAgLCB1cFRvICAgPSB0b0luZGV4KGVuZCwgbGVuKVxuICAgICAgLCBzaXplICAgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpXG4gICAgICAsIGNsb25lZCA9IEFycmF5KHNpemUpXG4gICAgICAsIGkgICAgICA9IDA7XG4gICAgZm9yKDsgaSA8IHNpemU7IGkrKyljbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcblxuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiAoJC5FUzVPYmplY3QgIT0gT2JqZWN0KSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKCl7XG4gICAgcmV0dXJuIF9qb2luLmFwcGx5KCQuRVM1T2JqZWN0KHRoaXMpLCBhcmd1bWVudHMpO1xuICB9XG59KTtcblxuLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbiRkZWYoJGRlZi5TLCAnQXJyYXknLCB7XG4gIGlzQXJyYXk6IGZ1bmN0aW9uKGFyZyl7XG4gICAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG4gIH1cbn0pO1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlSZWR1Y2UoaXNSaWdodCl7XG4gIHJldHVybiBmdW5jdGlvbihjYWxsYmFja2ZuLCBtZW1vKXtcbiAgICBhc3NlcnQuZm4oY2FsbGJhY2tmbik7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDBcbiAgICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoIDwgMilmb3IoOzspe1xuICAgICAgaWYoaW5kZXggaW4gTyl7XG4gICAgICAgIG1lbW8gPSBPW2luZGV4XTtcbiAgICAgICAgaW5kZXggKz0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYXNzZXJ0KGlzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXgsICdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICAgIGZvcig7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSlpZihpbmRleCBpbiBPKXtcbiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIE9baW5kZXhdLCBpbmRleCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufVxuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6ICQuZWFjaCA9ICQuZWFjaCB8fCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfSxcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH0sXG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBjcmVhdGVBcnJheVJlZHVjZShmYWxzZSksXG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogY3JlYXRlQXJyYXlSZWR1Y2UodHJ1ZSksXG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2YoZWwgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiAkaW5kZXhPZih0aGlzLCBlbCwgYXJndW1lbnRzWzFdKTtcbiAgfSxcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbihlbCwgZnJvbUluZGV4IC8qID0gQFsqLTFdICovKXtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IGxlbmd0aCAtIDE7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpaW5kZXggPSBNYXRoLm1pbihpbmRleCwgJC50b0ludGVnZXIoZnJvbUluZGV4KSk7XG4gICAgaWYoaW5kZXggPCAwKWluZGV4ID0gdG9MZW5ndGgobGVuZ3RoICsgaW5kZXgpO1xuICAgIGZvcig7aW5kZXggPj0gMDsgaW5kZXgtLSlpZihpbmRleCBpbiBPKWlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gaW5kZXg7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcblxuLy8gMjEuMS4zLjI1IC8gMTUuNS40LjIwIFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHt0cmltOiByZXF1aXJlKCcuLyQucmVwbGFjZXInKSgvXlxccyooW1xcc1xcU10qXFxTKT9cXHMqJC8sICckMScpfSk7XG5cbi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxuJGRlZigkZGVmLlMsICdEYXRlJywge25vdzogZnVuY3Rpb24oKXtcbiAgcmV0dXJuICtuZXcgRGF0ZTtcbn19KTtcblxuZnVuY3Rpb24gbHoobnVtKXtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59XG5cbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG4vLyBQaGFudG9tSlMgYW5kIG9sZCB3ZWJraXQgaGFkIGEgYnJva2VuIERhdGUgaW1wbGVtZW50YXRpb24uXG52YXIgZGF0ZSAgICAgICA9IG5ldyBEYXRlKC01ZTEzIC0gMSlcbiAgLCBicm9rZW5EYXRlID0gIShkYXRlLnRvSVNPU3RyaW5nICYmIGRhdGUudG9JU09TdHJpbmcoKSA9PSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJ1xuICAgICAgJiYgcmVxdWlyZSgnLi8kLnRocm93cycpKGZ1bmN0aW9uKCl7IG5ldyBEYXRlKE5hTikudG9JU09TdHJpbmcoKTsgfSkpO1xuJGRlZigkZGVmLlAgKyAkZGVmLkYgKiBicm9rZW5EYXRlLCAnRGF0ZScsIHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXtcbiAgaWYoIWlzRmluaXRlKHRoaXMpKXRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXNcbiAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAsIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufX0pO1xuXG5pZihjbGFzc29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ09iamVjdCcpY29mLmNsYXNzb2YgPSBmdW5jdGlvbihpdCl7XG4gIHZhciB0YWcgPSBjbGFzc29mKGl0KTtcbiAgcmV0dXJuIHRhZyA9PSAnT2JqZWN0JyAmJiBpc0Z1bmN0aW9uKGl0LmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHRhZztcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsICRkZWYgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCB0b0luZGV4ID0gJC50b0luZGV4O1xuJGRlZigkZGVmLlAsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4gIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pe1xuICAgIHZhciBPICAgICA9IE9iamVjdCgkLmFzc2VydERlZmluZWQodGhpcykpXG4gICAgICAsIGxlbiAgID0gJC50b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKVxuICAgICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbilcbiAgICAgICwgZW5kICAgPSBhcmd1bWVudHNbMl1cbiAgICAgICwgZmluICAgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pXG4gICAgICAsIGNvdW50ID0gTWF0aC5taW4oZmluIC0gZnJvbSwgbGVuIC0gdG8pXG4gICAgICAsIGluYyAgID0gMTtcbiAgICBpZihmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpe1xuICAgICAgaW5jICA9IC0xO1xuICAgICAgZnJvbSA9IGZyb20gKyBjb3VudCAtIDE7XG4gICAgICB0byAgID0gdG8gICArIGNvdW50IC0gMTtcbiAgICB9XG4gICAgd2hpbGUoY291bnQtLSA+IDApe1xuICAgICAgaWYoZnJvbSBpbiBPKU9bdG9dID0gT1tmcm9tXTtcbiAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgdG8gICArPSBpbmM7XG4gICAgICBmcm9tICs9IGluYztcbiAgICB9IHJldHVybiBPO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vJC51bnNjb3BlJykoJ2NvcHlXaXRoaW4nKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIHRvSW5kZXggPSAkLnRvSW5kZXg7XG4kZGVmKCRkZWYuUCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbiAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXtcbiAgICB2YXIgTyAgICAgID0gT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSlcbiAgICAgICwgbGVuZ3RoID0gJC50b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChhcmd1bWVudHNbMV0sIGxlbmd0aClcbiAgICAgICwgZW5kICAgID0gYXJndW1lbnRzWzJdXG4gICAgICAsIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCk7XG4gICAgd2hpbGUoZW5kUG9zID4gaW5kZXgpT1tpbmRleCsrXSA9IHZhbHVlO1xuICAgIHJldHVybiBPO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vJC51bnNjb3BlJykoJ2ZpbGwnKTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciBLRVkgICAgPSAnZmluZEluZGV4J1xuICAsICRkZWYgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIGZvcmNlZCA9IHRydWVcbiAgLCAkZmluZCAgPSByZXF1aXJlKCcuLyQuYXJyYXktbWV0aG9kcycpKDYpO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRkZWYoJGRlZi5QICsgJGRlZi5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi8kLnVuc2NvcGUnKShLRVkpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciBLRVkgICAgPSAnZmluZCdcbiAgLCAkZGVmICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBmb3JjZWQgPSB0cnVlXG4gICwgJGZpbmQgID0gcmVxdWlyZSgnLi8kLmFycmF5LW1ldGhvZHMnKSg1KTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZGVmKCRkZWYuUCArICRkZWYuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi8kLnVuc2NvcGUnKShLRVkpOyIsInZhciAkICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3R4ICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRpdGVyID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIGNhbGwgID0gcmVxdWlyZSgnLi8kLml0ZXItY2FsbCcpO1xuJGRlZigkZGVmLlMgKyAkZGVmLkYgKiAhcmVxdWlyZSgnLi8kLml0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UvKiwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQqLyl7XG4gICAgdmFyIE8gICAgICAgPSBPYmplY3QoJC5hc3NlcnREZWZpbmVkKGFycmF5TGlrZSkpXG4gICAgICAsIG1hcGZuICAgPSBhcmd1bWVudHNbMV1cbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgZiAgICAgICA9IG1hcHBpbmcgPyBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMikgOiB1bmRlZmluZWRcbiAgICAgICwgaW5kZXggICA9IDBcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKCRpdGVyLmlzKE8pKXtcbiAgICAgIGl0ZXJhdG9yID0gJGl0ZXIuZ2V0KE8pO1xuICAgICAgLy8gc3RyYW5nZSBJRSBxdWlya3MgbW9kZSBidWcgLT4gdXNlIHR5cGVvZiBpbnN0ZWFkIG9mIGlzRnVuY3Rpb25cbiAgICAgIHJlc3VsdCAgID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KTtcbiAgICAgIGZvcig7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgZiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdHJhbmdlIElFIHF1aXJrcyBtb2RlIGJ1ZyAtPiB1c2UgdHlwZW9mIGluc3RlYWQgb2YgaXNGdW5jdGlvblxuICAgICAgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShsZW5ndGggPSAkLnRvTGVuZ3RoKE8ubGVuZ3RoKSk7XG4gICAgICBmb3IoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBtYXBwaW5nID8gZihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCJ2YXIgJCAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgc2V0VW5zY29wZSA9IHJlcXVpcmUoJy4vJC51bnNjb3BlJylcbiAgLCBJVEVSICAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ2l0ZXInKVxuICAsICRpdGVyICAgICAgPSByZXF1aXJlKCcuLyQuaXRlcicpXG4gICwgc3RlcCAgICAgICA9ICRpdGVyLnN0ZXBcbiAgLCBJdGVyYXRvcnMgID0gJGl0ZXIuSXRlcmF0b3JzO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuLyQuaXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICAkLnNldCh0aGlzLCBJVEVSLCB7bzogJC50b09iamVjdChpdGVyYXRlZCksIGk6IDAsIGs6IGtpbmR9KTtcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIGl0ZXIgID0gdGhpc1tJVEVSXVxuICAgICwgTyAgICAgPSBpdGVyLm9cbiAgICAsIGtpbmQgID0gaXRlci5rXG4gICAgLCBpbmRleCA9IGl0ZXIuaSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgaXRlci5vID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5zZXRVbnNjb3BlKCdrZXlzJyk7XG5zZXRVbnNjb3BlKCd2YWx1ZXMnKTtcbnNldFVuc2NvcGUoJ2VudHJpZXMnKTsiLCJ2YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgIC8vIHN0cmFuZ2UgSUUgcXVpcmtzIG1vZGUgYnVnIC0+IHVzZSB0eXBlb2YgaW5zdGVhZCBvZiBpc0Z1bmN0aW9uXG4gICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkobGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwicmVxdWlyZSgnLi8kLnNwZWNpZXMnKShBcnJheSk7IiwidmFyICQgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIEhBU19JTlNUQU5DRSAgPSByZXF1aXJlKCcuLyQud2tzJykoJ2hhc0luc3RhbmNlJylcbiAgLCBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZighKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkkLnNldERlc2MoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pe1xuICBpZighJC5pc0Z1bmN0aW9uKHRoaXMpIHx8ICEkLmlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTtcbiAgaWYoISQuaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKXJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUoTyA9ICQuZ2V0UHJvdG8oTykpaWYodGhpcy5wcm90b3R5cGUgPT09IE8pcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn19KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJCAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgTkFNRSA9ICduYW1lJ1xuICAsIHNldERlc2MgPSAkLnNldERlc2NcbiAgLCBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGdW5jdGlvblByb3RvIHx8ICQuRlcgJiYgJC5ERVNDICYmIHNldERlc2MoRnVuY3Rpb25Qcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKXtcbiAgICB2YXIgbWF0Y2ggPSBTdHJpbmcodGhpcykubWF0Y2goL15cXHMqZnVuY3Rpb24gKFteIChdKikvKVxuICAgICAgLCBuYW1lICA9IG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcbiAgICAkLmhhcyh0aGlzLCBOQU1FKSB8fCBzZXREZXNjKHRoaXMsIE5BTUUsICQuZGVzYyg1LCBuYW1lKSk7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICQuaGFzKHRoaXMsIE5BTUUpIHx8IHNldERlc2ModGhpcywgTkFNRSwgJC5kZXNjKDAsIHZhbHVlKSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuLyQuY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xucmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50c1swXSk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpOyIsInZhciBJbmZpbml0eSA9IDEgLyAwXG4gICwgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBFICAgICA9IE1hdGguRVxuICAsIHBvdyAgID0gTWF0aC5wb3dcbiAgLCBhYnMgICA9IE1hdGguYWJzXG4gICwgZXhwICAgPSBNYXRoLmV4cFxuICAsIGxvZyAgID0gTWF0aC5sb2dcbiAgLCBzcXJ0ICA9IE1hdGguc3FydFxuICAsIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yXG4gICwgRVBTSUxPTiAgID0gcG93KDIsIC01MilcbiAgLCBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKVxuICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpXG4gICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpO1xuZnVuY3Rpb24gcm91bmRUaWVzVG9FdmVuKG4pe1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59XG5cbi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbmZ1bmN0aW9uIHNpZ24oeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn1cbi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbmZ1bmN0aW9uIGFzaW5oKHgpe1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IGxvZyh4ICsgc3FydCh4ICogeCArIDEpKTtcbn1cbi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG5mdW5jdGlvbiBleHBtMSh4KXtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IGV4cCh4KSAtIDE7XG59XG5cbiRkZWYoJGRlZi5TLCAnTWF0aCcsIHtcbiAgLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IGlzRmluaXRlKHgpID8gbG9nKHggLyBFICsgc3FydCh4ICsgMSkgKiBzcXJ0KHggLSAxKSAvIEUpICsgMSA6IHg7XG4gIH0sXG4gIC8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbiAgYXNpbmg6IGFzaW5oLFxuICAvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBsb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfSxcbiAgLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCl7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIHBvdyhhYnMoeCksIDEgLyAzKTtcbiAgfSxcbiAgLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpe1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBmbG9vcihsb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9LFxuICAvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCl7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfSxcbiAgLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbiAgZXhwbTE6IGV4cG0xLFxuICAvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbiAgZnJvdW5kOiBmdW5jdGlvbiBmcm91bmQoeCl7XG4gICAgdmFyICRhYnMgID0gYWJzKHgpXG4gICAgICAsICRzaWduID0gc2lnbih4KVxuICAgICAgLCBhLCByZXN1bHQ7XG4gICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gICAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICAgIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gICAgcmV0dXJuICRzaWduICogcmVzdWx0O1xuICB9LFxuICAvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gID0gMFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBsZW4gID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBsYXJnID0gMFxuICAgICAgLCBhcmcsIGRpdjtcbiAgICB3aGlsZShpIDwgbGVuKXtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZihsYXJnIDwgYXJnKXtcbiAgICAgICAgZGl2ICA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSAgPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmKGFyZyA+IDApe1xuICAgICAgICBkaXYgID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBzcXJ0KHN1bSk7XG4gIH0sXG4gIC8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KXtcbiAgICB2YXIgVUludDE2ID0gMHhmZmZmXG4gICAgICAsIHhuID0gK3hcbiAgICAgICwgeW4gPSAreVxuICAgICAgLCB4bCA9IFVJbnQxNiAmIHhuXG4gICAgICAsIHlsID0gVUludDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSW50MTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSW50MTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfSxcbiAgLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbiAgbG9nMXA6IGZ1bmN0aW9uIGxvZzFwKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IGxvZygxICsgeCk7XG4gIH0sXG4gIC8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KXtcbiAgICByZXR1cm4gbG9nKHgpIC8gTWF0aC5MTjEwO1xuICB9LFxuICAvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCl7XG4gICAgcmV0dXJuIGxvZyh4KSAvIE1hdGguTE4yO1xuICB9LFxuICAvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG4gIHNpZ246IHNpZ24sXG4gIC8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KXtcbiAgICByZXR1cm4gYWJzKHggPSAreCkgPCAxID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDIgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChFIC8gMik7XG4gIH0sXG4gIC8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreClcbiAgICAgICwgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9LFxuICAvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpe1xuICAgIHJldHVybiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBpc09iamVjdCAgID0gJC5pc09iamVjdFxuICAsIGlzRnVuY3Rpb24gPSAkLmlzRnVuY3Rpb25cbiAgLCBOVU1CRVIgICAgID0gJ051bWJlcidcbiAgLCAkTnVtYmVyICAgID0gJC5nW05VTUJFUl1cbiAgLCBCYXNlICAgICAgID0gJE51bWJlclxuICAsIHByb3RvICAgICAgPSAkTnVtYmVyLnByb3RvdHlwZTtcbmZ1bmN0aW9uIHRvUHJpbWl0aXZlKGl0KXtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKGlzRnVuY3Rpb24oZm4gPSBpdC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKGlzRnVuY3Rpb24oZm4gPSBpdC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBudW1iZXJcIik7XG59XG5mdW5jdGlvbiB0b051bWJlcihpdCl7XG4gIGlmKGlzT2JqZWN0KGl0KSlpdCA9IHRvUHJpbWl0aXZlKGl0KTtcbiAgaWYodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIgJiYgaXQuY2hhckNvZGVBdCgwKSA9PSA0OCl7XG4gICAgdmFyIGJpbmFyeSA9IGZhbHNlO1xuICAgIHN3aXRjaChpdC5jaGFyQ29kZUF0KDEpKXtcbiAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IGJpbmFyeSA9IHRydWU7XG4gICAgICBjYXNlIDc5IDogY2FzZSAxMTEgOiByZXR1cm4gcGFyc2VJbnQoaXQuc2xpY2UoMiksIGJpbmFyeSA/IDIgOiA4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn1cbmlmKCQuRlcgJiYgISgkTnVtYmVyKCcwbzEnKSAmJiAkTnVtYmVyKCcwYjEnKSkpe1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKGl0KXtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mICROdW1iZXIgPyBuZXcgQmFzZSh0b051bWJlcihpdCkpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICAkLmVhY2guY2FsbCgkLkRFU0MgPyAkLmdldE5hbWVzKEJhc2UpIDogKFxuICAgICAgLy8gRVMzOlxuICAgICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICAgKS5zcGxpdCgnLCcpLCBmdW5jdGlvbihrZXkpe1xuICAgICAgaWYoJC5oYXMoQmFzZSwga2V5KSAmJiAhJC5oYXMoJE51bWJlciwga2V5KSl7XG4gICAgICAgICQuc2V0RGVzYygkTnVtYmVyLCBrZXksICQuZ2V0RGVzYyhCYXNlLCBrZXkpKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi8kLnJlZGVmJykoJC5nLCBOVU1CRVIsICROdW1iZXIpO1xufSIsInZhciAkICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBhYnMgICA9IE1hdGguYWJzXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yXG4gICwgX2lzRmluaXRlID0gJC5nLmlzRmluaXRlXG4gICwgTUFYX1NBRkVfSU5URUdFUiA9IDB4MWZmZmZmZmZmZmZmZmY7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTE7XG5mdW5jdGlvbiBpc0ludGVnZXIoaXQpe1xuICByZXR1cm4gISQuaXNPYmplY3QoaXQpICYmIF9pc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn1cbiRkZWYoJGRlZi5TLCAnTnVtYmVyJywge1xuICAvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxuICBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpLFxuICAvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpe1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfSxcbiAgLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG4gIGlzSW50ZWdlcjogaXNJbnRlZ2VyLFxuICAvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXtcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfSxcbiAgLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcil7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gIH0sXG4gIC8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG4gIE1BWF9TQUZFX0lOVEVHRVI6IE1BWF9TQUZFX0lOVEVHRVIsXG4gIC8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuICBNSU5fU0FGRV9JTlRFR0VSOiAtTUFYX1NBRkVfSU5URUdFUixcbiAgLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiAgcGFyc2VGbG9hdDogcGFyc2VGbG9hdCxcbiAgLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuICBwYXJzZUludDogcGFyc2VJbnRcbn0pOyIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi8kLmFzc2lnbicpfSk7IiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIGlzOiByZXF1aXJlKCcuLyQuc2FtZScpXG59KTsiLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi8kLnNldC1wcm90bycpLnNldH0pOyIsInZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBpc09iamVjdCA9ICQuaXNPYmplY3RcbiAgLCB0b09iamVjdCA9ICQudG9PYmplY3Q7XG4kLmVhY2guY2FsbCgoJ2ZyZWV6ZSxzZWFsLHByZXZlbnRFeHRlbnNpb25zLGlzRnJvemVuLGlzU2VhbGVkLGlzRXh0ZW5zaWJsZSwnICtcbiAgJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcixnZXRQcm90b3R5cGVPZixrZXlzLGdldE93blByb3BlcnR5TmFtZXMnKS5zcGxpdCgnLCcpXG4sIGZ1bmN0aW9uKEtFWSwgSUQpe1xuICB2YXIgZm4gICAgID0gKCQuY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGZvcmNlZCA9IDBcbiAgICAsIG1ldGhvZCA9IHt9O1xuICBtZXRob2RbS0VZXSA9IElEID09IDAgPyBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBpdDtcbiAgfSA6IElEID09IDEgPyBmdW5jdGlvbiBzZWFsKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gZm4oaXQpIDogaXQ7XG4gIH0gOiBJRCA9PSAyID8gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiBpdDtcbiAgfSA6IElEID09IDMgPyBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IHRydWU7XG4gIH0gOiBJRCA9PSA0ID8gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyBmbihpdCkgOiB0cnVlO1xuICB9IDogSUQgPT0gNSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/IGZuKGl0KSA6IGZhbHNlO1xuICB9IDogSUQgPT0gNiA/IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gZm4odG9PYmplY3QoaXQpLCBrZXkpO1xuICB9IDogSUQgPT0gNyA/IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXtcbiAgICByZXR1cm4gZm4oT2JqZWN0KCQuYXNzZXJ0RGVmaW5lZChpdCkpKTtcbiAgfSA6IElEID09IDggPyBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gZm4odG9PYmplY3QoaXQpKTtcbiAgfSA6IHJlcXVpcmUoJy4vJC5nZXQtbmFtZXMnKS5nZXQ7XG4gIHRyeSB7XG4gICAgZm4oJ3onKTtcbiAgfSBjYXRjaChlKXtcbiAgICBmb3JjZWQgPSAxO1xuICB9XG4gICRkZWYoJGRlZi5TICsgJGRlZi5GICogZm9yY2VkLCAnT2JqZWN0JywgbWV0aG9kKTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsIHRtcCA9IHt9O1xudG1wW3JlcXVpcmUoJy4vJC53a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZihyZXF1aXJlKCcuLyQnKS5GVyAmJiBjb2YodG1wKSAhPSAneicpe1xuICByZXF1aXJlKCcuLyQucmVkZWYnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY29mLmNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3R4ICAgICAgPSByZXF1aXJlKCcuLyQuY3R4JylcbiAgLCBjb2YgICAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKVxuICAsICRkZWYgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgYXNzZXJ0ICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBmb3JPZiAgICA9IHJlcXVpcmUoJy4vJC5mb3Itb2YnKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi8kLnNldC1wcm90bycpLnNldFxuICAsIHNhbWUgICAgID0gcmVxdWlyZSgnLi8kLnNhbWUnKVxuICAsIHNwZWNpZXMgID0gcmVxdWlyZSgnLi8kLnNwZWNpZXMnKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi8kLndrcycpKCdzcGVjaWVzJylcbiAgLCBSRUNPUkQgICA9IHJlcXVpcmUoJy4vJC51aWQnKS5zYWZlKCdyZWNvcmQnKVxuICAsIFBST01JU0UgID0gJ1Byb21pc2UnXG4gICwgZ2xvYmFsICAgPSAkLmdcbiAgLCBwcm9jZXNzICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgPSBjb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnXG4gICwgYXNhcCAgICAgPSBwcm9jZXNzICYmIHByb2Nlc3MubmV4dFRpY2sgfHwgcmVxdWlyZSgnLi8kLnRhc2snKS5zZXRcbiAgLCBQICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIGlzRnVuY3Rpb24gICAgID0gJC5pc0Z1bmN0aW9uXG4gICwgaXNPYmplY3QgICAgICAgPSAkLmlzT2JqZWN0XG4gICwgYXNzZXJ0RnVuY3Rpb24gPSBhc3NlcnQuZm5cbiAgLCBhc3NlcnRPYmplY3QgICA9IGFzc2VydC5vYmpcbiAgLCBXcmFwcGVyO1xuXG5mdW5jdGlvbiB0ZXN0UmVzb2x2ZShzdWIpe1xuICB2YXIgdGVzdCA9IG5ldyBQKGZ1bmN0aW9uKCl7fSk7XG4gIGlmKHN1Yil0ZXN0LmNvbnN0cnVjdG9yID0gT2JqZWN0O1xuICByZXR1cm4gUC5yZXNvbHZlKHRlc3QpID09PSB0ZXN0O1xufVxuXG52YXIgdXNlTmF0aXZlID0gZnVuY3Rpb24oKXtcbiAgdmFyIHdvcmtzID0gZmFsc2U7XG4gIGZ1bmN0aW9uIFAyKHgpe1xuICAgIHZhciBzZWxmID0gbmV3IFAoeCk7XG4gICAgc2V0UHJvdG8oc2VsZiwgUDIucHJvdG90eXBlKTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICB0cnkge1xuICAgIHdvcmtzID0gaXNGdW5jdGlvbihQKSAmJiBpc0Z1bmN0aW9uKFAucmVzb2x2ZSkgJiYgdGVzdFJlc29sdmUoKTtcbiAgICBzZXRQcm90byhQMiwgUCk7XG4gICAgUDIucHJvdG90eXBlID0gJC5jcmVhdGUoUC5wcm90b3R5cGUsIHtjb25zdHJ1Y3Rvcjoge3ZhbHVlOiBQMn19KTtcbiAgICAvLyBhY3R1YWwgRmlyZWZveCBoYXMgYnJva2VuIHN1YmNsYXNzIHN1cHBvcnQsIHRlc3QgdGhhdFxuICAgIGlmKCEoUDIucmVzb2x2ZSg1KS50aGVuKGZ1bmN0aW9uKCl7fSkgaW5zdGFuY2VvZiBQMikpe1xuICAgICAgd29ya3MgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gYWN0dWFsIFY4IGJ1ZywgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxNjJcbiAgICBpZih3b3JrcyAmJiAkLkRFU0Mpe1xuICAgICAgdmFyIHRoZW5hYmxlVGhlbkdvdHRlbiA9IGZhbHNlO1xuICAgICAgUC5yZXNvbHZlKCQuc2V0RGVzYyh7fSwgJ3RoZW4nLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXsgdGhlbmFibGVUaGVuR290dGVuID0gdHJ1ZTsgfVxuICAgICAgfSkpO1xuICAgICAgd29ya3MgPSB0aGVuYWJsZVRoZW5Hb3R0ZW47XG4gICAgfVxuICB9IGNhdGNoKGUpeyB3b3JrcyA9IGZhbHNlOyB9XG4gIHJldHVybiB3b3Jrcztcbn0oKTtcblxuLy8gaGVscGVyc1xuZnVuY3Rpb24gaXNQcm9taXNlKGl0KXtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAodXNlTmF0aXZlID8gY29mLmNsYXNzb2YoaXQpID09ICdQcm9taXNlJyA6IFJFQ09SRCBpbiBpdCk7XG59XG5mdW5jdGlvbiBzYW1lQ29uc3RydWN0b3IoYSwgYil7XG4gIC8vIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2VcbiAgaWYoISQuRlcgJiYgYSA9PT0gUCAmJiBiID09PSBXcmFwcGVyKXJldHVybiB0cnVlO1xuICByZXR1cm4gc2FtZShhLCBiKTtcbn1cbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9yKEMpe1xuICB2YXIgUyA9IGFzc2VydE9iamVjdChDKVtTUEVDSUVTXTtcbiAgcmV0dXJuIFMgIT0gdW5kZWZpbmVkID8gUyA6IEM7XG59XG5mdW5jdGlvbiBpc1RoZW5hYmxlKGl0KXtcbiAgdmFyIHRoZW47XG4gIGlmKGlzT2JqZWN0KGl0KSl0aGVuID0gaXQudGhlbjtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odGhlbikgPyB0aGVuIDogZmFsc2U7XG59XG5mdW5jdGlvbiBub3RpZnkocmVjb3JkKXtcbiAgdmFyIGNoYWluID0gcmVjb3JkLmM7XG4gIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgaWYoY2hhaW4ubGVuZ3RoKWFzYXAuY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcmVjb3JkLnZcbiAgICAgICwgb2sgICAgPSByZWNvcmQucyA9PSAxXG4gICAgICAsIGkgICAgID0gMDtcbiAgICBmdW5jdGlvbiBydW4ocmVhY3Qpe1xuICAgICAgdmFyIGNiID0gb2sgPyByZWFjdC5vayA6IHJlYWN0LmZhaWxcbiAgICAgICAgLCByZXQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZihjYil7XG4gICAgICAgICAgaWYoIW9rKXJlY29yZC5oID0gdHJ1ZTtcbiAgICAgICAgICByZXQgPSBjYiA9PT0gdHJ1ZSA/IHZhbHVlIDogY2IodmFsdWUpO1xuICAgICAgICAgIGlmKHJldCA9PT0gcmVhY3QuUCl7XG4gICAgICAgICAgICByZWFjdC5yZWooVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXQsIHJlYWN0LnJlcywgcmVhY3QucmVqKTtcbiAgICAgICAgICB9IGVsc2UgcmVhY3QucmVzKHJldCk7XG4gICAgICAgIH0gZWxzZSByZWFjdC5yZWoodmFsdWUpO1xuICAgICAgfSBjYXRjaChlcnIpe1xuICAgICAgICByZWFjdC5yZWooZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSlydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgY2hhaW4ubGVuZ3RoID0gMDtcbiAgfSk7XG59XG5mdW5jdGlvbiBpc1VuaGFuZGxlZChwcm9taXNlKXtcbiAgdmFyIHJlY29yZCA9IHByb21pc2VbUkVDT1JEXVxuICAgICwgY2hhaW4gID0gcmVjb3JkLmEgfHwgcmVjb3JkLmNcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlYWN0O1xuICBpZihyZWNvcmQuaClyZXR1cm4gZmFsc2U7XG4gIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpe1xuICAgIHJlYWN0ID0gY2hhaW5baSsrXTtcbiAgICBpZihyZWFjdC5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdC5QKSlyZXR1cm4gZmFsc2U7XG4gIH0gcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiAkcmVqZWN0KHZhbHVlKXtcbiAgdmFyIHJlY29yZCA9IHRoaXNcbiAgICAsIHByb21pc2U7XG4gIGlmKHJlY29yZC5kKXJldHVybjtcbiAgcmVjb3JkLmQgPSB0cnVlO1xuICByZWNvcmQgPSByZWNvcmQuciB8fCByZWNvcmQ7IC8vIHVud3JhcFxuICByZWNvcmQudiA9IHZhbHVlO1xuICByZWNvcmQucyA9IDI7XG4gIHJlY29yZC5hID0gcmVjb3JkLmMuc2xpY2UoKTtcbiAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICBhc2FwLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSA9IHJlY29yZC5wKSl7XG4gICAgICAgIGlmKGlzTm9kZSl7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZihnbG9iYWwuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlY29yZC5hID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9LCAxKTtcbiAgbm90aWZ5KHJlY29yZCk7XG59XG5mdW5jdGlvbiAkcmVzb2x2ZSh2YWx1ZSl7XG4gIHZhciByZWNvcmQgPSB0aGlzXG4gICAgLCB0aGVuO1xuICBpZihyZWNvcmQuZClyZXR1cm47XG4gIHJlY29yZC5kID0gdHJ1ZTtcbiAgcmVjb3JkID0gcmVjb3JkLnIgfHwgcmVjb3JkOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZih0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpe1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgYXNhcC5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7cjogcmVjb3JkLCBkOiBmYWxzZX07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjb3JkLnYgPSB2YWx1ZTtcbiAgICAgIHJlY29yZC5zID0gMTtcbiAgICAgIG5vdGlmeShyZWNvcmQpO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICAkcmVqZWN0LmNhbGwoe3I6IHJlY29yZCwgZDogZmFsc2V9LCBlKTsgLy8gd3JhcFxuICB9XG59XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZighdXNlTmF0aXZlKXtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFzc2VydEZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICB2YXIgcmVjb3JkID0ge1xuICAgICAgcDogYXNzZXJ0Lmluc3QodGhpcywgUCwgUFJPTUlTRSksICAgICAgIC8vIDwtIHByb21pc2VcbiAgICAgIGM6IFtdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICAgIGE6IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgICAgczogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgICBkOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gZG9uZVxuICAgICAgdjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICBoOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gaGFuZGxlZCByZWplY3Rpb25cbiAgICB9O1xuICAgICQuaGlkZSh0aGlzLCBSRUNPUkQsIHJlY29yZCk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgcmVjb3JkLCAxKSwgY3R4KCRyZWplY3QsIHJlY29yZCwgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbChyZWNvcmQsIGVycik7XG4gICAgfVxuICB9O1xuICByZXF1aXJlKCcuLyQubWl4JykoUC5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpe1xuICAgICAgdmFyIFMgPSBhc3NlcnRPYmplY3QoYXNzZXJ0T2JqZWN0KHRoaXMpLmNvbnN0cnVjdG9yKVtTUEVDSUVTXTtcbiAgICAgIHZhciByZWFjdCA9IHtcbiAgICAgICAgb2s6ICAgaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IHRydWUsXG4gICAgICAgIGZhaWw6IGlzRnVuY3Rpb24ob25SZWplY3RlZCkgID8gb25SZWplY3RlZCAgOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHZhciBwcm9taXNlID0gcmVhY3QuUCA9IG5ldyAoUyAhPSB1bmRlZmluZWQgPyBTIDogUCkoZnVuY3Rpb24ocmVzLCByZWope1xuICAgICAgICByZWFjdC5yZXMgPSBhc3NlcnRGdW5jdGlvbihyZXMpO1xuICAgICAgICByZWFjdC5yZWogPSBhc3NlcnRGdW5jdGlvbihyZWopO1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVjb3JkID0gdGhpc1tSRUNPUkRdO1xuICAgICAgcmVjb3JkLmMucHVzaChyZWFjdCk7XG4gICAgICBpZihyZWNvcmQuYSlyZWNvcmQuYS5wdXNoKHJlYWN0KTtcbiAgICAgIGlmKHJlY29yZC5zKW5vdGlmeShyZWNvcmQpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpe1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGV4cG9ydFxuJGRlZigkZGVmLkcgKyAkZGVmLlcgKyAkZGVmLkYgKiAhdXNlTmF0aXZlLCB7UHJvbWlzZTogUH0pO1xuY29mLnNldChQLCBQUk9NSVNFKTtcbnNwZWNpZXMoUCk7XG5zcGVjaWVzKFdyYXBwZXIgPSAkLmNvcmVbUFJPTUlTRV0pO1xuXG4vLyBzdGF0aWNzXG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICF1c2VOYXRpdmUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7XG4gICAgcmV0dXJuIG5ldyAoZ2V0Q29uc3RydWN0b3IodGhpcykpKGZ1bmN0aW9uKHJlcywgcmVqKXsgcmVqKHIpOyB9KTtcbiAgfVxufSk7XG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICghdXNlTmF0aXZlIHx8IHRlc3RSZXNvbHZlKHRydWUpKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICByZXR1cm4gaXNQcm9taXNlKHgpICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKVxuICAgICAgPyB4IDogbmV3IHRoaXMoZnVuY3Rpb24ocmVzKXsgcmVzKHgpOyB9KTtcbiAgfVxufSk7XG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICEodXNlTmF0aXZlICYmIHJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpe1xuICBQLmFsbChpdGVyKVsnY2F0Y2gnXShmdW5jdGlvbigpe30pO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICA9IGdldENvbnN0cnVjdG9yKHRoaXMpXG4gICAgICAsIHZhbHVlcyA9IFtdO1xuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihyZXMsIHJlail7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIHZhbHVlcy5wdXNoLCB2YWx1ZXMpO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHZhbHVlcy5sZW5ndGhcbiAgICAgICAgLCByZXN1bHRzICAgPSBBcnJheShyZW1haW5pbmcpO1xuICAgICAgaWYocmVtYWluaW5nKSQuZWFjaC5jYWxsKHZhbHVlcywgZnVuY3Rpb24ocHJvbWlzZSwgaW5kZXgpe1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXMocmVzdWx0cyk7XG4gICAgICAgIH0sIHJlaik7XG4gICAgICB9KTtcbiAgICAgIGVsc2UgcmVzKHJlc3VsdHMpO1xuICAgIH0pO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpe1xuICAgIHZhciBDID0gZ2V0Q29uc3RydWN0b3IodGhpcyk7XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKHJlcywgcmVqKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKHJlcywgcmVqKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTsiLCJ2YXIgJCAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCBzZXRQcm90byAgPSByZXF1aXJlKCcuLyQuc2V0LXByb3RvJylcbiAgLCAkaXRlciAgICAgPSByZXF1aXJlKCcuLyQuaXRlcicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgSVRFUiAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ2l0ZXInKVxuICAsIHN0ZXAgICAgICA9ICRpdGVyLnN0ZXBcbiAgLCBhc3NlcnQgICAgPSByZXF1aXJlKCcuLyQuYXNzZXJ0JylcbiAgLCBpc09iamVjdCAgPSAkLmlzT2JqZWN0XG4gICwgZ2V0UHJvdG8gID0gJC5nZXRQcm90b1xuICAsICRSZWZsZWN0ICA9ICQuZy5SZWZsZWN0XG4gICwgX2FwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHlcbiAgLCBhc3NlcnRPYmplY3QgPSBhc3NlcnQub2JqXG4gICwgX2lzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgaXNPYmplY3RcbiAgLCBfcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnNcbiAgLy8gSUUgVFAgaGFzIGJyb2tlbiBSZWZsZWN0LmVudW1lcmF0ZVxuICAsIGJ1Z2d5RW51bWVyYXRlID0gISgkUmVmbGVjdCAmJiAkUmVmbGVjdC5lbnVtZXJhdGUgJiYgSVRFUkFUT1IgaW4gJFJlZmxlY3QuZW51bWVyYXRlKHt9KSk7XG5cbmZ1bmN0aW9uIEVudW1lcmF0ZShpdGVyYXRlZCl7XG4gICQuc2V0KHRoaXMsIElURVIsIHtvOiBpdGVyYXRlZCwgazogdW5kZWZpbmVkLCBpOiAwfSk7XG59XG4kaXRlci5jcmVhdGUoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24oKXtcbiAgdmFyIGl0ZXIgPSB0aGlzW0lURVJdXG4gICAgLCBrZXlzID0gaXRlci5rXG4gICAgLCBrZXk7XG4gIGlmKGtleXMgPT0gdW5kZWZpbmVkKXtcbiAgICBpdGVyLmsgPSBrZXlzID0gW107XG4gICAgZm9yKGtleSBpbiBpdGVyLm8pa2V5cy5wdXNoKGtleSk7XG4gIH1cbiAgZG8ge1xuICAgIGlmKGl0ZXIuaSA+PSBrZXlzLmxlbmd0aClyZXR1cm4gc3RlcCgxKTtcbiAgfSB3aGlsZSghKChrZXkgPSBrZXlzW2l0ZXIuaSsrXSkgaW4gaXRlci5vKSk7XG4gIHJldHVybiBzdGVwKDAsIGtleSk7XG59KTtcblxudmFyIHJlZmxlY3QgPSB7XG4gIC8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3Qpe1xuICAgIHJldHVybiBfYXBwbHkuY2FsbCh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCk7XG4gIH0sXG4gIC8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IC8qLCBuZXdUYXJnZXQqLyl7XG4gICAgdmFyIHByb3RvICAgID0gYXNzZXJ0LmZuKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdKS5wcm90b3R5cGVcbiAgICAgICwgaW5zdGFuY2UgPSAkLmNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpXG4gICAgICAsIHJlc3VsdCAgID0gX2FwcGx5LmNhbGwodGFyZ2V0LCBpbnN0YW5jZSwgYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfSxcbiAgLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpe1xuICAgIGFzc2VydE9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICAkLnNldERlc2ModGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHZhciBkZXNjID0gJC5nZXREZXNjKGFzc2VydE9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfSxcbiAgLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxuICBnZXQ6IGZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5LyosIHJlY2VpdmVyKi8pe1xuICAgIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdXG4gICAgICAsIGRlc2MgPSAkLmdldERlc2MoYXNzZXJ0T2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KSwgcHJvdG87XG4gICAgaWYoZGVzYylyZXR1cm4gJC5oYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgID8gZGVzYy52YWx1ZVxuICAgICAgOiBkZXNjLmdldCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgIDogZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KSlcbiAgICAgID8gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiAkLmdldERlc2MoYXNzZXJ0T2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfSxcbiAgLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYXNzZXJ0T2JqZWN0KHRhcmdldCkpO1xuICB9LFxuICAvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfSxcbiAgLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCl7XG4gICAgcmV0dXJuIF9pc0V4dGVuc2libGUoYXNzZXJ0T2JqZWN0KHRhcmdldCkpO1xuICB9LFxuICAvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG4gIG93bktleXM6IHJlcXVpcmUoJy4vJC5vd24ta2V5cycpLFxuICAvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXtcbiAgICBhc3NlcnRPYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYoX3ByZXZlbnRFeHRlbnNpb25zKV9wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIC8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG4gIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYvKiwgcmVjZWl2ZXIqLyl7XG4gICAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM11cbiAgICAgICwgb3duRGVzYyAgPSAkLmdldERlc2MoYXNzZXJ0T2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KVxuICAgICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICAgIGlmKCFvd25EZXNjKXtcbiAgICAgIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KSkpe1xuICAgICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgICAgfVxuICAgICAgb3duRGVzYyA9ICQuZGVzYygwKTtcbiAgICB9XG4gICAgaWYoJC5oYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgICAgaWYob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSlyZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IgPSAkLmdldERlc2MocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCAkLmRlc2MoMCk7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgJC5zZXREZXNjKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbiAgfVxufTtcbi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxuaWYoc2V0UHJvdG8pcmVmbGVjdC5zZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgdHJ5IHtcbiAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4kZGVmKCRkZWYuRywge1JlZmxlY3Q6IHt9fSk7XG5cbiRkZWYoJGRlZi5TICsgJGRlZi5GICogYnVnZ3lFbnVtZXJhdGUsICdSZWZsZWN0Jywge1xuICAvLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpe1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKGFzc2VydE9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG5cbiRkZWYoJGRlZi5TLCAnUmVmbGVjdCcsIHJlZmxlY3QpOyIsInZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgICAgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgJFJlZ0V4cCA9ICQuZy5SZWdFeHBcbiAgLCBCYXNlICAgID0gJFJlZ0V4cFxuICAsIHByb3RvICAgPSAkUmVnRXhwLnByb3RvdHlwZVxuICAsIHJlICAgICAgPSAvYS9nXG4gIC8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3RcbiAgLCBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlKSAhPT0gcmVcbiAgLy8gUmVnRXhwIGFsbG93cyBhIHJlZ2V4IHdpdGggZmxhZ3MgYXMgdGhlIHBhdHRlcm5cbiAgLCBBTExPV1NfUkVfV0lUSF9GTEFHUyA9IGZ1bmN0aW9uKCl7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAkUmVnRXhwKHJlLCAnaScpID09ICcvYS9pJztcbiAgICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIH0oKTtcbmlmKCQuRlcgJiYgJC5ERVNDKXtcbiAgaWYoIUNPUlJFQ1RfTkVXIHx8ICFBTExPV1NfUkVfV0lUSF9GTEFHUyl7XG4gICAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwYXR0ZXJuLCBmbGFncyl7XG4gICAgICB2YXIgcGF0dGVybklzUmVnRXhwICA9IGNvZihwYXR0ZXJuKSA9PSAnUmVnRXhwJ1xuICAgICAgICAsIGZsYWdzSXNVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgICAgaWYoISh0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cCkgJiYgcGF0dGVybklzUmVnRXhwICYmIGZsYWdzSXNVbmRlZmluZWQpcmV0dXJuIHBhdHRlcm47XG4gICAgICByZXR1cm4gQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwYXR0ZXJuSXNSZWdFeHAgJiYgIWZsYWdzSXNVbmRlZmluZWQgPyBwYXR0ZXJuLnNvdXJjZSA6IHBhdHRlcm4sIGZsYWdzKVxuICAgICAgICA6IG5ldyBCYXNlKHBhdHRlcm5Jc1JlZ0V4cCA/IHBhdHRlcm4uc291cmNlIDogcGF0dGVyblxuICAgICAgICAgICwgcGF0dGVybklzUmVnRXhwICYmIGZsYWdzSXNVbmRlZmluZWQgPyBwYXR0ZXJuLmZsYWdzIDogZmxhZ3MpO1xuICAgIH07XG4gICAgJC5lYWNoLmNhbGwoJC5nZXROYW1lcyhCYXNlKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgIGtleSBpbiAkUmVnRXhwIHx8ICQuc2V0RGVzYygkUmVnRXhwLCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24oaXQpeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAgICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gICAgcmVxdWlyZSgnLi8kLnJlZGVmJykoJC5nLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG4gIH1cbiAgLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuICBpZigvLi9nLmZsYWdzICE9ICdnJykkLnNldERlc2MocHJvdG8sICdmbGFncycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiByZXF1aXJlKCcuLyQucmVwbGFjZXInKSgvXi4qXFwvKFxcdyopJC8sICckMScpXG4gIH0pO1xufVxucmVxdWlyZSgnLi8kLnNwZWNpZXMnKSgkUmVnRXhwKTsiLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uJykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHNbMF0pOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICRhdCAgPSByZXF1aXJlKCcuLyQuc3RyaW5nLWF0JykoZmFsc2UpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKXtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIHRvTGVuZ3RoID0gJC50b0xlbmd0aDtcblxuLy8gc2hvdWxkIHRocm93IGVycm9yIG9uIHJlZ2V4XG4kZGVmKCRkZWYuUCArICRkZWYuRiAqICFyZXF1aXJlKCcuLyQudGhyb3dzJykoZnVuY3Rpb24oKXsgJ3EnLmVuZHNXaXRoKC8uLyk7IH0pLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyosIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLyl7XG4gICAgaWYoY29mKHNlYXJjaFN0cmluZykgPT0gJ1JlZ0V4cCcpdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgdmFyIHRoYXQgPSBTdHJpbmcoJC5hc3NlcnREZWZpbmVkKHRoaXMpKVxuICAgICAgLCBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50c1sxXVxuICAgICAgLCBsZW4gPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICBzZWFyY2hTdHJpbmcgKz0gJyc7XG4gICAgcmV0dXJuIHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoU3RyaW5nLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoU3RyaW5nO1xuICB9XG59KTsiLCJ2YXIgJGRlZiAgICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsIHRvSW5kZXggPSByZXF1aXJlKCcuLyQnKS50b0luZGV4XG4gICwgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAsICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRkZWYoJGRlZi5TICsgJGRlZi5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdXG4gICAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaSAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmKHRvSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKXRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBjb2YgID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcblxuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgaWYoY29mKHNlYXJjaFN0cmluZykgPT0gJ1JlZ0V4cCcpdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgcmV0dXJuICEhflN0cmluZygkLmFzc2VydERlZmluZWQodGhpcykpLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCJ2YXIgc2V0ICAgPSByZXF1aXJlKCcuLyQnKS5zZXRcbiAgLCAkYXQgICA9IHJlcXVpcmUoJy4vJC5zdHJpbmctYXQnKSh0cnVlKVxuICAsIElURVIgID0gcmVxdWlyZSgnLi8kLnVpZCcpLnNhZmUoJ2l0ZXInKVxuICAsICRpdGVyID0gcmVxdWlyZSgnLi8kLml0ZXInKVxuICAsIHN0ZXAgID0gJGl0ZXIuc3RlcDtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi8kLml0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICBzZXQodGhpcywgSVRFUiwge286IFN0cmluZyhpdGVyYXRlZCksIGk6IDB9KTtcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBpdGVyICA9IHRoaXNbSVRFUl1cbiAgICAsIE8gICAgID0gaXRlci5vXG4gICAgLCBpbmRleCA9IGl0ZXIuaVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiBzdGVwKDEpO1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIGl0ZXIuaSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiBzdGVwKDAsIHBvaW50KTtcbn0pOyIsInZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuXG4kZGVmKCRkZWYuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpe1xuICAgIHZhciB0cGwgPSAkLnRvT2JqZWN0KGNhbGxTaXRlLnJhdylcbiAgICAgICwgbGVuID0gJC50b0xlbmd0aCh0cGwubGVuZ3RoKVxuICAgICAgLCBzbG4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlcyA9IFtdXG4gICAgICAsIGkgICA9IDA7XG4gICAgd2hpbGUobGVuID4gaSl7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmKGkgPCBzbG4pcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwidmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJyk7XG5cbiRkZWYoJGRlZi5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi8kLnN0cmluZy1yZXBlYXQnKVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGNvZiAgPSByZXF1aXJlKCcuLyQuY29mJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuXG4vLyBzaG91bGQgdGhyb3cgZXJyb3Igb24gcmVnZXhcbiRkZWYoJGRlZi5QICsgJGRlZi5GICogIXJlcXVpcmUoJy4vJC50aHJvd3MnKShmdW5jdGlvbigpeyAncScuc3RhcnRzV2l0aCgvLi8pOyB9KSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgaWYoY29mKHNlYXJjaFN0cmluZykgPT0gJ1JlZ0V4cCcpdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgdmFyIHRoYXQgID0gU3RyaW5nKCQuYXNzZXJ0RGVmaW5lZCh0aGlzKSlcbiAgICAgICwgaW5kZXggPSAkLnRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50c1sxXSwgdGhhdC5sZW5ndGgpKTtcbiAgICBzZWFyY2hTdHJpbmcgKz0gJyc7XG4gICAgcmV0dXJuIHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZztcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyICQgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBzZXRUYWcgICA9IHJlcXVpcmUoJy4vJC5jb2YnKS5zZXRcbiAgLCB1aWQgICAgICA9IHJlcXVpcmUoJy4vJC51aWQnKVxuICAsIHNoYXJlZCAgID0gcmVxdWlyZSgnLi8kLnNoYXJlZCcpXG4gICwgJGRlZiAgICAgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkcmVkZWYgICA9IHJlcXVpcmUoJy4vJC5yZWRlZicpXG4gICwga2V5T2YgICAgPSByZXF1aXJlKCcuLyQua2V5b2YnKVxuICAsIGVudW1LZXlzID0gcmVxdWlyZSgnLi8kLmVudW0ta2V5cycpXG4gICwgYXNzZXJ0T2JqZWN0ID0gcmVxdWlyZSgnLi8kLmFzc2VydCcpLm9ialxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZVxuICAsIERFU0MgICAgID0gJC5ERVNDXG4gICwgaGFzICAgICAgPSAkLmhhc1xuICAsICRjcmVhdGUgID0gJC5jcmVhdGVcbiAgLCBnZXREZXNjICA9ICQuZ2V0RGVzY1xuICAsIHNldERlc2MgID0gJC5zZXREZXNjXG4gICwgZGVzYyAgICAgPSAkLmRlc2NcbiAgLCAkbmFtZXMgICA9IHJlcXVpcmUoJy4vJC5nZXQtbmFtZXMnKVxuICAsIGdldE5hbWVzID0gJG5hbWVzLmdldFxuICAsIHRvT2JqZWN0ID0gJC50b09iamVjdFxuICAsICRTeW1ib2wgID0gJC5nLlN5bWJvbFxuICAsIHNldHRlciAgID0gZmFsc2VcbiAgLCBUQUcgICAgICA9IHVpZCgndGFnJylcbiAgLCBISURERU4gICA9IHVpZCgnaGlkZGVuJylcbiAgLCBfcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIHVzZU5hdGl2ZSA9ICQuaXNGdW5jdGlvbigkU3ltYm9sKTtcblxudmFyIHNldFN5bWJvbERlc2MgPSBERVNDID8gZnVuY3Rpb24oKXsgLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkXG4gIHRyeSB7XG4gICAgcmV0dXJuICRjcmVhdGUoc2V0RGVzYyh7fSwgSElEREVOLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBzZXREZXNjKHRoaXMsIEhJRERFTiwge3ZhbHVlOiBmYWxzZX0pW0hJRERFTl07XG4gICAgICB9XG4gICAgfSkpW0hJRERFTl0gfHwgc2V0RGVzYztcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gICAgICB2YXIgcHJvdG9EZXNjID0gZ2V0RGVzYyhPYmplY3RQcm90bywga2V5KTtcbiAgICAgIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgICAgIHNldERlc2MoaXQsIGtleSwgRCk7XG4gICAgICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKXNldERlc2MoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbiAgICB9O1xuICB9XG59KCkgOiBzZXREZXNjO1xuXG5mdW5jdGlvbiB3cmFwKHRhZyl7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSAkLnNldCgkY3JlYXRlKCRTeW1ib2wucHJvdG90eXBlKSwgVEFHLCB0YWcpO1xuICBERVNDICYmIHNldHRlciAmJiBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZihoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKXRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgZGVzYygxLCB2YWx1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzeW07XG59XG5cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcbiAgICBpZighRC5lbnVtZXJhYmxlKXtcbiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpc2V0RGVzYyhpdCwgSElEREVOLCBkZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9ICRjcmVhdGUoRCwge2VudW1lcmFibGU6IGRlc2MoMCwgZmFsc2UpfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gc2V0RGVzYyhpdCwga2V5LCBEKTtcbn1cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuICBhc3NlcnRPYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b09iamVjdChQKSlcbiAgICAsIGkgICAgPSAwXG4gICAgLCBsID0ga2V5cy5sZW5ndGhcbiAgICAsIGtleTtcbiAgd2hpbGUobCA+IGkpZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufVxuZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/ICRjcmVhdGUoaXQpIDogZGVmaW5lUHJvcGVydGllcygkY3JlYXRlKGl0KSwgUCk7XG59XG5mdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IF9wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIGtleSk7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV1cbiAgICA/IEUgOiB0cnVlO1xufVxuZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICB2YXIgRCA9IGdldERlc2MoaXQgPSB0b09iamVjdChpdCksIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn1cbmZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ2V0TmFtZXModG9PYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4pcmVzdWx0LnB1c2goa2V5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnZXROYW1lcyh0b09iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCF1c2VOYXRpdmUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICByZXR1cm4gd3JhcCh1aWQoYXJndW1lbnRzWzBdKSk7XG4gIH07XG4gICRyZWRlZigkU3ltYm9sLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpc1tUQUddO1xuICB9KTtcblxuICAkLmNyZWF0ZSAgICAgPSBjcmVhdGU7XG4gICQuc2V0RGVzYyAgICA9IGRlZmluZVByb3BlcnR5O1xuICAkLmdldERlc2MgICAgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICQuc2V0RGVzY3MgICA9IGRlZmluZVByb3BlcnRpZXM7XG4gICQuZ2V0TmFtZXMgICA9ICRuYW1lcy5nZXQgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAkLmdldFN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoJC5ERVNDICYmICQuRlcpJHJlZGVmKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCBwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG59XG5cbnZhciBzeW1ib2xTdGF0aWNzID0ge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIHJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59O1xuLy8gMTkuNC4yLjIgU3ltYm9sLmhhc0luc3RhbmNlXG4vLyAxOS40LjIuMyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlXG4vLyAxOS40LjIuNCBTeW1ib2wuaXRlcmF0b3Jcbi8vIDE5LjQuMi42IFN5bWJvbC5tYXRjaFxuLy8gMTkuNC4yLjggU3ltYm9sLnJlcGxhY2Vcbi8vIDE5LjQuMi45IFN5bWJvbC5zZWFyY2hcbi8vIDE5LjQuMi4xMCBTeW1ib2wuc3BlY2llc1xuLy8gMTkuNC4yLjExIFN5bWJvbC5zcGxpdFxuLy8gMTkuNC4yLjEyIFN5bWJvbC50b1ByaW1pdGl2ZVxuLy8gMTkuNC4yLjEzIFN5bWJvbC50b1N0cmluZ1RhZ1xuLy8gMTkuNC4yLjE0IFN5bWJvbC51bnNjb3BhYmxlc1xuJC5lYWNoLmNhbGwoKFxuICAgICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsJyArXG4gICAgJ3NwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4gICkuc3BsaXQoJywnKSwgZnVuY3Rpb24oaXQpe1xuICAgIHZhciBzeW0gPSByZXF1aXJlKCcuLyQud2tzJykoaXQpO1xuICAgIHN5bWJvbFN0YXRpY3NbaXRdID0gdXNlTmF0aXZlID8gc3ltIDogd3JhcChzeW0pO1xuICB9XG4pO1xuXG5zZXR0ZXIgPSB0cnVlO1xuXG4kZGVmKCRkZWYuRyArICRkZWYuVywge1N5bWJvbDogJFN5bWJvbH0pO1xuXG4kZGVmKCRkZWYuUywgJ1N5bWJvbCcsIHN5bWJvbFN0YXRpY3MpO1xuXG4kZGVmKCRkZWYuUyArICRkZWYuRiAqICF1c2VOYXRpdmUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiBjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VGFnKCQuZy5KU09OLCAnSlNPTicsIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIHdlYWsgICAgICA9IHJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uLXdlYWsnKVxuICAsIGxlYWtTdG9yZSA9IHdlYWsubGVha1N0b3JlXG4gICwgSUQgICAgICAgID0gd2Vhay5JRFxuICAsIFdFQUsgICAgICA9IHdlYWsuV0VBS1xuICAsIGhhcyAgICAgICA9ICQuaGFzXG4gICwgaXNPYmplY3QgID0gJC5pc09iamVjdFxuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgaXNPYmplY3RcbiAgLCB0bXAgICAgICAgPSB7fTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IHJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uJykoJ1dlYWtNYXAnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50c1swXSk7IH07XG59LCB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgaWYoaXNPYmplY3Qoa2V5KSl7XG4gICAgICBpZighaXNFeHRlbnNpYmxlKGtleSkpcmV0dXJuIGxlYWtTdG9yZSh0aGlzKS5nZXQoa2V5KTtcbiAgICAgIGlmKGhhcyhrZXksIFdFQUspKXJldHVybiBrZXlbV0VBS11bdGhpc1tJRF1dO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufSwgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpe1xuICAkLmVhY2guY2FsbChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBwcm90byAgPSAkV2Vha01hcC5wcm90b3R5cGVcbiAgICAgICwgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZXF1aXJlKCcuLyQucmVkZWYnKShwcm90bywga2V5LCBmdW5jdGlvbihhLCBiKXtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGxlYWt5IG1hcFxuICAgICAgaWYoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSl7XG4gICAgICAgIHZhciByZXN1bHQgPSBsZWFrU3RvcmUodGhpcylba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uLXdlYWsnKTtcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uJykoJ1dlYWtTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50c1swXSk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZiAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi8kLmFycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG4kZGVmKCRkZWYuUCwgJ0FycmF5Jywge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZG9tZW5pYy9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vJC51bnNjb3BlJykoJ2luY2x1ZGVzJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxucmVxdWlyZSgnLi8kLmNvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uLzkzNTM3ODFcbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgb3duS2V5cyA9IHJlcXVpcmUoJy4vJC5vd24ta2V5cycpO1xuXG4kZGVmKCRkZWYuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3Qpe1xuICAgIHZhciBPICAgICAgPSAkLnRvT2JqZWN0KG9iamVjdClcbiAgICAgICwgcmVzdWx0ID0ge307XG4gICAgJC5lYWNoLmNhbGwob3duS2V5cyhPKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICQuc2V0RGVzYyhyZXN1bHQsIGtleSwgJC5kZXNjKDAsICQuZ2V0RGVzYyhPLCBrZXkpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiLy8gaHR0cDovL2dvby5nbC9Ya0JyakRcbnZhciAkICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpO1xuZnVuY3Rpb24gY3JlYXRlT2JqZWN0VG9BcnJheShpc0VudHJpZXMpe1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgID0gJC50b09iamVjdChvYmplY3QpXG4gICAgICAsIGtleXMgICA9ICQuZ2V0S2V5cyhPKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBpICAgICAgPSAwXG4gICAgICAsIHJlc3VsdCA9IEFycmF5KGxlbmd0aClcbiAgICAgICwga2V5O1xuICAgIGlmKGlzRW50cmllcyl3aGlsZShsZW5ndGggPiBpKXJlc3VsdFtpXSA9IFtrZXkgPSBrZXlzW2krK10sIE9ba2V5XV07XG4gICAgZWxzZSB3aGlsZShsZW5ndGggPiBpKXJlc3VsdFtpXSA9IE9ba2V5c1tpKytdXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuJGRlZigkZGVmLlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogIGNyZWF0ZU9iamVjdFRvQXJyYXkoZmFsc2UpLFxuICBlbnRyaWVzOiBjcmVhdGVPYmplY3RUb0FycmF5KHRydWUpXG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGRlZiA9IHJlcXVpcmUoJy4vJC5kZWYnKTtcbiRkZWYoJGRlZi5TLCAnUmVnRXhwJywge1xuICBlc2NhcGU6IHJlcXVpcmUoJy4vJC5yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicsIHRydWUpXG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnJlcXVpcmUoJy4vJC5jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkYXQgID0gcmVxdWlyZSgnLi8kLnN0cmluZy1hdCcpKHRydWUpO1xuJGRlZigkZGVmLlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWYgPSByZXF1aXJlKCcuLyQuZGVmJylcbiAgLCAkcGFkID0gcmVxdWlyZSgnLi8kLnN0cmluZy1wYWQnKTtcbiRkZWYoJGRlZi5QLCAnU3RyaW5nJywge1xuICBscGFkOiBmdW5jdGlvbiBscGFkKG4pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG4sIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJHBhZCA9IHJlcXVpcmUoJy4vJC5zdHJpbmctcGFkJyk7XG4kZGVmKCRkZWYuUCwgJ1N0cmluZycsIHtcbiAgcnBhZDogZnVuY3Rpb24gcnBhZChuKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBuLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7IiwiLy8gSmF2YVNjcmlwdCAxLjYgLyBTdHJhd21hbiBhcnJheSBzdGF0aWNzIHNoaW1cbnZhciAkICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCAkZGVmICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgJEFycmF5ICA9ICQuY29yZS5BcnJheSB8fCBBcnJheVxuICAsIHN0YXRpY3MgPSB7fTtcbmZ1bmN0aW9uIHNldFN0YXRpY3Moa2V5cywgbGVuZ3RoKXtcbiAgJC5lYWNoLmNhbGwoa2V5cy5zcGxpdCgnLCcpLCBmdW5jdGlvbihrZXkpe1xuICAgIGlmKGxlbmd0aCA9PSB1bmRlZmluZWQgJiYga2V5IGluICRBcnJheSlzdGF0aWNzW2tleV0gPSAkQXJyYXlba2V5XTtcbiAgICBlbHNlIGlmKGtleSBpbiBbXSlzdGF0aWNzW2tleV0gPSByZXF1aXJlKCcuLyQuY3R4JykoRnVuY3Rpb24uY2FsbCwgW11ba2V5XSwgbGVuZ3RoKTtcbiAgfSk7XG59XG5zZXRTdGF0aWNzKCdwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzJywgMSk7XG5zZXRTdGF0aWNzKCdpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzJywgMyk7XG5zZXRTdGF0aWNzKCdqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YsJyArXG4gICAgICAgICAgICdyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsLHR1cm4nKTtcbiRkZWYoJGRlZi5TLCAnQXJyYXknLCBzdGF0aWNzKTsiLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyICQgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBJdGVyYXRvcnMgICA9IHJlcXVpcmUoJy4vJC5pdGVyJykuSXRlcmF0b3JzXG4gICwgSVRFUkFUT1IgICAgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheVxuICAsIE5MICAgICAgICAgID0gJC5nLk5vZGVMaXN0XG4gICwgSFRDICAgICAgICAgPSAkLmcuSFRNTENvbGxlY3Rpb25cbiAgLCBOTFByb3RvICAgICA9IE5MICYmIE5MLnByb3RvdHlwZVxuICAsIEhUQ1Byb3RvICAgID0gSFRDICYmIEhUQy5wcm90b3R5cGU7XG5pZigkLkZXKXtcbiAgaWYoTkwgJiYgIShJVEVSQVRPUiBpbiBOTFByb3RvKSkkLmhpZGUoTkxQcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgaWYoSFRDICYmICEoSVRFUkFUT1IgaW4gSFRDUHJvdG8pKSQuaGlkZShIVENQcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbn1cbkl0ZXJhdG9ycy5Ob2RlTGlzdCA9IEl0ZXJhdG9ycy5IVE1MQ29sbGVjdGlvbiA9IEFycmF5VmFsdWVzOyIsInZhciAkZGVmICA9IHJlcXVpcmUoJy4vJC5kZWYnKVxuICAsICR0YXNrID0gcmVxdWlyZSgnLi8kLnRhc2snKTtcbiRkZWYoJGRlZi5HICsgJGRlZi5CLCB7XG4gIHNldEltbWVkaWF0ZTogICAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7IiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyICQgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgJGRlZiAgICAgID0gcmVxdWlyZSgnLi8kLmRlZicpXG4gICwgaW52b2tlICAgID0gcmVxdWlyZSgnLi8kLmludm9rZScpXG4gICwgcGFydGlhbCAgID0gcmVxdWlyZSgnLi8kLnBhcnRpYWwnKVxuICAsIG5hdmlnYXRvciA9ICQuZy5uYXZpZ2F0b3JcbiAgLCBNU0lFICAgICAgPSAhIW5hdmlnYXRvciAmJiAvTVNJRSAuXFwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG5mdW5jdGlvbiB3cmFwKHNldCl7XG4gIHJldHVybiBNU0lFID8gZnVuY3Rpb24oZm4sIHRpbWUgLyosIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBzZXQoaW52b2tlKFxuICAgICAgcGFydGlhbCxcbiAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgICQuaXNGdW5jdGlvbihmbikgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufVxuJGRlZigkZGVmLkcgKyAkZGVmLkIgKyAkZGVmLkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6ICB3cmFwKCQuZy5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoJC5nLnNldEludGVydmFsKVxufSk7IiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc3RhdGljcy1hY2NlcHQtcHJpbWl0aXZlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnN0YXRpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5scGFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5ycGFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZ2V4cC5lc2NhcGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnRvLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvanMuYXJyYXkuc3RhdGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvJCcpLmNvcmU7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbiFmdW5jdGlvbihnbG9iYWwpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHdyYXAoaW5uZXJGbixvdXRlckZuLHNlbGYsdHJ5TG9jc0xpc3Qpe3ZhciBnZW5lcmF0b3I9T2JqZWN0LmNyZWF0ZSgob3V0ZXJGbnx8R2VuZXJhdG9yKS5wcm90b3R5cGUpO3JldHVybiBnZW5lcmF0b3IuX2ludm9rZT1tYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sc2VsZnx8bnVsbCxuZXcgQ29udGV4dCh0cnlMb2NzTGlzdHx8W10pKSxnZW5lcmF0b3J9ZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sb2JqLGFyZyl7dHJ5e3JldHVybnt0eXBlOlwibm9ybWFsXCIsYXJnOmZuLmNhbGwob2JqLGFyZyl9fWNhdGNoKGVycil7cmV0dXJue3R5cGU6XCJ0aHJvd1wiLGFyZzplcnJ9fX1mdW5jdGlvbiBHZW5lcmF0b3IoKXt9ZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKXt9ZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKXt9ZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSl7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCl7cHJvdG90eXBlW21ldGhvZF09ZnVuY3Rpb24oYXJnKXtyZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCxhcmcpfX0pfWZ1bmN0aW9uIEF3YWl0QXJndW1lbnQoYXJnKXt0aGlzLmFyZz1hcmd9ZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3Ipe2Z1bmN0aW9uIGludm9rZShtZXRob2QsYXJnKXt2YXIgcmVzdWx0PWdlbmVyYXRvclttZXRob2RdKGFyZyksdmFsdWU9cmVzdWx0LnZhbHVlO3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnQ/UHJvbWlzZS5yZXNvbHZlKHZhbHVlLmFyZykudGhlbihpbnZva2VOZXh0LGludm9rZVRocm93KTpQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKXtyZXR1cm4gcmVzdWx0LnZhbHVlPXVud3JhcHBlZCxyZXN1bHR9KX1mdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCxhcmcpe3ZhciBlbnF1ZXVlUmVzdWx0PXByZXZpb3VzUHJvbWlzZT9wcmV2aW91c1Byb21pc2UudGhlbihmdW5jdGlvbigpe3JldHVybiBpbnZva2UobWV0aG9kLGFyZyl9KTpuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKGludm9rZShtZXRob2QsYXJnKSl9KTtyZXR1cm4gcHJldmlvdXNQcm9taXNlPWVucXVldWVSZXN1bHRbXCJjYXRjaFwiXShmdW5jdGlvbihpZ25vcmVkKXt9KSxlbnF1ZXVlUmVzdWx0fVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZwcm9jZXNzLmRvbWFpbiYmKGludm9rZT1wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSkpO3ZhciBwcmV2aW91c1Byb21pc2UsaW52b2tlTmV4dD1pbnZva2UuYmluZChnZW5lcmF0b3IsXCJuZXh0XCIpLGludm9rZVRocm93PWludm9rZS5iaW5kKGdlbmVyYXRvcixcInRocm93XCIpO2ludm9rZS5iaW5kKGdlbmVyYXRvcixcInJldHVyblwiKTt0aGlzLl9pbnZva2U9ZW5xdWV1ZX1mdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sc2VsZixjb250ZXh0KXt2YXIgc3RhdGU9R2VuU3RhdGVTdXNwZW5kZWRTdGFydDtyZXR1cm4gZnVuY3Rpb24obWV0aG9kLGFyZyl7aWYoc3RhdGU9PT1HZW5TdGF0ZUV4ZWN1dGluZyl0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2lmKHN0YXRlPT09R2VuU3RhdGVDb21wbGV0ZWQpe2lmKFwidGhyb3dcIj09PW1ldGhvZCl0aHJvdyBhcmc7cmV0dXJuIGRvbmVSZXN1bHQoKX1mb3IoOzspe3ZhciBkZWxlZ2F0ZT1jb250ZXh0LmRlbGVnYXRlO2lmKGRlbGVnYXRlKXtpZihcInJldHVyblwiPT09bWV0aG9kfHxcInRocm93XCI9PT1tZXRob2QmJmRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF09PT11bmRlZmluZWQpe2NvbnRleHQuZGVsZWdhdGU9bnVsbDt2YXIgcmV0dXJuTWV0aG9kPWRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdO2lmKHJldHVybk1ldGhvZCl7dmFyIHJlY29yZD10cnlDYXRjaChyZXR1cm5NZXRob2QsZGVsZWdhdGUuaXRlcmF0b3IsYXJnKTtpZihcInRocm93XCI9PT1yZWNvcmQudHlwZSl7bWV0aG9kPVwidGhyb3dcIixhcmc9cmVjb3JkLmFyZztjb250aW51ZX19aWYoXCJyZXR1cm5cIj09PW1ldGhvZCljb250aW51ZX12YXIgcmVjb3JkPXRyeUNhdGNoKGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0sZGVsZWdhdGUuaXRlcmF0b3IsYXJnKTtpZihcInRocm93XCI9PT1yZWNvcmQudHlwZSl7Y29udGV4dC5kZWxlZ2F0ZT1udWxsLG1ldGhvZD1cInRocm93XCIsYXJnPXJlY29yZC5hcmc7Y29udGludWV9bWV0aG9kPVwibmV4dFwiLGFyZz11bmRlZmluZWQ7dmFyIGluZm89cmVjb3JkLmFyZztpZighaW5mby5kb25lKXJldHVybiBzdGF0ZT1HZW5TdGF0ZVN1c3BlbmRlZFlpZWxkLGluZm87Y29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXT1pbmZvLnZhbHVlLGNvbnRleHQubmV4dD1kZWxlZ2F0ZS5uZXh0TG9jLGNvbnRleHQuZGVsZWdhdGU9bnVsbH1pZihcIm5leHRcIj09PW1ldGhvZClzdGF0ZT09PUdlblN0YXRlU3VzcGVuZGVkWWllbGQ/Y29udGV4dC5zZW50PWFyZzpjb250ZXh0LnNlbnQ9dW5kZWZpbmVkO2Vsc2UgaWYoXCJ0aHJvd1wiPT09bWV0aG9kKXtpZihzdGF0ZT09PUdlblN0YXRlU3VzcGVuZGVkU3RhcnQpdGhyb3cgc3RhdGU9R2VuU3RhdGVDb21wbGV0ZWQsYXJnO2NvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSYmKG1ldGhvZD1cIm5leHRcIixhcmc9dW5kZWZpbmVkKX1lbHNlXCJyZXR1cm5cIj09PW1ldGhvZCYmY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIixhcmcpO3N0YXRlPUdlblN0YXRlRXhlY3V0aW5nO3ZhciByZWNvcmQ9dHJ5Q2F0Y2goaW5uZXJGbixzZWxmLGNvbnRleHQpO2lmKFwibm9ybWFsXCI9PT1yZWNvcmQudHlwZSl7c3RhdGU9Y29udGV4dC5kb25lP0dlblN0YXRlQ29tcGxldGVkOkdlblN0YXRlU3VzcGVuZGVkWWllbGQ7dmFyIGluZm89e3ZhbHVlOnJlY29yZC5hcmcsZG9uZTpjb250ZXh0LmRvbmV9O2lmKHJlY29yZC5hcmchPT1Db250aW51ZVNlbnRpbmVsKXJldHVybiBpbmZvO2NvbnRleHQuZGVsZWdhdGUmJlwibmV4dFwiPT09bWV0aG9kJiYoYXJnPXVuZGVmaW5lZCl9ZWxzZVwidGhyb3dcIj09PXJlY29yZC50eXBlJiYoc3RhdGU9R2VuU3RhdGVDb21wbGV0ZWQsbWV0aG9kPVwidGhyb3dcIixhcmc9cmVjb3JkLmFyZyl9fX1mdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcyl7dmFyIGVudHJ5PXt0cnlMb2M6bG9jc1swXX07MSBpbiBsb2NzJiYoZW50cnkuY2F0Y2hMb2M9bG9jc1sxXSksMiBpbiBsb2NzJiYoZW50cnkuZmluYWxseUxvYz1sb2NzWzJdLGVudHJ5LmFmdGVyTG9jPWxvY3NbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KX1mdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KXt2YXIgcmVjb3JkPWVudHJ5LmNvbXBsZXRpb258fHt9O3JlY29yZC50eXBlPVwibm9ybWFsXCIsZGVsZXRlIHJlY29yZC5hcmcsZW50cnkuY29tcGxldGlvbj1yZWNvcmR9ZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKXtpZihpdGVyYWJsZSl7dmFyIGl0ZXJhdG9yTWV0aG9kPWl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtpZihpdGVyYXRvck1ldGhvZClyZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaXRlcmFibGUubmV4dClyZXR1cm4gaXRlcmFibGU7aWYoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpe3ZhciBpPS0xLG5leHQ9ZnVuY3Rpb24gbmV4dCgpe2Zvcig7KytpPGl0ZXJhYmxlLmxlbmd0aDspaWYoaGFzT3duLmNhbGwoaXRlcmFibGUsaSkpcmV0dXJuIG5leHQudmFsdWU9aXRlcmFibGVbaV0sbmV4dC5kb25lPSExLG5leHQ7cmV0dXJuIG5leHQudmFsdWU9dW5kZWZpbmVkLG5leHQuZG9uZT0hMCxuZXh0fTtyZXR1cm4gbmV4dC5uZXh0PW5leHR9fXJldHVybntuZXh0OmRvbmVSZXN1bHR9fWZ1bmN0aW9uIGRvbmVSZXN1bHQoKXtyZXR1cm57dmFsdWU6dW5kZWZpbmVkLGRvbmU6ITB9fXZhciB1bmRlZmluZWQsaGFzT3duPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksaXRlcmF0b3JTeW1ib2w9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3J8fFwiQEBpdGVyYXRvclwiLGluTW9kdWxlPVwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUscnVudGltZT1nbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO2lmKHJ1bnRpbWUpcmV0dXJuIHZvaWQoaW5Nb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1ydW50aW1lKSk7cnVudGltZT1nbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lPWluTW9kdWxlP21vZHVsZS5leHBvcnRzOnt9LHJ1bnRpbWUud3JhcD13cmFwO3ZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0PVwic3VzcGVuZGVkU3RhcnRcIixHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkPVwic3VzcGVuZGVkWWllbGRcIixHZW5TdGF0ZUV4ZWN1dGluZz1cImV4ZWN1dGluZ1wiLEdlblN0YXRlQ29tcGxldGVkPVwiY29tcGxldGVkXCIsQ29udGludWVTZW50aW5lbD17fSxHcD1HZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGU9R2VuZXJhdG9yLnByb3RvdHlwZTtHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGU9R3AuY29uc3RydWN0b3I9R2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3I9R2VuZXJhdG9yRnVuY3Rpb24sR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWU9XCJHZW5lcmF0b3JGdW5jdGlvblwiLHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihnZW5GdW4pe3ZhciBjdG9yPVwiZnVuY3Rpb25cIj09dHlwZW9mIGdlbkZ1biYmZ2VuRnVuLmNvbnN0cnVjdG9yO3JldHVybiBjdG9yP2N0b3I9PT1HZW5lcmF0b3JGdW5jdGlvbnx8XCJHZW5lcmF0b3JGdW5jdGlvblwiPT09KGN0b3IuZGlzcGxheU5hbWV8fGN0b3IubmFtZSk6ITF9LHJ1bnRpbWUubWFyaz1mdW5jdGlvbihnZW5GdW4pe3JldHVybiBnZW5GdW4uX19wcm90b19fPUdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLGdlbkZ1bi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShHcCksZ2VuRnVufSxydW50aW1lLmF3cmFwPWZ1bmN0aW9uKGFyZyl7cmV0dXJuIG5ldyBBd2FpdEFyZ3VtZW50KGFyZyl9LGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSkscnVudGltZS5hc3luYz1mdW5jdGlvbihpbm5lckZuLG91dGVyRm4sc2VsZix0cnlMb2NzTGlzdCl7dmFyIGl0ZXI9bmV3IEFzeW5jSXRlcmF0b3Iod3JhcChpbm5lckZuLG91dGVyRm4sc2VsZix0cnlMb2NzTGlzdCkpO3JldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbik/aXRlcjppdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7cmV0dXJuIHJlc3VsdC5kb25lP3Jlc3VsdC52YWx1ZTppdGVyLm5leHQoKX0pfSxkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLEdwW2l0ZXJhdG9yU3ltYm9sXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxHcC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBHZW5lcmF0b3JdXCJ9LHJ1bnRpbWUua2V5cz1mdW5jdGlvbihvYmplY3Qpe3ZhciBrZXlzPVtdO2Zvcih2YXIga2V5IGluIG9iamVjdClrZXlzLnB1c2goa2V5KTtyZXR1cm4ga2V5cy5yZXZlcnNlKCksZnVuY3Rpb24gbmV4dCgpe2Zvcig7a2V5cy5sZW5ndGg7KXt2YXIga2V5PWtleXMucG9wKCk7aWYoa2V5IGluIG9iamVjdClyZXR1cm4gbmV4dC52YWx1ZT1rZXksbmV4dC5kb25lPSExLG5leHR9cmV0dXJuIG5leHQuZG9uZT0hMCxuZXh0fX0scnVudGltZS52YWx1ZXM9dmFsdWVzLENvbnRleHQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpDb250ZXh0LHJlc2V0OmZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD11bmRlZmluZWQsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwhc2tpcFRlbXBSZXNldClmb3IodmFyIG5hbWUgaW4gdGhpcylcInRcIj09PW5hbWUuY2hhckF0KDApJiZoYXNPd24uY2FsbCh0aGlzLG5hbWUpJiYhaXNOYU4oK25hbWUuc2xpY2UoMSkpJiYodGhpc1tuYW1lXT11bmRlZmluZWQpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciByb290RW50cnk9dGhpcy50cnlFbnRyaWVzWzBdLHJvb3RSZWNvcmQ9cm9vdEVudHJ5LmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09cm9vdFJlY29yZC50eXBlKXRocm93IHJvb3RSZWNvcmQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGV4Y2VwdGlvbil7ZnVuY3Rpb24gaGFuZGxlKGxvYyxjYXVnaHQpe3JldHVybiByZWNvcmQudHlwZT1cInRocm93XCIscmVjb3JkLmFyZz1leGNlcHRpb24sY29udGV4dC5uZXh0PWxvYywhIWNhdWdodH1pZih0aGlzLmRvbmUpdGhyb3cgZXhjZXB0aW9uO2Zvcih2YXIgY29udGV4dD10aGlzLGk9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2k+PTA7LS1pKXt2YXIgZW50cnk9dGhpcy50cnlFbnRyaWVzW2ldLHJlY29yZD1lbnRyeS5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09ZW50cnkudHJ5TG9jKXJldHVybiBoYW5kbGUoXCJlbmRcIik7aWYoZW50cnkudHJ5TG9jPD10aGlzLnByZXYpe3ZhciBoYXNDYXRjaD1oYXNPd24uY2FsbChlbnRyeSxcImNhdGNoTG9jXCIpLGhhc0ZpbmFsbHk9aGFzT3duLmNhbGwoZW50cnksXCJmaW5hbGx5TG9jXCIpO2lmKGhhc0NhdGNoJiZoYXNGaW5hbGx5KXtpZih0aGlzLnByZXY8ZW50cnkuY2F0Y2hMb2MpcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PGVudHJ5LmZpbmFsbHlMb2MpcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKX1lbHNlIGlmKGhhc0NhdGNoKXtpZih0aGlzLnByZXY8ZW50cnkuY2F0Y2hMb2MpcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywhMCl9ZWxzZXtpZighaGFzRmluYWxseSl0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtpZih0aGlzLnByZXY8ZW50cnkuZmluYWxseUxvYylyZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24odHlwZSxhcmcpe2Zvcih2YXIgaT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBlbnRyeT10aGlzLnRyeUVudHJpZXNbaV07aWYoZW50cnkudHJ5TG9jPD10aGlzLnByZXYmJmhhc093bi5jYWxsKGVudHJ5LFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PGVudHJ5LmZpbmFsbHlMb2Mpe3ZhciBmaW5hbGx5RW50cnk9ZW50cnk7YnJlYWt9fWZpbmFsbHlFbnRyeSYmKFwiYnJlYWtcIj09PXR5cGV8fFwiY29udGludWVcIj09PXR5cGUpJiZmaW5hbGx5RW50cnkudHJ5TG9jPD1hcmcmJmFyZzw9ZmluYWxseUVudHJ5LmZpbmFsbHlMb2MmJihmaW5hbGx5RW50cnk9bnVsbCk7dmFyIHJlY29yZD1maW5hbGx5RW50cnk/ZmluYWxseUVudHJ5LmNvbXBsZXRpb246e307cmV0dXJuIHJlY29yZC50eXBlPXR5cGUscmVjb3JkLmFyZz1hcmcsZmluYWxseUVudHJ5P3RoaXMubmV4dD1maW5hbGx5RW50cnkuZmluYWxseUxvYzp0aGlzLmNvbXBsZXRlKHJlY29yZCksQ29udGludWVTZW50aW5lbH0sY29tcGxldGU6ZnVuY3Rpb24ocmVjb3JkLGFmdGVyTG9jKXtpZihcInRocm93XCI9PT1yZWNvcmQudHlwZSl0aHJvdyByZWNvcmQuYXJnO1wiYnJlYWtcIj09PXJlY29yZC50eXBlfHxcImNvbnRpbnVlXCI9PT1yZWNvcmQudHlwZT90aGlzLm5leHQ9cmVjb3JkLmFyZzpcInJldHVyblwiPT09cmVjb3JkLnR5cGU/KHRoaXMucnZhbD1yZWNvcmQuYXJnLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09cmVjb3JkLnR5cGUmJmFmdGVyTG9jJiYodGhpcy5uZXh0PWFmdGVyTG9jKX0sZmluaXNoOmZ1bmN0aW9uKGZpbmFsbHlMb2Mpe2Zvcih2YXIgaT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBlbnRyeT10aGlzLnRyeUVudHJpZXNbaV07aWYoZW50cnkuZmluYWxseUxvYz09PWZpbmFsbHlMb2MpcmV0dXJuIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbixlbnRyeS5hZnRlckxvYykscmVzZXRUcnlFbnRyeShlbnRyeSksQ29udGludWVTZW50aW5lbH19LFwiY2F0Y2hcIjpmdW5jdGlvbih0cnlMb2Mpe2Zvcih2YXIgaT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBlbnRyeT10aGlzLnRyeUVudHJpZXNbaV07aWYoZW50cnkudHJ5TG9jPT09dHJ5TG9jKXt2YXIgcmVjb3JkPWVudHJ5LmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09cmVjb3JkLnR5cGUpe3ZhciB0aHJvd249cmVjb3JkLmFyZztyZXNldFRyeUVudHJ5KGVudHJ5KX1yZXR1cm4gdGhyb3dufX10aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24oaXRlcmFibGUscmVzdWx0TmFtZSxuZXh0TG9jKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6dmFsdWVzKGl0ZXJhYmxlKSxyZXN1bHROYW1lOnJlc3VsdE5hbWUsbmV4dExvYzpuZXh0TG9jfSxDb250aW51ZVNlbnRpbmVsfX19KFwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmP3NlbGY6dGhpcyk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiR2xtZVM5dWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dFkyOXlaUzl1YjJSbFgyMXZaSFZzWlhNdmNtVm5aVzVsY21GMGIzSXZjblZ1ZEdsdFpTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPME5CVlVNc1UwRkJWU3hSUVVOVUxGbEJkMEpCTEZOQlFWTXNUVUZCU3l4UlFVRlRMRkZCUVZNc1MwRkJUU3hoUVVWd1F5eEhRVUZKTEZkQlFWa3NUMEZCVHl4UlFVRlJMRk5CUVZjc1YwRkJWeXhWUVU5eVJDeFBRVXhCTEZkQlFWVXNVVUZCVlN4cFFrRkRiRUlzVVVGQlV5eE5RVUZSTEV0QlEycENMRWRCUVVrc1UwRkJVU3hyUWtGSFVDeFZRV05VTEZGQlFWTXNWVUZCVXl4SFFVRkpMRWxCUVVzc1MwRkRla0lzU1VGRFJTeFBRVUZUTEV0QlFVMHNVMEZCVlN4SlFVRkxMRWRCUVVjc1MwRkJTeXhKUVVGTExFMUJRek5ETEUxQlFVOHNTMEZEVUN4UFFVRlRMRXRCUVUwc1VVRkJVeXhKUVVGTExFMUJhVUpxUXl4UlFVRlRMR05CUTFRc1VVRkJVeXh6UWtGRFZDeFJRVUZUTEN0Q1FWTlVMRkZCUVZNc2RVSkJRWE5DTEZsQlF6VkNMRTlCUVZFc1VVRkJVeXhWUVVGVkxGRkJRVkVzVTBGQlV5eFJRVU16UXl4VlFVRlZMRkZCUVZVc1UwRkJVeXhMUVVNelFpeE5RVUZQTEUxQlFVc3NVVUZCVVN4UFFVRlJMRkZCT0VKc1F5eFJRVUZUTEdWQlFXTXNTMEZEY2tJc1MwRkJTeXhKUVVGTkxFbEJSMklzVVVGQlV5eGxRVUZqTEZkQlIzSkNMRkZCUVZNc1VVRkJUeXhQUVVGUkxFdEJRM1JDTEVkQlFVa3NVVUZCVXl4VlFVRlZMRkZCUVZFc1MwRkRNMElzVFVGQlVTeFBRVUZQTEV0QlEyNUNMRTlCUVU4c2FVSkJRV2xDTEdWQlEzQkNMRkZCUVZFc1VVRkJVU3hOUVVGTkxFdEJRVXNzUzBGQlN5eFhRVUZaTEdGQlF6VkRMRkZCUVZFc1VVRkJVU3hQUVVGUExFdEJRVXNzVTBGQlV5eFhRV2xDYmtNc1RVRkVRU3hSUVVGUExFMUJRVkVzVlVGRFVpeFRRV0ZtTEZGQlFWTXNVMEZCVVN4UFFVRlJMRXRCUTNaQ0xFZEJRVWtzWlVGaFJpeG5Ra0ZCYTBJc1owSkJRV2RDTEV0QlFVc3NWMEZEY2tNc1RVRkJUeXhSUVVGUExFOUJRVkVzVDBGRGJrSXNSMEZCU1N4VFFVRlJMRk5CUVZNc1UwRkRlRUlzVVVGQlVTeFBRVUZQTEU5QlFWRXNUMEZQTTBJc1QwRkdRU3hwUWtGQmEwSXNZMEZCWXl4VFFVRlRMRk5CUVZNc1dVRkZNME1zWTBGcVEyTXNaMEpCUVZvc1ZVRkJkMElzVVVGQlVTeFRRVU42UXl4UFFVRlRMRkZCUVZFc1QwRkJUeXhMUVVGTExGRkJSeTlDTEVsQlIwa3NhVUpCU0VFc1YwRkJZU3hQUVVGUExFdEJRVXNzVlVGQlZ5eFJRVU53UXl4WlFVRmpMRTlCUVU4c1MwRkJTeXhWUVVGWExGRkJRM1JDTEZGQlFVOHNTMEZCU3l4VlFVRlhMRk5CWjBNeFF5eE5RVUZMTEZGQlFWVXNVVUZ2UW1wQ0xGRkJRVk1zYTBKQlFXbENMRkZCUVZNc1MwRkJUU3hUUVVOMlF5eEhRVUZKTEU5QlFWRXNjMEpCUlZvc1QwRkJUeXhWUVVGblFpeFBRVUZSTEV0QlF6ZENMRWRCUVVrc1VVRkJWU3hyUWtGRFdpeExRVUZOTEVsQlFVa3NUMEZCVFN3clFrRkhiRUlzU1VGQlNTeFJRVUZWTEd0Q1FVRnRRaXhEUVVNdlFpeEhRVUZsTEZWQlFWZ3NUMEZEUml4TFFVRk5MRWxCUzFJc1QwRkJUeXhqUVVkVUxFOUJRV0VzUTBGRFdDeEhRVUZKTEZWQlFWY3NVVUZCVVN4UlFVTjJRaXhKUVVGSkxGTkJRVlVzUTBGRFdpeEhRVUZsTEZkQlFWZ3NVVUZEV1N4VlFVRllMRkZCUVhOQ0xGTkJRVk1zVTBGQlV5eFZRVUZaTEZWQlFWa3NRMEZIYmtVc1VVRkJVU3hUUVVGWExFbEJTVzVDTEVsQlFVa3NZMEZCWlN4VFFVRlRMRk5CUVZNc1UwRkRja01zU1VGQlNTeGhRVUZqTEVOQlEyaENMRWRCUVVrc1VVRkJVeXhUUVVGVExHRkJRV01zVTBGQlV5eFRRVUZWTEVsQlEzWkVMRWxCUVc5Q0xGVkJRV2hDTEU5QlFVOHNTMEZCYTBJc1EwRkhNMElzVDBGQlV5eFJRVU5VTEVsQlFVMHNUMEZCVHl4SFFVTmlMRmRCU1Vvc1IwRkJaU3hYUVVGWUxFOUJSMFlzVTBGSlNpeEhRVUZKTEZGQlFWTXNVMEZEV0N4VFFVRlRMRk5CUVZNc1VVRkRiRUlzVTBGQlV5eFRRVU5VTEVsQlIwWXNTVUZCYjBJc1ZVRkJhRUlzVDBGQlR5eExRVUZyUWl4RFFVTXpRaXhSUVVGUkxGTkJRVmNzUzBGSmJrSXNUMEZCVXl4UlFVTlVMRWxCUVUwc1QwRkJUeXhIUVVOaUxGVkJUVVlzVDBGQlV5eFBRVU5VTEVsQlFVMHNVMEZGVGl4SlFVRkpMRTFCUVU4c1QwRkJUeXhIUVVOc1FpeExRVUZKTEV0QlFVc3NTMEZMVUN4TlFVUkJMRTlCUVZFc2RVSkJRMFFzU1VGS1VDeFRRVUZSTEZOQlFWTXNXVUZCWXl4TFFVRkxMRTFCUTNCRExGRkJRVkVzUzBGQlR5eFRRVUZUTEZGQlRURkNMRkZCUVZFc1UwRkJWeXhMUVVkeVFpeEhRVUZsTEZOQlFWZ3NUMEZEUlN4UlFVRlZMSFZDUVVOYUxGRkJRVkVzUzBGQlR5eEpRVVZtTEZGQlFWRXNTMEZCVHl4alFVZGFMRWxCUVdVc1ZVRkJXQ3hQUVVGdlFpeERRVU0zUWl4SFFVRkpMRkZCUVZVc2RVSkJSVm9zUzBGRVFTeFBRVUZSTEd0Q1FVTkdMRWRCUjBvc1UwRkJVU3hyUWtGQmEwSXNUMEZITlVJc1QwRkJVeXhQUVVOVUxFbEJRVTBzWlVGSFdTeFhRVUZZTEZGQlExUXNVVUZCVVN4UFFVRlBMRk5CUVZVc1NVRkhNMElzVDBGQlVTeHBRa0ZGVWl4SlFVRkpMRkZCUVZNc1UwRkJVeXhSUVVGVExFdEJRVTBzVVVGRGNrTXNTVUZCYjBJc1YwRkJhRUlzVDBGQlR5eExRVUZ0UWl4RFFVYzFRaXhOUVVGUkxGRkJRVkVzUzBGRFdpeHJRa0ZEUVN4elFrRkZTaXhKUVVGSkxFOUJRMFlzVFVGQlR5eFBRVUZQTEVsQlEyUXNTMEZCVFN4UlFVRlJMRXRCUjJoQ0xFbEJRVWtzVDBGQlR5eE5RVUZSTEdsQ1FVOXFRaXhOUVVGUExFdEJUa2dzVTBGQlVTeFZRVUYxUWl4VFFVRllMRk5CUjNSQ0xFbEJRVTBzWlVGTlpTeFZRVUZvUWl4UFFVRlBMRTlCUTJoQ0xFMUJRVkVzYTBKQlIxSXNUMEZCVXl4UlFVTlVMRWxCUVUwc1QwRkJUeXhQUVd0Q2NrSXNVVUZCVXl4alFVRmhMRTFCUTNCQ0xFZEJRVWtzVVVGQlZTeFBRVUZSTEV0QlFVc3NSMEZGZGtJc1MwRkJTeXhSUVVOUUxFMUJRVTBzVTBGQlZ5eExRVUZMTEVsQlIzQkNMRWxCUVVzc1VVRkRVQ3hOUVVGTkxGZEJRV0VzUzBGQlN5eEhRVU40UWl4TlFVRk5MRk5CUVZjc1MwRkJTeXhKUVVkNFFpeExRVUZMTEZkQlFWY3NTMEZCU3l4UFFVZDJRaXhSUVVGVExHVkJRV01zVDBGRGNrSXNSMEZCU1N4UlFVRlRMRTFCUVUwc1kwRkRia0lzVVVGQlR5eExRVUZQTEdWQlExQXNVVUZCVHl4SlFVTmtMRTFCUVUwc1YwRkJZU3hQUVVkeVFpeFJRVUZUTEZOQlFWRXNZVUZKWml4TFFVRkxMR0ZCUVdkQ0xFOUJRVkVzVTBGRE4wSXNXVUZCV1N4UlFVRlJMR0ZCUVdNc1RVRkRiRU1zUzBGQlN5eFBRVUZOTEVkQk9FSmlMRkZCUVZNc1VVRkJUeXhWUVVOa0xFZEJRVWtzVTBGQlZTeERRVU5hTEVkQlFVa3NaMEpCUVdsQ0xGTkJRVk1zWlVGRE9VSXNTVUZCU1N4bFFVTkdMRTFCUVU4c1owSkJRV1VzUzBGQlN5eFRRVWMzUWl4SlFVRTJRaXhyUWtGQmJFSXNWVUZCVXl4TFFVTnNRaXhOUVVGUExGTkJSMVFzUzBGQlN5eE5RVUZOTEZOQlFWTXNVVUZCVXl4RFFVTXpRaXhIUVVGSkxFZEJRVWtzUjBGQlNTeExRVUZQTEZGQlFWTXNVVUZETVVJc1QwRkJVeXhGUVVGSkxGTkJRVk1zVVVGRGNFSXNSMEZCU1N4UFFVRlBMRXRCUVVzc1UwRkJWU3hIUVVkNFFpeE5RVVpCTEUxQlFVc3NUVUZCVVN4VFFVRlRMRWRCUTNSQ0xFdEJRVXNzVFVGQlR5eEZRVU5NTEVsQlQxZ3NUMEZJUVN4TlFVRkxMRTFCUVZFc1ZVRkRZaXhMUVVGTExFMUJRVThzUlVGRlRDeExRVWRVTEU5QlFVOHNUVUZCU3l4TFFVRlBMRTFCUzNaQ0xFOUJRVk1zUzBGQlRTeFpRVWxxUWl4UlFVRlRMR05CUTFBc1QwRkJVeXhOUVVGUExGVkJRVmNzVFVGQlRTeEhRV3hqYmtNc1IwRkRTU3hYUVVSQkxFOUJRVk1zVDBGQlR5eFZRVUZWTEdWQlJURkNMR1ZCUTJkQ0xHdENRVUZZTEZOQlFYbENMRTlCUVU4c1ZVRkJXU3hoUVVWcVJDeFRRVUUyUWl4blFrRkJXQ3hSUVVOc1FpeFJRVUZWTEU5QlFVOHNhMEpCUTNKQ0xFbEJRVWtzVVVGUlJpeFpRVkJKTEZkQlIwWXNUMEZCVHl4UlFVRlZMRk5CVTNKQ0xGTkJRVlVzVDBGQlR5eHRRa0ZCY1VJc1UwRkJWeXhQUVVGUExGZEJZWGhFTEZGQlFWRXNTMEZCVHl4SlFXOUNaaXhKUVVGSkxIZENRVUY1UWl4cFFrRkRla0lzZFVKQlFYbENMR2xDUVVONlFpeHJRa0ZCYjBJc1dVRkRjRUlzYTBKQlFXOUNMRmxCU1hCQ0xHOUNRVlZCTEVkQlFVc3NNa0pCUVRKQ0xGVkJRVmtzVlVGQlZTeFRRVU14UkN4dFFrRkJhMElzVlVGQldTeEhRVUZITEZsQlFXTXNNa0pCUXk5RExESkNRVUV5UWl4WlFVRmpMR3RDUVVONlF5eHJRa0ZCYTBJc1dVRkJZeXh2UWtGWmFFTXNVVUZCVVN4dlFrRkJjMElzVTBGQlV5eFJRVU55UXl4SFFVRkpMRTFCUVhsQ0xHdENRVUZZTEZOQlFYbENMRTlCUVU4c1YwRkRiRVFzVDBGQlR5eE5RVU5JTEU5QlFWTXNiVUpCUnpKQ0xIVkNRVUZ1UXl4TFFVRkxMR0ZCUVdVc1MwRkJTeXhQUVVNeFFpeEhRVWRPTEZGQlFWRXNTMEZCVHl4VFFVRlRMRkZCUjNSQ0xFMUJSa0VzVVVGQlR5eFZRVUZaTERKQ1FVTnVRaXhQUVVGUExGVkJRVmtzVDBGQlR5eFBRVUZQTEVsQlF6RkNMRkZCVVZRc1VVRkJVU3hOUVVGUkxGTkJRVk1zUzBGRGRrSXNUVUZCVHl4SlFVRkpMR1ZCUVdNc1RVRTJSVE5DTEhOQ1FVRnpRaXhqUVVGakxGZEJTM0JETEZGQlFWRXNUVUZCVVN4VFFVRlRMRkZCUVZNc1VVRkJVeXhMUVVGTkxHRkJReTlETEVkQlFVa3NUVUZCVHl4SFFVRkpMR1ZCUTJJc1MwRkJTeXhSUVVGVExGRkJRVk1zUzBGQlRTeGhRVWN2UWl4UFFVRlBMRk5CUVZFc2IwSkJRVzlDTEZOQlF5OUNMRXRCUTBFc1MwRkJTeXhQUVVGUExFdEJRVXNzVTBGQlV5eFJRVU40UWl4TlFVRlBMRkZCUVU4c1MwRkJUeXhQUVVGUExFMUJRVkVzUzBGQlN5eFZRVzlLYWtRc2MwSkJRWE5DTEVsQlJYUkNMRWRCUVVjc1owSkJRV3RDTEZkQlEyNUNMRTFCUVU4c1QwRkhWQ3hIUVVGSExGTkJRVmNzVjBGRFdpeE5RVUZQTEhOQ1FXdERWQ3hSUVVGUkxFdEJRVThzVTBGQlV5eFJRVU4wUWl4SFFVRkpMRkZCUTBvc1MwRkJTeXhIUVVGSkxFOUJRVThzVVVGRFpDeExRVUZMTEV0QlFVc3NTVUZOV2l4UFFVcEJMRTFCUVVzc1ZVRkpSU3hSUVVGVExGRkJRMlFzUzBGQlR5eExRVUZMTEZGQlFWRXNRMEZEYkVJc1IwRkJTU3hMUVVGTkxFdEJRVXNzUzBGRFppeEpRVUZKTEUxQlFVOHNVVUZIVkN4TlFVWkJMRTFCUVVzc1RVRkJVU3hKUVVOaUxFdEJRVXNzVFVGQlR5eEZRVU5NTEV0QlVWZ3NUVUZFUVN4TlFVRkxMRTFCUVU4c1JVRkRUQ3hQUVhORFdDeFJRVUZSTEU5QlFWTXNUMEZOYWtJc1VVRkJVU3hYUVVOT0xGbEJRV0VzVVVGRllpeE5RVUZQTEZOQlFWTXNaVUZUWkN4SFFWSkJMRXRCUVVzc1MwRkJUeXhGUVVOYUxFdEJRVXNzUzBGQlR5eEZRVU5hTEV0QlFVc3NTMEZCVHl4VlFVTmFMRXRCUVVzc1RVRkJUeXhGUVVOYUxFdEJRVXNzVTBGQlZ5eExRVVZvUWl4TFFVRkxMRmRCUVZjc1VVRkJVU3huUWtGRmJrSXNZMEZEU0N4SlFVRkxMRWRCUVVrc1VVRkJVU3hOUVVWUkxFMUJRVzVDTEV0QlFVc3NUMEZCVHl4SlFVTmFMRTlCUVU4c1MwRkJTeXhMUVVGTkxGRkJRMnBDTEU5QlFVOHNTMEZCU3l4TlFVRk5MRTFCUTNKQ0xFdEJRVXNzVFVGQlVTeFpRVTF5UWl4TFFVRk5MRmRCUTBvc1MwRkJTeXhOUVVGUExFTkJSVm9zU1VGQlNTeFhRVUZaTEV0QlFVc3NWMEZCVnl4SFFVTTFRaXhYUVVGaExGVkJRVlVzVlVGRE0wSXNTVUZCZDBJc1ZVRkJjRUlzVjBGQlZ5eExRVU5pTEV0QlFVMHNXVUZCVnl4SFFVZHVRaXhQUVVGUExFMUJRVXNzVFVGSFpDeHJRa0ZCYlVJc1UwRkJVeXhYUVUweFFpeFJRVUZUTEZGQlFVOHNTVUZCU3l4UlFVbHVRaXhOUVVoQkxGRkJRVThzUzBGQlR5eFJRVU5rTEU5QlFVOHNTVUZCVFN4VlFVTmlMRkZCUVZFc1MwRkJUeXhOUVVOT0xFOUJWRmdzUjBGQlNTeExRVUZMTEV0QlExQXNTMEZCVFN4VlFWZFNMRXRCUVVzc1IwRlNSQ3hUUVVGVkxFdEJVVXdzUlVGQlNTeExRVUZMTEZkQlFWY3NUMEZCVXl4RlFVRkhMRWRCUVVzc1NVRkJTeXhGUVVGSExFTkJRM0JFTEVkQlFVa3NUMEZCVVN4TFFVRkxMRmRCUVZjc1IwRkRlRUlzVDBGQlV5eE5RVUZOTEZWQlJXNUNMRWxCUVhGQ0xGTkJRV3BDTEUxQlFVMHNUMEZKVWl4TlFVRlBMRkZCUVU4c1RVRkhhRUlzU1VGQlNTeE5RVUZOTEZGQlFWVXNTMEZCU3l4TFFVRk5MRU5CUXpkQ0xFZEJRVWtzVlVGQlZ5eFBRVUZQTEV0QlFVc3NUVUZCVHl4WlFVTTVRaXhYUVVGaExFOUJRVThzUzBGQlN5eE5RVUZQTEdGQlJYQkRMRWxCUVVrc1ZVRkJXU3hYUVVGWkxFTkJRekZDTEVkQlFVa3NTMEZCU3l4TFFVRlBMRTFCUVUwc1UwRkRjRUlzVFVGQlR5eFJRVUZQTEUxQlFVMHNWVUZCVlN4RlFVTjZRaXhKUVVGSkxFdEJRVXNzUzBGQlR5eE5RVUZOTEZkQlF6TkNMRTFCUVU4c1VVRkJUeXhOUVVGTkxHZENRVWRxUWl4SlFVRkpMRlZCUTFRc1IwRkJTU3hMUVVGTExFdEJRVThzVFVGQlRTeFRRVU53UWl4TlFVRlBMRkZCUVU4c1RVRkJUU3hWUVVGVkxFOUJSek5DTEVOQlFVRXNTVUZCU1N4WFFVMVVMRXRCUVUwc1NVRkJTU3hQUVVGTkxIbERRVXhvUWl4SlFVRkpMRXRCUVVzc1MwRkJUeXhOUVVGTkxGZEJRM0JDTEUxQlFVOHNVVUZCVHl4TlFVRk5MR2RDUVZVNVFpeFBRVUZSTEZOQlFWTXNTMEZCVFN4TFFVTnlRaXhKUVVGTExFZEJRVWtzUjBGQlNTeExRVUZMTEZkQlFWY3NUMEZCVXl4RlFVRkhMRWRCUVVzc1NVRkJTeXhGUVVGSExFTkJRM0JFTEVkQlFVa3NUMEZCVVN4TFFVRkxMRmRCUVZjc1JVRkROVUlzU1VGQlNTeE5RVUZOTEZGQlFWVXNTMEZCU3l4TlFVTnlRaXhQUVVGUExFdEJRVXNzVFVGQlR5eGxRVU51UWl4TFFVRkxMRXRCUVU4c1RVRkJUU3hYUVVGWkxFTkJRMmhETEVkQlFVa3NZMEZCWlN4TFFVTnVRaXhSUVVsQkxHVkJRMVVzVlVGQlZDeE5RVU5UTEdGQlFWUXNUMEZEUkN4aFFVRmhMRkZCUVZVc1MwRkRka0lzUzBGQlR5eGhRVUZoTEdGQlIzUkNMR0ZCUVdVc1MwRkhha0lzU1VGQlNTeFJRVUZUTEdGQlFXVXNZVUZCWVN4aFFWVjZReXhQUVZSQkxGRkJRVThzUzBGQlR5eExRVU5rTEU5QlFVOHNTVUZCVFN4SlFVVlVMR0ZCUTBZc1MwRkJTeXhMUVVGUExHRkJRV0VzVjBGRmVrSXNTMEZCU3l4VFFVRlRMRkZCUjFRc2EwSkJSMVFzVTBGQlZTeFRRVUZUTEU5QlFWRXNWVUZEZWtJc1IwRkJiMElzVlVGQmFFSXNUMEZCVHl4TFFVTlVMRXRCUVUwc1VVRkJUeXhIUVVkTExGZEJRV2hDTEU5QlFVOHNUVUZEVXl4aFFVRm9RaXhQUVVGUExFdEJRMVFzUzBGQlN5eExRVUZQTEU5QlFVOHNTVUZEVFN4WFFVRm9RaXhQUVVGUExFMUJRMmhDTEV0QlFVc3NTMEZCVHl4UFFVRlBMRWxCUTI1Q0xFdEJRVXNzUzBGQlR5eFBRVU5oTEZkQlFXaENMRTlCUVU4c1RVRkJjVUlzVjBGRGNrTXNTMEZCU3l4TFFVRlBMRmRCU1doQ0xFOUJRVkVzVTBGQlV5eFpRVU5tTEVsQlFVc3NSMEZCU1N4SFFVRkpMRXRCUVVzc1YwRkJWeXhQUVVGVExFVkJRVWNzUjBGQlN5eEpRVUZMTEVWQlFVY3NRMEZEY0VRc1IwRkJTU3hQUVVGUkxFdEJRVXNzVjBGQlZ5eEZRVU0xUWl4SlFVRkpMRTFCUVUwc1lVRkJaU3hYUVVkMlFpeE5RVVpCTEUxQlFVc3NVMEZCVXl4TlFVRk5MRmRCUVZrc1RVRkJUU3hWUVVOMFF5eGpRVUZqTEU5QlExQXNiVUpCUzJJc1VVRkJVeXhUUVVGVExGRkJRMmhDTEVsQlFVc3NSMEZCU1N4SFFVRkpMRXRCUVVzc1YwRkJWeXhQUVVGVExFVkJRVWNzUjBGQlN5eEpRVUZMTEVWQlFVY3NRMEZEY0VRc1IwRkJTU3hQUVVGUkxFdEJRVXNzVjBGQlZ5eEZRVU0xUWl4SlFVRkpMRTFCUVUwc1UwRkJWeXhQUVVGUkxFTkJRek5DTEVkQlFVa3NVVUZCVXl4TlFVRk5MRlZCUTI1Q0xFbEJRVzlDTEZWQlFXaENMRTlCUVU4c1MwRkJhMElzUTBGRE0wSXNSMEZCU1N4UlFVRlRMRTlCUVU4c1IwRkRjRUlzWlVGQll5eFBRVVZvUWl4TlFVRlBMRk5CVFZnc1MwRkJUU3hKUVVGSkxFOUJRVTBzTUVKQlIyeENMR05CUVdVc1UwRkJVeXhUUVVGVkxGZEJRVmtzVTBGUE5VTXNUVUZPUVN4TlFVRkxMRlZCUTBnc1UwRkJWU3hQUVVGUExGVkJRMnBDTEZkQlFWa3NWMEZEV2l4UlFVRlRMRk5CUjBvc2IwSkJUMDhzWjBKQlFWZ3NVVUZCYzBJc1QwRkRXQ3huUWtGQldDeFJRVUZ6UWl4UFFVTmlMR2RDUVVGVUxFMUJRVzlDTEV0QlFVOGlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQXlNREUwTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJR2gwZEhCek9pOHZjbUYzTG1kcGRHaDFZaTVqYjIwdlptRmpaV0p2YjJzdmNtVm5aVzVsY21GMGIzSXZiV0Z6ZEdWeUwweEpRMFZPVTBVZ1ptbHNaUzRnUVc1Y2JpQXFJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUWdiMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJseHVJQ29nZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDb3ZYRzVjYmlFb1puVnVZM1JwYjI0b1oyeHZZbUZzS1NCN1hHNGdJRndpZFhObElITjBjbWxqZEZ3aU8xeHVYRzRnSUhaaGNpQm9ZWE5QZDI0Z1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TzF4dUlDQjJZWElnZFc1a1pXWnBibVZrT3lBdkx5Qk5iM0psSUdOdmJYQnlaWE56YVdKc1pTQjBhR0Z1SUhadmFXUWdNQzVjYmlBZ2RtRnlJR2wwWlhKaGRHOXlVM2x0WW05c0lEMWNiaUFnSUNCMGVYQmxiMllnVTNsdFltOXNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnVTNsdFltOXNMbWwwWlhKaGRHOXlJSHg4SUZ3aVFFQnBkR1Z5WVhSdmNsd2lPMXh1WEc0Z0lIWmhjaUJwYmsxdlpIVnNaU0E5SUhSNWNHVnZaaUJ0YjJSMWJHVWdQVDA5SUZ3aWIySnFaV04wWENJN1hHNGdJSFpoY2lCeWRXNTBhVzFsSUQwZ1oyeHZZbUZzTG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlR0Y2JpQWdhV1lnS0hKMWJuUnBiV1VwSUh0Y2JpQWdJQ0JwWmlBb2FXNU5iMlIxYkdVcElIdGNiaUFnSUNBZ0lDOHZJRWxtSUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNCcGN5QmtaV1pwYm1Wa0lHZHNiMkpoYkd4NUlHRnVaQ0IzWlNkeVpTQnBiaUJoSUcxdlpIVnNaU3hjYmlBZ0lDQWdJQzh2SUcxaGEyVWdkR2hsSUdWNGNHOXlkSE1nYjJKcVpXTjBJR2xrWlc1MGFXTmhiQ0IwYnlCeVpXZGxibVZ5WVhSdmNsSjFiblJwYldVdVhHNGdJQ0FnSUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKMWJuUnBiV1U3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRVJ2YmlkMElHSnZkR2hsY2lCbGRtRnNkV0YwYVc1bklIUm9aU0J5WlhOMElHOW1JSFJvYVhNZ1ptbHNaU0JwWmlCMGFHVWdjblZ1ZEdsdFpTQjNZWE5jYmlBZ0lDQXZMeUJoYkhKbFlXUjVJR1JsWm1sdVpXUWdaMnh2WW1Gc2JIa3VYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ0x5OGdSR1ZtYVc1bElIUm9aU0J5ZFc1MGFXMWxJR2RzYjJKaGJHeDVJQ2hoY3lCbGVIQmxZM1JsWkNCaWVTQm5aVzVsY21GMFpXUWdZMjlrWlNrZ1lYTWdaV2wwYUdWeVhHNGdJQzh2SUcxdlpIVnNaUzVsZUhCdmNuUnpJQ2hwWmlCM1pTZHlaU0JwYmlCaElHMXZaSFZzWlNrZ2IzSWdZU0J1Wlhjc0lHVnRjSFI1SUc5aWFtVmpkQzVjYmlBZ2NuVnVkR2x0WlNBOUlHZHNiMkpoYkM1eVpXZGxibVZ5WVhSdmNsSjFiblJwYldVZ1BTQnBiazF2WkhWc1pTQS9JRzF2WkhWc1pTNWxlSEJ2Y25SeklEb2dlMzA3WEc1Y2JpQWdablZ1WTNScGIyNGdkM0poY0NocGJtNWxja1p1TENCdmRYUmxja1p1TENCelpXeG1MQ0IwY25sTWIyTnpUR2x6ZENrZ2UxeHVJQ0FnSUM4dklFbG1JRzkxZEdWeVJtNGdjSEp2ZG1sa1pXUXNJSFJvWlc0Z2IzVjBaWEpHYmk1d2NtOTBiM1I1Y0dVZ2FXNXpkR0Z1WTJWdlppQkhaVzVsY21GMGIzSXVYRzRnSUNBZ2RtRnlJR2RsYm1WeVlYUnZjaUE5SUU5aWFtVmpkQzVqY21WaGRHVW9LRzkxZEdWeVJtNGdmSHdnUjJWdVpYSmhkRzl5S1M1d2NtOTBiM1I1Y0dVcE8xeHVYRzRnSUNBZ1oyVnVaWEpoZEc5eUxsOXBiblp2YTJVZ1BTQnRZV3RsU1c1MmIydGxUV1YwYUc5a0tGeHVJQ0FnSUNBZ2FXNXVaWEpHYml3Z2MyVnNaaUI4ZkNCdWRXeHNMRnh1SUNBZ0lDQWdibVYzSUVOdmJuUmxlSFFvZEhKNVRHOWpjMHhwYzNRZ2ZId2dXMTBwWEc0Z0lDQWdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQm5aVzVsY21GMGIzSTdYRzRnSUgxY2JpQWdjblZ1ZEdsdFpTNTNjbUZ3SUQwZ2QzSmhjRHRjYmx4dUlDQXZMeUJVY25rdlkyRjBZMmdnYUdWc2NHVnlJSFJ2SUcxcGJtbHRhWHBsSUdSbGIzQjBhVzFwZW1GMGFXOXVjeTRnVW1WMGRYSnVjeUJoSUdOdmJYQnNaWFJwYjI1Y2JpQWdMeThnY21WamIzSmtJR3hwYTJVZ1kyOXVkR1Y0ZEM1MGNubEZiblJ5YVdWelcybGRMbU52YlhCc1pYUnBiMjR1SUZSb2FYTWdhVzUwWlhKbVlXTmxJR052ZFd4a1hHNGdJQzh2SUdoaGRtVWdZbVZsYmlBb1lXNWtJSGRoY3lCd2NtVjJhVzkxYzJ4NUtTQmtaWE5wWjI1bFpDQjBieUIwWVd0bElHRWdZMnh2YzNWeVpTQjBieUJpWlZ4dUlDQXZMeUJwYm5admEyVmtJSGRwZEdodmRYUWdZWEpuZFcxbGJuUnpMQ0JpZFhRZ2FXNGdZV3hzSUhSb1pTQmpZWE5sY3lCM1pTQmpZWEpsSUdGaWIzVjBJSGRsWEc0Z0lDOHZJR0ZzY21WaFpIa2dhR0YyWlNCaGJpQmxlR2x6ZEdsdVp5QnRaWFJvYjJRZ2QyVWdkMkZ1ZENCMGJ5QmpZV3hzTENCemJ5QjBhR1Z5WlNkeklHNXZJRzVsWldSY2JpQWdMeThnZEc4Z1kzSmxZWFJsSUdFZ2JtVjNJR1oxYm1OMGFXOXVJRzlpYW1WamRDNGdWMlVnWTJGdUlHVjJaVzRnWjJWMElHRjNZWGtnZDJsMGFDQmhjM04xYldsdVoxeHVJQ0F2THlCMGFHVWdiV1YwYUc5a0lIUmhhMlZ6SUdWNFlXTjBiSGtnYjI1bElHRnlaM1Z0Wlc1MExDQnphVzVqWlNCMGFHRjBJR2hoY0hCbGJuTWdkRzhnWW1VZ2RISjFaVnh1SUNBdkx5QnBiaUJsZG1WeWVTQmpZWE5sTENCemJ5QjNaU0JrYjI0bmRDQm9ZWFpsSUhSdklIUnZkV05vSUhSb1pTQmhjbWQxYldWdWRITWdiMkpxWldOMExpQlVhR1ZjYmlBZ0x5OGdiMjVzZVNCaFpHUnBkR2x2Ym1Gc0lHRnNiRzlqWVhScGIyNGdjbVZ4ZFdseVpXUWdhWE1nZEdobElHTnZiWEJzWlhScGIyNGdjbVZqYjNKa0xDQjNhR2xqYUZ4dUlDQXZMeUJvWVhNZ1lTQnpkR0ZpYkdVZ2MyaGhjR1VnWVc1a0lITnZJR2h2Y0dWbWRXeHNlU0J6YUc5MWJHUWdZbVVnWTJobFlYQWdkRzhnWVd4c2IyTmhkR1V1WEc0Z0lHWjFibU4wYVc5dUlIUnllVU5oZEdOb0tHWnVMQ0J2WW1vc0lHRnlaeWtnZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZXlCMGVYQmxPaUJjSW01dmNtMWhiRndpTENCaGNtYzZJR1p1TG1OaGJHd29iMkpxTENCaGNtY3BJSDA3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZXlCMGVYQmxPaUJjSW5Sb2NtOTNYQ0lzSUdGeVp6b2daWEp5SUgwN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2RtRnlJRWRsYmxOMFlYUmxVM1Z6Y0dWdVpHVmtVM1JoY25RZ1BTQmNJbk4xYzNCbGJtUmxaRk4wWVhKMFhDSTdYRzRnSUhaaGNpQkhaVzVUZEdGMFpWTjFjM0JsYm1SbFpGbHBaV3hrSUQwZ1hDSnpkWE53Wlc1a1pXUlphV1ZzWkZ3aU8xeHVJQ0IyWVhJZ1IyVnVVM1JoZEdWRmVHVmpkWFJwYm1jZ1BTQmNJbVY0WldOMWRHbHVaMXdpTzF4dUlDQjJZWElnUjJWdVUzUmhkR1ZEYjIxd2JHVjBaV1FnUFNCY0ltTnZiWEJzWlhSbFpGd2lPMXh1WEc0Z0lDOHZJRkpsZEhWeWJtbHVaeUIwYUdseklHOWlhbVZqZENCbWNtOXRJSFJvWlNCcGJtNWxja1p1SUdoaGN5QjBhR1VnYzJGdFpTQmxabVpsWTNRZ1lYTmNiaUFnTHk4Z1luSmxZV3RwYm1jZ2IzVjBJRzltSUhSb1pTQmthWE53WVhSamFDQnpkMmwwWTJnZ2MzUmhkR1Z0Wlc1MExseHVJQ0IyWVhJZ1EyOXVkR2x1ZFdWVFpXNTBhVzVsYkNBOUlIdDlPMXh1WEc0Z0lDOHZJRVIxYlcxNUlHTnZibk4wY25WamRHOXlJR1oxYm1OMGFXOXVjeUIwYUdGMElIZGxJSFZ6WlNCaGN5QjBhR1VnTG1OdmJuTjBjblZqZEc5eUlHRnVaRnh1SUNBdkx5QXVZMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsSUhCeWIzQmxjblJwWlhNZ1ptOXlJR1oxYm1OMGFXOXVjeUIwYUdGMElISmxkSFZ5YmlCSFpXNWxjbUYwYjNKY2JpQWdMeThnYjJKcVpXTjBjeTRnUm05eUlHWjFiR3dnYzNCbFl5QmpiMjF3YkdsaGJtTmxMQ0I1YjNVZ2JXRjVJSGRwYzJnZ2RHOGdZMjl1Wm1sbmRYSmxJSGx2ZFhKY2JpQWdMeThnYldsdWFXWnBaWElnYm05MElIUnZJRzFoYm1kc1pTQjBhR1VnYm1GdFpYTWdiMllnZEdobGMyVWdkSGR2SUdaMWJtTjBhVzl1Y3k1Y2JpQWdablZ1WTNScGIyNGdSMlZ1WlhKaGRHOXlLQ2tnZTMxY2JpQWdablZ1WTNScGIyNGdSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG9LU0I3ZlZ4dUlDQm1kVzVqZEdsdmJpQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsQnliM1J2ZEhsd1pTZ3BJSHQ5WEc1Y2JpQWdkbUZ5SUVkd0lEMGdSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNVFjbTkwYjNSNWNHVXVjSEp2ZEc5MGVYQmxJRDBnUjJWdVpYSmhkRzl5TG5CeWIzUnZkSGx3WlR0Y2JpQWdSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxJRDBnUjNBdVkyOXVjM1J5ZFdOMGIzSWdQU0JIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaVHRjYmlBZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI1UWNtOTBiM1I1Y0dVdVkyOXVjM1J5ZFdOMGIzSWdQU0JIWlc1bGNtRjBiM0pHZFc1amRHbHZianRjYmlBZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI0dVpHbHpjR3hoZVU1aGJXVWdQU0JjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENJN1hHNWNiaUFnTHk4Z1NHVnNjR1Z5SUdadmNpQmtaV1pwYm1sdVp5QjBhR1VnTG01bGVIUXNJQzUwYUhKdmR5d2dZVzVrSUM1eVpYUjFjbTRnYldWMGFHOWtjeUJ2WmlCMGFHVmNiaUFnTHk4Z1NYUmxjbUYwYjNJZ2FXNTBaWEptWVdObElHbHVJSFJsY20xeklHOW1JR0VnYzJsdVoyeGxJQzVmYVc1MmIydGxJRzFsZEdodlpDNWNiaUFnWm5WdVkzUnBiMjRnWkdWbWFXNWxTWFJsY21GMGIzSk5aWFJvYjJSektIQnliM1J2ZEhsd1pTa2dlMXh1SUNBZ0lGdGNJbTVsZUhSY0lpd2dYQ0owYUhKdmQxd2lMQ0JjSW5KbGRIVnlibHdpWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0cxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnY0hKdmRHOTBlWEJsVzIxbGRHaHZaRjBnUFNCbWRXNWpkR2x2YmloaGNtY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHVkbTlyWlNodFpYUm9iMlFzSUdGeVp5azdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnY25WdWRHbHRaUzVwYzBkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1SUQwZ1puVnVZM1JwYjI0b1oyVnVSblZ1S1NCN1hHNGdJQ0FnZG1GeUlHTjBiM0lnUFNCMGVYQmxiMllnWjJWdVJuVnVJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnWjJWdVJuVnVMbU52Ym5OMGNuVmpkRzl5TzF4dUlDQWdJSEpsZEhWeWJpQmpkRzl5WEc0Z0lDQWdJQ0EvSUdOMGIzSWdQVDA5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1SUh4OFhHNGdJQ0FnSUNBZ0lDOHZJRVp2Y2lCMGFHVWdibUYwYVhabElFZGxibVZ5WVhSdmNrWjFibU4wYVc5dUlHTnZibk4wY25WamRHOXlMQ0IwYUdVZ1ltVnpkQ0IzWlNCallXNWNiaUFnSUNBZ0lDQWdMeThnWkc4Z2FYTWdkRzhnWTJobFkyc2dhWFJ6SUM1dVlXMWxJSEJ5YjNCbGNuUjVMbHh1SUNBZ0lDQWdJQ0FvWTNSdmNpNWthWE53YkdGNVRtRnRaU0I4ZkNCamRHOXlMbTVoYldVcElEMDlQU0JjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENKY2JpQWdJQ0FnSURvZ1ptRnNjMlU3WEc0Z0lIMDdYRzVjYmlBZ2NuVnVkR2x0WlM1dFlYSnJJRDBnWm5WdVkzUnBiMjRvWjJWdVJuVnVLU0I3WEc0Z0lDQWdaMlZ1Um5WdUxsOWZjSEp2ZEc5Zlh5QTlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxPMXh1SUNBZ0lHZGxia1oxYmk1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0Vkd0tUdGNiaUFnSUNCeVpYUjFjbTRnWjJWdVJuVnVPMXh1SUNCOU8xeHVYRzRnSUM4dklGZHBkR2hwYmlCMGFHVWdZbTlrZVNCdlppQmhibmtnWVhONWJtTWdablZ1WTNScGIyNHNJR0JoZDJGcGRDQjRZQ0JwY3lCMGNtRnVjMlp2Y20xbFpDQjBiMXh1SUNBdkx5QmdlV2xsYkdRZ2NtVm5aVzVsY21GMGIzSlNkVzUwYVcxbExtRjNjbUZ3S0hncFlDd2djMjhnZEdoaGRDQjBhR1VnY25WdWRHbHRaU0JqWVc0Z2RHVnpkRnh1SUNBdkx5QmdkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQkJkMkZwZEVGeVozVnRaVzUwWUNCMGJ5QmtaWFJsY20xcGJtVWdhV1lnZEdobElIbHBaV3hrWldRZ2RtRnNkV1VnYVhOY2JpQWdMeThnYldWaGJuUWdkRzhnWW1VZ1lYZGhhWFJsWkM0Z1UyOXRaU0J0WVhrZ1kyOXVjMmxrWlhJZ2RHaGxJRzVoYldVZ2IyWWdkR2hwY3lCdFpYUm9iMlFnZEc5dlhHNGdJQzh2SUdOMWRHVnplU3dnWW5WMElIUm9aWGtnWVhKbElHTjFjbTExWkdkbGIyNXpMbHh1SUNCeWRXNTBhVzFsTG1GM2NtRndJRDBnWm5WdVkzUnBiMjRvWVhKbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkJkMkZwZEVGeVozVnRaVzUwS0dGeVp5azdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnUVhkaGFYUkJjbWQxYldWdWRDaGhjbWNwSUh0Y2JpQWdJQ0IwYUdsekxtRnlaeUE5SUdGeVp6dGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRUZ6ZVc1alNYUmxjbUYwYjNJb1oyVnVaWEpoZEc5eUtTQjdYRzRnSUNBZ0x5OGdWR2hwY3lCcGJuWnZhMlVnWm5WdVkzUnBiMjRnYVhNZ2QzSnBkSFJsYmlCcGJpQmhJSE4wZVd4bElIUm9ZWFFnWVhOemRXMWxjeUJ6YjIxbFhHNGdJQ0FnTHk4Z1kyRnNiR2x1WnlCbWRXNWpkR2x2YmlBb2IzSWdVSEp2YldselpTa2dkMmxzYkNCb1lXNWtiR1VnWlhoalpYQjBhVzl1Y3k1Y2JpQWdJQ0JtZFc1amRHbHZiaUJwYm5admEyVW9iV1YwYUc5a0xDQmhjbWNwSUh0Y2JpQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQm5aVzVsY21GMGIzSmJiV1YwYUc5a1hTaGhjbWNwTzF4dUlDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2NtVnpkV3gwTG5aaGJIVmxPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1FYZGhhWFJCY21kMWJXVnVkRnh1SUNBZ0lDQWdJQ0EvSUZCeWIyMXBjMlV1Y21WemIyeDJaU2gyWVd4MVpTNWhjbWNwTG5Sb1pXNG9hVzUyYjJ0bFRtVjRkQ3dnYVc1MmIydGxWR2h5YjNjcFhHNGdJQ0FnSUNBZ0lEb2dVSEp2YldselpTNXlaWE52YkhabEtIWmhiSFZsS1M1MGFHVnVLR1oxYm1OMGFXOXVLSFZ1ZDNKaGNIQmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQmhJSGxwWld4a1pXUWdVSEp2YldselpTQnBjeUJ5WlhOdmJIWmxaQ3dnYVhSeklHWnBibUZzSUhaaGJIVmxJR0psWTI5dFpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0F1ZG1Gc2RXVWdiMllnZEdobElGQnliMjFwYzJVOGUzWmhiSFZsTEdSdmJtVjlQaUJ5WlhOMWJIUWdabTl5SUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kzVnljbVZ1ZENCcGRHVnlZWFJwYjI0dUlFbG1JSFJvWlNCUWNtOXRhWE5sSUdseklISmxhbVZqZEdWa0xDQm9iM2RsZG1WeUxDQjBhR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEpsYzNWc2RDQm1iM0lnZEdocGN5QnBkR1Z5WVhScGIyNGdkMmxzYkNCaVpTQnlaV3BsWTNSbFpDQjNhWFJvSUhSb1pTQnpZVzFsWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ5WldGemIyNHVJRTV2ZEdVZ2RHaGhkQ0J5WldwbFkzUnBiMjV6SUc5bUlIbHBaV3hrWldRZ1VISnZiV2x6WlhNZ1lYSmxJRzV2ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZEdoeWIzZHVJR0poWTJzZ2FXNTBieUIwYUdVZ1oyVnVaWEpoZEc5eUlHWjFibU4wYVc5dUxDQmhjeUJwY3lCMGFHVWdZMkZ6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZDJobGJpQmhiaUJoZDJGcGRHVmtJRkJ5YjIxcGMyVWdhWE1nY21WcVpXTjBaV1F1SUZSb2FYTWdaR2xtWm1WeVpXNWpaU0JwYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWW1Wb1lYWnBiM0lnWW1WMGQyVmxiaUI1YVdWc1pDQmhibVFnWVhkaGFYUWdhWE1nYVcxd2IzSjBZVzUwTENCaVpXTmhkWE5sSUdsMFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGJHeHZkM01nZEdobElHTnZibk4xYldWeUlIUnZJR1JsWTJsa1pTQjNhR0YwSUhSdklHUnZJSGRwZEdnZ2RHaGxJSGxwWld4a1pXUmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklISmxhbVZqZEdsdmJpQW9jM2RoYkd4dmR5QnBkQ0JoYm1RZ1kyOXVkR2x1ZFdVc0lHMWhiblZoYkd4NUlDNTBhSEp2ZHlCcGRDQmlZV05yWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJwYm5SdklIUm9aU0JuWlc1bGNtRjBiM0lzSUdGaVlXNWtiMjRnYVhSbGNtRjBhVzl1TENCM2FHRjBaWFpsY2lrdUlGZHBkR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0YzWVdsMExDQmllU0JqYjI1MGNtRnpkQ3dnZEdobGNtVWdhWE1nYm04Z2IzQndiM0owZFc1cGRIa2dkRzhnWlhoaGJXbHVaU0IwYUdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKbGFtVmpkR2x2YmlCeVpXRnpiMjRnYjNWMGMybGtaU0IwYUdVZ1oyVnVaWEpoZEc5eUlHWjFibU4wYVc5dUxDQnpieUIwYUdWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUc5dWJIa2diM0IwYVc5dUlHbHpJSFJ2SUhSb2NtOTNJR2wwSUdaeWIyMGdkR2hsSUdGM1lXbDBJR1Y0Y0hKbGMzTnBiMjRzSUdGdVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JHVjBJSFJvWlNCblpXNWxjbUYwYjNJZ1puVnVZM1JwYjI0Z2FHRnVaR3hsSUhSb1pTQmxlR05sY0hScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1ZG1Gc2RXVWdQU0IxYm5keVlYQndaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjSEp2WTJWemN5QTlQVDBnWENKdlltcGxZM1JjSWlBbUppQndjbTlqWlhOekxtUnZiV0ZwYmlrZ2UxeHVJQ0FnSUNBZ2FXNTJiMnRsSUQwZ2NISnZZMlZ6Y3k1a2IyMWhhVzR1WW1sdVpDaHBiblp2YTJVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnBiblp2YTJWT1pYaDBJRDBnYVc1MmIydGxMbUpwYm1Rb1oyVnVaWEpoZEc5eUxDQmNJbTVsZUhSY0lpazdYRzRnSUNBZ2RtRnlJR2x1ZG05clpWUm9jbTkzSUQwZ2FXNTJiMnRsTG1KcGJtUW9aMlZ1WlhKaGRHOXlMQ0JjSW5Sb2NtOTNYQ0lwTzF4dUlDQWdJSFpoY2lCcGJuWnZhMlZTWlhSMWNtNGdQU0JwYm5admEyVXVZbWx1WkNoblpXNWxjbUYwYjNJc0lGd2ljbVYwZFhKdVhDSXBPMXh1SUNBZ0lIWmhjaUJ3Y21WMmFXOTFjMUJ5YjIxcGMyVTdYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQmxibkYxWlhWbEtHMWxkR2h2WkN3Z1lYSm5LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pXNXhkV1YxWlZKbGMzVnNkQ0E5WEc0Z0lDQWdJQ0FnSUM4dklFbG1JR1Z1Y1hWbGRXVWdhR0Z6SUdKbFpXNGdZMkZzYkdWa0lHSmxabTl5WlN3Z2RHaGxiaUIzWlNCM1lXNTBJSFJ2SUhkaGFYUWdkVzUwYVd4Y2JpQWdJQ0FnSUNBZ0x5OGdZV3hzSUhCeVpYWnBiM1Z6SUZCeWIyMXBjMlZ6SUdoaGRtVWdZbVZsYmlCeVpYTnZiSFpsWkNCaVpXWnZjbVVnWTJGc2JHbHVaeUJwYm5admEyVXNYRzRnSUNBZ0lDQWdJQzh2SUhOdklIUm9ZWFFnY21WemRXeDBjeUJoY21VZ1lXeDNZWGx6SUdSbGJHbDJaWEpsWkNCcGJpQjBhR1VnWTI5eWNtVmpkQ0J2Y21SbGNpNGdTV1pjYmlBZ0lDQWdJQ0FnTHk4Z1pXNXhkV1YxWlNCb1lYTWdibTkwSUdKbFpXNGdZMkZzYkdWa0lHSmxabTl5WlN3Z2RHaGxiaUJwZENCcGN5QnBiWEJ2Y25SaGJuUWdkRzljYmlBZ0lDQWdJQ0FnTHk4Z1kyRnNiQ0JwYm5admEyVWdhVzF0WldScFlYUmxiSGtzSUhkcGRHaHZkWFFnZDJGcGRHbHVaeUJ2YmlCaElHTmhiR3hpWVdOcklIUnZJR1pwY21Vc1hHNGdJQ0FnSUNBZ0lDOHZJSE52SUhSb1lYUWdkR2hsSUdGemVXNWpJR2RsYm1WeVlYUnZjaUJtZFc1amRHbHZiaUJvWVhNZ2RHaGxJRzl3Y0c5eWRIVnVhWFI1SUhSdklHUnZYRzRnSUNBZ0lDQWdJQzh2SUdGdWVTQnVaV05sYzNOaGNua2djMlYwZFhBZ2FXNGdZU0J3Y21Wa2FXTjBZV0pzWlNCM1lYa3VJRlJvYVhNZ2NISmxaR2xqZEdGaWFXeHBkSGxjYmlBZ0lDQWdJQ0FnTHk4Z2FYTWdkMmg1SUhSb1pTQlFjbTl0YVhObElHTnZibk4wY25WamRHOXlJSE41Ym1Ob2NtOXViM1Z6YkhrZ2FXNTJiMnRsY3lCcGRITmNiaUFnSUNBZ0lDQWdMeThnWlhobFkzVjBiM0lnWTJGc2JHSmhZMnNzSUdGdVpDQjNhSGtnWVhONWJtTWdablZ1WTNScGIyNXpJSE41Ym1Ob2NtOXViM1Z6YkhsY2JpQWdJQ0FnSUNBZ0x5OGdaWGhsWTNWMFpTQmpiMlJsSUdKbFptOXlaU0IwYUdVZ1ptbHljM1FnWVhkaGFYUXVJRk5wYm1ObElIZGxJR2x0Y0d4bGJXVnVkQ0J6YVcxd2JHVmNiaUFnSUNBZ0lDQWdMeThnWVhONWJtTWdablZ1WTNScGIyNXpJR2x1SUhSbGNtMXpJRzltSUdGemVXNWpJR2RsYm1WeVlYUnZjbk1zSUdsMElHbHpJR1Z6Y0dWamFXRnNiSGxjYmlBZ0lDQWdJQ0FnTHk4Z2FXMXdiM0owWVc1MElIUnZJR2RsZENCMGFHbHpJSEpwWjJoMExDQmxkbVZ1SUhSb2IzVm5hQ0JwZENCeVpYRjFhWEpsY3lCallYSmxMbHh1SUNBZ0lDQWdJQ0J3Y21WMmFXOTFjMUJ5YjIxcGMyVWdQeUJ3Y21WMmFXOTFjMUJ5YjIxcGMyVXVkR2hsYmlobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzUyYjJ0bEtHMWxkR2h2WkN3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnZlNrZ09pQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNocGJuWnZhMlVvYldWMGFHOWtMQ0JoY21jcEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklFRjJiMmxrSUhCeWIzQmhaMkYwYVc1bklHVnVjWFZsZFdWU1pYTjFiSFFnWm1GcGJIVnlaWE1nZEc4Z1VISnZiV2x6WlhNZ2NtVjBkWEp1WldRZ1lubGNiaUFnSUNBZ0lDOHZJR3hoZEdWeUlHbHVkbTlqWVhScGIyNXpJRzltSUhSb1pTQnBkR1Z5WVhSdmNpNWNiaUFnSUNBZ0lIQnlaWFpwYjNWelVISnZiV2x6WlNBOUlHVnVjWFZsZFdWU1pYTjFiSFJiWENKallYUmphRndpWFNobWRXNWpkR2x2YmlocFoyNXZjbVZrS1h0OUtUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlHVnVjWFZsZFdWU1pYTjFiSFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUkdWbWFXNWxJSFJvWlNCMWJtbG1hV1ZrSUdobGJIQmxjaUJ0WlhSb2IyUWdkR2hoZENCcGN5QjFjMlZrSUhSdklHbHRjR3hsYldWdWRDQXVibVY0ZEN4Y2JpQWdJQ0F2THlBdWRHaHliM2NzSUdGdVpDQXVjbVYwZFhKdUlDaHpaV1VnWkdWbWFXNWxTWFJsY21GMGIzSk5aWFJvYjJSektTNWNiaUFnSUNCMGFHbHpMbDlwYm5admEyVWdQU0JsYm5GMVpYVmxPMXh1SUNCOVhHNWNiaUFnWkdWbWFXNWxTWFJsY21GMGIzSk5aWFJvYjJSektFRnplVzVqU1hSbGNtRjBiM0l1Y0hKdmRHOTBlWEJsS1R0Y2JseHVJQ0F2THlCT2IzUmxJSFJvWVhRZ2MybHRjR3hsSUdGemVXNWpJR1oxYm1OMGFXOXVjeUJoY21VZ2FXMXdiR1Z0Wlc1MFpXUWdiMjRnZEc5d0lHOW1YRzRnSUM4dklFRnplVzVqU1hSbGNtRjBiM0lnYjJKcVpXTjBjenNnZEdobGVTQnFkWE4wSUhKbGRIVnliaUJoSUZCeWIyMXBjMlVnWm05eUlIUm9aU0IyWVd4MVpTQnZabHh1SUNBdkx5QjBhR1VnWm1sdVlXd2djbVZ6ZFd4MElIQnliMlIxWTJWa0lHSjVJSFJvWlNCcGRHVnlZWFJ2Y2k1Y2JpQWdjblZ1ZEdsdFpTNWhjM2x1WXlBOUlHWjFibU4wYVc5dUtHbHVibVZ5Um00c0lHOTFkR1Z5Um00c0lITmxiR1lzSUhSeWVVeHZZM05NYVhOMEtTQjdYRzRnSUNBZ2RtRnlJR2wwWlhJZ1BTQnVaWGNnUVhONWJtTkpkR1Z5WVhSdmNpaGNiaUFnSUNBZ0lIZHlZWEFvYVc1dVpYSkdiaXdnYjNWMFpYSkdiaXdnYzJWc1ppd2dkSEo1VEc5amMweHBjM1FwWEc0Z0lDQWdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnlkVzUwYVcxbExtbHpSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG9iM1YwWlhKR2JpbGNiaUFnSUNBZ0lEOGdhWFJsY2lBdkx5QkpaaUJ2ZFhSbGNrWnVJR2x6SUdFZ1oyVnVaWEpoZEc5eUxDQnlaWFIxY200Z2RHaGxJR1oxYkd3Z2FYUmxjbUYwYjNJdVhHNGdJQ0FnSUNBNklHbDBaWEl1Ym1WNGRDZ3BMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEM1a2IyNWxJRDhnY21WemRXeDBMblpoYkhWbElEb2dhWFJsY2k1dVpYaDBLQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJR1oxYm1OMGFXOXVJRzFoYTJWSmJuWnZhMlZOWlhSb2IyUW9hVzV1WlhKR2Jpd2djMlZzWml3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhaaGNpQnpkR0YwWlNBOUlFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1UzUmhjblE3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdhVzUyYjJ0bEtHMWxkR2h2WkN3Z1lYSm5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2MzUmhkR1VnUFQwOUlFZGxibE4wWVhSbFJYaGxZM1YwYVc1bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJa2RsYm1WeVlYUnZjaUJwY3lCaGJISmxZV1I1SUhKMWJtNXBibWRjSWlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnUjJWdVUzUmhkR1ZEYjIxd2JHVjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1lYSm5PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRbVVnWm05eVoybDJhVzVuTENCd1pYSWdNalV1TXk0ekxqTXVNeUJ2WmlCMGFHVWdjM0JsWXpwY2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OXdaVzl3YkdVdWJXOTZhV3hzWVM1dmNtY3ZmbXB2Y21WdVpHOXlabVl2WlhNMkxXUnlZV1owTG1oMGJXd2pjMlZqTFdkbGJtVnlZWFJ2Y25KbGMzVnRaVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaRzl1WlZKbGMzVnNkQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCM2FHbHNaU0FvZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHVnNaV2RoZEdVZ1BTQmpiMjUwWlhoMExtUmxiR1ZuWVhSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkdWc1pXZGhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYldWMGFHOWtJRDA5UFNCY0luSmxkSFZ5Ymx3aUlIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHRaWFJvYjJRZ1BUMDlJRndpZEdoeWIzZGNJaUFtSmlCa1pXeGxaMkYwWlM1cGRHVnlZWFJ2Y2x0dFpYUm9iMlJkSUQwOVBTQjFibVJsWm1sdVpXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCSUhKbGRIVnliaUJ2Y2lCMGFISnZkeUFvZDJobGJpQjBhR1VnWkdWc1pXZGhkR1VnYVhSbGNtRjBiM0lnYUdGeklHNXZJSFJvY205M1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCdFpYUm9iMlFwSUdGc2QyRjVjeUIwWlhKdGFXNWhkR1Z6SUhSb1pTQjVhV1ZzWkNvZ2JHOXZjQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVpHVnNaV2RoZEdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnWkdWc1pXZGhkR1VnYVhSbGNtRjBiM0lnYUdGeklHRWdjbVYwZFhKdUlHMWxkR2h2WkN3Z1oybDJaU0JwZENCaFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamFHRnVZMlVnZEc4Z1kyeGxZVzRnZFhBdVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVjBkWEp1VFdWMGFHOWtJRDBnWkdWc1pXZGhkR1V1YVhSbGNtRjBiM0piWENKeVpYUjFjbTVjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVjBkWEp1VFdWMGFHOWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCMGNubERZWFJqYUNoeVpYUjFjbTVOWlhSb2IyUXNJR1JsYkdWbllYUmxMbWwwWlhKaGRHOXlMQ0JoY21jcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0J5WlhSMWNtNGdiV1YwYUc5a0lIUm9jbVYzSUdGdUlHVjRZMlZ3ZEdsdmJpd2diR1YwSUhSb1lYUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJsZUdObGNIUnBiMjRnY0hKbGRtRnBiQ0J2ZG1WeUlIUm9aU0J2Y21sbmFXNWhiQ0J5WlhSMWNtNGdiM0lnZEdoeWIzY3VYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdYQ0owYUhKdmQxd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWxkR2h2WkNBOVBUMGdYQ0p5WlhSMWNtNWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCRGIyNTBhVzUxWlNCM2FYUm9JSFJvWlNCdmRYUmxjaUJ5WlhSMWNtNHNJRzV2ZHlCMGFHRjBJSFJvWlNCa1pXeGxaMkYwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcGRHVnlZWFJ2Y2lCb1lYTWdZbVZsYmlCMFpYSnRhVzVoZEdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2NtVmpiM0prSUQwZ2RISjVRMkYwWTJnb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bFoyRjBaUzVwZEdWeVlYUnZjbHR0WlhSb2IyUmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaV2RoZEdVdWFYUmxjbUYwYjNJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21kY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJblJvY205M1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVpHVnNaV2RoZEdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCTWFXdGxJSEpsZEhWeWJtbHVaeUJuWlc1bGNtRjBiM0l1ZEdoeWIzY29kVzVqWVhWbmFIUXBMQ0JpZFhRZ2QybDBhRzkxZENCMGFHVmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHOTJaWEpvWldGa0lHOW1JR0Z1SUdWNGRISmhJR1oxYm1OMGFXOXVJR05oYkd3dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhSb2IyUWdQU0JjSW5Sb2NtOTNYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCeVpXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVnNaV2RoZEdVZ1oyVnVaWEpoZEc5eUlISmhiaUJoYm1RZ2FHRnVaR3hsWkNCcGRITWdiM2R1SUdWNFkyVndkR2x2Ym5NZ2MyOWNiaUFnSUNBZ0lDQWdJQ0F2THlCeVpXZGhjbVJzWlhOeklHOW1JSGRvWVhRZ2RHaGxJRzFsZEdodlpDQjNZWE1zSUhkbElHTnZiblJwYm5WbElHRnpJR2xtSUdsMElHbHpYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1hDSnVaWGgwWENJZ2QybDBhQ0JoYmlCMWJtUmxabWx1WldRZ1lYSm5MbHh1SUNBZ0lDQWdJQ0FnSUcxbGRHaHZaQ0E5SUZ3aWJtVjRkRndpTzF4dUlDQWdJQ0FnSUNBZ0lHRnlaeUE5SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCcGJtWnZJRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1bWJ5NWtiMjVsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBXMlJsYkdWbllYUmxMbkpsYzNWc2RFNWhiV1ZkSUQwZ2FXNW1ieTUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1Ym1WNGRDQTlJR1JsYkdWbllYUmxMbTVsZUhSTWIyTTdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1IyVnVVM1JoZEdWVGRYTndaVzVrWldSWmFXVnNaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJtWnZPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWxkR2h2WkNBOVBUMGdYQ0p1WlhoMFhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jM1JoZEdVZ1BUMDlJRWRsYmxOMFlYUmxVM1Z6Y0dWdVpHVmtXV2xsYkdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1YzJWdWRDQTlJR0Z5Wnp0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzV6Wlc1MElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYUmxJRDA5UFNCSFpXNVRkR0YwWlZOMWMzQmxibVJsWkZOMFlYSjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlFZGxibE4wWVhSbFEyOXRjR3hsZEdWa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dZWEpuTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMjUwWlhoMExtUnBjM0JoZEdOb1JYaGpaWEIwYVc5dUtHRnlaeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0JrYVhOd1lYUmphR1ZrSUdWNFkyVndkR2x2YmlCM1lYTWdZMkYxWjJoMElHSjVJR0VnWTJGMFkyZ2dZbXh2WTJzc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMGFHVnVJR3hsZENCMGFHRjBJR05oZEdOb0lHSnNiMk5ySUdoaGJtUnNaU0IwYUdVZ1pYaGpaWEIwYVc5dUlHNXZjbTFoYkd4NUxseHVJQ0FnSUNBZ0lDQWdJQ0FnYldWMGFHOWtJRDBnWENKdVpYaDBYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXVjBhRzlrSUQwOVBTQmNJbkpsZEhWeWJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1aFluSjFjSFFvWENKeVpYUjFjbTVjSWl3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1IyVnVVM1JoZEdWRmVHVmpkWFJwYm1jN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUhSeWVVTmhkR05vS0dsdWJtVnlSbTRzSUhObGJHWXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWJtOXliV0ZzWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCSlppQmhiaUJsZUdObGNIUnBiMjRnYVhNZ2RHaHliM2R1SUdaeWIyMGdhVzV1WlhKR2Jpd2dkMlVnYkdWaGRtVWdjM1JoZEdVZ1BUMDlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1IyVnVVM1JoZEdWRmVHVmpkWFJwYm1jZ1lXNWtJR3h2YjNBZ1ltRmpheUJtYjNJZ1lXNXZkR2hsY2lCcGJuWnZZMkYwYVc5dUxseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdZMjl1ZEdWNGRDNWtiMjVsWEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JRWRsYmxOMFlYUmxRMjl0Y0d4bGRHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBNklFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1dXbGxiR1E3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYVc1bWJ5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCeVpXTnZjbVF1WVhKbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5dVpUb2dZMjl1ZEdWNGRDNWtiMjVsWEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV052Y21RdVlYSm5JRDA5UFNCRGIyNTBhVzUxWlZObGJuUnBibVZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyOXVkR1Y0ZEM1a1pXeGxaMkYwWlNBbUppQnRaWFJvYjJRZ1BUMDlJRndpYm1WNGRGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVSbGJHbGlaWEpoZEdWc2VTQm1iM0puWlhRZ2RHaGxJR3hoYzNRZ2MyVnVkQ0IyWVd4MVpTQnpieUIwYUdGMElIZGxJR1J2YmlkMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHRmpZMmxrWlc1MFlXeHNlU0J3WVhOeklHbDBJRzl1SUhSdklIUm9aU0JrWld4bFoyRjBaUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzVtYnp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpEdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRWFYTndZWFJqYUNCMGFHVWdaWGhqWlhCMGFXOXVJR0o1SUd4dmIzQnBibWNnWW1GamF5QmhjbTkxYm1RZ2RHOGdkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZMjl1ZEdWNGRDNWthWE53WVhSamFFVjRZMlZ3ZEdsdmJpaGhjbWNwSUdOaGJHd2dZV0p2ZG1VdVhHNGdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdYQ0owYUhKdmQxd2lPMXh1SUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5OGdSR1ZtYVc1bElFZGxibVZ5WVhSdmNpNXdjbTkwYjNSNWNHVXVlMjVsZUhRc2RHaHliM2NzY21WMGRYSnVmU0JwYmlCMFpYSnRjeUJ2WmlCMGFHVmNiaUFnTHk4Z2RXNXBabWxsWkNBdVgybHVkbTlyWlNCb1pXeHdaWElnYldWMGFHOWtMbHh1SUNCa1pXWnBibVZKZEdWeVlYUnZjazFsZEdodlpITW9SM0FwTzF4dVhHNGdJRWR3VzJsMFpYSmhkRzl5VTNsdFltOXNYU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJRWR3TG5SdlUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZ3aVcyOWlhbVZqZENCSFpXNWxjbUYwYjNKZFhDSTdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnY0hWemFGUnllVVZ1ZEhKNUtHeHZZM01wSUh0Y2JpQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCN0lIUnllVXh2WXpvZ2JHOWpjMXN3WFNCOU8xeHVYRzRnSUNBZ2FXWWdLREVnYVc0Z2JHOWpjeWtnZTF4dUlDQWdJQ0FnWlc1MGNua3VZMkYwWTJoTWIyTWdQU0JzYjJOeld6RmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2d5SUdsdUlHeHZZM01wSUh0Y2JpQWdJQ0FnSUdWdWRISjVMbVpwYm1Gc2JIbE1iMk1nUFNCc2IyTnpXekpkTzF4dUlDQWdJQ0FnWlc1MGNua3VZV1owWlhKTWIyTWdQU0JzYjJOeld6TmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11ZEhKNVJXNTBjbWxsY3k1d2RYTm9LR1Z1ZEhKNUtUdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEpsYzJWMFZISjVSVzUwY25rb1pXNTBjbmtwSUh0Y2JpQWdJQ0IyWVhJZ2NtVmpiM0prSUQwZ1pXNTBjbmt1WTI5dGNHeGxkR2x2YmlCOGZDQjdmVHRjYmlBZ0lDQnlaV052Y21RdWRIbHdaU0E5SUZ3aWJtOXliV0ZzWENJN1hHNGdJQ0FnWkdWc1pYUmxJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdaVzUwY25rdVkyOXRjR3hsZEdsdmJpQTlJSEpsWTI5eVpEdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRU52Ym5SbGVIUW9kSEo1VEc5amMweHBjM1FwSUh0Y2JpQWdJQ0F2THlCVWFHVWdjbTl2ZENCbGJuUnllU0J2WW1wbFkzUWdLR1ZtWm1WamRHbDJaV3g1SUdFZ2RISjVJSE4wWVhSbGJXVnVkQ0IzYVhSb2IzVjBJR0VnWTJGMFkyaGNiaUFnSUNBdkx5QnZjaUJoSUdacGJtRnNiSGtnWW14dlkyc3BJR2RwZG1WeklIVnpJR0VnY0d4aFkyVWdkRzhnYzNSdmNtVWdkbUZzZFdWeklIUm9jbTkzYmlCbWNtOXRYRzRnSUNBZ0x5OGdiRzlqWVhScGIyNXpJSGRvWlhKbElIUm9aWEpsSUdseklHNXZJR1Z1WTJ4dmMybHVaeUIwY25rZ2MzUmhkR1Z0Wlc1MExseHVJQ0FnSUhSb2FYTXVkSEo1Ulc1MGNtbGxjeUE5SUZ0N0lIUnllVXh2WXpvZ1hDSnliMjkwWENJZ2ZWMDdYRzRnSUNBZ2RISjVURzlqYzB4cGMzUXVabTl5UldGamFDaHdkWE5vVkhKNVJXNTBjbmtzSUhSb2FYTXBPMXh1SUNBZ0lIUm9hWE11Y21WelpYUW9kSEoxWlNrN1hHNGdJSDFjYmx4dUlDQnlkVzUwYVcxbExtdGxlWE1nUFNCbWRXNWpkR2x2YmlodlltcGxZM1FwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVjeUE5SUZ0ZE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ2WW1wbFkzUXBJSHRjYmlBZ0lDQWdJR3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVJQ0FnSUgxY2JpQWdJQ0JyWlhsekxuSmxkbVZ5YzJVb0tUdGNibHh1SUNBZ0lDOHZJRkpoZEdobGNpQjBhR0Z1SUhKbGRIVnlibWx1WnlCaGJpQnZZbXBsWTNRZ2QybDBhQ0JoSUc1bGVIUWdiV1YwYUc5a0xDQjNaU0JyWldWd1hHNGdJQ0FnTHk4Z2RHaHBibWR6SUhOcGJYQnNaU0JoYm1RZ2NtVjBkWEp1SUhSb1pTQnVaWGgwSUdaMWJtTjBhVzl1SUdsMGMyVnNaaTVjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2JtVjRkQ2dwSUh0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2hyWlhsekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYTJWNUlEMGdhMlY1Y3k1d2IzQW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHdGxlU0JwYmlCdlltcGxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwTG5aaGJIVmxJRDBnYTJWNU8xeHVJQ0FnSUNBZ0lDQWdJRzVsZUhRdVpHOXVaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZSdklHRjJiMmxrSUdOeVpXRjBhVzVuSUdGdUlHRmtaR2wwYVc5dVlXd2diMkpxWldOMExDQjNaU0JxZFhOMElHaGhibWNnZEdobElDNTJZV3gxWlZ4dUlDQWdJQ0FnTHk4Z1lXNWtJQzVrYjI1bElIQnliM0JsY25ScFpYTWdiMlptSUhSb1pTQnVaWGgwSUdaMWJtTjBhVzl1SUc5aWFtVmpkQ0JwZEhObGJHWXVJRlJvYVhOY2JpQWdJQ0FnSUM4dklHRnNjMjhnWlc1emRYSmxjeUIwYUdGMElIUm9aU0J0YVc1cFptbGxjaUIzYVd4c0lHNXZkQ0JoYm05dWVXMXBlbVVnZEdobElHWjFibU4wYVc5dUxseHVJQ0FnSUNBZ2JtVjRkQzVrYjI1bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUgwN1hHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdkbUZzZFdWektHbDBaWEpoWW14bEtTQjdYRzRnSUNBZ2FXWWdLR2wwWlhKaFlteGxLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FYUmxjbUYwYjNKTlpYUm9iMlFnUFNCcGRHVnlZV0pzWlZ0cGRHVnlZWFJ2Y2xONWJXSnZiRjA3WEc0Z0lDQWdJQ0JwWmlBb2FYUmxjbUYwYjNKTlpYUm9iMlFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsMFpYSmhkRzl5VFdWMGFHOWtMbU5oYkd3b2FYUmxjbUZpYkdVcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2wwWlhKaFlteGxMbTVsZUhRZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYUmxjbUZpYkdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2doYVhOT1lVNG9hWFJsY21GaWJHVXViR1Z1WjNSb0tTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJQzB4TENCdVpYaDBJRDBnWm5WdVkzUnBiMjRnYm1WNGRDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvS3l0cElEd2dhWFJsY21GaWJHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hR0Z6VDNkdUxtTmhiR3dvYVhSbGNtRmliR1VzSUdrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFF1ZG1Gc2RXVWdQU0JwZEdWeVlXSnNaVnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRDNWtiMjVsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJRzVsZUhRdWRtRnNkV1VnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdibVY0ZEM1a2IyNWxJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoMExtNWxlSFFnUFNCdVpYaDBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkpsZEhWeWJpQmhiaUJwZEdWeVlYUnZjaUIzYVhSb0lHNXZJSFpoYkhWbGN5NWNiaUFnSUNCeVpYUjFjbTRnZXlCdVpYaDBPaUJrYjI1bFVtVnpkV3gwSUgwN1hHNGdJSDFjYmlBZ2NuVnVkR2x0WlM1MllXeDFaWE1nUFNCMllXeDFaWE03WEc1Y2JpQWdablZ1WTNScGIyNGdaRzl1WlZKbGMzVnNkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdleUIyWVd4MVpUb2dkVzVrWldacGJtVmtMQ0JrYjI1bE9pQjBjblZsSUgwN1hHNGdJSDFjYmx4dUlDQkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTQTlJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjam9nUTI5dWRHVjRkQ3hjYmx4dUlDQWdJSEpsYzJWME9pQm1kVzVqZEdsdmJpaHphMmx3VkdWdGNGSmxjMlYwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ5WlhZZ1BTQXdPMXh1SUNBZ0lDQWdkR2hwY3k1dVpYaDBJRDBnTUR0Y2JpQWdJQ0FnSUhSb2FYTXVjMlZ1ZENBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lIUm9hWE11Wkc5dVpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2RHaHBjeTVrWld4bFoyRjBaU0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJSFJvYVhNdWRISjVSVzUwY21sbGN5NW1iM0pGWVdOb0tISmxjMlYwVkhKNVJXNTBjbmtwTzF4dVhHNGdJQ0FnSUNCcFppQW9JWE5yYVhCVVpXMXdVbVZ6WlhRcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdibUZ0WlNCcGJpQjBhR2x6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVG05MElITjFjbVVnWVdKdmRYUWdkR2hsSUc5d2RHbHRZV3dnYjNKa1pYSWdiMllnZEdobGMyVWdZMjl1WkdsMGFXOXVjenBjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ibUZ0WlM1amFHRnlRWFFvTUNrZ1BUMDlJRndpZEZ3aUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhjMDkzYmk1allXeHNLSFJvYVhNc0lHNWhiV1VwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNGcGMwNWhUaWdyYm1GdFpTNXpiR2xqWlNneEtTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5iYm1GdFpWMGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBiM0E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVrYjI1bElEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ2RtRnlJSEp2YjNSRmJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXN3WFR0Y2JpQWdJQ0FnSUhaaGNpQnliMjkwVW1WamIzSmtJRDBnY205dmRFVnVkSEo1TG1OdmJYQnNaWFJwYjI0N1hHNGdJQ0FnSUNCcFppQW9jbTl2ZEZKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnY205dmRGSmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KMllXdzdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHUnBjM0JoZEdOb1JYaGpaWEIwYVc5dU9pQm1kVzVqZEdsdmJpaGxlR05sY0hScGIyNHBJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVJ2Ym1VcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pYaGpaWEIwYVc5dU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjJZWElnWTI5dWRHVjRkQ0E5SUhSb2FYTTdYRzRnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdVb2JHOWpMQ0JqWVhWbmFIUXBJSHRjYmlBZ0lDQWdJQ0FnY21WamIzSmtMblI1Y0dVZ1BTQmNJblJvY205M1hDSTdYRzRnSUNBZ0lDQWdJSEpsWTI5eVpDNWhjbWNnUFNCbGVHTmxjSFJwYjI0N1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRdWJtVjRkQ0E5SUd4dll6dGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhZMkYxWjJoME8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJR1Z1ZEhKNUxtTnZiWEJzWlhScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG5SeWVVeHZZeUE5UFQwZ1hDSnliMjkwWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRmVHTmxjSFJwYjI0Z2RHaHliM2R1SUc5MWRITnBaR1VnYjJZZ1lXNTVJSFJ5ZVNCaWJHOWpheUIwYUdGMElHTnZkV3hrSUdoaGJtUnNaVnh1SUNBZ0lDQWdJQ0FnSUM4dklHbDBMQ0J6YnlCelpYUWdkR2hsSUdOdmJYQnNaWFJwYjI0Z2RtRnNkV1VnYjJZZ2RHaGxJR1Z1ZEdseVpTQm1kVzVqZEdsdmJpQjBiMXh1SUNBZ0lDQWdJQ0FnSUM4dklIUm9jbTkzSUhSb1pTQmxlR05sY0hScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2hoYm1Sc1pTaGNJbVZ1WkZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVM1MGNubE1iMk1nUEQwZ2RHaHBjeTV3Y21WMktTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHaGhjME5oZEdOb0lEMGdhR0Z6VDNkdUxtTmhiR3dvWlc1MGNua3NJRndpWTJGMFkyaE1iMk5jSWlrN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdoaGMwWnBibUZzYkhrZ1BTQm9ZWE5QZDI0dVkyRnNiQ2hsYm5SeWVTd2dYQ0ptYVc1aGJHeDVURzlqWENJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhjME5oZEdOb0lDWW1JR2hoYzBacGJtRnNiSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5WlhZZ1BDQmxiblJ5ZVM1allYUmphRXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdGdVpHeGxLR1Z1ZEhKNUxtTmhkR05vVEc5akxDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NXdjbVYySUR3Z1pXNTBjbmt1Wm1sdVlXeHNlVXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdGdVpHeGxLR1Z1ZEhKNUxtWnBibUZzYkhsTWIyTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNob1lYTkRZWFJqYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKbGRpQThJR1Z1ZEhKNUxtTmhkR05vVEc5aktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lXNWtiR1VvWlc1MGNua3VZMkYwWTJoTWIyTXNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hvWVhOR2FXNWhiR3g1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMklEd2daVzUwY25rdVptbHVZV3hzZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsS0dWdWRISjVMbVpwYm1Gc2JIbE1iMk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJblJ5ZVNCemRHRjBaVzFsYm5RZ2QybDBhRzkxZENCallYUmphQ0J2Y2lCbWFXNWhiR3g1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JoWW5KMWNIUTZJR1oxYm1OMGFXOXVLSFI1Y0dVc0lHRnlaeWtnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsY3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lDMHRhU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaVzUwY25rZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNobGJuUnllUzUwY25sTWIyTWdQRDBnZEdocGN5NXdjbVYySUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOUGQyNHVZMkZzYkNobGJuUnllU3dnWENKbWFXNWhiR3g1VEc5alhDSXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpYWWdQQ0JsYm5SeWVTNW1hVzVoYkd4NVRHOWpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR1pwYm1Gc2JIbEZiblJ5ZVNBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2htYVc1aGJHeDVSVzUwY25rZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FvZEhsd1pTQTlQVDBnWENKaWNtVmhhMXdpSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJSFI1Y0dVZ1BUMDlJRndpWTI5dWRHbHVkV1ZjSWlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JtYVc1aGJHeDVSVzUwY25rdWRISjVURzlqSUR3OUlHRnlaeUFtSmx4dUlDQWdJQ0FnSUNBZ0lHRnlaeUE4UFNCbWFXNWhiR3g1Ulc1MGNua3VabWx1WVd4c2VVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaMjV2Y21VZ2RHaGxJR1pwYm1Gc2JIa2daVzUwY25rZ2FXWWdZMjl1ZEhKdmJDQnBjeUJ1YjNRZ2FuVnRjR2x1WnlCMGJ5QmhYRzRnSUNBZ0lDQWdJQzh2SUd4dlkyRjBhVzl1SUc5MWRITnBaR1VnZEdobElIUnllUzlqWVhSamFDQmliRzlqYXk1Y2JpQWdJQ0FnSUNBZ1ptbHVZV3hzZVVWdWRISjVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUdacGJtRnNiSGxGYm5SeWVTQS9JR1pwYm1Gc2JIbEZiblJ5ZVM1amIyMXdiR1YwYVc5dUlEb2dlMzA3WEc0Z0lDQWdJQ0J5WldOdmNtUXVkSGx3WlNBOUlIUjVjR1U3WEc0Z0lDQWdJQ0J5WldOdmNtUXVZWEpuSUQwZ1lYSm5PMXh1WEc0Z0lDQWdJQ0JwWmlBb1ptbHVZV3hzZVVWdWRISjVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibVY0ZENBOUlHWnBibUZzYkhsRmJuUnllUzVtYVc1aGJHeDVURzlqTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjF3YkdWMFpTaHlaV052Y21RcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1EyOXVkR2x1ZFdWVFpXNTBhVzVsYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTI5dGNHeGxkR1U2SUdaMWJtTjBhVzl1S0hKbFkyOXlaQ3dnWVdaMFpYSk1iMk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKaWNtVmhhMXdpSUh4OFhHNGdJQ0FnSUNBZ0lDQWdjbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lZMjl1ZEdsdWRXVmNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVsZUhRZ1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h5WldOdmNtUXVkSGx3WlNBOVBUMGdYQ0p5WlhSMWNtNWNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkoyWVd3Z1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxlSFFnUFNCY0ltVnVaRndpTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKdWIzSnRZV3hjSWlBbUppQmhablJsY2t4dll5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxlSFFnUFNCaFpuUmxja3h2WXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWm1sdWFYTm9PaUJtZFc1amRHbHZiaWhtYVc1aGJHeDVURzlqS1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdkR2hwY3k1MGNubEZiblJ5YVdWekxteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dMUzFwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYm5SeWVTQTlJSFJvYVhNdWRISjVSVzUwY21sbGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG1acGJtRnNiSGxNYjJNZ1BUMDlJR1pwYm1Gc2JIbE1iMk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJYQnNaWFJsS0dWdWRISjVMbU52YlhCc1pYUnBiMjRzSUdWdWRISjVMbUZtZEdWeVRHOWpLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTmxkRlJ5ZVVWdWRISjVLR1Z1ZEhKNUtUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmNJbU5oZEdOb1hDSTZJR1oxYm1OMGFXOXVLSFJ5ZVV4dll5a2dlMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUMwdGFTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCMGFHbHpMblJ5ZVVWdWRISnBaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsYm5SeWVTNTBjbmxNYjJNZ1BUMDlJSFJ5ZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQmxiblJ5ZVM1amIyMXdiR1YwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHaHliM2R1SUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyVjBWSEo1Ulc1MGNua29aVzUwY25rcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdoeWIzZHVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGUm9aU0JqYjI1MFpYaDBMbU5oZEdOb0lHMWxkR2h2WkNCdGRYTjBJRzl1YkhrZ1ltVWdZMkZzYkdWa0lIZHBkR2dnWVNCc2IyTmhkR2x2Ymx4dUlDQWdJQ0FnTHk4Z1lYSm5kVzFsYm5RZ2RHaGhkQ0JqYjNKeVpYTndiMjVrY3lCMGJ5QmhJR3R1YjNkdUlHTmhkR05vSUdKc2IyTnJMbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lhV3hzWldkaGJDQmpZWFJqYUNCaGRIUmxiWEIwWENJcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCa1pXeGxaMkYwWlZscFpXeGtPaUJtZFc1amRHbHZiaWhwZEdWeVlXSnNaU3dnY21WemRXeDBUbUZ0WlN3Z2JtVjRkRXh2WXlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVrWld4bFoyRjBaU0E5SUh0Y2JpQWdJQ0FnSUNBZ2FYUmxjbUYwYjNJNklIWmhiSFZsY3locGRHVnlZV0pzWlNrc1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEU1aGJXVTZJSEpsYzNWc2RFNWhiV1VzWEc0Z0lDQWdJQ0FnSUc1bGVIUk1iMk02SUc1bGVIUk1iMk5jYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJEYjI1MGFXNTFaVk5sYm5ScGJtVnNPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JuMHBLRnh1SUNBdkx5QkJiVzl1WnlCMGFHVWdkbUZ5YVc5MWN5QjBjbWxqYTNNZ1ptOXlJRzlpZEdGcGJtbHVaeUJoSUhKbFptVnlaVzVqWlNCMGJ5QjBhR1VnWjJ4dlltRnNYRzRnSUM4dklHOWlhbVZqZEN3Z2RHaHBjeUJ6WldWdGN5QjBieUJpWlNCMGFHVWdiVzl6ZENCeVpXeHBZV0pzWlNCMFpXTm9ibWx4ZFdVZ2RHaGhkQ0JrYjJWeklHNXZkRnh1SUNBdkx5QjFjMlVnYVc1a2FYSmxZM1FnWlhaaGJDQW9kMmhwWTJnZ2RtbHZiR0YwWlhNZ1EyOXVkR1Z1ZENCVFpXTjFjbWwwZVNCUWIyeHBZM2twTGx4dUlDQjBlWEJsYjJZZ1oyeHZZbUZzSUQwOVBTQmNJbTlpYW1WamRGd2lJRDhnWjJ4dlltRnNJRHBjYmlBZ2RIbHdaVzltSUhkcGJtUnZkeUE5UFQwZ1hDSnZZbXBsWTNSY0lpQS9JSGRwYm1SdmR5QTZYRzRnSUhSNWNHVnZaaUJ6Wld4bUlEMDlQU0JjSW05aWFtVmpkRndpSUQ4Z2MyVnNaaUE2SUhSb2FYTmNiaWs3WEc0aVhYMD0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2xpYi9wb2x5ZmlsbFwiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJhYmVsLWNvcmUvcG9seWZpbGxcIik7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRRdWV1ZTtcbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xufVxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICBxdWV1ZS5wdXNoKGZ1bik7XG4gICAgaWYgKCFkcmFpbmluZykge1xuICAgICAgICBzZXRUaW1lb3V0KGRyYWluUXVldWUsIDApO1xuICAgIH1cbn07XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEF1dG9Gb2N1c01peGluXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoXCIuL2ZvY3VzTm9kZVwiKTtcblxudmFyIEF1dG9Gb2N1c01peGluID0ge1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICBmb2N1c05vZGUodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNNaXhpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSA9IHJlcXVpcmUoXCIuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVwiKTtcbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudFwiKTtcbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljSW5wdXRFdmVudFwiKTtcblxudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl07IC8vIFRhYiwgUmV0dXJuLCBFc2MsIFNwYWNlXG52YXIgU1RBUlRfS0VZQ09ERSA9IDIyOTtcblxudmFyIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAnQ29tcG9zaXRpb25FdmVudCcgaW4gd2luZG93XG4pO1xuXG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHtcbiAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuXG4vLyBXZWJraXQgb2ZmZXJzIGEgdmVyeSB1c2VmdWwgYHRleHRJbnB1dGAgZXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0b1xuLy8gZGlyZWN0bHkgcmVwcmVzZW50IGBiZWZvcmVJbnB1dGAuIFRoZSBJRSBgdGV4dGlucHV0YCBldmVudCBpcyBub3QgYXNcbi8vIHVzZWZ1bCwgc28gd2UgZG9uJ3QgdXNlIGl0LlxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmXG4gICFkb2N1bWVudE1vZGUgJiZcbiAgIWlzUHJlc3RvKClcbik7XG5cbi8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG4vLyBieSB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IG1heSBiZSBpbmNvcnJlY3QuIEphcGFuZXNlIGlkZW9ncmFwaGljXG4vLyBzcGFjZXMsIGZvciBpbnN0YW5jZSAoXFx1MzAwMCkgYXJlIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAoXG4gICAgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSlcbiAgKVxuKTtcblxuLyoqXG4gKiBPcGVyYSA8PSAxMiBpbmNsdWRlcyBUZXh0RXZlbnQgaW4gd2luZG93LCBidXQgZG9lcyBub3QgZmlyZVxuICogdGV4dCBpbnB1dCBldmVudHMuIFJlbHkgb24ga2V5cHJlc3MgaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gaXNQcmVzdG8oKSB7XG4gIHZhciBvcGVyYSA9IHdpbmRvdy5vcGVyYTtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygb3BlcmEgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9wZXJhLnZlcnNpb24gPT09ICdmdW5jdGlvbicgJiZcbiAgICBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMlxuICApO1xufVxuXG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8vIEV2ZW50cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBuYW1lcy5cbnZhciBldmVudFR5cGVzID0ge1xuICBiZWZvcmVJbnB1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25CZWZvcmVJbnB1dDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkJlZm9yZUlucHV0Q2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BUZXh0SW5wdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlXG4gICAgXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvbkVuZDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXG4gICAgXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnQ6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uVXBkYXRlOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZSxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAoXG4gICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmXG4gICAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICAgIShuYXRpdmVFdmVudC5jdHJsS2V5ICYmIG5hdGl2ZUV2ZW50LmFsdEtleSlcbiAgKTtcbn1cblxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZTpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAoXG4gICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24gJiZcbiAgICBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFXG4gICk7XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgbW9kZSB0aGluayB0aGF0IHRoaXMgZXZlbnQgaXMgdGhlIGVuZCBvZiBjb21wb3NpdGlvbj9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgLy8gQ29tbWFuZCBrZXlzIGluc2VydCBvciBjbGVhciBJTUUgaW5wdXQuXG4gICAgICByZXR1cm4gKEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG4gICAgICAvLyBjb2RlIHdlIG11c3QgaGF2ZSBleGl0ZWQgZWFybGllci5cbiAgICAgIHJldHVybiAobmF0aXZlRXZlbnQua2V5Q29kZSAhPT0gU1RBUlRfS0VZQ09ERSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gZmFsbGJhY2sgb2JqZWN0LCBpZiBhbnkuXG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudChcbiAgdG9wTGV2ZWxUeXBlLFxuICB0b3BMZXZlbFRhcmdldCxcbiAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgZXZlbnRUeXBlO1xuICB2YXIgZmFsbGJhY2tEYXRhO1xuXG4gIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KSB7XG4gICAgZXZlbnRUeXBlID0gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKTtcbiAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gIH1cblxuICBpZiAoIWV2ZW50VHlwZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgLy8gb3ZlcndyaXR0ZW4gd2hpbGUgY29tcG9zaXRpb24gY29udGludWVzLlxuICAgIGlmICghY3VycmVudENvbXBvc2l0aW9uICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuZ2V0UG9vbGVkKHRvcExldmVsVGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZCkge1xuICAgICAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgICAgICBmYWxsYmFja0RhdGEgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKFxuICAgIGV2ZW50VHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG5cbiAgaWYgKGZhbGxiYWNrRGF0YSkge1xuICAgIC8vIEluamVjdCBkYXRhIGdlbmVyYXRlZCBmcm9tIGZhbGxiYWNrIHBhdGggaW50byB0aGUgc3ludGhldGljIGV2ZW50LlxuICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgcHJvcGVydHkgb2YgbmF0aXZlIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UuXG4gICAgZXZlbnQuZGF0YSA9IGZhbGxiYWNrRGF0YTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VzdG9tRGF0YSA9IGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGlmIChjdXN0b21EYXRhICE9PSBudWxsKSB7XG4gICAgICBldmVudC5kYXRhID0gY3VzdG9tRGF0YTtcbiAgICB9XG4gIH1cblxuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogSWYgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50cyBhcmUgYXZhaWxhYmxlLCBvdXIgZ29hbCBpcyB0byBtYWtlXG4gICAgICAgKiB1c2Ugb2YgdGhlbS4gSG93ZXZlciwgdGhlcmUgaXMgYSBzcGVjaWFsIGNhc2U6IHRoZSBzcGFjZWJhciBrZXkuXG4gICAgICAgKiBJbiBXZWJraXQsIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBhIHNwYWNlYmFyIGB0ZXh0SW5wdXRgIGV2ZW50XG4gICAgICAgKiBjYW5jZWxzIGNoYXJhY3RlciBpbnNlcnRpb24sIGJ1dCBpdCAqYWxzbyogY2F1c2VzIHRoZSBicm93c2VyXG4gICAgICAgKiB0byBmYWxsIGJhY2sgdG8gaXRzIGRlZmF1bHQgc3BhY2ViYXIgYmVoYXZpb3Igb2Ygc2Nyb2xsaW5nIHRoZVxuICAgICAgICogcGFnZS5cbiAgICAgICAqXG4gICAgICAgKiBUcmFja2luZyBhdDpcbiAgICAgICAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNTUxMDNcbiAgICAgICAqXG4gICAgICAgKiBUbyBhdm9pZCB0aGlzIGlzc3VlLCB1c2UgdGhlIGtleXByZXNzIGV2ZW50IGFzIGlmIG5vIGB0ZXh0SW5wdXRgXG4gICAgICAgKiBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgKi9cbiAgICAgIHZhciB3aGljaCA9IG5hdGl2ZUV2ZW50LndoaWNoO1xuICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuXG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcblxuICAgICAgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgIC8vIGRvZXNuJ3QgZ2l2ZSB1cyBrZXljb2Rlcywgc28gd2UgbmVlZCB0byBibGFja2xpc3QgaXQuXG4gICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYXJzO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEZvciBicm93c2VycyB0aGF0IGRvIG5vdCBwcm92aWRlIHRoZSBgdGV4dElucHV0YCBldmVudCwgZXh0cmFjdCB0aGVcbiAqIGFwcHJvcHJpYXRlIHN0cmluZyB0byB1c2UgZm9yIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGZhbGxiYWNrIHN0cmluZyBmb3IgdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGNvbXBvc2luZyAoSU1FKSBhbmQgdXNpbmcgYSBmYWxsYmFjayB0byBkbyBzbyxcbiAgLy8gdHJ5IHRvIGV4dHJhY3QgdGhlIGNvbXBvc2VkIGNoYXJhY3RlcnMgZnJvbSB0aGUgZmFsbGJhY2sgb2JqZWN0LlxuICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kIHx8XG4gICAgICBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudClcbiAgICApIHtcbiAgICAgIHZhciBjaGFycyA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudChcbiAgdG9wTGV2ZWxUeXBlLFxuICB0b3BMZXZlbFRhcmdldCxcbiAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgY2hhcnM7XG5cbiAgaWYgKGNhblVzZVRleHRJbnB1dEV2ZW50KSB7XG4gICAgY2hhcnMgPSBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNoYXJzID0gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgLy8gSWYgbm8gY2hhcmFjdGVycyBhcmUgYmVpbmcgaW5zZXJ0ZWQsIG5vIEJlZm9yZUlucHV0IGV2ZW50IHNob3VsZFxuICAvLyBiZSBmaXJlZC5cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlcy5iZWZvcmVJbnB1dCxcbiAgICB0b3BMZXZlbFRhcmdldElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG5cbiAgZXZlbnQuZGF0YSA9IGNoYXJzO1xuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBvbkJlZm9yZUlucHV0YCBldmVudCB0byBtYXRjaFxuICogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDUvI2V2ZW50cy1pbnB1dGV2ZW50cy5cbiAqXG4gKiBUaGlzIGV2ZW50IHBsdWdpbiBpcyBiYXNlZCBvbiB0aGUgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50XG4gKiBhdmFpbGFibGUgaW4gQ2hyb21lLCBTYWZhcmksIE9wZXJhLCBhbmQgSUUuIFRoaXMgZXZlbnQgZmlyZXMgYWZ0ZXJcbiAqIGBvbktleVByZXNzYCBhbmQgYG9uQ29tcG9zaXRpb25FbmRgLCBidXQgYmVmb3JlIGBvbklucHV0YC5cbiAqXG4gKiBgYmVmb3JlSW5wdXRgIGlzIHNwZWMnZCBidXQgbm90IGltcGxlbWVudGVkIGluIGFueSBicm93c2VycywgYW5kXG4gKiB0aGUgYGlucHV0YCBldmVudCBkb2VzIG5vdCBwcm92aWRlIGFueSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBoYXNcbiAqIGFjdHVhbGx5IGJlZW4gYWRkZWQsIGNvbnRyYXJ5IHRvIHRoZSBzcGVjLiBUaHVzLCBgdGV4dElucHV0YCBpcyB0aGUgYmVzdFxuICogYXZhaWxhYmxlIGV2ZW50IHRvIGlkZW50aWZ5IHRoZSBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhY3R1YWxseSBiZWVuIGluc2VydGVkXG4gKiBpbnRvIHRoZSB0YXJnZXQgbm9kZS5cbiAqXG4gKiBUaGlzIHBsdWdpbiBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBlbWl0dGluZyBgY29tcG9zaXRpb25gIGV2ZW50cywgdGh1c1xuICogYWxsb3dpbmcgdXMgdG8gc2hhcmUgY29tcG9zaXRpb24gZmFsbGJhY2sgY29kZSBmb3IgYm90aCBgYmVmb3JlSW5wdXRgIGFuZFxuICogYGNvbXBvc2l0aW9uYCBldmVudCB0eXBlcy5cbiAqL1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICBuYXRpdmVFdmVudFxuICApIHtcbiAgICByZXR1cm4gW1xuICAgICAgZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApLFxuICAgICAgZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQoXG4gICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApXG4gICAgXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5mdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIE1vc3Qgc3R5bGUgcHJvcGVydGllcyBjYW4gYmUgdW5zZXQgYnkgZG9pbmcgLnN0eWxlW3Byb3BdID0gJycgYnV0IElFOFxuICogZG9lc24ndCBsaWtlIGRvaW5nIHRoYXQgd2l0aCBzaG9ydGhhbmQgcHJvcGVydGllcyBzbyBmb3IgdGhlIHByb3BlcnRpZXMgdGhhdFxuICogSUU4IGJyZWFrcyBvbiwgd2hpY2ggYXJlIGxpc3RlZCBoZXJlLCB3ZSBpbnN0ZWFkIHVuc2V0IGVhY2ggb2YgdGhlXG4gKiBpbmRpdmlkdWFsIHByb3BlcnRpZXMuIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM4NS5cbiAqIFRoZSA0LXZhbHVlICdjbG9jaycgcHJvcGVydGllcyBsaWtlIG1hcmdpbiwgcGFkZGluZywgYm9yZGVyLXdpZHRoIHNlZW0gdG9cbiAqIGJlaGF2ZSB3aXRob3V0IGFueSBwcm9ibGVtcy4gQ3VyaW91c2x5LCBsaXN0LXN0eWxlIHdvcmtzIHRvbyB3aXRob3V0IGFueVxuICogc3BlY2lhbCBwcm9kZGluZy5cbiAqL1xudmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyA9IHtcbiAgYmFja2dyb3VuZDoge1xuICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246IHRydWUsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgYm9yZGVyV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyTGVmdENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgYm9yZGVyUmlnaHRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyVG9wU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcbiAgfSxcbiAgZm9udDoge1xuICAgIGZvbnRTdHlsZTogdHJ1ZSxcbiAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxuICAgIGZvbnRTaXplOiB0cnVlLFxuICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgZm9udEZhbWlseTogdHJ1ZVxuICB9XG59O1xuXG52YXIgQ1NTUHJvcGVydHkgPSB7XG4gIGlzVW5pdGxlc3NOdW1iZXI6IGlzVW5pdGxlc3NOdW1iZXIsXG4gIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczogc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5O1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBDU1NQcm9wZXJ0eT1yZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eVwiKSxFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxjYW1lbGl6ZVN0eWxlTmFtZT1yZXF1aXJlKFwiLi9jYW1lbGl6ZVN0eWxlTmFtZVwiKSxkYW5nZXJvdXNTdHlsZVZhbHVlPXJlcXVpcmUoXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIiksaHlwaGVuYXRlU3R5bGVOYW1lPXJlcXVpcmUoXCIuL2h5cGhlbmF0ZVN0eWxlTmFtZVwiKSxtZW1vaXplU3RyaW5nT25seT1yZXF1aXJlKFwiLi9tZW1vaXplU3RyaW5nT25seVwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIikscHJvY2Vzc1N0eWxlTmFtZT1tZW1vaXplU3RyaW5nT25seShmdW5jdGlvbihzdHlsZU5hbWUpe3JldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKX0pLHN0eWxlRmxvYXRBY2Nlc3Nvcj1cImNzc0Zsb2F0XCI7aWYoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiZ2b2lkIDA9PT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzRmxvYXQmJihzdHlsZUZsb2F0QWNjZXNzb3I9XCJzdHlsZUZsb2F0XCIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpdmFyIGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybj0vXig/OndlYmtpdHxtb3p8bylbQS1aXS8sYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuPS87XFxzKiQvLHdhcm5lZFN0eWxlTmFtZXM9e30sd2FybmVkU3R5bGVWYWx1ZXM9e30sd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWU9ZnVuY3Rpb24obmFtZSl7d2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSYmd2FybmVkU3R5bGVOYW1lc1tuYW1lXXx8KHdhcm5lZFN0eWxlTmFtZXNbbmFtZV09ITAsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwiVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz9cIixuYW1lLGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpKTpudWxsKX0sd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lPWZ1bmN0aW9uKG5hbWUpe3dhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkmJndhcm5lZFN0eWxlTmFtZXNbbmFtZV18fCh3YXJuZWRTdHlsZU5hbWVzW25hbWVdPSEwLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSxcIlVuc3VwcG9ydGVkIHZlbmRvci1wcmVmaXhlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzP1wiLG5hbWUsbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuYW1lLnNsaWNlKDEpKTpudWxsKX0sd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uPWZ1bmN0aW9uKG5hbWUsdmFsdWUpe3dhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSYmd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdfHwod2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdPSEwLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSwnU3R5bGUgcHJvcGVydHkgdmFsdWVzIHNob3VsZG5cXCd0IGNvbnRhaW4gYSBzZW1pY29sb24uIFRyeSBcIiVzOiAlc1wiIGluc3RlYWQuJyxuYW1lLHZhbHVlLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLFwiXCIpKTpudWxsKX0sd2FyblZhbGlkU3R5bGU9ZnVuY3Rpb24obmFtZSx2YWx1ZSl7bmFtZS5pbmRleE9mKFwiLVwiKT4tMT93YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lKTpiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKT93YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSk6YmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpJiZ3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSx2YWx1ZSl9O3ZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnM9e2NyZWF0ZU1hcmt1cEZvclN0eWxlczpmdW5jdGlvbihzdHlsZXMpe3ZhciBzZXJpYWxpemVkPVwiXCI7Zm9yKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKWlmKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKXt2YXIgc3R5bGVWYWx1ZT1zdHlsZXNbc3R5bGVOYW1lXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsc3R5bGVWYWx1ZSksbnVsbCE9c3R5bGVWYWx1ZSYmKHNlcmlhbGl6ZWQrPXByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKStcIjpcIixzZXJpYWxpemVkKz1kYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSxzdHlsZVZhbHVlKStcIjtcIil9cmV0dXJuIHNlcmlhbGl6ZWR8fG51bGx9LHNldFZhbHVlRm9yU3R5bGVzOmZ1bmN0aW9uKG5vZGUsc3R5bGVzKXt2YXIgc3R5bGU9bm9kZS5zdHlsZTtmb3IodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpaWYoc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJndhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSxzdHlsZXNbc3R5bGVOYW1lXSk7dmFyIHN0eWxlVmFsdWU9ZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsc3R5bGVzW3N0eWxlTmFtZV0pO2lmKFwiZmxvYXRcIj09PXN0eWxlTmFtZSYmKHN0eWxlTmFtZT1zdHlsZUZsb2F0QWNjZXNzb3IpLHN0eWxlVmFsdWUpc3R5bGVbc3R5bGVOYW1lXT1zdHlsZVZhbHVlO2Vsc2V7dmFyIGV4cGFuc2lvbj1DU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtpZihleHBhbnNpb24pZm9yKHZhciBpbmRpdmlkdWFsU3R5bGVOYW1lIGluIGV4cGFuc2lvbilzdHlsZVtpbmRpdmlkdWFsU3R5bGVOYW1lXT1cIlwiO2Vsc2Ugc3R5bGVbc3R5bGVOYW1lXT1cIlwifX19fTttb2R1bGUuZXhwb3J0cz1DU1NQcm9wZXJ0eU9wZXJhdGlvbnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZRMU5UVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRlpRU3haUVVWQkxFbEJRVWtzWVVGQll5eFJRVUZSTEdsQ1FVTjBRaXh4UWtGQmRVSXNVVUZCVVN3d1FrRkZMMElzYTBKQlFXOUNMRkZCUVZFc2RVSkJRelZDTEc5Q1FVRnpRaXhSUVVGUkxIbENRVU01UWl4dFFrRkJjVUlzVVVGQlVTeDNRa0ZETjBJc2EwSkJRVzlDTEZGQlFWRXNkVUpCUXpWQ0xGRkJRVlVzVVVGQlVTeGhRVVZzUWl4cFFrRkJiVUlzYTBKQlFXdENMRk5CUVZNc1YwRkRhRVFzVFVGQlR5eHZRa0ZCYlVJc1lVRkhlRUlzYlVKQlFYRkNMRlZCVVhwQ0xFbEJVRWtzY1VKQlFYRkNMRmRCUlhsQ0xGTkJRVFZETEZOQlFWTXNaMEpCUVdkQ0xFMUJRVTBzVjBGRGFrTXNiVUpCUVhGQ0xHTkJTWEpDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVVdlFpeEhRVUZKTERaQ1FVRTRRaXg1UWtGSE9VSXNhME5CUVc5RExGRkJSWEJETEc5Q1FVTkJMSEZDUVVWQkxIZENRVUV3UWl4VFFVRlRMRTFCUTJwRExHbENRVUZwUWl4bFFVRmxMRTlCUVZNc2FVSkJRV2xDTEZGQlNUbEVMR2xDUVVGcFFpeFBRVUZSTEVWQlEzaENMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZOQlEzWkRMRVZCUTBFc2EwUkJRMEVzUzBGRFFTeHJRa0ZCYTBJc1QwRkRhRUlzVDBGSFJpeDVRa0ZCTWtJc1UwRkJVeXhOUVVOc1F5eHBRa0ZCYVVJc1pVRkJaU3hQUVVGVExHbENRVUZwUWl4UlFVazVSQ3hwUWtGQmFVSXNUMEZCVVN4RlFVTjRRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VFFVTjJReXhGUVVOQkxHdEZRVU5CTEV0QlEwRXNTMEZCU3l4UFFVRlBMRWRCUVVjc1kwRkJaMElzUzBGQlN5eE5RVUZOTEVsQlEzaERMRTlCUjBZc05FSkJRVGhDTEZOQlFWTXNTMEZCVFN4UFFVTXpReXhyUWtGQmEwSXNaVUZCWlN4UlFVRlZMR3RDUVVGclFpeFRRVWxxUlN4clFrRkJhMElzVVVGQlV5eEZRVU14UWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFRRVU4yUXl4RlFVTkJMRGhGUVVWQkxFdEJRMEVzVFVGQlRTeFJRVUZSTEd0RFFVRnRReXhMUVVNdlF5eFBRVTlHTEdWQlFXbENMRk5CUVZNc1MwRkJUU3hQUVVNNVFpeExRVUZMTEZGQlFWRXNTMEZCVHl4SFFVTjBRaXgzUWtGQmQwSXNUVUZEWml3MFFrRkJORUlzUzBGQlN5eE5RVU14UXl4NVFrRkJlVUlzVFVGRGFFSXNhME5CUVd0RExFdEJRVXNzVVVGRGFFUXNORUpCUVRSQ0xFdEJRVTBzVDBGUmVFTXNTVUZCU1N4M1FrRmpSaXh6UWtGQmRVSXNVMEZCVXl4UlFVTTVRaXhIUVVGSkxGbEJRV0VzUlVGRGFrSXNTMEZCU3l4SFFVRkpMR0ZCUVdFc1VVRkRjRUlzUjBGQlN5eFBRVUZQTEdWQlFXVXNWMEZCTTBJc1EwRkhRU3hIUVVGSkxGbEJRV0VzVDBGQlR5eFZRVU53UWl4blFrRkJhVUlzVVVGQlVTeEpRVUZKTEZWQlF5OUNMR1ZCUVdVc1ZVRkJWeXhaUVVWV0xFMUJRV1FzWVVGRFJpeFpRVUZqTEdsQ1FVRnBRaXhYUVVGaExFbEJRelZETEZsQlFXTXNiMEpCUVc5Q0xGVkJRVmNzV1VGQll5eExRVWN2UkN4TlFVRlBMR0ZCUVdNc1RVRlZka0lzYTBKQlFXMUNMRk5CUVZNc1MwRkJUU3hSUVVOb1F5eEhRVUZKTEU5QlFWRXNTMEZCU3l4TFFVTnFRaXhMUVVGTExFZEJRVWtzWVVGQllTeFJRVU53UWl4SFFVRkxMRTlCUVU4c1pVRkJaU3hYUVVFelFpeERRVWRKTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hWUVVNdlFpeGxRVUZsTEZWQlFWY3NUMEZCVHl4WFFVVnVReXhKUVVGSkxGbEJRV0VzYjBKQlFXOUNMRlZCUVZjc1QwRkJUeXhYUVVsMlJDeEpRVWhyUWl4VlFVRmtMRmxCUTBZc1ZVRkJXU3h2UWtGRlZpeFhRVU5HTEUxQlFVMHNWMEZCWVN4bFFVTmtMRU5CUTB3c1IwRkJTU3hYUVVGWkxGbEJRVmtzTkVKQlFUUkNMRlZCUTNoRUxFbEJRVWtzVlVGSFJpeEpRVUZMTEVkQlFVa3NkVUpCUVhWQ0xGZEJRemxDTEUxQlFVMHNjVUpCUVhWQ0xFOUJSeTlDTEU5QlFVMHNWMEZCWVN4TlFWRTNRaXhSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JEVTFOUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5OY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdRMU5UVUhKdmNHVnlkSGtnUFNCeVpYRjFhWEpsS0Z3aUxpOURVMU5RY205d1pYSjBlVndpS1R0Y2JuWmhjaUJGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMFY0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwWENJcE8xeHVYRzUyWVhJZ1kyRnRaV3hwZW1WVGRIbHNaVTVoYldVZ1BTQnlaWEYxYVhKbEtGd2lMaTlqWVcxbGJHbDZaVk4wZVd4bFRtRnRaVndpS1R0Y2JuWmhjaUJrWVc1blpYSnZkWE5UZEhsc1pWWmhiSFZsSUQwZ2NtVnhkV2x5WlNoY0lpNHZaR0Z1WjJWeWIzVnpVM1I1YkdWV1lXeDFaVndpS1R0Y2JuWmhjaUJvZVhCb1pXNWhkR1ZUZEhsc1pVNWhiV1VnUFNCeVpYRjFhWEpsS0Z3aUxpOW9lWEJvWlc1aGRHVlRkSGxzWlU1aGJXVmNJaWs3WEc1MllYSWdiV1Z0YjJsNlpWTjBjbWx1WjA5dWJIa2dQU0J5WlhGMWFYSmxLRndpTGk5dFpXMXZhWHBsVTNSeWFXNW5UMjVzZVZ3aUtUdGNiblpoY2lCM1lYSnVhVzVuSUQwZ2NtVnhkV2x5WlNoY0lpNHZkMkZ5Ym1sdVoxd2lLVHRjYmx4dWRtRnlJSEJ5YjJObGMzTlRkSGxzWlU1aGJXVWdQU0J0WlcxdmFYcGxVM1J5YVc1blQyNXNlU2htZFc1amRHbHZiaWh6ZEhsc1pVNWhiV1VwSUh0Y2JpQWdjbVYwZFhKdUlHaDVjR2hsYm1GMFpWTjBlV3hsVG1GdFpTaHpkSGxzWlU1aGJXVXBPMXh1ZlNrN1hHNWNiblpoY2lCemRIbHNaVVpzYjJGMFFXTmpaWE56YjNJZ1BTQW5ZM056Um14dllYUW5PMXh1YVdZZ0tFVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBMbU5oYmxWelpVUlBUU2tnZTF4dUlDQXZMeUJKUlRnZ2IyNXNlU0J6ZFhCd2IzSjBjeUJoWTJObGMzTnBibWNnWTNOelJteHZZWFFnS0hOMFlXNWtZWEprS1NCaGN5QnpkSGxzWlVac2IyRjBYRzRnSUdsbUlDaGtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdWMzUjViR1V1WTNOelJteHZZWFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lITjBlV3hsUm14dllYUkJZMk5sYzNOdmNpQTlJQ2R6ZEhsc1pVWnNiMkYwSnp0Y2JpQWdmVnh1ZlZ4dVhHNXBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUM4dklDZHRjMVJ5WVc1elptOXliU2NnYVhNZ1kyOXljbVZqZEN3Z1luVjBJSFJvWlNCdmRHaGxjaUJ3Y21WbWFYaGxjeUJ6YUc5MWJHUWdZbVVnWTJGd2FYUmhiR2w2WldSY2JpQWdkbUZ5SUdKaFpGWmxibVJ2Y21Wa1UzUjViR1ZPWVcxbFVHRjBkR1Z5YmlBOUlDOWVLRDg2ZDJWaWEybDBmRzF2ZW54dktWdEJMVnBkTHp0Y2JseHVJQ0F2THlCemRIbHNaU0IyWVd4MVpYTWdjMmh2ZFd4a2JpZDBJR052Ym5SaGFXNGdZU0J6WlcxcFkyOXNiMjVjYmlBZ2RtRnlJR0poWkZOMGVXeGxWbUZzZFdWWGFYUm9VMlZ0YVdOdmJHOXVVR0YwZEdWeWJpQTlJQzg3WEZ4ektpUXZPMXh1WEc0Z0lIWmhjaUIzWVhKdVpXUlRkSGxzWlU1aGJXVnpJRDBnZTMwN1hHNGdJSFpoY2lCM1lYSnVaV1JUZEhsc1pWWmhiSFZsY3lBOUlIdDlPMXh1WEc0Z0lIWmhjaUIzWVhKdVNIbHdhR1Z1WVhSbFpGTjBlV3hsVG1GdFpTQTlJR1oxYm1OMGFXOXVLRzVoYldVcElIdGNiaUFnSUNCcFppQW9kMkZ5Ym1Wa1UzUjViR1ZPWVcxbGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNodVlXMWxLU0FtSmlCM1lYSnVaV1JUZEhsc1pVNWhiV1Z6VzI1aGJXVmRLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2QyRnlibVZrVTNSNWJHVk9ZVzFsYzF0dVlXMWxYU0E5SUhSeWRXVTdYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUhkaGNtNXBibWNvWEc0Z0lDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDZFZibk4xY0hCdmNuUmxaQ0J6ZEhsc1pTQndjbTl3WlhKMGVTQWxjeTRnUkdsa0lIbHZkU0J0WldGdUlDVnpQeWNzWEc0Z0lDQWdJQ0J1WVcxbExGeHVJQ0FnSUNBZ1kyRnRaV3hwZW1WVGRIbHNaVTVoYldVb2JtRnRaU2xjYmlBZ0lDQXBJRG9nYm5Wc2JDazdYRzRnSUgwN1hHNWNiaUFnZG1GeUlIZGhjbTVDWVdSV1pXNWtiM0psWkZOMGVXeGxUbUZ0WlNBOUlHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JwWmlBb2QyRnlibVZrVTNSNWJHVk9ZVzFsY3k1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTQW1KaUIzWVhKdVpXUlRkSGxzWlU1aGJXVnpXMjVoYldWZEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZDJGeWJtVmtVM1I1YkdWT1lXMWxjMXR1WVcxbFhTQTlJSFJ5ZFdVN1hHNGdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JSGRoY201cGJtY29YRzRnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNkVmJuTjFjSEJ2Y25SbFpDQjJaVzVrYjNJdGNISmxabWw0WldRZ2MzUjViR1VnY0hKdmNHVnlkSGtnSlhNdUlFUnBaQ0I1YjNVZ2JXVmhiaUFsY3o4bkxGeHVJQ0FnSUNBZ2JtRnRaU3hjYmlBZ0lDQWdJRzVoYldVdVkyaGhja0YwS0RBcExuUnZWWEJ3WlhKRFlYTmxLQ2tnS3lCdVlXMWxMbk5zYVdObEtERXBYRzRnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0I5TzF4dVhHNGdJSFpoY2lCM1lYSnVVM1I1YkdWV1lXeDFaVmRwZEdoVFpXMXBZMjlzYjI0Z1BTQm1kVzVqZEdsdmJpaHVZVzFsTENCMllXeDFaU2tnZTF4dUlDQWdJR2xtSUNoM1lYSnVaV1JUZEhsc1pWWmhiSFZsY3k1b1lYTlBkMjVRY205d1pYSjBlU2gyWVd4MVpTa2dKaVlnZDJGeWJtVmtVM1I1YkdWV1lXeDFaWE5iZG1Gc2RXVmRLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2QyRnlibVZrVTNSNWJHVldZV3gxWlhOYmRtRnNkV1ZkSUQwZ2RISjFaVHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2QyRnlibWx1WnloY2JpQWdJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdKMU4wZVd4bElIQnliM0JsY25SNUlIWmhiSFZsY3lCemFHOTFiR1J1WEZ3bmRDQmpiMjUwWVdsdUlHRWdjMlZ0YVdOdmJHOXVMaUFuSUN0Y2JpQWdJQ0FnSUNkVWNua2dYQ0lsY3pvZ0pYTmNJaUJwYm5OMFpXRmtMaWNzWEc0Z0lDQWdJQ0J1WVcxbExGeHVJQ0FnSUNBZ2RtRnNkV1V1Y21Wd2JHRmpaU2hpWVdSVGRIbHNaVlpoYkhWbFYybDBhRk5sYldsamIyeHZibEJoZEhSbGNtNHNJQ2NuS1Z4dUlDQWdJQ2tnT2lCdWRXeHNLVHRjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVmNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlZ4dUlDQWdLaTljYmlBZ2RtRnlJSGRoY201V1lXeHBaRk4wZVd4bElEMGdablZ1WTNScGIyNG9ibUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0JwWmlBb2JtRnRaUzVwYm1SbGVFOW1LQ2N0SnlrZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnZDJGeWJraDVjR2hsYm1GMFpXUlRkSGxzWlU1aGJXVW9ibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoaVlXUldaVzVrYjNKbFpGTjBlV3hsVG1GdFpWQmhkSFJsY200dWRHVnpkQ2h1WVcxbEtTa2dlMXh1SUNBZ0lDQWdkMkZ5YmtKaFpGWmxibVJ2Y21Wa1UzUjViR1ZPWVcxbEtHNWhiV1VwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWW1Ga1UzUjViR1ZXWVd4MVpWZHBkR2hUWlcxcFkyOXNiMjVRWVhSMFpYSnVMblJsYzNRb2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNCM1lYSnVVM1I1YkdWV1lXeDFaVmRwZEdoVFpXMXBZMjlzYjI0b2JtRnRaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJQY0dWeVlYUnBiMjV6SUdadmNpQmtaV0ZzYVc1bklIZHBkR2dnUTFOVElIQnliM0JsY25ScFpYTXVYRzRnS2k5Y2JuWmhjaUJEVTFOUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NZ1BTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxjbWxoYkdsNlpYTWdZU0J0WVhCd2FXNW5JRzltSUhOMGVXeGxJSEJ5YjNCbGNuUnBaWE1nWm05eUlIVnpaU0JoY3lCcGJteHBibVVnYzNSNWJHVnpPbHh1SUNBZ0tseHVJQ0FnS2lBZ0lENGdZM0psWVhSbFRXRnlhM1Z3Um05eVUzUjViR1Z6S0h0M2FXUjBhRG9nSnpJd01IQjRKeXdnYUdWcFoyaDBPaUF3ZlNsY2JpQWdJQ29nSUNCY0luZHBaSFJvT2pJd01IQjRPMmhsYVdkb2REb3dPMXdpWEc0Z0lDQXFYRzRnSUNBcUlGVnVaR1ZtYVc1bFpDQjJZV3gxWlhNZ1lYSmxJR2xuYm05eVpXUWdjMjhnZEdoaGRDQmtaV05zWVhKaGRHbDJaU0J3Y205bmNtRnRiV2x1WnlCcGN5QmxZWE5wWlhJdVhHNGdJQ0FxSUZSb1pTQnlaWE4xYkhRZ2MyaHZkV3hrSUdKbElFaFVUVXd0WlhOallYQmxaQ0JpWldadmNtVWdhVzV6WlhKMGFXOXVJR2x1ZEc4Z2RHaGxJRVJQVFM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlITjBlV3hsYzF4dUlDQWdLaUJBY21WMGRYSnVJSHMvYzNSeWFXNW5mVnh1SUNBZ0tpOWNiaUFnWTNKbFlYUmxUV0Z5YTNWd1JtOXlVM1I1YkdWek9pQm1kVzVqZEdsdmJpaHpkSGxzWlhNcElIdGNiaUFnSUNCMllYSWdjMlZ5YVdGc2FYcGxaQ0E5SUNjbk8xeHVJQ0FnSUdadmNpQW9kbUZ5SUhOMGVXeGxUbUZ0WlNCcGJpQnpkSGxzWlhNcElIdGNiaUFnSUNBZ0lHbG1JQ2doYzNSNWJHVnpMbWhoYzA5M2JsQnliM0JsY25SNUtITjBlV3hsVG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IyWVhJZ2MzUjViR1ZXWVd4MVpTQTlJSE4wZVd4bGMxdHpkSGxzWlU1aGJXVmRPMXh1SUNBZ0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdJQ0IzWVhKdVZtRnNhV1JUZEhsc1pTaHpkSGxzWlU1aGJXVXNJSE4wZVd4bFZtRnNkV1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tITjBlV3hsVm1Gc2RXVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0J6WlhKcFlXeHBlbVZrSUNzOUlIQnliMk5sYzNOVGRIbHNaVTVoYldVb2MzUjViR1ZPWVcxbEtTQXJJQ2M2Snp0Y2JpQWdJQ0FnSUNBZ2MyVnlhV0ZzYVhwbFpDQXJQU0JrWVc1blpYSnZkWE5UZEhsc1pWWmhiSFZsS0hOMGVXeGxUbUZ0WlN3Z2MzUjViR1ZXWVd4MVpTa2dLeUFuT3ljN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnpaWEpwWVd4cGVtVmtJSHg4SUc1MWJHdzdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRITWdkR2hsSUhaaGJIVmxJR1p2Y2lCdGRXeDBhWEJzWlNCemRIbHNaWE1nYjI0Z1lTQnViMlJsTGlBZ1NXWWdZU0IyWVd4MVpTQnBjeUJ6Y0dWamFXWnBaV1FnWVhOY2JpQWdJQ29nSnljZ0tHVnRjSFI1SUhOMGNtbHVaeWtzSUhSb1pTQmpiM0p5WlhOd2IyNWthVzVuSUhOMGVXeGxJSEJ5YjNCbGNuUjVJSGRwYkd3Z1ltVWdkVzV6WlhRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnYm05a1pWeHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYzNSNWJHVnpYRzRnSUNBcUwxeHVJQ0J6WlhSV1lXeDFaVVp2Y2xOMGVXeGxjem9nWm5WdVkzUnBiMjRvYm05a1pTd2djM1I1YkdWektTQjdYRzRnSUNBZ2RtRnlJSE4wZVd4bElEMGdibTlrWlM1emRIbHNaVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnpkSGxzWlU1aGJXVWdhVzRnYzNSNWJHVnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lYTjBlV3hsY3k1b1lYTlBkMjVRY205d1pYSjBlU2h6ZEhsc1pVNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1Vm1Gc2FXUlRkSGxzWlNoemRIbHNaVTVoYldVc0lITjBlV3hsYzF0emRIbHNaVTVoYldWZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJ6ZEhsc1pWWmhiSFZsSUQwZ1pHRnVaMlZ5YjNWelUzUjViR1ZXWVd4MVpTaHpkSGxzWlU1aGJXVXNJSE4wZVd4bGMxdHpkSGxzWlU1aGJXVmRLVHRjYmlBZ0lDQWdJR2xtSUNoemRIbHNaVTVoYldVZ1BUMDlJQ2RtYkc5aGRDY3BJSHRjYmlBZ0lDQWdJQ0FnYzNSNWJHVk9ZVzFsSUQwZ2MzUjViR1ZHYkc5aGRFRmpZMlZ6YzI5eU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSE4wZVd4bFZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2MzUjViR1ZiYzNSNWJHVk9ZVzFsWFNBOUlITjBlV3hsVm1Gc2RXVTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlhod1lXNXphVzl1SUQwZ1ExTlRVSEp2Y0dWeWRIa3VjMmh2Y25Sb1lXNWtVSEp2Y0dWeWRIbEZlSEJoYm5OcGIyNXpXM04wZVd4bFRtRnRaVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxlSEJoYm5OcGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlRhRzl5ZEdoaGJtUWdjSEp2Y0dWeWRIa2dkR2hoZENCSlJUZ2dkMjl1SjNRZ2JHbHJaU0IxYm5ObGRIUnBibWNzSUhOdklIVnVjMlYwSUdWaFkyaGNiaUFnSUNBZ0lDQWdJQ0F2THlCamIyMXdiMjVsYm5RZ2RHOGdjR3hoWTJGMFpTQnBkRnh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdsdVpHbDJhV1IxWVd4VGRIbHNaVTVoYldVZ2FXNGdaWGh3WVc1emFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlZ0cGJtUnBkbWxrZFdGc1UzUjViR1ZPWVcxbFhTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEhsc1pWdHpkSGxzWlU1aGJXVmRJRDBnSnljN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JEVTFOUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NN1hHNGlYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIENhbGxiYWNrUXVldWUoKXt0aGlzLl9jYWxsYmFja3M9bnVsbCx0aGlzLl9jb250ZXh0cz1udWxsfXZhciBQb29sZWRDbGFzcz1yZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKSxhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpO2Fzc2lnbihDYWxsYmFja1F1ZXVlLnByb3RvdHlwZSx7ZW5xdWV1ZTpmdW5jdGlvbihjYWxsYmFjayxjb250ZXh0KXt0aGlzLl9jYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzfHxbXSx0aGlzLl9jb250ZXh0cz10aGlzLl9jb250ZXh0c3x8W10sdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spLHRoaXMuX2NvbnRleHRzLnB1c2goY29udGV4dCl9LG5vdGlmeUFsbDpmdW5jdGlvbigpe3ZhciBjYWxsYmFja3M9dGhpcy5fY2FsbGJhY2tzLGNvbnRleHRzPXRoaXMuX2NvbnRleHRzO2lmKGNhbGxiYWNrcyl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoY2FsbGJhY2tzLmxlbmd0aD09PWNvbnRleHRzLmxlbmd0aCxcIk1pc21hdGNoZWQgbGlzdCBvZiBjb250ZXh0cyBpbiBjYWxsYmFjayBxdWV1ZVwiKTppbnZhcmlhbnQoY2FsbGJhY2tzLmxlbmd0aD09PWNvbnRleHRzLmxlbmd0aCksdGhpcy5fY2FsbGJhY2tzPW51bGwsdGhpcy5fY29udGV4dHM9bnVsbDtmb3IodmFyIGk9MCxsPWNhbGxiYWNrcy5sZW5ndGg7bD5pO2krKyljYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSk7Y2FsbGJhY2tzLmxlbmd0aD0wLGNvbnRleHRzLmxlbmd0aD0wfX0scmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9jYWxsYmFja3M9bnVsbCx0aGlzLl9jb250ZXh0cz1udWxsfSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dGhpcy5yZXNldCgpfX0pLFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKSxtb2R1bGUuZXhwb3J0cz1DYWxsYmFja1F1ZXVlO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2UTJGc2JHSmhZMnRSZFdWMVpTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCVjBFc1dVRnJRa0VzVTBGQlV5eHBRa0ZEVUN4TFFVRkxMRmRCUVdFc1MwRkRiRUlzUzBGQlN5eFZRVUZaTEV0QmJFSnVRaXhIUVVGSkxHRkJRV01zVVVGQlVTeHBRa0ZGZEVJc1QwRkJVeXhSUVVGUkxHMUNRVU5xUWl4VlFVRlpMRkZCUVZFc1kwRnJRbmhDTEZGQlFVOHNZMEZCWXl4WFFWTnVRaXhSUVVGVExGTkJRVk1zVTBGQlZTeFRRVU14UWl4TFFVRkxMRmRCUVdFc1MwRkJTeXhsUVVOMlFpeExRVUZMTEZWQlFWa3NTMEZCU3l4alFVTjBRaXhMUVVGTExGZEJRVmNzUzBGQlN5eFZRVU55UWl4TFFVRkxMRlZCUVZVc1MwRkJTeXhWUVZOMFFpeFZRVUZYTEZkQlExUXNSMEZCU1N4WFFVRlpMRXRCUVVzc1YwRkRha0lzVTBGQlZ5eExRVUZMTEZOQlEzQkNMRWxCUVVrc1ZVRkJWeXhEUVVOYUxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExGVkJRVlVzVTBGQlZ5eFRRVUZUTEU5QlF6bENMR2xFUVVORkxGVkJRVlVzVlVGQlZTeFRRVUZYTEZOQlFWTXNVVUZETlVNc1MwRkJTeXhYUVVGaExFdEJRMnhDTEV0QlFVc3NWVUZCV1N4SlFVTnFRaXhMUVVGTExFZEJRVWtzUjBGQlNTeEZRVUZITEVWQlFVa3NWVUZCVlN4UFFVRlpMRVZCUVVvc1JVRkJUeXhKUVVNelF5eFZRVUZWTEVkQlFVY3NTMEZCU3l4VFFVRlRMRWRCUlRkQ0xGZEJRVlVzVDBGQlV5eEZRVU51UWl4VFFVRlRMRTlCUVZNc1NVRlRkRUlzVFVGQlR5eFhRVU5NTEV0QlFVc3NWMEZCWVN4TFFVTnNRaXhMUVVGTExGVkJRVmtzVFVGTmJrSXNWMEZCV1N4WFFVTldMRXRCUVVzc1YwRkxWQ3haUVVGWkxHRkJRV0VzWlVGRmVrSXNUMEZCVHl4UlFVRlZJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERXpMVEl3TVRVc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDMXpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR2x1SUhSb1pWeHVJQ29nVEVsRFJVNVRSU0JtYVd4bElHbHVJSFJvWlNCeWIyOTBJR1JwY21WamRHOXllU0J2WmlCMGFHbHpJSE52ZFhKalpTQjBjbVZsTGlCQmJpQmhaR1JwZEdsdmJtRnNJR2R5WVc1MFhHNGdLaUJ2WmlCd1lYUmxiblFnY21sbmFIUnpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnVUVGVVJVNVVVeUJtYVd4bElHbHVJSFJvWlNCellXMWxJR1JwY21WamRHOXllUzVjYmlBcVhHNGdLaUJBY0hKdmRtbGtaWE5OYjJSMWJHVWdRMkZzYkdKaFkydFJkV1YxWlZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGQnZiMnhsWkVOc1lYTnpJRDBnY21WeGRXbHlaU2hjSWk0dlVHOXZiR1ZrUTJ4aGMzTmNJaWs3WEc1Y2JuWmhjaUJoYzNOcFoyNGdQU0J5WlhGMWFYSmxLRndpTGk5UFltcGxZM1F1WVhOemFXZHVYQ0lwTzF4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwybHVkbUZ5YVdGdWRGd2lLVHRjYmx4dUx5b3FYRzRnS2lCQklITndaV05wWVd4cGVtVmtJSEJ6WlhWa2J5MWxkbVZ1ZENCdGIyUjFiR1VnZEc4Z2FHVnNjQ0JyWldWd0lIUnlZV05ySUc5bUlHTnZiWEJ2Ym1WdWRITWdkMkZwZEdsdVp5QjBiMXh1SUNvZ1ltVWdibTkwYVdacFpXUWdkMmhsYmlCMGFHVnBjaUJFVDAwZ2NtVndjbVZ6Wlc1MFlYUnBiMjV6SUdGeVpTQmhkbUZwYkdGaWJHVWdabTl5SUhWelpTNWNiaUFxWEc0Z0tpQlVhR2x6SUdsdGNHeGxiV1Z1ZEhNZ1lGQnZiMnhsWkVOc1lYTnpZQ3dnYzI4Z2VXOTFJSE5vYjNWc1pDQnVaWFpsY2lCdVpXVmtJSFJ2SUdsdWMzUmhiblJwWVhSbElIUm9hWE11WEc0Z0tpQkpibk4wWldGa0xDQjFjMlVnWUVOaGJHeGlZV05yVVhWbGRXVXVaMlYwVUc5dmJHVmtLQ2xnTGx4dUlDcGNiaUFxSUVCamJHRnpjeUJTWldGamRFMXZkVzUwVW1WaFpIbGNiaUFxSUVCcGJYQnNaVzFsYm5SeklGQnZiMnhsWkVOc1lYTnpYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnUTJGc2JHSmhZMnRSZFdWMVpTZ3BJSHRjYmlBZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUQwZ2JuVnNiRHRjYmlBZ2RHaHBjeTVmWTI5dWRHVjRkSE1nUFNCdWRXeHNPMXh1ZlZ4dVhHNWhjM05wWjI0b1EyRnNiR0poWTJ0UmRXVjFaUzV3Y205MGIzUjVjR1VzSUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUlc1eGRXVjFaWE1nWVNCallXeHNZbUZqYXlCMGJ5QmlaU0JwYm5admEyVmtJSGRvWlc0Z1lHNXZkR2xtZVVGc2JHQWdhWE1nYVc1MmIydGxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJzZ1NXNTJiMnRsWkNCM2FHVnVJR0J1YjNScFpubEJiR3hnSUdseklHbHVkbTlyWldRdVhHNGdJQ0FxSUVCd1lYSmhiU0I3UDI5aWFtVmpkSDBnWTI5dWRHVjRkQ0JEYjI1MFpYaDBJSFJ2SUdOaGJHd2dZR05oYkd4aVlXTnJZQ0IzYVhSb0xseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHVnVjWFZsZFdVNklHWjFibU4wYVc5dUtHTmhiR3hpWVdOckxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUQwZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUh4OElGdGRPMXh1SUNBZ0lIUm9hWE11WDJOdmJuUmxlSFJ6SUQwZ2RHaHBjeTVmWTI5dWRHVjRkSE1nZkh3Z1cxMDdYRzRnSUNBZ2RHaHBjeTVmWTJGc2JHSmhZMnR6TG5CMWMyZ29ZMkZzYkdKaFkyc3BPMXh1SUNBZ0lIUm9hWE11WDJOdmJuUmxlSFJ6TG5CMWMyZ29ZMjl1ZEdWNGRDazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRtOXJaWE1nWVd4c0lHVnVjWFZsZFdWa0lHTmhiR3hpWVdOcmN5QmhibVFnWTJ4bFlYSnpJSFJvWlNCeGRXVjFaUzRnVkdocGN5QnBjeUJwYm5admEyVmtJR0ZtZEdWeVhHNGdJQ0FxSUhSb1pTQkVUMDBnY21Wd2NtVnpaVzUwWVhScGIyNGdiMllnWVNCamIyMXdiMjVsYm5RZ2FHRnpJR0psWlc0Z1kzSmxZWFJsWkNCdmNpQjFjR1JoZEdWa0xseHVJQ0FnS2x4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUc1dmRHbG1lVUZzYkRvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2RtRnlJR05oYkd4aVlXTnJjeUE5SUhSb2FYTXVYMk5oYkd4aVlXTnJjenRjYmlBZ0lDQjJZWElnWTI5dWRHVjRkSE1nUFNCMGFHbHpMbDlqYjI1MFpYaDBjenRjYmlBZ0lDQnBaaUFvWTJGc2JHSmhZMnR6S1NCN1hHNGdJQ0FnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnSUNCallXeHNZbUZqYTNNdWJHVnVaM1JvSUQwOVBTQmpiMjUwWlhoMGN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDZE5hWE50WVhSamFHVmtJR3hwYzNRZ2IyWWdZMjl1ZEdWNGRITWdhVzRnWTJGc2JHSmhZMnNnY1hWbGRXVW5YRzRnSUNBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0dOaGJHeGlZV05yY3k1c1pXNW5kR2dnUFQwOUlHTnZiblJsZUhSekxteGxibWQwYUNrcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWTJGc2JHSmhZMnR6SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSFJvYVhNdVgyTnZiblJsZUhSeklEMGdiblZzYkR0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ1kyRnNiR0poWTJ0ekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JqWVd4c1ltRmphM05iYVYwdVkyRnNiQ2hqYjI1MFpYaDBjMXRwWFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCallXeHNZbUZqYTNNdWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNBZ0lHTnZiblJsZUhSekxteGxibWQwYUNBOUlEQTdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhObGRITWdkR2hsSUdsdWRHVnlibUZzSUhGMVpYVmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lISmxjMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMGFHbHpMbDlqWVd4c1ltRmphM01nUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDJOdmJuUmxlSFJ6SUQwZ2JuVnNiRHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1lGQnZiMnhsWkVOc1lYTnpZQ0JzYjI5cmN5Qm1iM0lnZEdocGN5NWNiaUFnSUNvdlhHNGdJR1JsYzNSeWRXTjBiM0k2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVjbVZ6WlhRb0tUdGNiaUFnZlZ4dVhHNTlLVHRjYmx4dVVHOXZiR1ZrUTJ4aGMzTXVZV1JrVUc5dmJHbHVaMVJ2S0VOaGJHeGlZV05yVVhWbGRXVXBPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVOaGJHeGlZV05yVVhWbGRXVTdYRzRpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIik7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25DaGFuZ2U6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DaGFuZ2VDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENsaWNrLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wSW5wdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VcbiAgICBdXG4gIH1cbn07XG5cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgcmV0dXJuIChcbiAgICBlbGVtLm5vZGVOYW1lID09PSAnU0VMRUNUJyB8fFxuICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIGVsZW0udHlwZSA9PT0gJ2ZpbGUnKVxuICApO1xufVxuXG52YXIgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIFNlZSBgaGFuZGxlQ2hhbmdlYCBjb21tZW50IGJlbG93XG4gIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2NoYW5nZScpICYmIChcbiAgICAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOClcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgYWN0aXZlRWxlbWVudElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG5cbiAgLy8gSWYgY2hhbmdlIGFuZCBwcm9wZXJ0eWNoYW5nZSBidWJibGVkLCB3ZSdkIGp1c3QgYmluZCB0byBpdCBsaWtlIGFsbCB0aGVcbiAgLy8gb3RoZXIgZXZlbnRzIGFuZCBoYXZlIGl0IGdvIHRocm91Z2ggUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLiBTaW5jZSBpdFxuICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcbiAgLy8gcHJvY2VzcyB0aGUgYWJzdHJhY3QgZXZlbnQgbWFudWFsbHkuXG4gIC8vXG4gIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cbiAgLy8gYmVmb3JlIHRoZSBuZXh0IHJlcmVuZGVyIChpbmNsdWRpbmcgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gYW5jZXN0b3JcbiAgLy8gZWxlbWVudHMgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgaW5wdXQpLiBXaXRob3V0IHRoaXMsIGNvbnRyb2xsZWRcbiAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuICAvLyB0aGUgY29tcG9uZW50IGlzIHJlcmVuZGVyZWQgYW5kIHRoZSB2YWx1ZSByZXZlcnRlZCBiZWZvcmUgYWxsIHRoZSBldmVudFxuICAvLyBoYW5kbGVycyBjYW4gcnVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MDguXG4gIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICB9XG59XG5cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50c1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmIChcbiAgICAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOSlcbiAgKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlcGxhY2VtZW50IGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgdmFsdWVgIHByb3BlcnR5IHRoYXQgZ2V0c1xuICogc2V0IG9uIHRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xudmFyIG5ld1ZhbHVlUHJvcCA9ICB7XG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgLy8gQ2FzdCB0byBhIHN0cmluZyBzbyB3ZSBjYW4gZG8gZXF1YWxpdHkgY2hlY2tzLlxuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9ICcnICsgdmFsO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3Auc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFN0YXJ0cyB0cmFja2luZyBwcm9wZXJ0eWNoYW5nZSBldmVudHMgb24gdGhlIHBhc3NlZC1pbiBlbGVtZW50XG4gKiBhbmQgb3ZlcnJpZGUgdGhlIHZhbHVlIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIHVzZXIgZXZlbnRzIGZyb21cbiAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIHRhcmdldC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgJ3ZhbHVlJ1xuICApO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgUmVtb3ZlcyB0aGUgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIGN1cnJlbnRseS10cmFja2VkIGVsZW1lbnQsXG4gKiBpZiBhbnkgZXhpc3RzLlxuICovXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZGVsZXRlIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZWZpbml0aW9uXG4gIGRlbGV0ZSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIEhhbmRsZXMgYSBwcm9wZXJ0eWNoYW5nZSBldmVudCwgc2VuZGluZyBhIGBjaGFuZ2VgIGV2ZW50IGlmXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHZhbHVlO1xuXG4gIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xufVxuXG4vKipcbiAqIElmIGEgYGNoYW5nZWAgZXZlbnQgc2hvdWxkIGJlIGZpcmVkLCByZXR1cm5zIHRoZSB0YXJnZXQncyBJRC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wSW5wdXQpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuICAgIC8vIEluIElFOCwgd2UgY2FuIGNhcHR1cmUgYWxtb3N0IGFsbCAudmFsdWUgY2hhbmdlcyBieSBhZGRpbmcgYVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuICAgIC8vIGVxdWFsIHRvICd2YWx1ZSdcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2UgfHxcbiAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24pIHtcbiAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3RcbiAgICAvLyBoZWxwZnVsIGZvciB1cyBzbyBqdXN0IGNoZWNrIGFjdGl2ZUVsZW1lbnQgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBvbiB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYWZ0ZXIgc2V0dGluZyBgdmFsdWVgIGZyb20gYVxuICAgIC8vIHNjcmlwdCBhbmQgZmlyZXMgb25seSBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAuIENhdGNoaW5nIGtleXVwIHVzdWFsbHlcbiAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG4gICAgLy8ga2V5c3Ryb2tlIGlmIHVzZXIgZG9lcyBhIGtleSByZXBlYXQgKGl0J2xsIGJlIGEgbGl0dGxlIGRlbGF5ZWQ6IHJpZ2h0XG4gICAgLy8gYmVmb3JlIHRoZSBzZWNvbmQga2V5c3Ryb2tlKS4gT3RoZXIgaW5wdXQgbWV0aG9kcyAoZS5nLiwgcGFzdGUpIHNlZW0gdG9cbiAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cbiAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LnZhbHVlICE9PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICByZXR1cm4gYWN0aXZlRWxlbWVudElEO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICByZXR1cm4gKFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiZcbiAgICAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJylcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2xpY2spIHtcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICB2YXIgZ2V0VGFyZ2V0SURGdW5jLCBoYW5kbGVFdmVudEZ1bmM7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudElFO1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaG91bGRVc2VDbGlja0V2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50O1xuICAgIH1cblxuICAgIGlmIChnZXRUYXJnZXRJREZ1bmMpIHtcbiAgICAgIHZhciB0YXJnZXRJRCA9IGdldFRhcmdldElERnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICAgICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgICAgICAgdGFyZ2V0SUQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKTtcbiAgICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDbGllbnRSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBuZXh0UmVhY3RSb290SW5kZXggPSAwO1xuXG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV4dFJlYWN0Um9vdEluZGV4Kys7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50UmVhY3RSb290SW5kZXg7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLGNoaWxkTm9kZSxpbmRleCl7cGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLHBhcmVudE5vZGUuY2hpbGROb2Rlc1tpbmRleF18fG51bGwpfXZhciBEYW5nZXI9cmVxdWlyZShcIi4vRGFuZ2VyXCIpLFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzPXJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCIpLHNldFRleHRDb250ZW50PXJlcXVpcmUoXCIuL3NldFRleHRDb250ZW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIiksRE9NQ2hpbGRyZW5PcGVyYXRpb25zPXtkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDpEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAsdXBkYXRlVGV4dENvbnRlbnQ6c2V0VGV4dENvbnRlbnQscHJvY2Vzc1VwZGF0ZXM6ZnVuY3Rpb24odXBkYXRlcyxtYXJrdXBMaXN0KXtmb3IodmFyIHVwZGF0ZSxpbml0aWFsQ2hpbGRyZW49bnVsbCx1cGRhdGVkQ2hpbGRyZW49bnVsbCxpPTA7aTx1cGRhdGVzLmxlbmd0aDtpKyspaWYodXBkYXRlPXVwZGF0ZXNbaV0sdXBkYXRlLnR5cGU9PT1SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HfHx1cGRhdGUudHlwZT09PVJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKXt2YXIgdXBkYXRlZEluZGV4PXVwZGF0ZS5mcm9tSW5kZXgsdXBkYXRlZENoaWxkPXVwZGF0ZS5wYXJlbnROb2RlLmNoaWxkTm9kZXNbdXBkYXRlZEluZGV4XSxwYXJlbnRJRD11cGRhdGUucGFyZW50SUQ7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQodXBkYXRlZENoaWxkLFwicHJvY2Vzc1VwZGF0ZXMoKTogVW5hYmxlIHRvIGZpbmQgY2hpbGQgJXMgb2YgZWxlbWVudC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlIGJyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgbmVzdGluZyB0YWdzIGxpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiBwYXJlbnQuIFRyeSBpbnNwZWN0aW5nIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZWxlbWVudCB3aXRoIFJlYWN0IElEIGAlc2AuXCIsdXBkYXRlZEluZGV4LHBhcmVudElEKTppbnZhcmlhbnQodXBkYXRlZENoaWxkKSxpbml0aWFsQ2hpbGRyZW49aW5pdGlhbENoaWxkcmVufHx7fSxpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdPWluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF18fFtdLGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XT11cGRhdGVkQ2hpbGQsdXBkYXRlZENoaWxkcmVuPXVwZGF0ZWRDaGlsZHJlbnx8W10sdXBkYXRlZENoaWxkcmVuLnB1c2godXBkYXRlZENoaWxkKX12YXIgcmVuZGVyZWRNYXJrdXA9RGFuZ2VyLmRhbmdlcm91c2x5UmVuZGVyTWFya3VwKG1hcmt1cExpc3QpO2lmKHVwZGF0ZWRDaGlsZHJlbilmb3IodmFyIGo9MDtqPHVwZGF0ZWRDaGlsZHJlbi5sZW5ndGg7aisrKXVwZGF0ZWRDaGlsZHJlbltqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHVwZGF0ZWRDaGlsZHJlbltqXSk7Zm9yKHZhciBrPTA7azx1cGRhdGVzLmxlbmd0aDtrKyspc3dpdGNoKHVwZGF0ZT11cGRhdGVzW2tdLHVwZGF0ZS50eXBlKXtjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVA6aW5zZXJ0Q2hpbGRBdCh1cGRhdGUucGFyZW50Tm9kZSxyZW5kZXJlZE1hcmt1cFt1cGRhdGUubWFya3VwSW5kZXhdLHVwZGF0ZS50b0luZGV4KTticmVhaztjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkc6aW5zZXJ0Q2hpbGRBdCh1cGRhdGUucGFyZW50Tm9kZSxpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSx1cGRhdGUudG9JbmRleCk7YnJlYWs7Y2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6c2V0VGV4dENvbnRlbnQodXBkYXRlLnBhcmVudE5vZGUsdXBkYXRlLnRleHRDb250ZW50KTticmVhaztjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFOn19fTttb2R1bGUuZXhwb3J0cz1ET01DaGlsZHJlbk9wZXJhdGlvbnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZSRTlOUTJocGJHUnlaVzVQY0dWeVlYUnBiMjV6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRlpRU3haUVdkQ1FTeFRRVUZUTEdWQlFXTXNWMEZCV1N4VlFVRlhMRTlCU3pWRExGZEJRVmNzWVVGRFZDeFZRVU5CTEZkQlFWY3NWMEZCVnl4UlFVRlZMRTFCY2tKd1F5eEhRVUZKTEZGQlFWTXNVVUZCVVN4WlFVTnFRaXd5UWtGQk5rSXNVVUZCVVN4blEwRkZja01zWlVGQmFVSXNVVUZCVVN4dlFrRkRla0lzVlVGQldTeFJRVUZSTEdWQmQwSndRaXgxUWtGRlJpeHBRMEZCYTBNc1QwRkJUeXhwUTBGRmVrTXNhMEpCUVcxQ0xHVkJWVzVDTEdWQlFXZENMRk5CUVZNc1VVRkJVeXhaUVU5b1F5eEpRVUZMTEVkQlRrUXNVVUZGUVN4blFrRkJhMElzUzBGRmJFSXNaMEpCUVd0Q0xFdEJSV0lzUlVGQlNTeEZRVUZITEVWQlFVa3NVVUZCVVN4UFFVRlJMRWxCUld4RExFZEJSRUVzVDBGQlV5eFJRVUZSTEVkQlEySXNUMEZCVHl4UFFVRlRMREpDUVVFeVFpeGxRVU16UXl4UFFVRlBMRTlCUVZNc01rSkJRVEpDTEZsQlFXRXNRMEZETVVRc1IwRkJTU3hqUVVGbExFOUJRVThzVlVGRGRFSXNZVUZCWlN4UFFVRlBMRmRCUVZjc1YwRkJWeXhqUVVNMVF5eFRRVUZYTEU5QlFVOHNVVUZGY2tJc1owSkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExHRkJRMEVzYlZaQlRVRXNZVUZEUVN4VlFVTkZMRlZCUVZVc1kwRkZaQ3huUWtGQmEwSXNiMEpCUTJ4Q0xHZENRVUZuUWl4VlFVRlpMR2RDUVVGblFpeGpRVU0xUXl4blFrRkJaMElzVlVGQlZTeGpRVUZuUWl4aFFVVXhReXhuUWtGQmEwSXNiMEpCUTJ4Q0xHZENRVUZuUWl4TFFVRkxMR05CU1hwQ0xFZEJRVWtzWjBKQlFXbENMRTlCUVU4c2QwSkJRWGRDTEZkQlIzQkVMRWxCUVVrc1owSkJRMFlzU1VGQlN5eEhRVUZKTEVkQlFVa3NSVUZCUnl4RlFVRkpMR2RDUVVGblFpeFBRVUZSTEVsQlF6RkRMR2RDUVVGblFpeEhRVUZITEZkQlFWY3NXVUZCV1N4blFrRkJaMElzUjBGSk9VUXNTMEZCU3l4SFFVRkpMRWRCUVVrc1JVRkJSeXhGUVVGSkxGRkJRVkVzVDBGQlVTeEpRVVZzUXl4UFFVUkJMRTlCUVZNc1VVRkJVU3hIUVVOVUxFOUJRVThzVFVGRFlpeEpRVUZMTERSQ1FVRXlRaXhqUVVNNVFpeGpRVU5GTEU5QlFVOHNWMEZEVUN4bFFVRmxMRTlCUVU4c1lVRkRkRUlzVDBGQlR5eFJRVVZVTEUxQlEwWXNTMEZCU3l3MFFrRkJNa0lzWTBGRE9VSXNZMEZEUlN4UFFVRlBMRmRCUTFBc1owSkJRV2RDTEU5QlFVOHNWVUZCVlN4UFFVRlBMRmRCUTNoRExFOUJRVThzVVVGRlZDeE5RVU5HTEV0QlFVc3NORUpCUVRKQ0xHRkJRemxDTEdWQlEwVXNUMEZCVHl4WFFVTlFMRTlCUVU4c1dVRkZWQ3hOUVVOR0xFdEJRVXNzTkVKQlFUSkNMR1ZCVTNoRExGRkJRVThzVVVGQlZTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElFUlBUVU5vYVd4a2NtVnVUM0JsY21GMGFXOXVjMXh1SUNvZ1FIUjVjR1ZqYUdWamEzTWdjM1JoZEdsakxXOXViSGxjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCRVlXNW5aWElnUFNCeVpYRjFhWEpsS0Z3aUxpOUVZVzVuWlhKY0lpazdYRzUyWVhJZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFMTFiSFJwUTJocGJHUlZjR1JoZEdWVWVYQmxjMXdpS1R0Y2JseHVkbUZ5SUhObGRGUmxlSFJEYjI1MFpXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmMyVjBWR1Y0ZEVOdmJuUmxiblJjSWlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZhVzUyWVhKcFlXNTBYQ0lwTzF4dVhHNHZLaXBjYmlBcUlFbHVjMlZ5ZEhNZ1lHTm9hV3hrVG05a1pXQWdZWE1nWVNCamFHbHNaQ0J2WmlCZ2NHRnlaVzUwVG05a1pXQWdZWFFnZEdobElHQnBibVJsZUdBdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0RVQwMUZiR1Z0Wlc1MGZTQndZWEpsYm5ST2IyUmxJRkJoY21WdWRDQnViMlJsSUdsdUlIZG9hV05vSUhSdklHbHVjMlZ5ZEM1Y2JpQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnWTJocGJHUk9iMlJsSUVOb2FXeGtJRzV2WkdVZ2RHOGdhVzV6WlhKMExseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2x1WkdWNElFbHVaR1Y0SUdGMElIZG9hV05vSUhSdklHbHVjMlZ5ZENCMGFHVWdZMmhwYkdRdVhHNGdLaUJBYVc1MFpYSnVZV3hjYmlBcUwxeHVablZ1WTNScGIyNGdhVzV6WlhKMFEyaHBiR1JCZENod1lYSmxiblJPYjJSbExDQmphR2xzWkU1dlpHVXNJR2x1WkdWNEtTQjdYRzRnSUM4dklFSjVJR1Y0Y0d4dmFYUnBibWNnWVhKeVlYbHpJSEpsZEhWeWJtbHVaeUJnZFc1a1pXWnBibVZrWUNCbWIzSWdZVzRnZFc1a1pXWnBibVZrSUdsdVpHVjRMQ0IzWlNCallXNWNiaUFnTHk4Z2NtVnNlU0JsZUdOc2RYTnBkbVZzZVNCdmJpQmdhVzV6WlhKMFFtVm1iM0psS0c1dlpHVXNJRzUxYkd3cFlDQnBibk4wWldGa0lHOW1JR0ZzYzI4Z2RYTnBibWRjYmlBZ0x5OGdZR0Z3Y0dWdVpFTm9hV3hrS0c1dlpHVXBZQzRnU0c5M1pYWmxjaXdnZFhOcGJtY2dZSFZ1WkdWbWFXNWxaR0FnYVhNZ2JtOTBJR0ZzYkc5M1pXUWdZbmtnWVd4c1hHNGdJQzh2SUdKeWIzZHpaWEp6SUhOdklIZGxJRzExYzNRZ2NtVndiR0ZqWlNCcGRDQjNhWFJvSUdCdWRXeHNZQzVjYmlBZ2NHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvWEc0Z0lDQWdZMmhwYkdST2IyUmxMRnh1SUNBZ0lIQmhjbVZ1ZEU1dlpHVXVZMmhwYkdST2IyUmxjMXRwYm1SbGVGMGdmSHdnYm5Wc2JGeHVJQ0FwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRTl3WlhKaGRHbHZibk1nWm05eUlIVndaR0YwYVc1bklIZHBkR2dnUkU5TklHTm9hV3hrY21WdUxseHVJQ292WEc1MllYSWdSRTlOUTJocGJHUnlaVzVQY0dWeVlYUnBiMjV6SUQwZ2UxeHVYRzRnSUdSaGJtZGxjbTkxYzJ4NVVtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndPaUJFWVc1blpYSXVaR0Z1WjJWeWIzVnpiSGxTWlhCc1lXTmxUbTlrWlZkcGRHaE5ZWEpyZFhBc1hHNWNiaUFnZFhCa1lYUmxWR1Y0ZEVOdmJuUmxiblE2SUhObGRGUmxlSFJEYjI1MFpXNTBMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdWeklHRWdZMjl0Y0c5dVpXNTBKM01nWTJocGJHUnlaVzRnWW5rZ2NISnZZMlZ6YzJsdVp5QmhJSE5sY21sbGN5QnZaaUIxY0dSaGRHVnpMaUJVYUdWY2JpQWdJQ29nZFhCa1lYUmxJR052Ym1acFozVnlZWFJwYjI1eklHRnlaU0JsWVdOb0lHVjRjR1ZqZEdWa0lIUnZJR2hoZG1VZ1lTQmdjR0Z5Wlc1MFRtOWtaV0FnY0hKdmNHVnlkSGt1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1lYSnlZWGs4YjJKcVpXTjBQbjBnZFhCa1lYUmxjeUJNYVhOMElHOW1JSFZ3WkdGMFpTQmpiMjVtYVdkMWNtRjBhVzl1Y3k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRoY25KaGVUeHpkSEpwYm1jK2ZTQnRZWEpyZFhCTWFYTjBJRXhwYzNRZ2IyWWdiV0Z5YTNWd0lITjBjbWx1WjNNdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ2NISnZZMlZ6YzFWd1pHRjBaWE02SUdaMWJtTjBhVzl1S0hWd1pHRjBaWE1zSUcxaGNtdDFjRXhwYzNRcElIdGNiaUFnSUNCMllYSWdkWEJrWVhSbE8xeHVJQ0FnSUM4dklFMWhjSEJwYm1jZ1puSnZiU0J3WVhKbGJuUWdTVVJ6SUhSdklHbHVhWFJwWVd3Z1kyaHBiR1FnYjNKa1pYSnBibWR6TGx4dUlDQWdJSFpoY2lCcGJtbDBhV0ZzUTJocGJHUnlaVzRnUFNCdWRXeHNPMXh1SUNBZ0lDOHZJRXhwYzNRZ2IyWWdZMmhwYkdSeVpXNGdkR2hoZENCM2FXeHNJR0psSUcxdmRtVmtJRzl5SUhKbGJXOTJaV1F1WEc0Z0lDQWdkbUZ5SUhWd1pHRjBaV1JEYUdsc1pISmxiaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFZ3WkdGMFpYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhWd1pHRjBaU0E5SUhWd1pHRjBaWE5iYVYwN1hHNGdJQ0FnSUNCcFppQW9kWEJrWVhSbExuUjVjR1VnUFQwOUlGSmxZV04wVFhWc2RHbERhR2xzWkZWd1pHRjBaVlI1Y0dWekxrMVBWa1ZmUlZoSlUxUkpUa2NnZkh4Y2JpQWdJQ0FnSUNBZ0lDQjFjR1JoZEdVdWRIbHdaU0E5UFQwZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNdVVrVk5UMVpGWDA1UFJFVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIVndaR0YwWldSSmJtUmxlQ0E5SUhWd1pHRjBaUzVtY205dFNXNWtaWGc3WEc0Z0lDQWdJQ0FnSUhaaGNpQjFjR1JoZEdWa1EyaHBiR1FnUFNCMWNHUmhkR1V1Y0dGeVpXNTBUbTlrWlM1amFHbHNaRTV2WkdWelczVndaR0YwWldSSmJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5SSlJDQTlJSFZ3WkdGMFpTNXdZWEpsYm5SSlJEdGNibHh1SUNBZ0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdJQ0FnSUhWd1pHRjBaV1JEYUdsc1pDeGNiaUFnSUNBZ0lDQWdJQ0FuY0hKdlkyVnpjMVZ3WkdGMFpYTW9LVG9nVlc1aFlteGxJSFJ2SUdacGJtUWdZMmhwYkdRZ0pYTWdiMllnWld4bGJXVnVkQzRnVkdocGN5QW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBbmNISnZZbUZpYkhrZ2JXVmhibk1nZEdobElFUlBUU0IzWVhNZ2RXNWxlSEJsWTNSbFpHeDVJRzExZEdGMFpXUWdLR1V1Wnk0c0lHSjVJSFJvWlNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuWW5KdmQzTmxjaWtzSUhWemRXRnNiSGtnWkhWbElIUnZJR1p2Y21kbGRIUnBibWNnWVNBOGRHSnZaSGsrSUhkb1pXNGdkWE5wYm1jZ2RHRmliR1Z6TENBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuYm1WemRHbHVaeUIwWVdkeklHeHBhMlVnUEdadmNtMCtMQ0E4Y0Q0c0lHOXlJRHhoUGl3Z2IzSWdkWE5wYm1jZ2JtOXVMVk5XUnlCbGJHVnRaVzUwY3lBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuYVc0Z1lXNGdQSE4yWno0Z2NHRnlaVzUwTGlCVWNua2dhVzV6Y0dWamRHbHVaeUIwYUdVZ1kyaHBiR1FnYm05a1pYTWdiMllnZEdobElHVnNaVzFsYm5RZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSjNkcGRHZ2dVbVZoWTNRZ1NVUWdZQ1Z6WUM0bkxGeHVJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpXUkpibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQndZWEpsYm5SSlJGeHVJQ0FnSUNBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0hWd1pHRjBaV1JEYUdsc1pDa3BPMXh1WEc0Z0lDQWdJQ0FnSUdsdWFYUnBZV3hEYUdsc1pISmxiaUE5SUdsdWFYUnBZV3hEYUdsc1pISmxiaUI4ZkNCN2ZUdGNiaUFnSUNBZ0lDQWdhVzVwZEdsaGJFTm9hV3hrY21WdVczQmhjbVZ1ZEVsRVhTQTlJR2x1YVhScFlXeERhR2xzWkhKbGJsdHdZWEpsYm5SSlJGMGdmSHdnVzEwN1hHNGdJQ0FnSUNBZ0lHbHVhWFJwWVd4RGFHbHNaSEpsYmx0d1lYSmxiblJKUkYxYmRYQmtZWFJsWkVsdVpHVjRYU0E5SUhWd1pHRjBaV1JEYUdsc1pEdGNibHh1SUNBZ0lDQWdJQ0IxY0dSaGRHVmtRMmhwYkdSeVpXNGdQU0IxY0dSaGRHVmtRMmhwYkdSeVpXNGdmSHdnVzEwN1hHNGdJQ0FnSUNBZ0lIVndaR0YwWldSRGFHbHNaSEpsYmk1d2RYTm9LSFZ3WkdGMFpXUkRhR2xzWkNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlISmxibVJsY21Wa1RXRnlhM1Z3SUQwZ1JHRnVaMlZ5TG1SaGJtZGxjbTkxYzJ4NVVtVnVaR1Z5VFdGeWEzVndLRzFoY210MWNFeHBjM1FwTzF4dVhHNGdJQ0FnTHk4Z1VtVnRiM1psSUhWd1pHRjBaV1FnWTJocGJHUnlaVzRnWm1seWMzUWdjMjhnZEdoaGRDQmdkRzlKYm1SbGVHQWdhWE1nWTI5dWMybHpkR1Z1ZEM1Y2JpQWdJQ0JwWmlBb2RYQmtZWFJsWkVOb2FXeGtjbVZ1S1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElIVndaR0YwWldSRGFHbHNaSEpsYmk1c1pXNW5kR2c3SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0IxY0dSaGRHVmtRMmhwYkdSeVpXNWJhbDB1Y0dGeVpXNTBUbTlrWlM1eVpXMXZkbVZEYUdsc1pDaDFjR1JoZEdWa1EyaHBiR1J5Wlc1YmFsMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHc2dQU0F3T3lCcklEd2dkWEJrWVhSbGN5NXNaVzVuZEdnN0lHc3JLeWtnZTF4dUlDQWdJQ0FnZFhCa1lYUmxJRDBnZFhCa1lYUmxjMXRyWFR0Y2JpQWdJQ0FnSUhOM2FYUmphQ0FvZFhCa1lYUmxMblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNCU1pXRmpkRTExYkhScFEyaHBiR1JWY0dSaGRHVlVlWEJsY3k1SlRsTkZVbFJmVFVGU1MxVlFPbHh1SUNBZ0lDQWdJQ0FnSUdsdWMyVnlkRU5vYVd4a1FYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1V1Y0dGeVpXNTBUbTlrWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYm1SbGNtVmtUV0Z5YTNWd1czVndaR0YwWlM1dFlYSnJkWEJKYm1SbGVGMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1V1ZEc5SmJtUmxlRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnVW1WaFkzUk5kV3gwYVVOb2FXeGtWWEJrWVhSbFZIbHdaWE11VFU5V1JWOUZXRWxUVkVsT1J6cGNiaUFnSUNBZ0lDQWdJQ0JwYm5ObGNuUkRhR2xzWkVGMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhCa1lYUmxMbkJoY21WdWRFNXZaR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc1EyaHBiR1J5Wlc1YmRYQmtZWFJsTG5CaGNtVnVkRWxFWFZ0MWNHUmhkR1V1Wm5KdmJVbHVaR1Y0WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpTNTBiMGx1WkdWNFhHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQlNaV0ZqZEUxMWJIUnBRMmhwYkdSVmNHUmhkR1ZVZVhCbGN5NVVSVmhVWDBOUFRsUkZUbFE2WEc0Z0lDQWdJQ0FnSUNBZ2MyVjBWR1Y0ZEVOdmJuUmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjR1JoZEdVdWNHRnlaVzUwVG05a1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaUzUwWlhoMFEyOXVkR1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ1VtVmhZM1JOZFd4MGFVTm9hV3hrVlhCa1lYUmxWSGx3WlhNdVVrVk5UMVpGWDA1UFJFVTZYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1FXeHlaV0ZrZVNCeVpXMXZkbVZrSUdKNUlIUm9aU0JtYjNJdGJHOXZjQ0JoWW05MlpTNWNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JFVDAxRGFHbHNaSEpsYms5d1pYSmhkR2x2Ym5NN1hHNGlYWDA9IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSxiaXRtYXNrKXtyZXR1cm4odmFsdWUmYml0bWFzayk9PT1iaXRtYXNrfXZhciBpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLERPTVByb3BlcnR5SW5qZWN0aW9uPXtNVVNUX1VTRV9BVFRSSUJVVEU6MSxNVVNUX1VTRV9QUk9QRVJUWToyLEhBU19TSURFX0VGRkVDVFM6NCxIQVNfQk9PTEVBTl9WQUxVRTo4LEhBU19OVU1FUklDX1ZBTFVFOjE2LEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOjQ4LEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6NjQsaW5qZWN0RE9NUHJvcGVydHlDb25maWc6ZnVuY3Rpb24oZG9tUHJvcGVydHlDb25maWcpe3ZhciBQcm9wZXJ0aWVzPWRvbVByb3BlcnR5Q29uZmlnLlByb3BlcnRpZXN8fHt9LERPTUF0dHJpYnV0ZU5hbWVzPWRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzfHx7fSxET01Qcm9wZXJ0eU5hbWVzPWRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXN8fHt9LERPTU11dGF0aW9uTWV0aG9kcz1kb21Qcm9wZXJ0eUNvbmZpZy5ET01NdXRhdGlvbk1ldGhvZHN8fHt9O2RvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlJiZET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMucHVzaChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSk7Zm9yKHZhciBwcm9wTmFtZSBpbiBQcm9wZXJ0aWVzKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpLFwiaW5qZWN0RE9NUHJvcGVydHlDb25maWcoLi4uKTogWW91J3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICclcycgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgaW5qZWN0aW5nIHR3byBjb25maWdzIHRoYXQgaGF2ZSBjb25mbGljdGluZyBwcm9wZXJ0eSBuYW1lcy5cIixwcm9wTmFtZSk6aW52YXJpYW50KCFET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpLERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW3Byb3BOYW1lXT0hMDt2YXIgbG93ZXJDYXNlZD1wcm9wTmFtZS50b0xvd2VyQ2FzZSgpO2lmKERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2xvd2VyQ2FzZWRdPXByb3BOYW1lLERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSl7dmFyIGF0dHJpYnV0ZU5hbWU9RE9NQXR0cmlidXRlTmFtZXNbcHJvcE5hbWVdO0RPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2F0dHJpYnV0ZU5hbWVdPXByb3BOYW1lLERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbcHJvcE5hbWVdPWF0dHJpYnV0ZU5hbWV9ZWxzZSBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXT1sb3dlckNhc2VkO0RPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtwcm9wTmFtZV09RE9NUHJvcGVydHlOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSk/RE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV06cHJvcE5hbWUsRE9NTXV0YXRpb25NZXRob2RzLmhhc093blByb3BlcnR5KHByb3BOYW1lKT9ET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtwcm9wTmFtZV09RE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTpET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtwcm9wTmFtZV09bnVsbDt2YXIgcHJvcENvbmZpZz1Qcm9wZXJ0aWVzW3Byb3BOYW1lXTtET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXT1jaGVja01hc2socHJvcENvbmZpZyxET01Qcm9wZXJ0eUluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEUpLERPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV09Y2hlY2tNYXNrKHByb3BDb25maWcsRE9NUHJvcGVydHlJbmplY3Rpb24uTVVTVF9VU0VfUFJPUEVSVFkpLERPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXT1jaGVja01hc2socHJvcENvbmZpZyxET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTKSxET01Qcm9wZXJ0eS5oYXNCb29sZWFuVmFsdWVbcHJvcE5hbWVdPWNoZWNrTWFzayhwcm9wQ29uZmlnLERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFKSxET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbcHJvcE5hbWVdPWNoZWNrTWFzayhwcm9wQ29uZmlnLERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFKSxET01Qcm9wZXJ0eS5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZVtwcm9wTmFtZV09Y2hlY2tNYXNrKHByb3BDb25maWcsRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdPWNoZWNrTWFzayhwcm9wQ29uZmlnLERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCFET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXXx8IURPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0sXCJET01Qcm9wZXJ0eTogQ2Fubm90IHJlcXVpcmUgdXNpbmcgYm90aCBhdHRyaWJ1dGUgYW5kIHByb3BlcnR5OiAlc1wiLHByb3BOYW1lKTppbnZhcmlhbnQoIURPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdfHwhRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXXx8IURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSxcIkRPTVByb3BlcnR5OiBQcm9wZXJ0aWVzIHRoYXQgaGF2ZSBzaWRlIGVmZmVjdHMgbXVzdCB1c2UgcHJvcGVydHk6ICVzXCIscHJvcE5hbWUpOmludmFyaWFudChET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdfHwhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghIURPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0rISFET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbcHJvcE5hbWVdKyEhRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV08PTEsXCJET01Qcm9wZXJ0eTogVmFsdWUgY2FuIGJlIG9uZSBvZiBib29sZWFuLCBvdmVybG9hZGVkIGJvb2xlYW4sIG9yIG51bWVyaWMgdmFsdWUsIGJ1dCBub3QgYSBjb21iaW5hdGlvbjogJXNcIixwcm9wTmFtZSk6aW52YXJpYW50KCEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSshIURPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0rISFET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW3Byb3BOYW1lXTw9MSl9fX0sZGVmYXVsdFZhbHVlQ2FjaGU9e30sRE9NUHJvcGVydHk9e0lEX0FUVFJJQlVURV9OQU1FOlwiZGF0YS1yZWFjdGlkXCIsaXNTdGFuZGFyZE5hbWU6e30sZ2V0UG9zc2libGVTdGFuZGFyZE5hbWU6e30sZ2V0QXR0cmlidXRlTmFtZTp7fSxnZXRQcm9wZXJ0eU5hbWU6e30sZ2V0TXV0YXRpb25NZXRob2Q6e30sbXVzdFVzZUF0dHJpYnV0ZTp7fSxtdXN0VXNlUHJvcGVydHk6e30saGFzU2lkZUVmZmVjdHM6e30saGFzQm9vbGVhblZhbHVlOnt9LGhhc051bWVyaWNWYWx1ZTp7fSxoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTp7fSxoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOnt9LF9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uczpbXSxpc0N1c3RvbUF0dHJpYnV0ZTpmdW5jdGlvbihhdHRyaWJ1dGVOYW1lKXtmb3IodmFyIGk9MDtpPERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5sZW5ndGg7aSsrKXt2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbj1ET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnNbaV07aWYoaXNDdXN0b21BdHRyaWJ1dGVGbihhdHRyaWJ1dGVOYW1lKSlyZXR1cm4hMH1yZXR1cm4hMX0sZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHk6ZnVuY3Rpb24obm9kZU5hbWUscHJvcCl7dmFyIHRlc3RFbGVtZW50LG5vZGVEZWZhdWx0cz1kZWZhdWx0VmFsdWVDYWNoZVtub2RlTmFtZV07cmV0dXJuIG5vZGVEZWZhdWx0c3x8KGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXT1ub2RlRGVmYXVsdHM9e30pLHByb3AgaW4gbm9kZURlZmF1bHRzfHwodGVzdEVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSksbm9kZURlZmF1bHRzW3Byb3BdPXRlc3RFbGVtZW50W3Byb3BdKSxub2RlRGVmYXVsdHNbcHJvcF19LGluamVjdGlvbjpET01Qcm9wZXJ0eUluamVjdGlvbn07bW9kdWxlLmV4cG9ydHM9RE9NUHJvcGVydHk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZSRTlOVUhKdmNHVnlkSGt1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFXTkJMRmxCU1VFc1UwRkJVeXhYUVVGVkxFMUJRVThzVTBGRGVFSXNUMEZCVVN4TlFVRlJMRmRCUVdFc1VVRklMMElzUjBGQlNTeFhRVUZaTEZGQlFWRXNaVUZOY0VJc2MwSkJTMFlzYlVKQlFXOUNMRVZCUTNCQ0xHdENRVUZ0UWl4RlFVTnVRaXhwUWtGQmEwSXNSVUZEYkVJc2EwSkJRVzFDTEVWQlEyNUNMR3RDUVVGdFFpeEhRVU51UWl3eVFrRkJORUlzUjBGRE5VSXNOa0pCUVRoQ0xFZEJNa0k1UWl4M1FrRkJlVUlzVTBGQlV5eHRRa0ZEYUVNc1IwRkJTU3haUVVGaExHdENRVUZyUWl4bFFVTXZRaXhyUWtGQmIwSXNhMEpCUVd0Q0xITkNRVU4wUXl4cFFrRkJiVUlzYTBKQlFXdENMSEZDUVVOeVF5eHRRa0ZCY1VJc2EwSkJRV3RDTEhOQ1FVVjJReXh0UWtGQmEwSXNiVUpCUTNCQ0xGbEJRVmtzTkVKQlFUUkNMRXRCUTNSRExHdENRVUZyUWl4clFrRkpkRUlzUzBGQlN5eEhRVUZKTEZsQlFWa3NXVUZCV1N4RFFVTTVRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4WFFVTjBReXhaUVVGWkxHVkJRV1VzWlVGQlpTeFZRVU16UXl3eVVFRkpRU3hWUVVORkxGZEJRVmNzV1VGQldTeGxRVUZsTEdWQlFXVXNWMEZGZWtRc1dVRkJXU3hsUVVGbExGZEJRVmtzUTBGRmRrTXNTVUZCU1N4WlFVRmhMRk5CUVZNc1lVRkhNVUlzU1VGR1FTeFpRVUZaTEhkQ1FVRjNRaXhaUVVGakxGTkJSVGxETEd0Q1FVRnJRaXhsUVVGbExGVkJRVmNzUTBGRE9VTXNSMEZCU1N4bFFVRm5RaXhyUWtGQmEwSXNVMEZEZEVNc1lVRkJXU3gzUWtGQmQwSXNaVUZCYVVJc1UwRkRja1FzV1VGQldTeHBRa0ZCYVVJc1ZVRkJXU3hyUWtGRmVrTXNZVUZCV1N4cFFrRkJhVUlzVlVGQldTeFZRVWN6UXl4aFFVRlpMR2RDUVVGblFpeFZRVU14UWl4cFFrRkJhVUlzWlVGQlpTeFZRVU01UWl4cFFrRkJhVUlzVlVGRGFrSXNVMEZGUVN4dFFrRkJiVUlzWlVGQlpTeFZRVU53UXl4WlFVRlpMR3RDUVVGclFpeFZRVUZaTEcxQ1FVRnRRaXhWUVVVM1JDeFpRVUZaTEd0Q1FVRnJRaXhWUVVGWkxFbEJSelZETEVsQlFVa3NXVUZCWVN4WFFVRlhMRk5CUXpWQ0xHRkJRVmtzYVVKQlFXbENMRlZCUXpOQ0xGVkJRVlVzVjBGQldTeHhRa0ZCY1VJc2IwSkJRemRETEZsQlFWa3NaMEpCUVdkQ0xGVkJRekZDTEZWQlFWVXNWMEZCV1N4eFFrRkJjVUlzYlVKQlF6ZERMRmxCUVZrc1pVRkJaU3hWUVVONlFpeFZRVUZWTEZkQlFWa3NjVUpCUVhGQ0xHdENRVU0zUXl4WlFVRlpMR2RDUVVGblFpeFZRVU14UWl4VlFVRlZMRmRCUVZrc2NVSkJRWEZDTEcxQ1FVTTNReXhaUVVGWkxHZENRVUZuUWl4VlFVTXhRaXhWUVVGVkxGZEJRVmtzY1VKQlFYRkNMRzFDUVVNM1F5eFpRVUZaTEhkQ1FVRjNRaXhWUVVOc1F5eFZRVUZWTEZkQlFWa3NjVUpCUVhGQ0xEUkNRVU0zUXl4WlFVRlpMREJDUVVFd1FpeFZRVU53UXl4VlFVRlZMRmRCUVZrc2NVSkJRWEZDTERoQ1FVVTFReXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4WFFVTjBReXhaUVVGWkxHbENRVUZwUWl4WlFVTXpRaXhaUVVGWkxHZENRVUZuUWl4VlFVTXZRaXh2UlVGRFFTeFZRVU5GTEZkQlFWY3NXVUZCV1N4cFFrRkJhVUlzV1VGRGVrTXNXVUZCV1N4blFrRkJaMElzVjBGRE9VSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNXVUZCV1N4blFrRkJaMElzV1VGRGVrSXNXVUZCV1N4bFFVRmxMRlZCUXpsQ0xIVkZRVU5CTEZWQlEwVXNWVUZCVlN4WlFVRlpMR2RDUVVGblFpeFpRVU4yUXl4WlFVRlpMR1ZCUVdVc1YwRkROMElzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1dVRkRja01zV1VGQldTeG5Ra0ZCWjBJc1dVRkRNVUlzV1VGQldTeG5Ra0ZCWjBJc1dVRkROVUlzV1VGQldTd3dRa0ZCTUVJc1YwRkJZU3hGUVVOMlJDdzBSMEZGUVN4VlFVTkZMRmxCUVZrc1dVRkJXU3huUWtGQlowSXNXVUZEZUVNc1dVRkJXU3huUWtGQlowSXNXVUZETlVJc1dVRkJXU3d3UWtGQk1FSXNWMEZCWVN4TlFVbDZSQ3h4UWtGbFFTeGhRVVZHTEd0Q1FVRnRRaXhsUVUxdVFpeHJRa0ZQUVN3eVFrRlBRU3h2UWtGUFFTeHRRa0ZQUVN4eFFrRk5RU3h2UWtGUFFTeHRRa0ZSUVN4clFrRk5RU3h0UWtGUFFTeHRRa0ZQUVN3eVFrRlJRU3cyUWtGTFFTd3JRa0ZOUVN4clFrRkJiVUlzVTBGQlV5eGxRVU14UWl4SlFVRkxMRWRCUVVrc1IwRkJTU3hGUVVGSExFVkJRVWtzV1VGQldTdzBRa0ZCTkVJc1QwRkJVU3hKUVVGTExFTkJRM1pGTEVkQlFVa3NjVUpCUVhOQ0xGbEJRVmtzTkVKQlFUUkNMRVZCUTJ4RkxFbEJRVWtzYjBKQlFXOUNMR1ZCUTNSQ0xFOUJRVThzUlVGSFdDeFBRVUZQTEVkQlYxUXNNa0pCUVRSQ0xGTkJRVk1zVTBGQlZTeE5RVU0zUXl4SFFVTkpMR0ZCUkVFc1lVRkJaU3hyUWtGQmEwSXNVMEZUY2tNc1QwRlFTeXhuUWtGRFNDeHJRa0ZCYTBJc1ZVRkJXU3hwUWtGRk1VSXNUMEZCVVN4blFrRkRXaXhaUVVGakxGTkJRVk1zWTBGQll5eFZRVU55UXl4aFFVRmhMRTFCUVZFc1dVRkJXU3hQUVVVMVFpeGhRVUZoTEU5QlIzUkNMRlZCUVZjc2NVSkJSMklzVVVGQlR5eFJRVUZWSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnUkU5TlVISnZjR1Z5ZEhsY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUx5cHFjMnhwYm5RZ1ltbDBkMmx6WlRvZ2RISjFaU0FxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJwYm5aaGNtbGhiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOXBiblpoY21saGJuUmNJaWs3WEc1Y2JtWjFibU4wYVc5dUlHTm9aV05yVFdGemF5aDJZV3gxWlN3Z1ltbDBiV0Z6YXlrZ2UxeHVJQ0J5WlhSMWNtNGdLSFpoYkhWbElDWWdZbWwwYldGemF5a2dQVDA5SUdKcGRHMWhjMnM3WEc1OVhHNWNiblpoY2lCRVQwMVFjbTl3WlhKMGVVbHVhbVZqZEdsdmJpQTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFMWhjSEJwYm1jZ1puSnZiU0J1YjNKdFlXeHBlbVZrTENCallXMWxiR05oYzJWa0lIQnliM0JsY25SNUlHNWhiV1Z6SUhSdklHRWdZMjl1Wm1sbmRYSmhkR2x2YmlCMGFHRjBYRzRnSUNBcUlITndaV05wWm1sbGN5Qm9iM2NnZEdobElHRnpjMjlqYVdGMFpXUWdSRTlOSUhCeWIzQmxjblI1SUhOb2IzVnNaQ0JpWlNCaFkyTmxjM05sWkNCdmNpQnlaVzVrWlhKbFpDNWNiaUFnSUNvdlhHNGdJRTFWVTFSZlZWTkZYMEZVVkZKSlFsVlVSVG9nTUhneExGeHVJQ0JOVlZOVVgxVlRSVjlRVWs5UVJWSlVXVG9nTUhneUxGeHVJQ0JJUVZOZlUwbEVSVjlGUmtaRlExUlRPaUF3ZURRc1hHNGdJRWhCVTE5Q1QwOU1SVUZPWDFaQlRGVkZPaUF3ZURnc1hHNGdJRWhCVTE5T1ZVMUZVa2xEWDFaQlRGVkZPaUF3ZURFd0xGeHVJQ0JJUVZOZlVFOVRTVlJKVmtWZlRsVk5SVkpKUTE5V1FVeFZSVG9nTUhneU1DQjhJREI0TVRBc1hHNGdJRWhCVTE5UFZrVlNURTlCUkVWRVgwSlBUMHhGUVU1ZlZrRk1WVVU2SURCNE5EQXNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVhbVZqZENCemIyMWxJSE53WldOcFlXeHBlbVZrSUd0dWIzZHNaV1JuWlNCaFltOTFkQ0IwYUdVZ1JFOU5MaUJVYUdseklIUmhhMlZ6SUdFZ1kyOXVabWxuSUc5aWFtVmpkRnh1SUNBZ0tpQjNhWFJvSUhSb1pTQm1iMnhzYjNkcGJtY2djSEp2Y0dWeWRHbGxjenBjYmlBZ0lDcGNiaUFnSUNvZ2FYTkRkWE4wYjIxQmRIUnlhV0oxZEdVNklHWjFibU4wYVc5dUlIUm9ZWFFnWjJsMlpXNGdZVzRnWVhSMGNtbGlkWFJsSUc1aGJXVWdkMmxzYkNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnS2lCcFppQnBkQ0JqWVc0Z1ltVWdhVzV6WlhKMFpXUWdhVzUwYnlCMGFHVWdSRTlOSUhabGNtSmhkR2x0TGlCVmMyVm1kV3dnWm05eUlHUmhkR0V0S2lCdmNpQmhjbWxoTFNwY2JpQWdJQ29nWVhSMGNtbGlkWFJsY3lCM2FHVnlaU0JwZENkeklHbHRjRzl6YzJsaWJHVWdkRzhnWlc1MWJXVnlZWFJsSUdGc2JDQnZaaUIwYUdVZ2NHOXpjMmxpYkdWY2JpQWdJQ29nWVhSMGNtbGlkWFJsSUc1aGJXVnpMRnh1SUNBZ0tseHVJQ0FnS2lCUWNtOXdaWEowYVdWek9pQnZZbXBsWTNRZ2JXRndjR2x1WnlCRVQwMGdjSEp2Y0dWeWRIa2dibUZ0WlNCMGJ5QnZibVVnYjJZZ2RHaGxYRzRnSUNBcUlFUlBUVkJ5YjNCbGNuUjVTVzVxWldOMGFXOXVJR052Ym5OMFlXNTBjeUJ2Y2lCdWRXeHNMaUJKWmlCNWIzVnlJR0YwZEhKcFluVjBaU0JwYzI0bmRDQnBiaUJvWlhKbExGeHVJQ0FnS2lCcGRDQjNiMjRuZENCblpYUWdkM0pwZEhSbGJpQjBieUIwYUdVZ1JFOU5MbHh1SUNBZ0tseHVJQ0FnS2lCRVQwMUJkSFJ5YVdKMWRHVk9ZVzFsY3pvZ2IySnFaV04wSUcxaGNIQnBibWNnVW1WaFkzUWdZWFIwY21saWRYUmxJRzVoYldVZ2RHOGdkR2hsSUVSUFRWeHVJQ0FnS2lCaGRIUnlhV0oxZEdVZ2JtRnRaUzRnUVhSMGNtbGlkWFJsSUc1aGJXVnpJRzV2ZENCemNHVmphV1pwWldRZ2RYTmxJSFJvWlNBcUtteHZkMlZ5WTJGelpTb3FYRzRnSUNBcUlHNXZjbTFoYkdsNlpXUWdibUZ0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dSRTlOVUhKdmNHVnlkSGxPWVcxbGN6b2djMmx0YVd4aGNpQjBieUJFVDAxQmRIUnlhV0oxZEdWT1lXMWxjeUJpZFhRZ1ptOXlJRVJQVFNCd2NtOXdaWEowYVdWekxseHVJQ0FnS2lCUWNtOXdaWEowZVNCdVlXMWxjeUJ1YjNRZ2MzQmxZMmxtYVdWa0lIVnpaU0IwYUdVZ2JtOXliV0ZzYVhwbFpDQnVZVzFsTGx4dUlDQWdLbHh1SUNBZ0tpQkVUMDFOZFhSaGRHbHZiazFsZEdodlpITTZJRkJ5YjNCbGNuUnBaWE1nZEdoaGRDQnlaWEYxYVhKbElITndaV05wWVd3Z2JYVjBZWFJwYjI0Z2JXVjBhRzlrY3k0Z1NXWmNiaUFnSUNvZ1lIWmhiSFZsWUNCcGN5QjFibVJsWm1sdVpXUXNJSFJvWlNCdGRYUmhkR2x2YmlCdFpYUm9iMlFnYzJodmRXeGtJSFZ1YzJWMElIUm9aU0J3Y205d1pYSjBlUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdSdmJWQnliM0JsY25SNVEyOXVabWxuSUhSb1pTQmpiMjVtYVdjZ1lYTWdaR1Z6WTNKcFltVmtJR0ZpYjNabExseHVJQ0FnS2k5Y2JpQWdhVzVxWldOMFJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjNklHWjFibU4wYVc5dUtHUnZiVkJ5YjNCbGNuUjVRMjl1Wm1sbktTQjdYRzRnSUNBZ2RtRnlJRkJ5YjNCbGNuUnBaWE1nUFNCa2IyMVFjbTl3WlhKMGVVTnZibVpwWnk1UWNtOXdaWEowYVdWeklIeDhJSHQ5TzF4dUlDQWdJSFpoY2lCRVQwMUJkSFJ5YVdKMWRHVk9ZVzFsY3lBOUlHUnZiVkJ5YjNCbGNuUjVRMjl1Wm1sbkxrUlBUVUYwZEhKcFluVjBaVTVoYldWeklIeDhJSHQ5TzF4dUlDQWdJSFpoY2lCRVQwMVFjbTl3WlhKMGVVNWhiV1Z6SUQwZ1pHOXRVSEp2Y0dWeWRIbERiMjVtYVdjdVJFOU5VSEp2Y0dWeWRIbE9ZVzFsY3lCOGZDQjdmVHRjYmlBZ0lDQjJZWElnUkU5TlRYVjBZWFJwYjI1TlpYUm9iMlJ6SUQwZ1pHOXRVSEp2Y0dWeWRIbERiMjVtYVdjdVJFOU5UWFYwWVhScGIyNU5aWFJvYjJSeklIeDhJSHQ5TzF4dVhHNGdJQ0FnYVdZZ0tHUnZiVkJ5YjNCbGNuUjVRMjl1Wm1sbkxtbHpRM1Z6ZEc5dFFYUjBjbWxpZFhSbEtTQjdYRzRnSUNBZ0lDQkVUMDFRY205d1pYSjBlUzVmYVhORGRYTjBiMjFCZEhSeWFXSjFkR1ZHZFc1amRHbHZibk11Y0hWemFDaGNiaUFnSUNBZ0lDQWdaRzl0VUhKdmNHVnlkSGxEYjI1bWFXY3VhWE5EZFhOMGIyMUJkSFJ5YVdKMWRHVmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2NISnZjRTVoYldVZ2FXNGdVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQWdJQ0FnSVVSUFRWQnliM0JsY25SNUxtbHpVM1JoYm1SaGNtUk9ZVzFsTG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCT1lXMWxLU3hjYmlBZ0lDQWdJQ0FnSjJsdWFtVmpkRVJQVFZCeWIzQmxjblI1UTI5dVptbG5LQzR1TGlrNklGbHZkVnhjSjNKbElIUnllV2x1WnlCMGJ5QnBibXBsWTNRZ1JFOU5JSEJ5YjNCbGNuUjVJQ2NnSzF4dUlDQWdJQ0FnSUNBblhGd25KWE5jWENjZ2QyaHBZMmdnYUdGeklHRnNjbVZoWkhrZ1ltVmxiaUJwYm1wbFkzUmxaQzRnV1c5MUlHMWhlU0JpWlNCaFkyTnBaR1Z1ZEdGc2JIa2dKeUFyWEc0Z0lDQWdJQ0FnSUNkcGJtcGxZM1JwYm1jZ2RHaGxJSE5oYldVZ1JFOU5JSEJ5YjNCbGNuUjVJR052Ym1acFp5QjBkMmxqWlN3Z2IzSWdlVzkxSUcxaGVTQmlaU0FuSUN0Y2JpQWdJQ0FnSUNBZ0oybHVhbVZqZEdsdVp5QjBkMjhnWTI5dVptbG5jeUIwYUdGMElHaGhkbVVnWTI5dVpteHBZM1JwYm1jZ2NISnZjR1Z5ZEhrZ2JtRnRaWE11Snl4Y2JpQWdJQ0FnSUNBZ2NISnZjRTVoYldWY2JpQWdJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9JVVJQVFZCeWIzQmxjblI1TG1selUzUmhibVJoY21ST1lXMWxMbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JPWVcxbEtTa3BPMXh1WEc0Z0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1cGMxTjBZVzVrWVhKa1RtRnRaVnR3Y205d1RtRnRaVjBnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2JHOTNaWEpEWVhObFpDQTlJSEJ5YjNCT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNGdJQ0FnSUNCRVQwMVFjbTl3WlhKMGVTNW5aWFJRYjNOemFXSnNaVk4wWVc1a1lYSmtUbUZ0WlZ0c2IzZGxja05oYzJWa1hTQTlJSEJ5YjNCT1lXMWxPMXh1WEc0Z0lDQWdJQ0JwWmlBb1JFOU5RWFIwY21saWRYUmxUbUZ0WlhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNFNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoZEhSeWFXSjFkR1ZPWVcxbElEMGdSRTlOUVhSMGNtbGlkWFJsVG1GdFpYTmJjSEp2Y0U1aGJXVmRPMXh1SUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1blpYUlFiM056YVdKc1pWTjBZVzVrWVhKa1RtRnRaVnRoZEhSeWFXSjFkR1ZPWVcxbFhTQTlJSEJ5YjNCT1lXMWxPMXh1SUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1blpYUkJkSFJ5YVdKMWRHVk9ZVzFsVzNCeWIzQk9ZVzFsWFNBOUlHRjBkSEpwWW5WMFpVNWhiV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1blpYUkJkSFJ5YVdKMWRHVk9ZVzFsVzNCeWIzQk9ZVzFsWFNBOUlHeHZkMlZ5UTJGelpXUTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJRVJQVFZCeWIzQmxjblI1TG1kbGRGQnliM0JsY25SNVRtRnRaVnR3Y205d1RtRnRaVjBnUFZ4dUlDQWdJQ0FnSUNCRVQwMVFjbTl3WlhKMGVVNWhiV1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCT1lXMWxLU0EvWEc0Z0lDQWdJQ0FnSUNBZ1JFOU5VSEp2Y0dWeWRIbE9ZVzFsYzF0d2NtOXdUbUZ0WlYwZ09seHVJQ0FnSUNBZ0lDQWdJSEJ5YjNCT1lXMWxPMXh1WEc0Z0lDQWdJQ0JwWmlBb1JFOU5UWFYwWVhScGIyNU5aWFJvYjJSekxtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQkVUMDFRY205d1pYSjBlUzVuWlhSTmRYUmhkR2x2YmsxbGRHaHZaRnR3Y205d1RtRnRaVjBnUFNCRVQwMU5kWFJoZEdsdmJrMWxkR2h2WkhOYmNISnZjRTVoYldWZE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1JFOU5VSEp2Y0dWeWRIa3VaMlYwVFhWMFlYUnBiMjVOWlhSb2IyUmJjSEp2Y0U1aGJXVmRJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkbUZ5SUhCeWIzQkRiMjVtYVdjZ1BTQlFjbTl3WlhKMGFXVnpXM0J5YjNCT1lXMWxYVHRjYmlBZ0lDQWdJRVJQVFZCeWIzQmxjblI1TG0xMWMzUlZjMlZCZEhSeWFXSjFkR1ZiY0hKdmNFNWhiV1ZkSUQxY2JpQWdJQ0FnSUNBZ1kyaGxZMnROWVhOcktIQnliM0JEYjI1bWFXY3NJRVJQVFZCeWIzQmxjblI1U1c1cVpXTjBhVzl1TGsxVlUxUmZWVk5GWDBGVVZGSkpRbFZVUlNrN1hHNGdJQ0FnSUNCRVQwMVFjbTl3WlhKMGVTNXRkWE4wVlhObFVISnZjR1Z5ZEhsYmNISnZjRTVoYldWZElEMWNiaUFnSUNBZ0lDQWdZMmhsWTJ0TllYTnJLSEJ5YjNCRGIyNW1hV2NzSUVSUFRWQnliM0JsY25SNVNXNXFaV04wYVc5dUxrMVZVMVJmVlZORlgxQlNUMUJGVWxSWktUdGNiaUFnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVMbWhoYzFOcFpHVkZabVpsWTNSelczQnliM0JPWVcxbFhTQTlYRzRnSUNBZ0lDQWdJR05vWldOclRXRnpheWh3Y205d1EyOXVabWxuTENCRVQwMVFjbTl3WlhKMGVVbHVhbVZqZEdsdmJpNUlRVk5mVTBsRVJWOUZSa1pGUTFSVEtUdGNiaUFnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVMbWhoYzBKdmIyeGxZVzVXWVd4MVpWdHdjbTl3VG1GdFpWMGdQVnh1SUNBZ0lDQWdJQ0JqYUdWamEwMWhjMnNvY0hKdmNFTnZibVpwWnl3Z1JFOU5VSEp2Y0dWeWRIbEpibXBsWTNScGIyNHVTRUZUWDBKUFQweEZRVTVmVmtGTVZVVXBPMXh1SUNBZ0lDQWdSRTlOVUhKdmNHVnlkSGt1YUdGelRuVnRaWEpwWTFaaGJIVmxXM0J5YjNCT1lXMWxYU0E5WEc0Z0lDQWdJQ0FnSUdOb1pXTnJUV0Z6YXlod2NtOXdRMjl1Wm1sbkxDQkVUMDFRY205d1pYSjBlVWx1YW1WamRHbHZiaTVJUVZOZlRsVk5SVkpKUTE5V1FVeFZSU2s3WEc0Z0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1b1lYTlFiM05wZEdsMlpVNTFiV1Z5YVdOV1lXeDFaVnR3Y205d1RtRnRaVjBnUFZ4dUlDQWdJQ0FnSUNCamFHVmphMDFoYzJzb2NISnZjRU52Ym1acFp5d2dSRTlOVUhKdmNHVnlkSGxKYm1wbFkzUnBiMjR1U0VGVFgxQlBVMGxVU1ZaRlgwNVZUVVZTU1VOZlZrRk1WVVVwTzF4dUlDQWdJQ0FnUkU5TlVISnZjR1Z5ZEhrdWFHRnpUM1psY214dllXUmxaRUp2YjJ4bFlXNVdZV3gxWlZ0d2NtOXdUbUZ0WlYwZ1BWeHVJQ0FnSUNBZ0lDQmphR1ZqYTAxaGMyc29jSEp2Y0VOdmJtWnBaeXdnUkU5TlVISnZjR1Z5ZEhsSmJtcGxZM1JwYjI0dVNFRlRYMDlXUlZKTVQwRkVSVVJmUWs5UFRFVkJUbDlXUVV4VlJTazdYRzVjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQWdJQ0ZFVDAxUWNtOXdaWEowZVM1dGRYTjBWWE5sUVhSMGNtbGlkWFJsVzNCeWIzQk9ZVzFsWFNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0ZFVDAxUWNtOXdaWEowZVM1dGRYTjBWWE5sVUhKdmNHVnlkSGxiY0hKdmNFNWhiV1ZkTEZ4dUlDQWdJQ0FnSUNBblJFOU5VSEp2Y0dWeWRIazZJRU5oYm01dmRDQnlaWEYxYVhKbElIVnphVzVuSUdKdmRHZ2dZWFIwY21saWRYUmxJR0Z1WkNCd2NtOXdaWEowZVRvZ0pYTW5MRnh1SUNBZ0lDQWdJQ0J3Y205d1RtRnRaVnh1SUNBZ0lDQWdLU0E2SUdsdWRtRnlhV0Z1ZENnaFJFOU5VSEp2Y0dWeWRIa3ViWFZ6ZEZWelpVRjBkSEpwWW5WMFpWdHdjbTl3VG1GdFpWMGdmSHhjYmlBZ0lDQWdJQ0FnSVVSUFRWQnliM0JsY25SNUxtMTFjM1JWYzJWUWNtOXdaWEowZVZ0d2NtOXdUbUZ0WlYwcEtUdGNiaUFnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVMbTExYzNSVmMyVlFjbTl3WlhKMGVWdHdjbTl3VG1GdFpWMGdmSHhjYmlBZ0lDQWdJQ0FnSUNBaFJFOU5VSEp2Y0dWeWRIa3VhR0Z6VTJsa1pVVm1abVZqZEhOYmNISnZjRTVoYldWZExGeHVJQ0FnSUNBZ0lDQW5SRTlOVUhKdmNHVnlkSGs2SUZCeWIzQmxjblJwWlhNZ2RHaGhkQ0JvWVhabElITnBaR1VnWldabVpXTjBjeUJ0ZFhOMElIVnpaU0J3Y205d1pYSjBlVG9nSlhNbkxGeHVJQ0FnSUNBZ0lDQndjbTl3VG1GdFpWeHVJQ0FnSUNBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hFVDAxUWNtOXdaWEowZVM1dGRYTjBWWE5sVUhKdmNHVnlkSGxiY0hKdmNFNWhiV1ZkSUh4OFhHNGdJQ0FnSUNBZ0lDRkVUMDFRY205d1pYSjBlUzVvWVhOVGFXUmxSV1ptWldOMGMxdHdjbTl3VG1GdFpWMHBLVHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQWdJQ0VoUkU5TlVISnZjR1Z5ZEhrdWFHRnpRbTl2YkdWaGJsWmhiSFZsVzNCeWIzQk9ZVzFsWFNBclhHNGdJQ0FnSUNBZ0lDQWdJU0ZFVDAxUWNtOXdaWEowZVM1b1lYTk9kVzFsY21salZtRnNkV1ZiY0hKdmNFNWhiV1ZkSUN0Y2JpQWdJQ0FnSUNBZ0lDQWhJVVJQVFZCeWIzQmxjblI1TG1oaGMwOTJaWEpzYjJGa1pXUkNiMjlzWldGdVZtRnNkV1ZiY0hKdmNFNWhiV1ZkSUR3OUlERXNYRzRnSUNBZ0lDQWdJQ2RFVDAxUWNtOXdaWEowZVRvZ1ZtRnNkV1VnWTJGdUlHSmxJRzl1WlNCdlppQmliMjlzWldGdUxDQnZkbVZ5Ykc5aFpHVmtJR0p2YjJ4bFlXNHNJRzl5SUNjZ0sxeHVJQ0FnSUNBZ0lDQW5iblZ0WlhKcFl5QjJZV3gxWlN3Z1luVjBJRzV2ZENCaElHTnZiV0pwYm1GMGFXOXVPaUFsY3ljc1hHNGdJQ0FnSUNBZ0lIQnliM0JPWVcxbFhHNGdJQ0FnSUNBcElEb2dhVzUyWVhKcFlXNTBLQ0VoUkU5TlVISnZjR1Z5ZEhrdWFHRnpRbTl2YkdWaGJsWmhiSFZsVzNCeWIzQk9ZVzFsWFNBclhHNGdJQ0FnSUNBZ0lDRWhSRTlOVUhKdmNHVnlkSGt1YUdGelRuVnRaWEpwWTFaaGJIVmxXM0J5YjNCT1lXMWxYU0FyWEc0Z0lDQWdJQ0FnSUNFaFJFOU5VSEp2Y0dWeWRIa3VhR0Z6VDNabGNteHZZV1JsWkVKdmIyeGxZVzVXWVd4MVpWdHdjbTl3VG1GdFpWMGdQRDBnTVNrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlR0Y2JuWmhjaUJrWldaaGRXeDBWbUZzZFdWRFlXTm9aU0E5SUh0OU8xeHVYRzR2S2lwY2JpQXFJRVJQVFZCeWIzQmxjblI1SUdWNGNHOXlkSE1nYkc5dmEzVndJRzlpYW1WamRITWdkR2hoZENCallXNGdZbVVnZFhObFpDQnNhV3RsSUdaMWJtTjBhVzl1Y3pwY2JpQXFYRzRnS2lBZ0lENGdSRTlOVUhKdmNHVnlkSGt1YVhOV1lXeHBaRnNuYVdRblhWeHVJQ29nSUNCMGNuVmxYRzRnS2lBZ0lENGdSRTlOVUhKdmNHVnlkSGt1YVhOV1lXeHBaRnNuWm05dlltRnlKMTFjYmlBcUlDQWdkVzVrWldacGJtVmtYRzRnS2x4dUlDb2dRV3gwYUc5MVoyZ2dkR2hwY3lCdFlYa2dZbVVnWTI5dVpuVnphVzVuTENCcGRDQndaWEptYjNKdGN5QmlaWFIwWlhJZ2FXNGdaMlZ1WlhKaGJDNWNiaUFxWEc0Z0tpQkFjMlZsSUdoMGRIQTZMeTlxYzNCbGNtWXVZMjl0TDJ0bGVTMWxlR2x6ZEhOY2JpQXFJRUJ6WldVZ2FIUjBjRG92TDJwemNHVnlaaTVqYjIwdmEyVjVMVzFwYzNOcGJtZGNiaUFxTDF4dWRtRnlJRVJQVFZCeWIzQmxjblI1SUQwZ2UxeHVYRzRnSUVsRVgwRlVWRkpKUWxWVVJWOU9RVTFGT2lBblpHRjBZUzF5WldGamRHbGtKeXhjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMmhsWTJ0eklIZG9aWFJvWlhJZ1lTQndjbTl3WlhKMGVTQnVZVzFsSUdseklHRWdjM1JoYm1SaGNtUWdjSEp2Y0dWeWRIa3VYRzRnSUNBcUlFQjBlWEJsSUh0UFltcGxZM1I5WEc0Z0lDQXFMMXh1SUNCcGMxTjBZVzVrWVhKa1RtRnRaVG9nZTMwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGNIQnBibWNnWm5KdmJTQnNiM2RsY21OaGMyVWdjSEp2Y0dWeWRIa2dibUZ0WlhNZ2RHOGdkR2hsSUhCeWIzQmxjbXg1SUdOaGMyVmtJSFpsY25OcGIyNHNJSFZ6WldSY2JpQWdJQ29nZEc4Z2QyRnliaUJwYmlCMGFHVWdZMkZ6WlNCdlppQnRhWE56YVc1bklIQnliM0JsY25ScFpYTXVYRzRnSUNBcUlFQjBlWEJsSUh0UFltcGxZM1I5WEc0Z0lDQXFMMXh1SUNCblpYUlFiM056YVdKc1pWTjBZVzVrWVhKa1RtRnRaVG9nZTMwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGNIQnBibWNnWm5KdmJTQnViM0p0WVd4cGVtVmtJRzVoYldWeklIUnZJR0YwZEhKcFluVjBaU0J1WVcxbGN5QjBhR0YwSUdScFptWmxjaTRnUVhSMGNtbGlkWFJsWEc0Z0lDQXFJRzVoYldWeklHRnlaU0IxYzJWa0lIZG9aVzRnY21WdVpHVnlhVzVuSUcxaGNtdDFjQ0J2Y2lCM2FYUm9JR0FxUVhSMGNtbGlkWFJsS0NsZ0xseHVJQ0FnS2lCQWRIbHdaU0I3VDJKcVpXTjBmVnh1SUNBZ0tpOWNiaUFnWjJWMFFYUjBjbWxpZFhSbFRtRnRaVG9nZTMwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGNIQnBibWNnWm5KdmJTQnViM0p0WVd4cGVtVmtJRzVoYldWeklIUnZJSEJ5YjNCbGNuUnBaWE1nYjI0Z1JFOU5JRzV2WkdVZ2FXNXpkR0Z1WTJWekxseHVJQ0FnS2lBb1ZHaHBjeUJwYm1Oc2RXUmxjeUJ3Y205d1pYSjBhV1Z6SUhSb1lYUWdiWFYwWVhSbElHUjFaU0IwYnlCbGVIUmxjbTVoYkNCbVlXTjBiM0p6TGlsY2JpQWdJQ29nUUhSNWNHVWdlMDlpYW1WamRIMWNiaUFnSUNvdlhHNGdJR2RsZEZCeWIzQmxjblI1VG1GdFpUb2dlMzBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTFoY0hCcGJtY2dabkp2YlNCdWIzSnRZV3hwZW1Wa0lHNWhiV1Z6SUhSdklHMTFkR0YwYVc5dUlHMWxkR2h2WkhNdUlGUm9hWE1nZDJsc2JDQnZibXg1SUdWNGFYTjBJR2xtWEc0Z0lDQXFJRzExZEdGMGFXOXVJR05oYm01dmRDQmlaU0J6WlhRZ2MybHRjR3g1SUdKNUlIUm9aU0J3Y205d1pYSjBlU0J2Y2lCZ2MyVjBRWFIwY21saWRYUmxLQ2xnTGx4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMGZWeHVJQ0FnS2k5Y2JpQWdaMlYwVFhWMFlYUnBiMjVOWlhSb2IyUTZJSHQ5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYYUdWMGFHVnlJSFJvWlNCd2NtOXdaWEowZVNCdGRYTjBJR0psSUdGalkyVnpjMlZrSUdGdVpDQnRkWFJoZEdWa0lHRnpJR0Z1SUc5aWFtVmpkQ0J3Y205d1pYSjBlUzVjYmlBZ0lDb2dRSFI1Y0dVZ2UwOWlhbVZqZEgxY2JpQWdJQ292WEc0Z0lHMTFjM1JWYzJWQmRIUnlhV0oxZEdVNklIdDlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlhhR1YwYUdWeUlIUm9aU0J3Y205d1pYSjBlU0J0ZFhOMElHSmxJR0ZqWTJWemMyVmtJR0Z1WkNCdGRYUmhkR1ZrSUhWemFXNW5JR0FxUVhSMGNtbGlkWFJsS0NsZ0xseHVJQ0FnS2lBb1ZHaHBjeUJwYm1Oc2RXUmxjeUJoYm5sMGFHbHVaeUIwYUdGMElHWmhhV3h6SUdBOGNISnZjRTVoYldVK0lHbHVJRHhsYkdWdFpXNTBQbUF1S1Z4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMGZWeHVJQ0FnS2k5Y2JpQWdiWFZ6ZEZWelpWQnliM0JsY25SNU9pQjdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQnZjaUJ1YjNRZ2MyVjBkR2x1WnlCaElIWmhiSFZsSUdOaGRYTmxjeUJ6YVdSbElHVm1abVZqZEhNZ2MzVmphQ0JoY3lCMGNtbG5aMlZ5YVc1blhHNGdJQ0FxSUhKbGMyOTFjbU5sY3lCMGJ5QmlaU0JzYjJGa1pXUWdiM0lnZEdWNGRDQnpaV3hsWTNScGIyNGdZMmhoYm1kbGN5NGdWMlVnYlhWemRDQmxibk4xY21VZ2RHaGhkRnh1SUNBZ0tpQjBhR1VnZG1Gc2RXVWdhWE1nYjI1c2VTQnpaWFFnYVdZZ2FYUWdhR0Z6SUdOb1lXNW5aV1F1WEc0Z0lDQXFJRUIwZVhCbElIdFBZbXBsWTNSOVhHNGdJQ0FxTDF4dUlDQm9ZWE5UYVdSbFJXWm1aV04wY3pvZ2UzMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGZG9aWFJvWlhJZ2RHaGxJSEJ5YjNCbGNuUjVJSE5vYjNWc1pDQmlaU0J5WlcxdmRtVmtJSGRvWlc0Z2MyVjBJSFJ2SUdFZ1ptRnNjMlY1SUhaaGJIVmxMbHh1SUNBZ0tpQkFkSGx3WlNCN1QySnFaV04wZlZ4dUlDQWdLaTljYmlBZ2FHRnpRbTl2YkdWaGJsWmhiSFZsT2lCN2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1YyaGxkR2hsY2lCMGFHVWdjSEp2Y0dWeWRIa2diWFZ6ZENCaVpTQnVkVzFsY21saklHOXlJSEJoY25ObElHRnpJR0ZjYmlBZ0lDb2diblZ0WlhKcFl5QmhibVFnYzJodmRXeGtJR0psSUhKbGJXOTJaV1FnZDJobGJpQnpaWFFnZEc4Z1lTQm1ZV3h6WlhrZ2RtRnNkV1V1WEc0Z0lDQXFJRUIwZVhCbElIdFBZbXBsWTNSOVhHNGdJQ0FxTDF4dUlDQm9ZWE5PZFcxbGNtbGpWbUZzZFdVNklIdDlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlhhR1YwYUdWeUlIUm9aU0J3Y205d1pYSjBlU0J0ZFhOMElHSmxJSEJ2YzJsMGFYWmxJRzUxYldWeWFXTWdiM0lnY0dGeWMyVWdZWE1nWVNCd2IzTnBkR2wyWlZ4dUlDQWdLaUJ1ZFcxbGNtbGpJR0Z1WkNCemFHOTFiR1FnWW1VZ2NtVnRiM1psWkNCM2FHVnVJSE5sZENCMGJ5QmhJR1poYkhObGVTQjJZV3gxWlM1Y2JpQWdJQ29nUUhSNWNHVWdlMDlpYW1WamRIMWNiaUFnSUNvdlhHNGdJR2hoYzFCdmMybDBhWFpsVG5WdFpYSnBZMVpoYkhWbE9pQjdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQjBhR1VnY0hKdmNHVnlkSGtnWTJGdUlHSmxJSFZ6WldRZ1lYTWdZU0JtYkdGbklHRnpJSGRsYkd3Z1lYTWdkMmwwYUNCaElIWmhiSFZsTGlCU1pXMXZkbVZrWEc0Z0lDQXFJSGRvWlc0Z2MzUnlhV04wYkhrZ1pYRjFZV3dnZEc4Z1ptRnNjMlU3SUhCeVpYTmxiblFnZDJsMGFHOTFkQ0JoSUhaaGJIVmxJSGRvWlc0Z2MzUnlhV04wYkhrZ1pYRjFZV3hjYmlBZ0lDb2dkRzhnZEhKMVpUc2djSEpsYzJWdWRDQjNhWFJvSUdFZ2RtRnNkV1VnYjNSb1pYSjNhWE5sTGx4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMGZWeHVJQ0FnS2k5Y2JpQWdhR0Z6VDNabGNteHZZV1JsWkVKdmIyeGxZVzVXWVd4MVpUb2dlMzBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZzYkNCdlppQjBhR1VnYVhORGRYTjBiMjFCZEhSeWFXSjFkR1VvS1NCbWRXNWpkR2x2Ym5NZ2RHaGhkQ0JvWVhabElHSmxaVzRnYVc1cVpXTjBaV1F1WEc0Z0lDQXFMMXh1SUNCZmFYTkRkWE4wYjIxQmRIUnlhV0oxZEdWR2RXNWpkR2x2Ym5NNklGdGRMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRhR1ZqYTNNZ2QyaGxkR2hsY2lCaElIQnliM0JsY25SNUlHNWhiV1VnYVhNZ1lTQmpkWE4wYjIwZ1lYUjBjbWxpZFhSbExseHVJQ0FnS2lCQWJXVjBhRzlrWEc0Z0lDQXFMMXh1SUNCcGMwTjFjM1J2YlVGMGRISnBZblYwWlRvZ1puVnVZM1JwYjI0b1lYUjBjbWxpZFhSbFRtRnRaU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnUkU5TlVISnZjR1Z5ZEhrdVgybHpRM1Z6ZEc5dFFYUjBjbWxpZFhSbFJuVnVZM1JwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FYTkRkWE4wYjIxQmRIUnlhV0oxZEdWR2JpQTlJRVJQVFZCeWIzQmxjblI1TGw5cGMwTjFjM1J2YlVGMGRISnBZblYwWlVaMWJtTjBhVzl1YzF0cFhUdGNiaUFnSUNBZ0lHbG1JQ2hwYzBOMWMzUnZiVUYwZEhKcFluVjBaVVp1S0dGMGRISnBZblYwWlU1aGJXVXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkR2hsSUdSbFptRjFiSFFnY0hKdmNHVnlkSGtnZG1Gc2RXVWdabTl5SUdFZ1JFOU5JSEJ5YjNCbGNuUjVJQ2hwTG1VdUxDQnViM1FnWVc1Y2JpQWdJQ29nWVhSMGNtbGlkWFJsS1M0Z1RXOXpkQ0JrWldaaGRXeDBJSFpoYkhWbGN5QmhjbVVnSnljZ2IzSWdabUZzYzJVc0lHSjFkQ0J1YjNRZ1lXeHNMaUJYYjNKelpTQjVaWFFzWEc0Z0lDQXFJSE52YldVZ0tHbHVJSEJoY25ScFkzVnNZWElzSUdCMGVYQmxZQ2tnZG1GeWVTQmtaWEJsYm1ScGJtY2diMjRnZEdobElIUjVjR1VnYjJZZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dWRTlFVHpvZ1NYTWdhWFFnWW1WMGRHVnlJSFJ2SUdkeVlXSWdZV3hzSUhSb1pTQndiM056YVdKc1pTQndjbTl3WlhKMGFXVnpJSGRvWlc0Z1kzSmxZWFJwYm1jZ1lXNWNiaUFnSUNvZ1pXeGxiV1Z1ZENCMGJ5QmhkbTlwWkNCb1lYWnBibWNnZEc4Z1kzSmxZWFJsSUhSb1pTQnpZVzFsSUdWc1pXMWxiblFnZEhkcFkyVS9YRzRnSUNBcUwxeHVJQ0JuWlhSRVpXWmhkV3gwVm1Gc2RXVkdiM0pRY205d1pYSjBlVG9nWm5WdVkzUnBiMjRvYm05a1pVNWhiV1VzSUhCeWIzQXBJSHRjYmlBZ0lDQjJZWElnYm05a1pVUmxabUYxYkhSeklEMGdaR1ZtWVhWc2RGWmhiSFZsUTJGamFHVmJibTlrWlU1aGJXVmRPMXh1SUNBZ0lIWmhjaUIwWlhOMFJXeGxiV1Z1ZER0Y2JpQWdJQ0JwWmlBb0lXNXZaR1ZFWldaaGRXeDBjeWtnZTF4dUlDQWdJQ0FnWkdWbVlYVnNkRlpoYkhWbFEyRmphR1ZiYm05a1pVNWhiV1ZkSUQwZ2JtOWtaVVJsWm1GMWJIUnpJRDBnZTMwN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaEtIQnliM0FnYVc0Z2JtOWtaVVJsWm1GMWJIUnpLU2tnZTF4dUlDQWdJQ0FnZEdWemRFVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0c1dlpHVk9ZVzFsS1R0Y2JpQWdJQ0FnSUc1dlpHVkVaV1poZFd4MGMxdHdjbTl3WFNBOUlIUmxjM1JGYkdWdFpXNTBXM0J5YjNCZE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdibTlrWlVSbFptRjFiSFJ6VzNCeWIzQmRPMXh1SUNCOUxGeHVYRzRnSUdsdWFtVmpkR2x2YmpvZ1JFOU5VSEp2Y0dWeWRIbEpibXBsWTNScGIyNWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JFOU5VSEp2Y0dWeWRIazdYRzRpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzaG91bGRJZ25vcmVWYWx1ZShuYW1lLHZhbHVlKXtyZXR1cm4gbnVsbD09dmFsdWV8fERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSYmIXZhbHVlfHxET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbbmFtZV0mJmlzTmFOKHZhbHVlKXx8RE9NUHJvcGVydHkuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWVbbmFtZV0mJjE+dmFsdWV8fERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbbmFtZV0mJnZhbHVlPT09ITF9dmFyIERPTVByb3BlcnR5PXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpLHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyPXJlcXVpcmUoXCIuL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyXCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXZhciByZWFjdFByb3BzPXtjaGlsZHJlbjohMCxkYW5nZXJvdXNseVNldElubmVySFRNTDohMCxrZXk6ITAscmVmOiEwfSx3YXJuZWRQcm9wZXJ0aWVzPXt9LHdhcm5Vbmtub3duUHJvcGVydHk9ZnVuY3Rpb24obmFtZSl7aWYoIShyZWFjdFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpJiZyZWFjdFByb3BzW25hbWVdfHx3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpJiZ3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSl7d2FybmVkUHJvcGVydGllc1tuYW1lXT0hMDt2YXIgbG93ZXJDYXNlZE5hbWU9bmFtZS50b0xvd2VyQ2FzZSgpLHN0YW5kYXJkTmFtZT1ET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShsb3dlckNhc2VkTmFtZSk/bG93ZXJDYXNlZE5hbWU6RE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpP0RPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2xvd2VyQ2FzZWROYW1lXTpudWxsO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhudWxsPT1zdGFuZGFyZE5hbWUsXCJVbmtub3duIERPTSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzP1wiLG5hbWUsc3RhbmRhcmROYW1lKTpudWxsfX07dmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucz17Y3JlYXRlTWFya3VwRm9ySUQ6ZnVuY3Rpb24oaWQpe3JldHVybiBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRStcIj1cIitxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcihpZCl9LGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OmZ1bmN0aW9uKG5hbWUsdmFsdWUpe2lmKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpJiZET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSl7aWYoc2hvdWxkSWdub3JlVmFsdWUobmFtZSx2YWx1ZSkpcmV0dXJuXCJcIjt2YXIgYXR0cmlidXRlTmFtZT1ET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdO3JldHVybiBET01Qcm9wZXJ0eS5oYXNCb29sZWFuVmFsdWVbbmFtZV18fERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbbmFtZV0mJnZhbHVlPT09ITA/YXR0cmlidXRlTmFtZTphdHRyaWJ1dGVOYW1lK1wiPVwiK3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKX1yZXR1cm4gRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSk/bnVsbD09dmFsdWU/XCJcIjpuYW1lK1wiPVwiK3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTooXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKSxudWxsKX0sc2V0VmFsdWVGb3JQcm9wZXJ0eTpmdW5jdGlvbihub2RlLG5hbWUsdmFsdWUpe2lmKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpJiZET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSl7dmFyIG11dGF0aW9uTWV0aG9kPURPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO2lmKG11dGF0aW9uTWV0aG9kKW11dGF0aW9uTWV0aG9kKG5vZGUsdmFsdWUpO2Vsc2UgaWYoc2hvdWxkSWdub3JlVmFsdWUobmFtZSx2YWx1ZSkpdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsbmFtZSk7ZWxzZSBpZihET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW25hbWVdKW5vZGUuc2V0QXR0cmlidXRlKERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV0sXCJcIit2YWx1ZSk7ZWxzZXt2YXIgcHJvcE5hbWU9RE9NUHJvcGVydHkuZ2V0UHJvcGVydHlOYW1lW25hbWVdO0RPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW25hbWVdJiZcIlwiK25vZGVbcHJvcE5hbWVdPT1cIlwiK3ZhbHVlfHwobm9kZVtwcm9wTmFtZV09dmFsdWUpfX1lbHNlIERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpP251bGw9PXZhbHVlP25vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpOm5vZGUuc2V0QXR0cmlidXRlKG5hbWUsXCJcIit2YWx1ZSk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKX0sZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTpmdW5jdGlvbihub2RlLG5hbWUpe2lmKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpJiZET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtuYW1lXSl7dmFyIG11dGF0aW9uTWV0aG9kPURPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO2lmKG11dGF0aW9uTWV0aG9kKW11dGF0aW9uTWV0aG9kKG5vZGUsdm9pZCAwKTtlbHNlIGlmKERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbbmFtZV0pbm9kZS5yZW1vdmVBdHRyaWJ1dGUoRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtuYW1lXSk7ZWxzZXt2YXIgcHJvcE5hbWU9RE9NUHJvcGVydHkuZ2V0UHJvcGVydHlOYW1lW25hbWVdLGRlZmF1bHRWYWx1ZT1ET01Qcm9wZXJ0eS5nZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eShub2RlLm5vZGVOYW1lLHByb3BOYW1lKTtET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1tuYW1lXSYmXCJcIitub2RlW3Byb3BOYW1lXT09PWRlZmF1bHRWYWx1ZXx8KG5vZGVbcHJvcE5hbWVdPWRlZmF1bHRWYWx1ZSl9fWVsc2UgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSk/bm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKX19O21vZHVsZS5leHBvcnRzPURPTVByb3BlcnR5T3BlcmF0aW9ucztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJFOU5VSEp2Y0dWeWRIbFBjR1Z5WVhScGIyNXpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGWlFTeFpRVTlCTEZOQlFWTXNiVUpCUVd0Q0xFdEJRVTBzVDBGREwwSXNUVUZCWjBJc1QwRkJWQ3hQUVVOS0xGbEJRVmtzWjBKQlFXZENMRkZCUVZVc1QwRkRkRU1zV1VGQldTeG5Ra0ZCWjBJc1QwRkJVeXhOUVVGTkxGRkJRek5ETEZsQlFWa3NkMEpCUVhkQ0xFOUJRV3RDTEVWQlFWSXNUMEZET1VNc1dVRkJXU3d3UWtGQk1FSXNUMEZCVXl4VFFVRlZMRVZCVmpsRUxFZEJRVWtzWVVGQll5eFJRVUZSTEdsQ1FVVjBRaXc0UWtGQlowTXNVVUZCVVN4dFEwRkRlRU1zVVVGQlZTeFJRVUZSTEZsQlZYUkNMRWxCUVVrc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlF5OUNMRWRCUVVrc1lVRkRSaXhWUVVGVkxFVkJRMVlzZVVKQlFYbENMRVZCUTNwQ0xFdEJRVXNzUlVGRFRDeExRVUZMTEVkQlJVZ3NiMEpCUlVFc2IwSkJRWE5DTEZOQlFWTXNUVUZEYWtNc1MwRkJTU3hYUVVGWExHVkJRV1VzVDBGQlV5eFhRVUZYTEU5QlF6bERMR2xDUVVGcFFpeGxRVUZsTEU5QlFWTXNhVUpCUVdsQ0xFOUJSRGxFTEVOQlMwRXNhVUpCUVdsQ0xFOUJRVkVzUTBGRGVrSXNTVUZCU1N4blFrRkJhVUlzUzBGQlN5eGpRVWQwUWl4aFFVTkdMRmxCUVZrc2EwSkJRV3RDTEdkQ1FVTTFRaXhsUVVOR0xGbEJRVmtzZDBKQlFYZENMR1ZCUVdVc1owSkJRMnBFTEZsQlFWa3NkMEpCUVhkQ0xHZENRVU53UXl4SlFVdElMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4UlFVTjJRaXhOUVVGb1FpeGhRVU5CTERSRFFVTkJMRXRCUTBFc1kwRkRSU3hOUVZGU0xFbEJRVWtzZDBKQlVVWXNhMEpCUVcxQ0xGTkJRVk1zU1VGRE1VSXNUVUZCVHl4aFFVRlpMR3RDUVVGdlFpeEpRVU55UXl3NFFrRkJPRUlzUzBGVmJFTXNkMEpCUVhsQ0xGTkJRVk1zUzBGQlRTeFBRVU4wUXl4SFFVRkpMRmxCUVZrc1pVRkJaU3hsUVVGbExFOUJRekZETEZsQlFWa3NaVUZCWlN4TlFVRlBMRU5CUTNCRExFZEJRVWtzYTBKQlFXdENMRXRCUVUwc1QwRkRNVUlzVFVGQlR5eEZRVVZVTEVsQlFVa3NaVUZCWjBJc1dVRkJXU3hwUWtGQmFVSXNTMEZEYWtRc1QwRkJTU3hoUVVGWkxHZENRVUZuUWl4UFFVTXpRaXhaUVVGWkxEQkNRVUV3UWl4UFFVRlRMRk5CUVZVc1JVRkRja1FzWTBGRlJpeGpRVUZuUWl4SlFVRk5MRGhDUVVFNFFpeFBRVU4wUkN4TlFVRkpMR0ZCUVZrc2EwSkJRV3RDTEUxQlF6RkNMRTFCUVZRc1RVRkRTeXhIUVVWR0xFdEJRVThzU1VGQlRTdzRRa0ZCT0VJc1VVRkRla01zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRlZCUTNSRExHOUNRVUZ2UWl4TlFVVm1MRTlCVlZRc2IwSkJRWEZDTEZOQlFWTXNTMEZCVFN4TFFVRk5MRTlCUTNoRExFZEJRVWtzV1VGQldTeGxRVUZsTEdWQlFXVXNUMEZETVVNc1dVRkJXU3hsUVVGbExFMUJRVThzUTBGRGNFTXNSMEZCU1N4blFrRkJhVUlzV1VGQldTeHJRa0ZCYTBJc1MwRkRia1FzU1VGQlNTeGxRVU5HTEdWQlFXVXNTMEZCVFN4WFFVTm9RaXhKUVVGSkxHdENRVUZyUWl4TFFVRk5MRTlCUTJwRExFdEJRVXNzZFVKQlFYVkNMRXRCUVUwc1ZVRkROMElzU1VGQlNTeFpRVUZaTEdsQ1FVRnBRaXhOUVVkMFF5eExRVUZMTEdGQlFXRXNXVUZCV1N4cFFrRkJhVUlzVFVGQlR5eEhRVUZMTEZkQlEzUkVMRU5CUTB3c1IwRkJTU3hWUVVGWExGbEJRVmtzWjBKQlFXZENMRXRCUjNSRExHRkJRVmtzWlVGQlpTeFBRVU16UWl4SFFVRkxMRXRCUVVzc1YwRkJaMElzUjBGQlN5eFJRVWRzUXl4TFFVRkxMRlZCUVZrc1dVRkhXaXhoUVVGWkxHdENRVUZyUWl4TlFVTXhRaXhOUVVGVUxFMUJRMFlzUzBGQlN5eG5Ra0ZCWjBJc1RVRkZja0lzUzBGQlN5eGhRVUZoTEV0QlFVMHNSMEZCU3l4UFFVVjBRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NWVUZEZEVNc2IwSkJRVzlDTEU5QlZYaENMSFZDUVVGM1FpeFRRVUZUTEV0QlFVMHNUVUZEY2tNc1IwRkJTU3haUVVGWkxHVkJRV1VzWlVGQlpTeFBRVU14UXl4WlFVRlpMR1ZCUVdVc1RVRkJUeXhEUVVOd1F5eEhRVUZKTEdkQ1FVRnBRaXhaUVVGWkxHdENRVUZyUWl4TFFVTnVSQ3hKUVVGSkxHVkJRMFlzWlVGQlpTeExRVUZOTEZsQlEyaENMRWxCUVVrc1dVRkJXU3hwUWtGQmFVSXNUVUZEZEVNc1MwRkJTeXhuUWtGQlowSXNXVUZCV1N4cFFrRkJhVUlzVjBGRE4wTXNRMEZEVEN4SFFVRkpMRlZCUVZjc1dVRkJXU3huUWtGQlowSXNUVUZEZGtNc1lVRkJaU3haUVVGWkxESkNRVU0zUWl4TFFVRkxMRk5CUTB3c1UwRkZSeXhoUVVGWkxHVkJRV1VzVDBGRE0wSXNSMEZCU3l4TFFVRkxMRmxCUVdVc1pVRkROVUlzUzBGQlN5eFZRVUZaTEcxQ1FVZGFMR0ZCUVZrc2EwSkJRV3RDTEUxQlEzWkRMRXRCUVVzc1owSkJRV2RDTEUxQlExb3NaVUZCYVVJc1VVRkJVU3hKUVVGSkxGVkJRM1JETEc5Q1FVRnZRaXhQUVUweFFpeFJRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQkVUMDFRY205d1pYSjBlVTl3WlhKaGRHbHZibk5jYmlBcUlFQjBlWEJsWTJobFkydHpJSE4wWVhScFl5MXZibXg1WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1JFOU5VSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLRndpTGk5RVQwMVFjbTl3WlhKMGVWd2lLVHRjYmx4dWRtRnlJSEYxYjNSbFFYUjBjbWxpZFhSbFZtRnNkV1ZHYjNKQ2NtOTNjMlZ5SUQwZ2NtVnhkV2x5WlNoY0lpNHZjWFZ2ZEdWQmRIUnlhV0oxZEdWV1lXeDFaVVp2Y2tKeWIzZHpaWEpjSWlrN1hHNTJZWElnZDJGeWJtbHVaeUE5SUhKbGNYVnBjbVVvWENJdUwzZGhjbTVwYm1kY0lpazdYRzVjYm1aMWJtTjBhVzl1SUhOb2IzVnNaRWxuYm05eVpWWmhiSFZsS0c1aGJXVXNJSFpoYkhWbEtTQjdYRzRnSUhKbGRIVnliaUIyWVd4MVpTQTlQU0J1ZFd4c0lIeDhYRzRnSUNBZ0tFUlBUVkJ5YjNCbGNuUjVMbWhoYzBKdmIyeGxZVzVXWVd4MVpWdHVZVzFsWFNBbUppQWhkbUZzZFdVcElIeDhYRzRnSUNBZ0tFUlBUVkJ5YjNCbGNuUjVMbWhoYzA1MWJXVnlhV05XWVd4MVpWdHVZVzFsWFNBbUppQnBjMDVoVGloMllXeDFaU2twSUh4OFhHNGdJQ0FnS0VSUFRWQnliM0JsY25SNUxtaGhjMUJ2YzJsMGFYWmxUblZ0WlhKcFkxWmhiSFZsVzI1aGJXVmRJQ1ltSUNoMllXeDFaU0E4SURFcEtTQjhmRnh1SUNBZ0lDaEVUMDFRY205d1pYSjBlUzVvWVhOUGRtVnliRzloWkdWa1FtOXZiR1ZoYmxaaGJIVmxXMjVoYldWZElDWW1JSFpoYkhWbElEMDlQU0JtWVd4elpTazdYRzU5WEc1Y2JtbG1JQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZcElIdGNiaUFnZG1GeUlISmxZV04wVUhKdmNITWdQU0I3WEc0Z0lDQWdZMmhwYkdSeVpXNDZJSFJ5ZFdVc1hHNGdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVdzZJSFJ5ZFdVc1hHNGdJQ0FnYTJWNU9pQjBjblZsTEZ4dUlDQWdJSEpsWmpvZ2RISjFaVnh1SUNCOU8xeHVJQ0IyWVhJZ2QyRnlibVZrVUhKdmNHVnlkR2xsY3lBOUlIdDlPMXh1WEc0Z0lIWmhjaUIzWVhKdVZXNXJibTkzYmxCeWIzQmxjblI1SUQwZ1puVnVZM1JwYjI0b2JtRnRaU2tnZTF4dUlDQWdJR2xtSUNoeVpXRmpkRkJ5YjNCekxtaGhjMDkzYmxCeWIzQmxjblI1S0c1aGJXVXBJQ1ltSUhKbFlXTjBVSEp2Y0hOYmJtRnRaVjBnZkh4Y2JpQWdJQ0FnSUNBZ2QyRnlibVZrVUhKdmNHVnlkR2xsY3k1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTQW1KaUIzWVhKdVpXUlFjbTl3WlhKMGFXVnpXMjVoYldWZEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZDJGeWJtVmtVSEp2Y0dWeWRHbGxjMXR1WVcxbFhTQTlJSFJ5ZFdVN1hHNGdJQ0FnZG1GeUlHeHZkMlZ5UTJGelpXUk9ZVzFsSUQwZ2JtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVYRzRnSUNBZ0x5OGdaR0YwWVMwcUlHRjBkSEpwWW5WMFpYTWdjMmh2ZFd4a0lHSmxJR3h2ZDJWeVkyRnpaVHNnYzNWbloyVnpkQ0IwYUdVZ2JHOTNaWEpqWVhObElIWmxjbk5wYjI1Y2JpQWdJQ0IyWVhJZ2MzUmhibVJoY21ST1lXMWxJRDBnS0Z4dUlDQWdJQ0FnUkU5TlVISnZjR1Z5ZEhrdWFYTkRkWE4wYjIxQmRIUnlhV0oxZEdVb2JHOTNaWEpEWVhObFpFNWhiV1VwSUQ5Y2JpQWdJQ0FnSUNBZ2JHOTNaWEpEWVhObFpFNWhiV1VnT2x4dUlDQWdJQ0FnUkU5TlVISnZjR1Z5ZEhrdVoyVjBVRzl6YzJsaWJHVlRkR0Z1WkdGeVpFNWhiV1V1YUdGelQzZHVVSEp2Y0dWeWRIa29iRzkzWlhKRFlYTmxaRTVoYldVcElEOWNiaUFnSUNBZ0lDQWdSRTlOVUhKdmNHVnlkSGt1WjJWMFVHOXpjMmxpYkdWVGRHRnVaR0Z5WkU1aGJXVmJiRzkzWlhKRFlYTmxaRTVoYldWZElEcGNiaUFnSUNBZ0lDQWdiblZzYkZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0F2THlCR2IzSWdibTkzTENCdmJteDVJSGRoY200Z2QyaGxiaUIzWlNCb1lYWmxJR0VnYzNWbloyVnpkR1ZrSUdOdmNuSmxZM1JwYjI0dUlGUm9hWE1nY0hKbGRtVnVkSE5jYmlBZ0lDQXZMeUJzYjJkbmFXNW5JSFJ2YnlCdGRXTm9JSGRvWlc0Z2RYTnBibWNnZEhKaGJuTm1aWEpRY205d2MxUnZMbHh1SUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnYzNSaGJtUmhjbVJPWVcxbElEMDlJRzUxYkd3c1hHNGdJQ0FnSUNBblZXNXJibTkzYmlCRVQwMGdjSEp2Y0dWeWRIa2dKWE11SUVScFpDQjViM1VnYldWaGJpQWxjejhuTEZ4dUlDQWdJQ0FnYm1GdFpTeGNiaUFnSUNBZ0lITjBZVzVrWVhKa1RtRnRaVnh1SUNBZ0lDa2dPaUJ1ZFd4c0tUdGNibHh1SUNCOU8xeHVmVnh1WEc0dktpcGNiaUFxSUU5d1pYSmhkR2x2Ym5NZ1ptOXlJR1JsWVd4cGJtY2dkMmwwYUNCRVQwMGdjSEp2Y0dWeWRHbGxjeTVjYmlBcUwxeHVkbUZ5SUVSUFRWQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5QTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QnRZWEpyZFhBZ1ptOXlJSFJvWlNCSlJDQndjbTl3WlhKMGVTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUZWdVpYTmpZWEJsWkNCSlJDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNCTllYSnJkWEFnYzNSeWFXNW5MbHh1SUNBZ0tpOWNiaUFnWTNKbFlYUmxUV0Z5YTNWd1JtOXlTVVE2SUdaMWJtTjBhVzl1S0dsa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUVSUFRWQnliM0JsY25SNUxrbEVYMEZVVkZKSlFsVlVSVjlPUVUxRklDc2dKejBuSUN0Y2JpQWdJQ0FnSUhGMWIzUmxRWFIwY21saWRYUmxWbUZzZFdWR2IzSkNjbTkzYzJWeUtHbGtLVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsY3lCdFlYSnJkWEFnWm05eUlHRWdjSEp2Y0dWeWRIa3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1WVcxbFhHNGdJQ0FxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1ZjYmlBZ0lDb2dRSEpsZEhWeWJpQjdQM04wY21sdVozMGdUV0Z5YTNWd0lITjBjbWx1Wnl3Z2IzSWdiblZzYkNCcFppQjBhR1VnY0hKdmNHVnlkSGtnZDJGeklHbHVkbUZzYVdRdVhHNGdJQ0FxTDF4dUlDQmpjbVZoZEdWTllYSnJkWEJHYjNKUWNtOXdaWEowZVRvZ1puVnVZM1JwYjI0b2JtRnRaU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvUkU5TlVISnZjR1Z5ZEhrdWFYTlRkR0Z1WkdGeVpFNWhiV1V1YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrZ0ppWmNiaUFnSUNBZ0lDQWdSRTlOVUhKdmNHVnlkSGt1YVhOVGRHRnVaR0Z5WkU1aGJXVmJibUZ0WlYwcElIdGNiaUFnSUNBZ0lHbG1JQ2h6YUc5MWJHUkpaMjV2Y21WV1lXeDFaU2h1WVcxbExDQjJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDY25PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbUZ5SUdGMGRISnBZblYwWlU1aGJXVWdQU0JFVDAxUWNtOXdaWEowZVM1blpYUkJkSFJ5YVdKMWRHVk9ZVzFsVzI1aGJXVmRPMXh1SUNBZ0lDQWdhV1lnS0VSUFRWQnliM0JsY25SNUxtaGhjMEp2YjJ4bFlXNVdZV3gxWlZ0dVlXMWxYU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDaEVUMDFRY205d1pYSjBlUzVvWVhOUGRtVnliRzloWkdWa1FtOXZiR1ZoYmxaaGJIVmxXMjVoYldWZElDWW1JSFpoYkhWbElEMDlQU0IwY25WbEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWFIwY21saWRYUmxUbUZ0WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJoZEhSeWFXSjFkR1ZPWVcxbElDc2dKejBuSUNzZ2NYVnZkR1ZCZEhSeWFXSjFkR1ZXWVd4MVpVWnZja0p5YjNkelpYSW9kbUZzZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1JFOU5VSEp2Y0dWeWRIa3VhWE5EZFhOMGIyMUJkSFJ5YVdKMWRHVW9ibUZ0WlNrcElIdGNiaUFnSUNBZ0lHbG1JQ2gyWVd4MVpTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5KenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQnVZVzFsSUNzZ0p6MG5JQ3NnY1hWdmRHVkJkSFJ5YVdKMWRHVldZV3gxWlVadmNrSnliM2R6WlhJb2RtRnNkV1VwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQjNZWEp1Vlc1cmJtOTNibEJ5YjNCbGNuUjVLRzVoYldVcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCMGFHVWdkbUZzZFdVZ1ptOXlJR0VnY0hKdmNHVnlkSGtnYjI0Z1lTQnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJRzV2WkdWY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldWY2JpQWdJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaVnh1SUNBZ0tpOWNiaUFnYzJWMFZtRnNkV1ZHYjNKUWNtOXdaWEowZVRvZ1puVnVZM1JwYjI0b2JtOWtaU3dnYm1GdFpTd2dkbUZzZFdVcElIdGNiaUFnSUNCcFppQW9SRTlOVUhKdmNHVnlkSGt1YVhOVGRHRnVaR0Z5WkU1aGJXVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2JtRnRaU2tnSmlaY2JpQWdJQ0FnSUNBZ1JFOU5VSEp2Y0dWeWRIa3VhWE5UZEdGdVpHRnlaRTVoYldWYmJtRnRaVjBwSUh0Y2JpQWdJQ0FnSUhaaGNpQnRkWFJoZEdsdmJrMWxkR2h2WkNBOUlFUlBUVkJ5YjNCbGNuUjVMbWRsZEUxMWRHRjBhVzl1VFdWMGFHOWtXMjVoYldWZE8xeHVJQ0FnSUNBZ2FXWWdLRzExZEdGMGFXOXVUV1YwYUc5a0tTQjdYRzRnSUNBZ0lDQWdJRzExZEdGMGFXOXVUV1YwYUc5a0tHNXZaR1VzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzJodmRXeGtTV2R1YjNKbFZtRnNkV1VvYm1GdFpTd2dkbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpHVnNaWFJsVm1Gc2RXVkdiM0pRY205d1pYSjBlU2h1YjJSbExDQnVZVzFsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1JFOU5VSEp2Y0dWeWRIa3ViWFZ6ZEZWelpVRjBkSEpwWW5WMFpWdHVZVzFsWFNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJnYzJWMFFYUjBjbWxpZFhSbFlDQjNhWFJvSUc5aWFtVmpkSE1nWW1WamIyMWxjeUJ2Ym14NUlHQmJiMkpxWldOMFhXQWdhVzRnU1VVNEx6a3NYRzRnSUNBZ0lDQWdJQzh2SUNnbkp5QXJJSFpoYkhWbEtTQnRZV3RsY3lCcGRDQnZkWFJ3ZFhRZ2RHaGxJR052Y25KbFkzUWdkRzlUZEhKcGJtY29LUzEyWVd4MVpTNWNiaUFnSUNBZ0lDQWdibTlrWlM1elpYUkJkSFJ5YVdKMWRHVW9SRTlOVUhKdmNHVnlkSGt1WjJWMFFYUjBjbWxpZFhSbFRtRnRaVnR1WVcxbFhTd2dKeWNnS3lCMllXeDFaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NISnZjRTVoYldVZ1BTQkVUMDFRY205d1pYSjBlUzVuWlhSUWNtOXdaWEowZVU1aGJXVmJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDOHZJRTExYzNRZ1pYaHdiR2xqYVhSc2VTQmpZWE4wSUhaaGJIVmxjeUJtYjNJZ1NFRlRYMU5KUkVWZlJVWkdSVU5VVXkxd2NtOXdaWEowYVdWeklIUnZJSFJvWlZ4dUlDQWdJQ0FnSUNBdkx5QndjbTl3WlhKMGVTQjBlWEJsSUdKbFptOXlaU0JqYjIxd1lYSnBibWM3SUc5dWJIa2dZSFpoYkhWbFlDQmtiMlZ6SUdGdVpDQnBjeUJ6ZEhKcGJtY3VYRzRnSUNBZ0lDQWdJR2xtSUNnaFJFOU5VSEp2Y0dWeWRIa3VhR0Z6VTJsa1pVVm1abVZqZEhOYmJtRnRaVjBnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2duSnlBcklHNXZaR1ZiY0hKdmNFNWhiV1ZkS1NBaFBUMGdLQ2NuSUNzZ2RtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnUTI5dWRISmhjbmtnZEc4Z1lITmxkRUYwZEhKcFluVjBaV0FzSUc5aWFtVmpkQ0J3Y205d1pYSjBhV1Z6SUdGeVpTQndjbTl3WlhKc2VWeHVJQ0FnSUNBZ0lDQWdJQzh2SUdCMGIxTjBjbWx1WjJCbFpDQmllU0JKUlRndk9TNWNiaUFnSUNBZ0lDQWdJQ0J1YjJSbFczQnliM0JPWVcxbFhTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaEVUMDFRY205d1pYSjBlUzVwYzBOMWMzUnZiVUYwZEhKcFluVjBaU2h1WVcxbEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb2JtRnRaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J1YjJSbExuTmxkRUYwZEhKcFluVjBaU2h1WVcxbExDQW5KeUFySUhaaGJIVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUNBZ2QyRnlibFZ1YTI1dmQyNVFjbTl3WlhKMGVTaHVZVzFsS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUmxiR1YwWlhNZ2RHaGxJSFpoYkhWbElHWnZjaUJoSUhCeWIzQmxjblI1SUc5dUlHRWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEVUMDFGYkdWdFpXNTBmU0J1YjJSbFhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1WVcxbFhHNGdJQ0FxTDF4dUlDQmtaV3hsZEdWV1lXeDFaVVp2Y2xCeWIzQmxjblI1T2lCbWRXNWpkR2x2YmlodWIyUmxMQ0J1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLRVJQVFZCeWIzQmxjblI1TG1selUzUmhibVJoY21ST1lXMWxMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwSUNZbVhHNGdJQ0FnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVMbWx6VTNSaGJtUmhjbVJPWVcxbFcyNWhiV1ZkS1NCN1hHNGdJQ0FnSUNCMllYSWdiWFYwWVhScGIyNU5aWFJvYjJRZ1BTQkVUMDFRY205d1pYSjBlUzVuWlhSTmRYUmhkR2x2YmsxbGRHaHZaRnR1WVcxbFhUdGNiaUFnSUNBZ0lHbG1JQ2h0ZFhSaGRHbHZiazFsZEdodlpDa2dlMXh1SUNBZ0lDQWdJQ0J0ZFhSaGRHbHZiazFsZEdodlpDaHViMlJsTENCMWJtUmxabWx1WldRcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaEVUMDFRY205d1pYSjBlUzV0ZFhOMFZYTmxRWFIwY21saWRYUmxXMjVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJRzV2WkdVdWNtVnRiM1psUVhSMGNtbGlkWFJsS0VSUFRWQnliM0JsY25SNUxtZGxkRUYwZEhKcFluVjBaVTVoYldWYmJtRnRaVjBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnliM0JPWVcxbElEMGdSRTlOVUhKdmNHVnlkSGt1WjJWMFVISnZjR1Z5ZEhsT1lXMWxXMjVoYldWZE8xeHVJQ0FnSUNBZ0lDQjJZWElnWkdWbVlYVnNkRlpoYkhWbElEMGdSRTlOVUhKdmNHVnlkSGt1WjJWMFJHVm1ZWFZzZEZaaGJIVmxSbTl5VUhKdmNHVnlkSGtvWEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaUzV1YjJSbFRtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNCd2NtOXdUbUZ0WlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVVSUFRWQnliM0JsY25SNUxtaGhjMU5wWkdWRlptWmxZM1J6VzI1aGJXVmRJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9KeWNnS3lCdWIyUmxXM0J5YjNCT1lXMWxYU2tnSVQwOUlHUmxabUYxYkhSV1lXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNXZaR1ZiY0hKdmNFNWhiV1ZkSUQwZ1pHVm1ZWFZzZEZaaGJIVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hFVDAxUWNtOXdaWEowZVM1cGMwTjFjM1J2YlVGMGRISnBZblYwWlNodVlXMWxLU2tnZTF4dUlDQWdJQ0FnYm05a1pTNXlaVzF2ZG1WQmRIUnlhV0oxZEdVb2JtRnRaU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZcElIdGNiaUFnSUNBZ0lIZGhjbTVWYm10dWIzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSRTlOVUhKdmNHVnlkSGxQY0dWeVlYUnBiMjV6TzF4dUlsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKXtyZXR1cm4gbWFya3VwLnN1YnN0cmluZygxLG1hcmt1cC5pbmRleE9mKFwiIFwiKSl9dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50PXJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLGNyZWF0ZU5vZGVzRnJvbU1hcmt1cD1yZXF1aXJlKFwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXBcIiksZW1wdHlGdW5jdGlvbj1yZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpLGdldE1hcmt1cFdyYXA9cmVxdWlyZShcIi4vZ2V0TWFya3VwV3JhcFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLE9QRU5fVEFHX05BTUVfRVhQPS9eKDxbXiBcXC8+XSspLyxSRVNVTFRfSU5ERVhfQVRUUj1cImRhdGEtZGFuZ2VyLWluZGV4XCIsRGFuZ2VyPXtkYW5nZXJvdXNseVJlbmRlck1hcmt1cDpmdW5jdGlvbihtYXJrdXBMaXN0KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00sXCJkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhIHdvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlIFJlYWN0LnJlbmRlclRvU3RyaW5nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlwiKTppbnZhcmlhbnQoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKTtmb3IodmFyIG5vZGVOYW1lLG1hcmt1cEJ5Tm9kZU5hbWU9e30saT0wO2k8bWFya3VwTGlzdC5sZW5ndGg7aSsrKVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG1hcmt1cExpc3RbaV0sXCJkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC5cIik6aW52YXJpYW50KG1hcmt1cExpc3RbaV0pLG5vZGVOYW1lPWdldE5vZGVOYW1lKG1hcmt1cExpc3RbaV0pLG5vZGVOYW1lPWdldE1hcmt1cFdyYXAobm9kZU5hbWUpP25vZGVOYW1lOlwiKlwiLG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdPW1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdfHxbXSxtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXVtpXT1tYXJrdXBMaXN0W2ldO3ZhciByZXN1bHRMaXN0PVtdLHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQ9MDtmb3Iobm9kZU5hbWUgaW4gbWFya3VwQnlOb2RlTmFtZSlpZihtYXJrdXBCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSl7dmFyIHJlc3VsdEluZGV4LG1hcmt1cExpc3RCeU5vZGVOYW1lPW1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdO2ZvcihyZXN1bHRJbmRleCBpbiBtYXJrdXBMaXN0QnlOb2RlTmFtZSlpZihtYXJrdXBMaXN0QnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpe3ZhciBtYXJrdXA9bWFya3VwTGlzdEJ5Tm9kZU5hbWVbcmVzdWx0SW5kZXhdO21hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XT1tYXJrdXAucmVwbGFjZShPUEVOX1RBR19OQU1FX0VYUCxcIiQxIFwiK1JFU1VMVF9JTkRFWF9BVFRSKyc9XCInK3Jlc3VsdEluZGV4KydcIiAnKX1mb3IodmFyIHJlbmRlck5vZGVzPWNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXBMaXN0QnlOb2RlTmFtZS5qb2luKFwiXCIpLGVtcHR5RnVuY3Rpb24pLGo9MDtqPHJlbmRlck5vZGVzLmxlbmd0aDsrK2ope3ZhciByZW5kZXJOb2RlPXJlbmRlck5vZGVzW2pdO3JlbmRlck5vZGUuaGFzQXR0cmlidXRlJiZyZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik/KHJlc3VsdEluZGV4PStyZW5kZXJOb2RlLmdldEF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUikscmVuZGVyTm9kZS5yZW1vdmVBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSxcIkRhbmdlcjogQXNzaWduaW5nIHRvIGFuIGFscmVhZHktb2NjdXBpZWQgcmVzdWx0IGluZGV4LlwiKTppbnZhcmlhbnQoIXJlc3VsdExpc3QuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpKSxyZXN1bHRMaXN0W3Jlc3VsdEluZGV4XT1yZW5kZXJOb2RlLHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQrPTEpOlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmNvbnNvbGUuZXJyb3IoXCJEYW5nZXI6IERpc2NhcmRpbmcgdW5leHBlY3RlZCBub2RlOlwiLHJlbmRlck5vZGUpfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChyZXN1bHRMaXN0QXNzaWdubWVudENvdW50PT09cmVzdWx0TGlzdC5sZW5ndGgsXCJEYW5nZXI6IERpZCBub3QgYXNzaWduIHRvIGV2ZXJ5IGluZGV4IG9mIHJlc3VsdExpc3QuXCIpOmludmFyaWFudChyZXN1bHRMaXN0QXNzaWdubWVudENvdW50PT09cmVzdWx0TGlzdC5sZW5ndGgpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KHJlc3VsdExpc3QubGVuZ3RoPT09bWFya3VwTGlzdC5sZW5ndGgsXCJEYW5nZXI6IEV4cGVjdGVkIG1hcmt1cCB0byByZW5kZXIgJXMgbm9kZXMsIGJ1dCByZW5kZXJlZCAlcy5cIixtYXJrdXBMaXN0Lmxlbmd0aCxyZXN1bHRMaXN0Lmxlbmd0aCk6aW52YXJpYW50KHJlc3VsdExpc3QubGVuZ3RoPT09bWFya3VwTGlzdC5sZW5ndGgpLHJlc3VsdExpc3R9LGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOmZ1bmN0aW9uKG9sZENoaWxkLG1hcmt1cCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSB3b3JrZXIgdGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSBnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSBSZWFjdC5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy5cIik6aW52YXJpYW50KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQobWFya3VwLFwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuXCIpOmludmFyaWFudChtYXJrdXApLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwiaHRtbFwiIT09b2xkQ2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSA8aHRtbD4gbm9kZS4gVGhpcyBpcyBiZWNhdXNlIGJyb3dzZXIgcXVpcmtzIG1ha2UgdGhpcyB1bnJlbGlhYmxlIGFuZC9vciBzbG93LiBJZiB5b3Ugd2FudCB0byByZW5kZXIgdG8gdGhlIHJvb3QgeW91IG11c3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFNlZSBSZWFjdC5yZW5kZXJUb1N0cmluZygpLlwiKTppbnZhcmlhbnQoXCJodG1sXCIhPT1vbGRDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO3ZhciBuZXdDaGlsZD1jcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLGVtcHR5RnVuY3Rpb24pWzBdO29sZENoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0NoaWxkLG9sZENoaWxkKX19O21vZHVsZS5leHBvcnRzPURhbmdlcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJHRnVaMlZ5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRmpRU3haUVhWQ1FTeFRRVUZUTEdGQlFWa3NVVUZEYmtJc1RVRkJUeXhSUVVGUExGVkJRVlVzUlVGQlJ5eFBRVUZQTEZGQlFWRXNUVUYwUWpWRExFZEJRVWtzYzBKQlFYVkNMRkZCUVZFc01FSkJSUzlDTEhOQ1FVRjNRaXhSUVVGUkxESkNRVU5vUXl4alFVRm5RaXhSUVVGUkxHMUNRVU40UWl4alFVRm5RaXhSUVVGUkxHMUNRVU40UWl4VlFVRlpMRkZCUVZFc1pVRkZjRUlzYTBKQlFXOUNMR1ZCUTNCQ0xHdENRVUZ2UWl4dlFrRnBRbkJDTEZGQlYwWXNkMEpCUVhsQ0xGTkJRVk1zV1VGREwwSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNjVUpCUVhGQ0xGVkJRM0pDTERoT1FVbEZMRlZCUVZVc2NVSkJRWEZDTEZWQlNXNURMRXRCUVVzc1IwRklSQ3hWUVVOQkxHOUNRVVZMTEVWQlFVa3NSVUZCUnl4RlFVRkpMRmRCUVZjc1QwRkJVU3hKUVVOd1F5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eFhRVUZYTEVkQlExZ3NhVVJCUTBVc1ZVRkJWU3hYUVVGWExFbEJRM3BDTEZOQlFWY3NXVUZCV1N4WFFVRlhMRWxCUTJ4RExGTkJRVmNzWTBGQll5eFZRVUZaTEZOQlFWY3NTVUZEYUVRc2FVSkJRV2xDTEZWQlFWa3NhVUpCUVdsQ0xHTkJRemxETEdsQ1FVRnBRaXhWUVVGVkxFZEJRVXNzVjBGQlZ5eEZRVVUzUXl4SlFVRkpMR1ZCUTBFc01FSkJRVFJDTEVOQlEyaERMRXRCUVVzc1YwRkJXU3hyUWtGRFppeEhRVUZMTEdsQ1FVRnBRaXhsUVVGbExGVkJRWEpETEVOQlIwRXNSMEZMU1N4aFFVeEJMSEZDUVVGMVFpeHBRa0ZCYVVJc1UwRk5OVU1zUzBGQlN5eGpRVUZsTEhOQ1FVTnNRaXhIUVVGSkxIRkNRVUZ4UWl4bFFVRmxMR0ZCUVdNc1EwRkRjRVFzUjBGQlNTeFJRVUZUTEhGQ1FVRnhRaXhaUVV0c1F5eHpRa0ZCY1VJc1lVRkJaU3hQUVVGUExGRkJRM3BETEd0Q1FVVkJMRTFCUVZFc2EwSkJRVzlDTEV0QlFVOHNXVUZCWXl4TlFWZDJSQ3hKUVVGTExFZEJURVFzWVVGQll5eHpRa0ZEYUVJc2NVSkJRWEZDTEV0QlFVc3NTVUZETVVJc1pVRkhUeXhGUVVGSkxFVkJRVWNzUlVGQlNTeFpRVUZaTEZOQlFWVXNSVUZCUnl4RFFVTXpReXhIUVVGSkxGbEJRV0VzV1VGQldTeEZRVU42UWl4WlFVRlhMR05CUTFnc1YwRkJWeXhoUVVGaExHOUNRVVV4UWl4aFFVRmxMRmRCUVZjc1lVRkJZU3h0UWtGRGRrTXNWMEZCVnl4blFrRkJaMElzYlVKQlJURkNMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZkQlEzUkRMRmRCUVZjc1pVRkJaU3hoUVVNelFpd3dSRUZEUlN4WFFVRlhMRmRCUVZjc1pVRkJaU3hqUVVWNlF5eFhRVUZYTEdGQlFXVXNWMEZKTVVJc01rSkJRVFpDTEVkQlJYQkNMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFZRVU4wUXl4UlFVRlJMRTFCUTA0c2MwTkJRMEVzWVVGdlFsSXNUVUZhUXl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU4yUXl3MFFrRkJPRUlzVjBGQlZ5eFBRVU42UXl4M1JFRkRSU3hWUVVGVkxEUkNRVUU0UWl4WFFVRlhMRkZCUlhSRUxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExGZEJRVmNzVTBGQlZ5eFhRVUZYTEU5QlEycERMQ3RFUVVOQkxGZEJRVmNzVDBGRFdDeFhRVUZYTEZGQlExUXNWVUZCVlN4WFFVRlhMRk5CUVZjc1YwRkJWeXhSUVVWNFF5eFpRVmRVTEdsRFFVRnJReXhUUVVGVExGTkJRVlVzVVVGRGJFUXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNjVUpCUVhGQ0xGVkJRM0pDTEhWUFFVbEZMRlZCUVZVc2NVSkJRWEZDTEZkQlEyeERMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlFWVXNUMEZCVVN3d1JFRkJORVFzVlVGQlZTeFJRVU5vU1N4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU5LTEZOQlFXNURMRk5CUVZNc1VVRkJVU3hqUVVOcVFpeHJVRUZKUlN4VlFVRTJReXhUUVVGdVF5eFRRVUZUTEZGQlFWRXNZMEZGTDBJc1NVRkJTU3hWUVVGWExITkNRVUZ6UWl4UFFVRlJMR1ZCUVdVc1JVRkROVVFzVlVGQlV5eFhRVUZYTEdGQlFXRXNVMEZCVlN4WFFVc3ZReXhSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JFWVc1blpYSmNiaUFxSUVCMGVYQmxZMmhsWTJ0eklITjBZWFJwWXkxdmJteDVYRzRnS2k5Y2JseHVMeXBxYzJ4cGJuUWdaWFpwYkRvZ2RISjFaU3dnYzNWaU9pQjBjblZsSUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUVWNFpXTjFkR2x2YmtWdWRtbHliMjV0Wlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2UlhobFkzVjBhVzl1Ulc1MmFYSnZibTFsYm5SY0lpazdYRzVjYm5aaGNpQmpjbVZoZEdWT2IyUmxjMFp5YjIxTllYSnJkWEFnUFNCeVpYRjFhWEpsS0Z3aUxpOWpjbVZoZEdWT2IyUmxjMFp5YjIxTllYSnJkWEJjSWlrN1hHNTJZWElnWlcxd2RIbEdkVzVqZEdsdmJpQTlJSEpsY1hWcGNtVW9YQ0l1TDJWdGNIUjVSblZ1WTNScGIyNWNJaWs3WEc1MllYSWdaMlYwVFdGeWEzVndWM0poY0NBOUlISmxjWFZwY21Vb1hDSXVMMmRsZEUxaGNtdDFjRmR5WVhCY0lpazdYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVYRzUyWVhJZ1QxQkZUbDlVUVVkZlRrRk5SVjlGV0ZBZ1BTQXZYaWc4VzE0Z1hGd3ZQbDByS1M4N1hHNTJZWElnVWtWVFZVeFVYMGxPUkVWWVgwRlVWRklnUFNBblpHRjBZUzFrWVc1blpYSXRhVzVrWlhnbk8xeHVYRzR2S2lwY2JpQXFJRVY0ZEhKaFkzUnpJSFJvWlNCZ2JtOWtaVTVoYldWZ0lHWnliMjBnWVNCemRISnBibWNnYjJZZ2JXRnlhM1Z3TGx4dUlDcGNiaUFxSUU1UFZFVTZJRVY0ZEhKaFkzUnBibWNnZEdobElHQnViMlJsVG1GdFpXQWdaRzlsY3lCdWIzUWdjbVZ4ZFdseVpTQmhJSEpsWjNWc1lYSWdaWGh3Y21WemMybHZiaUJ0WVhSamFGeHVJQ29nWW1WallYVnpaU0IzWlNCdFlXdGxJR0Z6YzNWdGNIUnBiMjV6SUdGaWIzVjBJRkpsWVdOMExXZGxibVZ5WVhSbFpDQnRZWEpyZFhBZ0tHa3VaUzRnZEdobGNtVWdZWEpsSUc1dlhHNGdLaUJ6Y0dGalpYTWdjM1Z5Y205MWJtUnBibWNnZEdobElHOXdaVzVwYm1jZ2RHRm5JR0Z1WkNCMGFHVnlaU0JwY3lCaGRDQnNaV0Z6ZENCdmJtVWdZWFIwY21saWRYUmxLUzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV0Z5YTNWd0lGTjBjbWx1WnlCdlppQnRZWEpyZFhBdVhHNGdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJRTV2WkdVZ2JtRnRaU0J2WmlCMGFHVWdjM1Z3Y0d4cFpXUWdiV0Z5YTNWd0xseHVJQ29nUUhObFpTQm9kSFJ3T2k4dmFuTndaWEptTG1OdmJTOWxlSFJ5WVdOMExXNXZaR1Z1WVcxbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFNXZaR1ZPWVcxbEtHMWhjbXQxY0NrZ2UxeHVJQ0J5WlhSMWNtNGdiV0Z5YTNWd0xuTjFZbk4wY21sdVp5Z3hMQ0J0WVhKcmRYQXVhVzVrWlhoUFppZ25JQ2NwS1R0Y2JuMWNibHh1ZG1GeUlFUmhibWRsY2lBOUlIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVnVaR1Z5Y3lCdFlYSnJkWEFnYVc1MGJ5QmhiaUJoY25KaGVTQnZaaUJ1YjJSbGN5NGdWR2hsSUcxaGNtdDFjQ0JwY3lCbGVIQmxZM1JsWkNCMGJ5QnlaVzVrWlhKY2JpQWdJQ29nYVc1MGJ5QmhJR3hwYzNRZ2IyWWdjbTl2ZENCdWIyUmxjeTRnUVd4emJ5d2dkR2hsSUd4bGJtZDBhQ0J2WmlCZ2NtVnpkV3gwVEdsemRHQWdZVzVrWEc0Z0lDQXFJR0J0WVhKcmRYQk1hWE4wWUNCemFHOTFiR1FnWW1VZ2RHaGxJSE5oYldVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdZWEp5WVhrOGMzUnlhVzVuUG4wZ2JXRnlhM1Z3VEdsemRDQk1hWE4wSUc5bUlHMWhjbXQxY0NCemRISnBibWR6SUhSdklISmxibVJsY2k1Y2JpQWdJQ29nUUhKbGRIVnliaUI3WVhKeVlYazhSRTlOUld4bGJXVnVkRDU5SUV4cGMzUWdiMllnY21WdVpHVnlaV1FnYm05a1pYTXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdaR0Z1WjJWeWIzVnpiSGxTWlc1a1pYSk5ZWEpyZFhBNklHWjFibU4wYVc5dUtHMWhjbXQxY0V4cGMzUXBJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ1JYaGxZM1YwYVc5dVJXNTJhWEp2Ym0xbGJuUXVZMkZ1VlhObFJFOU5MRnh1SUNBZ0lDQWdKMlJoYm1kbGNtOTFjMng1VW1WdVpHVnlUV0Z5YTNWd0tDNHVMaWs2SUVOaGJtNXZkQ0J5Wlc1a1pYSWdiV0Z5YTNWd0lHbHVJR0VnZDI5eWEyVnlJQ2NnSzF4dUlDQWdJQ0FnSjNSb2NtVmhaQzRnVFdGclpTQnpkWEpsSUdCM2FXNWtiM2RnSUdGdVpDQmdaRzlqZFcxbGJuUmdJR0Z5WlNCaGRtRnBiR0ZpYkdVZ1oyeHZZbUZzYkhrZ0p5QXJYRzRnSUNBZ0lDQW5ZbVZtYjNKbElISmxjWFZwY21sdVp5QlNaV0ZqZENCM2FHVnVJSFZ1YVhRZ2RHVnpkR2x1WnlCdmNpQjFjMlVnSnlBclhHNGdJQ0FnSUNBblVtVmhZM1F1Y21WdVpHVnlWRzlUZEhKcGJtY2dabTl5SUhObGNuWmxjaUJ5Wlc1a1pYSnBibWN1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb1JYaGxZM1YwYVc5dVJXNTJhWEp2Ym0xbGJuUXVZMkZ1VlhObFJFOU5LU2s3WEc0Z0lDQWdkbUZ5SUc1dlpHVk9ZVzFsTzF4dUlDQWdJSFpoY2lCdFlYSnJkWEJDZVU1dlpHVk9ZVzFsSUQwZ2UzMDdYRzRnSUNBZ0x5OGdSM0p2ZFhBZ2JXRnlhM1Z3SUdKNUlHQnViMlJsVG1GdFpXQWdhV1lnWVNCM2NtRndJR2x6SUc1bFkyVnpjMkZ5ZVN3Z1pXeHpaU0JpZVNBbktpY3VYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnRZWEpyZFhCTWFYTjBMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnSUNCdFlYSnJkWEJNYVhOMFcybGRMRnh1SUNBZ0lDQWdJQ0FuWkdGdVoyVnliM1Z6YkhsU1pXNWtaWEpOWVhKcmRYQW9MaTR1S1RvZ1RXbHpjMmx1WnlCdFlYSnJkWEF1SjF4dUlDQWdJQ0FnS1NBNklHbHVkbUZ5YVdGdWRDaHRZWEpyZFhCTWFYTjBXMmxkS1NrN1hHNGdJQ0FnSUNCdWIyUmxUbUZ0WlNBOUlHZGxkRTV2WkdWT1lXMWxLRzFoY210MWNFeHBjM1JiYVYwcE8xeHVJQ0FnSUNBZ2JtOWtaVTVoYldVZ1BTQm5aWFJOWVhKcmRYQlhjbUZ3S0c1dlpHVk9ZVzFsS1NBL0lHNXZaR1ZPWVcxbElEb2dKeW9uTzF4dUlDQWdJQ0FnYldGeWEzVndRbmxPYjJSbFRtRnRaVnR1YjJSbFRtRnRaVjBnUFNCdFlYSnJkWEJDZVU1dlpHVk9ZVzFsVzI1dlpHVk9ZVzFsWFNCOGZDQmJYVHRjYmlBZ0lDQWdJRzFoY210MWNFSjVUbTlrWlU1aGJXVmJibTlrWlU1aGJXVmRXMmxkSUQwZ2JXRnlhM1Z3VEdsemRGdHBYVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSEpsYzNWc2RFeHBjM1FnUFNCYlhUdGNiaUFnSUNCMllYSWdjbVZ6ZFd4MFRHbHpkRUZ6YzJsbmJtMWxiblJEYjNWdWRDQTlJREE3WEc0Z0lDQWdabTl5SUNodWIyUmxUbUZ0WlNCcGJpQnRZWEpyZFhCQ2VVNXZaR1ZPWVcxbEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVcxaGNtdDFjRUo1VG05a1pVNWhiV1V1YUdGelQzZHVVSEp2Y0dWeWRIa29ibTlrWlU1aGJXVXBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHMWhjbXQxY0V4cGMzUkNlVTV2WkdWT1lXMWxJRDBnYldGeWEzVndRbmxPYjJSbFRtRnRaVnR1YjJSbFRtRnRaVjA3WEc1Y2JpQWdJQ0FnSUM4dklGUm9hWE1nWm05eUxXbHVJR3h2YjNBZ2MydHBjSE1nZEdobElHaHZiR1Z6SUc5bUlIUm9aU0J6Y0dGeWMyVWdZWEp5WVhrdUlGUm9aU0J2Y21SbGNpQnZabHh1SUNBZ0lDQWdMeThnYVhSbGNtRjBhVzl1SUhOb2IzVnNaQ0JtYjJ4c2IzY2dkR2hsSUc5eVpHVnlJRzltSUdGemMybG5ibTFsYm5Rc0lIZG9hV05vSUdoaGNIQmxibk1nZEc4Z2JXRjBZMmhjYmlBZ0lDQWdJQzh2SUc1MWJXVnlhV05oYkNCcGJtUmxlQ0J2Y21SbGNpd2dZblYwSUhkbElHUnZiaWQwSUhKbGJIa2diMjRnZEdoaGRDNWNiaUFnSUNBZ0lIWmhjaUJ5WlhOMWJIUkpibVJsZUR0Y2JpQWdJQ0FnSUdadmNpQW9jbVZ6ZFd4MFNXNWtaWGdnYVc0Z2JXRnlhM1Z3VEdsemRFSjVUbTlrWlU1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWhjbXQxY0V4cGMzUkNlVTV2WkdWT1lXMWxMbWhoYzA5M2JsQnliM0JsY25SNUtISmxjM1ZzZEVsdVpHVjRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ0WVhKcmRYQWdQU0J0WVhKcmRYQk1hWE4wUW5sT2IyUmxUbUZ0WlZ0eVpYTjFiSFJKYm1SbGVGMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlFkWE5vSUhSb1pTQnlaWEYxWlhOMFpXUWdiV0Z5YTNWd0lIZHBkR2dnWVc0Z1lXUmthWFJwYjI1aGJDQlNSVk5WVEZSZlNVNUVSVmhmUVZSVVVseHVJQ0FnSUNBZ0lDQWdJQzh2SUdGMGRISnBZblYwWlM0Z0lFbG1JSFJvWlNCdFlYSnJkWEFnWkc5bGN5QnViM1FnYzNSaGNuUWdkMmwwYUNCaElEd2dZMmhoY21GamRHVnlMQ0JwZEZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRwYkd3Z1ltVWdaR2x6WTJGeVpHVmtJR0psYkc5M0lDaDNhWFJvSUdGdUlHRndjSEp2Y0hKcFlYUmxJR052Ym5OdmJHVXVaWEp5YjNJcExseHVJQ0FnSUNBZ0lDQWdJRzFoY210MWNFeHBjM1JDZVU1dlpHVk9ZVzFsVzNKbGMzVnNkRWx1WkdWNFhTQTlJRzFoY210MWNDNXlaWEJzWVdObEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVDFCRlRsOVVRVWRmVGtGTlJWOUZXRkFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVYUdseklHbHVaR1Y0SUhkcGJHd2dZbVVnY0dGeWMyVmtJR0poWTJzZ2IzVjBJR0psYkc5M0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSnlReElDY2dLeUJTUlZOVlRGUmZTVTVFUlZoZlFWUlVVaUFySUNjOVhDSW5JQ3NnY21WemRXeDBTVzVrWlhnZ0t5QW5YQ0lnSjF4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1VtVnVaR1Z5SUdWaFkyZ2daM0p2ZFhBZ2IyWWdiV0Z5YTNWd0lIZHBkR2dnYzJsdGFXeGhjaUIzY21Gd2NHbHVaeUJnYm05a1pVNWhiV1ZnTGx4dUlDQWdJQ0FnZG1GeUlISmxibVJsY2s1dlpHVnpJRDBnWTNKbFlYUmxUbTlrWlhOR2NtOXRUV0Z5YTNWd0tGeHVJQ0FnSUNBZ0lDQnRZWEpyZFhCTWFYTjBRbmxPYjJSbFRtRnRaUzVxYjJsdUtDY25LU3hjYmlBZ0lDQWdJQ0FnWlcxd2RIbEdkVzVqZEdsdmJpQXZMeUJFYnlCdWIzUm9hVzVuSUhOd1pXTnBZV3dnZDJsMGFDQThjMk55YVhCMFBpQjBZV2R6TGx4dUlDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQnlaVzVrWlhKT2IyUmxjeTVzWlc1bmRHZzdJQ3NyYWlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WdVpHVnlUbTlrWlNBOUlISmxibVJsY2s1dlpHVnpXMnBkTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ1WkdWeVRtOWtaUzVvWVhOQmRIUnlhV0oxZEdVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjazV2WkdVdWFHRnpRWFIwY21saWRYUmxLRkpGVTFWTVZGOUpUa1JGV0Y5QlZGUlNLU2tnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MFNXNWtaWGdnUFNBcmNtVnVaR1Z5VG05a1pTNW5aWFJCZEhSeWFXSjFkR1VvVWtWVFZVeFVYMGxPUkVWWVgwRlVWRklwTzF4dUlDQWdJQ0FnSUNBZ0lISmxibVJsY2s1dlpHVXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtGSkZVMVZNVkY5SlRrUkZXRjlCVkZSU0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWhjbVZ6ZFd4MFRHbHpkQzVvWVhOUGQyNVFjbTl3WlhKMGVTaHlaWE4xYkhSSmJtUmxlQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SR0Z1WjJWeU9pQkJjM05wWjI1cGJtY2dkRzhnWVc0Z1lXeHlaV0ZrZVMxdlkyTjFjR2xsWkNCeVpYTjFiSFFnYVc1a1pYZ3VKMXh1SUNBZ0lDQWdJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9JWEpsYzNWc2RFeHBjM1F1YUdGelQzZHVVSEp2Y0dWeWRIa29jbVZ6ZFd4MFNXNWtaWGdwS1NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUk1hWE4wVzNKbGMzVnNkRWx1WkdWNFhTQTlJSEpsYm1SbGNrNXZaR1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVYUdseklITm9iM1ZzWkNCdFlYUmphQ0J5WlhOMWJIUk1hWE4wTG14bGJtZDBhQ0JoYm1RZ2JXRnlhM1Z3VEdsemRDNXNaVzVuZEdnZ2QyaGxibHh1SUNBZ0lDQWdJQ0FnSUM4dklIZGxKM0psSUdSdmJtVXVYRzRnSUNBZ0lDQWdJQ0FnY21WemRXeDBUR2x6ZEVGemMybG5ibTFsYm5SRGIzVnVkQ0FyUFNBeE8xeHVYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNkRVlXNW5aWEk2SUVScGMyTmhjbVJwYm1jZ2RXNWxlSEJsWTNSbFpDQnViMlJsT2ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSk9iMlJsWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRUZzZEdodmRXZG9JSEpsYzNWc2RFeHBjM1FnZDJGeklIQnZjSFZzWVhSbFpDQnZkWFFnYjJZZ2IzSmtaWElzSUdsMElITm9iM1ZzWkNCdWIzY2dZbVVnWVNCa1pXNXpaVnh1SUNBZ0lDOHZJR0Z5Y21GNUxseHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0J5WlhOMWJIUk1hWE4wUVhOemFXZHViV1Z1ZEVOdmRXNTBJRDA5UFNCeVpYTjFiSFJNYVhOMExteGxibWQwYUN4Y2JpQWdJQ0FnSUNkRVlXNW5aWEk2SUVScFpDQnViM1FnWVhOemFXZHVJSFJ2SUdWMlpYSjVJR2x1WkdWNElHOW1JSEpsYzNWc2RFeHBjM1F1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2NtVnpkV3gwVEdsemRFRnpjMmxuYm0xbGJuUkRiM1Z1ZENBOVBUMGdjbVZ6ZFd4MFRHbHpkQzVzWlc1bmRHZ3BLVHRjYmx4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQnlaWE4xYkhSTWFYTjBMbXhsYm1kMGFDQTlQVDBnYldGeWEzVndUR2x6ZEM1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FuUkdGdVoyVnlPaUJGZUhCbFkzUmxaQ0J0WVhKcmRYQWdkRzhnY21WdVpHVnlJQ1Z6SUc1dlpHVnpMQ0JpZFhRZ2NtVnVaR1Z5WldRZ0pYTXVKeXhjYmlBZ0lDQWdJRzFoY210MWNFeHBjM1F1YkdWdVozUm9MRnh1SUNBZ0lDQWdjbVZ6ZFd4MFRHbHpkQzVzWlc1bmRHaGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLSEpsYzNWc2RFeHBjM1F1YkdWdVozUm9JRDA5UFNCdFlYSnJkWEJNYVhOMExteGxibWQwYUNrcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRXhwYzNRN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsY0d4aFkyVnpJR0VnYm05a1pTQjNhWFJvSUdFZ2MzUnlhVzVuSUc5bUlHMWhjbXQxY0NCaGRDQnBkSE1nWTNWeWNtVnVkQ0J3YjNOcGRHbHZiaUIzYVhSb2FXNGdhWFJ6WEc0Z0lDQXFJSEJoY21WdWRDNGdWR2hsSUcxaGNtdDFjQ0J0ZFhOMElISmxibVJsY2lCcGJuUnZJR0VnYzJsdVoyeGxJSEp2YjNRZ2JtOWtaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0RVQwMUZiR1Z0Wlc1MGZTQnZiR1JEYUdsc1pDQkRhR2xzWkNCdWIyUmxJSFJ2SUhKbGNHeGhZMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRZWEpyZFhBZ1RXRnlhM1Z3SUhSdklISmxibVJsY2lCcGJpQndiR0ZqWlNCdlppQjBhR1VnWTJocGJHUWdibTlrWlM1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCa1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjRG9nWm5WdVkzUnBiMjRvYjJ4a1EyaHBiR1FzSUcxaGNtdDFjQ2tnZTF4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQzVqWVc1VmMyVkVUMDBzWEc0Z0lDQWdJQ0FuWkdGdVoyVnliM1Z6YkhsU1pYQnNZV05sVG05a1pWZHBkR2hOWVhKcmRYQW9MaTR1S1RvZ1EyRnVibTkwSUhKbGJtUmxjaUJ0WVhKcmRYQWdhVzRnWVNBbklDdGNiaUFnSUNBZ0lDZDNiM0pyWlhJZ2RHaHlaV0ZrTGlCTllXdGxJSE4xY21VZ1lIZHBibVJ2ZDJBZ1lXNWtJR0JrYjJOMWJXVnVkR0FnWVhKbElHRjJZV2xzWVdKc1pTQW5JQ3RjYmlBZ0lDQWdJQ2RuYkc5aVlXeHNlU0JpWldadmNtVWdjbVZ4ZFdseWFXNW5JRkpsWVdOMElIZG9aVzRnZFc1cGRDQjBaWE4wYVc1bklHOXlJSFZ6WlNBbklDdGNiaUFnSUNBZ0lDZFNaV0ZqZEM1eVpXNWtaWEpVYjFOMGNtbHVaeUJtYjNJZ2MyVnlkbVZ5SUhKbGJtUmxjbWx1Wnk0blhHNGdJQ0FnS1NBNklHbHVkbUZ5YVdGdWRDaEZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQzVqWVc1VmMyVkVUMDBwS1R0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRzFoY210MWNDd2dKMlJoYm1kbGNtOTFjMng1VW1Wd2JHRmpaVTV2WkdWWGFYUm9UV0Z5YTNWd0tDNHVMaWs2SUUxcGMzTnBibWNnYldGeWEzVndMaWNwSURvZ2FXNTJZWEpwWVc1MEtHMWhjbXQxY0NrcE8xeHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0J2YkdSRGFHbHNaQzUwWVdkT1lXMWxMblJ2VEc5M1pYSkRZWE5sS0NrZ0lUMDlJQ2RvZEcxc0p5eGNiaUFnSUNBZ0lDZGtZVzVuWlhKdmRYTnNlVkpsY0d4aFkyVk9iMlJsVjJsMGFFMWhjbXQxY0NndUxpNHBPaUJEWVc1dWIzUWdjbVZ3YkdGalpTQnRZWEpyZFhBZ2IyWWdkR2hsSUNjZ0sxeHVJQ0FnSUNBZ0p6eG9kRzFzUGlCdWIyUmxMaUJVYUdseklHbHpJR0psWTJGMWMyVWdZbkp2ZDNObGNpQnhkV2x5YTNNZ2JXRnJaU0IwYUdseklIVnVjbVZzYVdGaWJHVWdKeUFyWEc0Z0lDQWdJQ0FuWVc1a0wyOXlJSE5zYjNjdUlFbG1JSGx2ZFNCM1lXNTBJSFJ2SUhKbGJtUmxjaUIwYnlCMGFHVWdjbTl2ZENCNWIzVWdiWFZ6ZENCMWMyVWdKeUFyWEc0Z0lDQWdJQ0FuYzJWeWRtVnlJSEpsYm1SbGNtbHVaeTRnVTJWbElGSmxZV04wTG5KbGJtUmxjbFJ2VTNSeWFXNW5LQ2t1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2IyeGtRMmhwYkdRdWRHRm5UbUZ0WlM1MGIweHZkMlZ5UTJGelpTZ3BJQ0U5UFNBbmFIUnRiQ2NwS1R0Y2JseHVJQ0FnSUhaaGNpQnVaWGREYUdsc1pDQTlJR055WldGMFpVNXZaR1Z6Um5KdmJVMWhjbXQxY0NodFlYSnJkWEFzSUdWdGNIUjVSblZ1WTNScGIyNHBXekJkTzF4dUlDQWdJRzlzWkVOb2FXeGtMbkJoY21WdWRFNXZaR1V1Y21Wd2JHRmpaVU5vYVd4a0tHNWxkME5vYVd4a0xDQnZiR1JEYUdsc1pDazdYRzRnSUgxY2JseHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRVlXNW5aWEk3WEc0aVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBbXG4gIGtleU9mKHtSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7U2ltcGxlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe1RhcEV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0NoYW5nZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtTZWxlY3RFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7QmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7QW5hbHl0aWNzRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW46IG51bGx9KVxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFbnRlckxlYXZlRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcblxudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbnZhciBnZXRGaXJzdFJlYWN0RE9NID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgbW91c2VFbnRlcjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlRW50ZXI6IG51bGx9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuICAgIF1cbiAgfSxcbiAgbW91c2VMZWF2ZToge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlTGVhdmU6IG51bGx9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuICAgIF1cbiAgfVxufTtcblxudmFyIGV4dHJhY3RlZEV2ZW50cyA9IFtudWxsLCBudWxsXTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmXG4gICAgICAgIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiZcbiAgICAgICAgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW47XG4gICAgaWYgKHRvcExldmVsVGFyZ2V0LndpbmRvdyA9PT0gdG9wTGV2ZWxUYXJnZXQpIHtcbiAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSB0b3BMZXZlbFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbSwgdG87XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgZnJvbSA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgdG8gPVxuICAgICAgICBnZXRGaXJzdFJlYWN0RE9NKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSB8fFxuICAgICAgICB3aW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyb20gPSB3aW47XG4gICAgICB0byA9IHRvcExldmVsVGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyb21JRCA9IGZyb20gPyBSZWFjdE1vdW50LmdldElEKGZyb20pIDogJyc7XG4gICAgdmFyIHRvSUQgPSB0byA/IFJlYWN0TW91bnQuZ2V0SUQodG8pIDogJyc7XG5cbiAgICB2YXIgbGVhdmUgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMubW91c2VMZWF2ZSxcbiAgICAgIGZyb21JRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb207XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvO1xuXG4gICAgdmFyIGVudGVyID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLm1vdXNlRW50ZXIsXG4gICAgICB0b0lELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG87XG4gICAgZW50ZXIucmVsYXRlZFRhcmdldCA9IGZyb207XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb21JRCwgdG9JRCk7XG5cbiAgICBleHRyYWN0ZWRFdmVudHNbMF0gPSBsZWF2ZTtcbiAgICBleHRyYWN0ZWRFdmVudHNbMV0gPSBlbnRlcjtcblxuICAgIHJldHVybiBleHRyYWN0ZWRFdmVudHM7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbnRlckxlYXZlRXZlbnRQbHVnaW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRDb25zdGFudHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbnZhciBQcm9wYWdhdGlvblBoYXNlcyA9IGtleU1pcnJvcih7YnViYmxlZDogbnVsbCwgY2FwdHVyZWQ6IG51bGx9KTtcblxuLyoqXG4gKiBUeXBlcyBvZiByYXcgc2lnbmFscyBmcm9tIHRoZSBicm93c2VyIGNhdWdodCBhdCB0aGUgdG9wIGxldmVsLlxuICovXG52YXIgdG9wTGV2ZWxUeXBlcyA9IGtleU1pcnJvcih7XG4gIHRvcEJsdXI6IG51bGwsXG4gIHRvcENoYW5nZTogbnVsbCxcbiAgdG9wQ2xpY2s6IG51bGwsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiBudWxsLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiBudWxsLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogbnVsbCxcbiAgdG9wQ29udGV4dE1lbnU6IG51bGwsXG4gIHRvcENvcHk6IG51bGwsXG4gIHRvcEN1dDogbnVsbCxcbiAgdG9wRG91YmxlQ2xpY2s6IG51bGwsXG4gIHRvcERyYWc6IG51bGwsXG4gIHRvcERyYWdFbmQ6IG51bGwsXG4gIHRvcERyYWdFbnRlcjogbnVsbCxcbiAgdG9wRHJhZ0V4aXQ6IG51bGwsXG4gIHRvcERyYWdMZWF2ZTogbnVsbCxcbiAgdG9wRHJhZ092ZXI6IG51bGwsXG4gIHRvcERyYWdTdGFydDogbnVsbCxcbiAgdG9wRHJvcDogbnVsbCxcbiAgdG9wRXJyb3I6IG51bGwsXG4gIHRvcEZvY3VzOiBudWxsLFxuICB0b3BJbnB1dDogbnVsbCxcbiAgdG9wS2V5RG93bjogbnVsbCxcbiAgdG9wS2V5UHJlc3M6IG51bGwsXG4gIHRvcEtleVVwOiBudWxsLFxuICB0b3BMb2FkOiBudWxsLFxuICB0b3BNb3VzZURvd246IG51bGwsXG4gIHRvcE1vdXNlTW92ZTogbnVsbCxcbiAgdG9wTW91c2VPdXQ6IG51bGwsXG4gIHRvcE1vdXNlT3ZlcjogbnVsbCxcbiAgdG9wTW91c2VVcDogbnVsbCxcbiAgdG9wUGFzdGU6IG51bGwsXG4gIHRvcFJlc2V0OiBudWxsLFxuICB0b3BTY3JvbGw6IG51bGwsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogbnVsbCxcbiAgdG9wU3VibWl0OiBudWxsLFxuICB0b3BUZXh0SW5wdXQ6IG51bGwsXG4gIHRvcFRvdWNoQ2FuY2VsOiBudWxsLFxuICB0b3BUb3VjaEVuZDogbnVsbCxcbiAgdG9wVG91Y2hNb3ZlOiBudWxsLFxuICB0b3BUb3VjaFN0YXJ0OiBudWxsLFxuICB0b3BXaGVlbDogbnVsbFxufSk7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHtcbiAgdG9wTGV2ZWxUeXBlczogdG9wTGV2ZWxUeXBlcyxcbiAgUHJvcGFnYXRpb25QaGFzZXM6IFByb3BhZ2F0aW9uUGhhc2VzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50Q29uc3RhbnRzO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbnZhciBlbXB0eUZ1bmN0aW9uPXJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIiksRXZlbnRMaXN0ZW5lcj17bGlzdGVuOmZ1bmN0aW9uKHRhcmdldCxldmVudFR5cGUsY2FsbGJhY2spe3JldHVybiB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcj8odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLGNhbGxiYWNrLCExKSx7cmVtb3ZlOmZ1bmN0aW9uKCl7dGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLGNhbGxiYWNrLCExKX19KTp0YXJnZXQuYXR0YWNoRXZlbnQ/KHRhcmdldC5hdHRhY2hFdmVudChcIm9uXCIrZXZlbnRUeXBlLGNhbGxiYWNrKSx7cmVtb3ZlOmZ1bmN0aW9uKCl7dGFyZ2V0LmRldGFjaEV2ZW50KFwib25cIitldmVudFR5cGUsY2FsbGJhY2spfX0pOnZvaWQgMH0sY2FwdHVyZTpmdW5jdGlvbih0YXJnZXQsZXZlbnRUeXBlLGNhbGxiYWNrKXtyZXR1cm4gdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXI/KHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSxjYWxsYmFjaywhMCkse3JlbW92ZTpmdW5jdGlvbigpe3RhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSxjYWxsYmFjaywhMCl9fSk6KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmNvbnNvbGUuZXJyb3IoXCJBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSBicm93c2VyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY2FwdHVyZSBwaGFzZS4gWW91ciBhcHBsaWNhdGlvbiB3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLlwiKSx7cmVtb3ZlOmVtcHR5RnVuY3Rpb259KX0scmVnaXN0ZXJEZWZhdWx0OmZ1bmN0aW9uKCl7fX07bW9kdWxlLmV4cG9ydHM9RXZlbnRMaXN0ZW5lcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJYWmxiblJNYVhOMFpXNWxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQmJVSkJMRWRCUVVrc1pVRkJaMElzVVVGQlVTeHRRa0ZOZUVJc1pVRlRSaXhQUVVGUkxGTkJRVk1zVDBGQlVTeFZRVUZYTEZWQlEyeERMRTFCUVVrc1VVRkJUeXhyUWtGRFZDeFBRVUZQTEdsQ1FVRnBRaXhWUVVGWExGVkJRVlVzU1VGRk0wTXNUMEZCVVN4WFFVTk9MRTlCUVU4c2IwSkJRVzlDTEZWQlFWY3NWVUZCVlN4TlFVY3pReXhQUVVGUExHRkJRMmhDTEU5QlFVOHNXVUZCV1N4TFFVRlBMRlZCUVZjc1YwRkZia01zVDBGQlVTeFhRVU5PTEU5QlFVOHNXVUZCV1N4TFFVRlBMRlZCUVZjc1lVRktjRU1zVVVGclFsUXNVVUZCVXl4VFFVRlRMRTlCUVZFc1ZVRkJWeXhWUVVOdVF5eE5RVUZMTEZGQlFVOHNhMEpCV1ZZc1QwRkJUeXhwUWtGQmFVSXNWVUZCVnl4VlFVRlZMRWxCUlRORExFOUJRVkVzVjBGRFRpeFBRVUZQTEc5Q1FVRnZRaXhWUVVGWExGVkJRVlVzVDBGa2FFUXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGVkJReTlDTEZGQlFWRXNUVUZEVGl4blMwRk5SaXhQUVVGUkxHbENRVmxrTEdkQ1FVRnBRaXhoUVVkdVFpeFJRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcVhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUlDb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1SUNvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1SUNvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNGdLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNGdLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnUlhabGJuUk1hWE4wWlc1bGNseHVJQ29nUUhSNWNHVmphR1ZqYTNOY2JpQXFMMXh1WEc1MllYSWdaVzF3ZEhsR2RXNWpkR2x2YmlBOUlISmxjWFZwY21Vb1hDSXVMMlZ0Y0hSNVJuVnVZM1JwYjI1Y0lpazdYRzVjYmk4cUtseHVJQ29nVlhCemRISmxZVzBnZG1WeWMybHZiaUJ2WmlCbGRtVnVkQ0JzYVhOMFpXNWxjaTRnUkc5bGN5QnViM1FnZEdGclpTQnBiblJ2SUdGalkyOTFiblFnYzNCbFkybG1hV05jYmlBcUlHNWhkSFZ5WlNCdlppQndiR0YwWm05eWJTNWNiaUFxTDF4dWRtRnlJRVYyWlc1MFRHbHpkR1Z1WlhJZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCTWFYTjBaVzRnZEc4Z1JFOU5JR1YyWlc1MGN5QmtkWEpwYm1jZ2RHaGxJR0oxWW1Kc1pTQndhR0Z6WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEVUMDFGZG1WdWRGUmhjbWRsZEgwZ2RHRnlaMlYwSUVSUFRTQmxiR1Z0Wlc1MElIUnZJSEpsWjJsemRHVnlJR3hwYzNSbGJtVnlJRzl1TGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdaWFpsYm5SVWVYQmxJRVYyWlc1MElIUjVjR1VzSUdVdVp5NGdKMk5zYVdOckp5QnZjaUFuYlc5MWMyVnZkbVZ5Snk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnWTJGc2JHSmhZMnNnUTJGc2JHSmhZMnNnWm5WdVkzUnBiMjR1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMjlpYW1WamRIMGdUMkpxWldOMElIZHBkR2dnWVNCZ2NtVnRiM1psWUNCdFpYUm9iMlF1WEc0Z0lDQXFMMXh1SUNCc2FYTjBaVzQ2SUdaMWJtTjBhVzl1S0hSaGNtZGxkQ3dnWlhabGJuUlVlWEJsTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUdsbUlDaDBZWEpuWlhRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lrZ2UxeHVJQ0FnSUNBZ2RHRnlaMlYwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWlhabGJuUlVlWEJsTENCallXeHNZbUZqYXl3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnY21WdGIzWmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGxkbVZ1ZEZSNWNHVXNJR05oYkd4aVlXTnJMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwWVhKblpYUXVZWFIwWVdOb1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUhSaGNtZGxkQzVoZEhSaFkyaEZkbVZ1ZENnbmIyNG5JQ3NnWlhabGJuUlVlWEJsTENCallXeHNZbUZqYXlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCeVpXMXZkbVU2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNWtaWFJoWTJoRmRtVnVkQ2duYjI0bklDc2daWFpsYm5SVWVYQmxMQ0JqWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk1hWE4wWlc0Z2RHOGdSRTlOSUdWMlpXNTBjeUJrZFhKcGJtY2dkR2hsSUdOaGNIUjFjbVVnY0doaGMyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3UkU5TlJYWmxiblJVWVhKblpYUjlJSFJoY21kbGRDQkVUMDBnWld4bGJXVnVkQ0IwYnlCeVpXZHBjM1JsY2lCc2FYTjBaVzVsY2lCdmJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdWMlpXNTBWSGx3WlNCRmRtVnVkQ0IwZVhCbExDQmxMbWN1SUNkamJHbGpheWNnYjNJZ0oyMXZkWE5sYjNabGNpY3VYRzRnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlHTmhiR3hpWVdOcklFTmhiR3hpWVdOcklHWjFibU4wYVc5dUxseHVJQ0FnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUU5aWFtVmpkQ0IzYVhSb0lHRWdZSEpsYlc5MlpXQWdiV1YwYUc5a0xseHVJQ0FnS2k5Y2JpQWdZMkZ3ZEhWeVpUb2dablZ1WTNScGIyNG9kR0Z5WjJWMExDQmxkbVZ1ZEZSNWNHVXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdhV1lnS0NGMFlYSm5aWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWtnZTF4dUlDQWdJQ0FnYVdZZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNkQmRIUmxiWEIwWldRZ2RHOGdiR2x6ZEdWdUlIUnZJR1YyWlc1MGN5QmtkWEpwYm1jZ2RHaGxJR05oY0hSMWNtVWdjR2hoYzJVZ2IyNGdZU0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5Zbkp2ZDNObGNpQjBhR0YwSUdSdlpYTWdibTkwSUhOMWNIQnZjblFnZEdobElHTmhjSFIxY21VZ2NHaGhjMlV1SUZsdmRYSWdZWEJ3YkdsallYUnBiMjRnSnlBclhHNGdJQ0FnSUNBZ0lDQWdKM2RwYkd3Z2JtOTBJSEpsWTJWcGRtVWdjMjl0WlNCbGRtVnVkSE11SjF4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2NtVnRiM1psT2lCbGJYQjBlVVoxYm1OMGFXOXVYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMFlYSm5aWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhsZG1WdWRGUjVjR1VzSUdOaGJHeGlZV05yTENCMGNuVmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJSEpsYlc5MlpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHRnlaMlYwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1pYWmxiblJVZVhCbExDQmpZV3hzWW1GamF5d2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJSEpsWjJsemRHVnlSR1ZtWVhWc2REb2dablZ1WTNScGIyNG9LU0I3ZlZ4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JGZG1WdWRFeHBjM1JsYm1WeU8xeHVJbDE5IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKXt2YXIgdmFsaWQ9SW5zdGFuY2VIYW5kbGUmJkluc3RhbmNlSGFuZGxlLnRyYXZlcnNlVHdvUGhhc2UmJkluc3RhbmNlSGFuZGxlLnRyYXZlcnNlRW50ZXJMZWF2ZTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCh2YWxpZCxcIkluc3RhbmNlSGFuZGxlIG5vdCBpbmplY3RlZCBiZWZvcmUgdXNlIVwiKTppbnZhcmlhbnQodmFsaWQpfXZhciBFdmVudFBsdWdpblJlZ2lzdHJ5PXJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIiksRXZlbnRQbHVnaW5VdGlscz1yZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpLGFjY3VtdWxhdGVJbnRvPXJlcXVpcmUoXCIuL2FjY3VtdWxhdGVJbnRvXCIpLGZvckVhY2hBY2N1bXVsYXRlZD1yZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxsaXN0ZW5lckJhbms9e30sZXZlbnRRdWV1ZT1udWxsLGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZT1mdW5jdGlvbihldmVudCl7aWYoZXZlbnQpe3ZhciBleGVjdXRlRGlzcGF0Y2g9RXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2gsUGx1Z2luTW9kdWxlPUV2ZW50UGx1Z2luUmVnaXN0cnkuZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQoZXZlbnQpO1BsdWdpbk1vZHVsZSYmUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaCYmKGV4ZWN1dGVEaXNwYXRjaD1QbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoKSxFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCxleGVjdXRlRGlzcGF0Y2gpLGV2ZW50LmlzUGVyc2lzdGVudCgpfHxldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KX19LEluc3RhbmNlSGFuZGxlPW51bGwsRXZlbnRQbHVnaW5IdWI9e2luamVjdGlvbjp7aW5qZWN0TW91bnQ6RXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQsaW5qZWN0SW5zdGFuY2VIYW5kbGU6ZnVuY3Rpb24oSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZSl7SW5zdGFuY2VIYW5kbGU9SW5qZWN0ZWRJbnN0YW5jZUhhbmRsZSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCl9LGdldEluc3RhbmNlSGFuZGxlOmZ1bmN0aW9uKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpLEluc3RhbmNlSGFuZGxlfSxpbmplY3RFdmVudFBsdWdpbk9yZGVyOkV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6RXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9LGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczpFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLHB1dExpc3RlbmVyOmZ1bmN0aW9uKGlkLHJlZ2lzdHJhdGlvbk5hbWUsbGlzdGVuZXIpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCFsaXN0ZW5lcnx8XCJmdW5jdGlvblwiPT10eXBlb2YgbGlzdGVuZXIsXCJFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzXCIscmVnaXN0cmF0aW9uTmFtZSx0eXBlb2YgbGlzdGVuZXIpOmludmFyaWFudCghbGlzdGVuZXJ8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGxpc3RlbmVyKTt2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWU9bGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdfHwobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdPXt9KTtiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF09bGlzdGVuZXJ9LGdldExpc3RlbmVyOmZ1bmN0aW9uKGlkLHJlZ2lzdHJhdGlvbk5hbWUpe3ZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZT1saXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV07cmV0dXJuIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lJiZiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF19LGRlbGV0ZUxpc3RlbmVyOmZ1bmN0aW9uKGlkLHJlZ2lzdHJhdGlvbk5hbWUpe3ZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZT1saXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV07YmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUmJmRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF19LGRlbGV0ZUFsbExpc3RlbmVyczpmdW5jdGlvbihpZCl7Zm9yKHZhciByZWdpc3RyYXRpb25OYW1lIGluIGxpc3RlbmVyQmFuaylkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbih0b3BMZXZlbFR5cGUsdG9wTGV2ZWxUYXJnZXQsdG9wTGV2ZWxUYXJnZXRJRCxuYXRpdmVFdmVudCl7Zm9yKHZhciBldmVudHMscGx1Z2lucz1FdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMsaT0wLGw9cGx1Z2lucy5sZW5ndGg7bD5pO2krKyl7dmFyIHBvc3NpYmxlUGx1Z2luPXBsdWdpbnNbaV07aWYocG9zc2libGVQbHVnaW4pe3ZhciBleHRyYWN0ZWRFdmVudHM9cG9zc2libGVQbHVnaW4uZXh0cmFjdEV2ZW50cyh0b3BMZXZlbFR5cGUsdG9wTGV2ZWxUYXJnZXQsdG9wTGV2ZWxUYXJnZXRJRCxuYXRpdmVFdmVudCk7ZXh0cmFjdGVkRXZlbnRzJiYoZXZlbnRzPWFjY3VtdWxhdGVJbnRvKGV2ZW50cyxleHRyYWN0ZWRFdmVudHMpKX19cmV0dXJuIGV2ZW50c30sZW5xdWV1ZUV2ZW50czpmdW5jdGlvbihldmVudHMpe2V2ZW50cyYmKGV2ZW50UXVldWU9YWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSxldmVudHMpKX0scHJvY2Vzc0V2ZW50UXVldWU6ZnVuY3Rpb24oKXt2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWU9ZXZlbnRRdWV1ZTtldmVudFF1ZXVlPW51bGwsZm9yRWFjaEFjY3VtdWxhdGVkKHByb2Nlc3NpbmdFdmVudFF1ZXVlLGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIWV2ZW50UXVldWUsXCJwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC5cIik6aW52YXJpYW50KCFldmVudFF1ZXVlKX0sX19wdXJnZTpmdW5jdGlvbigpe2xpc3RlbmVyQmFuaz17fX0sX19nZXRMaXN0ZW5lckJhbms6ZnVuY3Rpb24oKXtyZXR1cm4gbGlzdGVuZXJCYW5rfX07bW9kdWxlLmV4cG9ydHM9RXZlbnRQbHVnaW5IdWI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZSWFpsYm5SUWJIVm5hVzVJZFdJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmRCTEZsQlowUkJMRk5CUVZNc01FSkJRMUFzUjBGQlNTeFBRVU5HTEdkQ1FVTkJMR1ZCUVdVc2EwSkJRMllzWlVGQlpTeHJRa0ZEYUVJc1owSkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExFMUJRMEVzTWtOQlEwVXNWVUZCVlN4UFFYUkVhRUlzUjBGQlNTeHhRa0ZCYzBJc1VVRkJVU3g1UWtGRE9VSXNhVUpCUVcxQ0xGRkJRVkVzYzBKQlJUTkNMR1ZCUVdsQ0xGRkJRVkVzYjBKQlEzcENMRzFDUVVGeFFpeFJRVUZSTEhkQ1FVTTNRaXhWUVVGWkxGRkJRVkVzWlVGTGNFSXNaMEpCVFVFc1YwRkJZU3hMUVZGaUxEUkNRVUU0UWl4VFFVRlRMRTlCUTNwRExFZEJRVWtzVFVGQlR5eERRVU5VTEVkQlFVa3NhVUpCUVd0Q0xHbENRVUZwUWl4blFrRkZia01zWVVGQlpTeHZRa0ZCYjBJc2QwSkJRWGRDTEUxQlF6TkVMR1ZCUVdkQ0xHRkJRV0VzYTBKQlF5OUNMR2RDUVVGclFpeGhRVUZoTEdsQ1FVVnFReXhwUWtGQmFVSXNlVUpCUVhsQ0xFMUJRVThzYVVKQlJUVkRMRTFCUVUwc1owSkJRMVFzVFVGQlRTeFpRVUZaTEZGQlFWRXNVMEZUTlVJc1pVRkJhVUlzUzBGdFEycENMR2RDUVV0R0xGZEJUVVVzV1VGQllTeHBRa0ZCYVVJc1ZVRkJWU3haUVUxNFF5eHhRa0ZCYzBJc1UwRkJVeXgzUWtGRE4wSXNaVUZCYVVJc2RVSkJRMklzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRlZCUXk5Q0xEQkNRVWxLTEd0Q1FVRnRRaXhYUVVscVFpeE5RVWhKTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hWUVVNdlFpeDVRa0ZGU3l4blFrRlBWQ3gxUWtGQmQwSXNiMEpCUVc5Q0xIVkNRVXMxUXl4NVFrRkJNRUlzYjBKQlFXOUNMREJDUVVsb1JDeDVRa0ZCTUVJc2IwSkJRVzlDTEhsQ1FVVTVReXgzUWtGQmVVSXNiMEpCUVc5Q0xIZENRVk0zUXl4WlFVRmhMRk5CUVZNc1IwRkJTU3hwUWtGQmEwSXNWVUZEZWtNc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWMEZEZEVNc1ZVRkJaME1zYTBKQlFXSXNWVUZEY0VJc05rUkJRMEVzZFVKQlFYbENMRmRCUTNaQ0xGZEJRVmNzVlVGQlowTXNhMEpCUVdJc1ZVRkZiRU1zU1VGQlNTeDVRa0ZEUml4aFFVRmhMRzlDUVVGelFpeGhRVUZoTEhGQ1FVTnNSQ3g1UWtGQmQwSXNTVUZCVFN4VlFWRm9ReXhaUVVGaExGTkJRVk1zUjBGQlNTeHJRa0ZEZUVJc1IwRkJTU3g1UWtGQk1FSXNZVUZCWVN4cFFrRkRNME1zVDBGQlR5d3dRa0ZCTWtJc2QwSkJRWGRDTEV0QlV6VkVMR1ZCUVdkQ0xGTkJRVk1zUjBGQlNTeHJRa0ZETTBJc1IwRkJTU3g1UWtGQk1FSXNZVUZCWVN4cFFrRkRka01zWjBOQlEwc3NlVUpCUVhkQ0xFdEJVMjVETEcxQ1FVRnZRaXhUUVVGVExFbEJRek5DTEVsQlFVc3NSMEZCU1N4dlFrRkJiMElzYjBKQlEzQkNMR05CUVdFc2EwSkJRV3RDTEV0QlpURkRMR05CUVdVc1UwRkRXQ3hoUVVOQkxHVkJRMEVzYVVKQlEwRXNZVUZIUml4SlFVRkxMRWRCUmtRc1VVRkRRU3hSUVVGVkxHOUNRVUZ2UWl4UlFVTjZRaXhGUVVGSkxFVkJRVWNzUlVGQlNTeFJRVUZSTEU5QlFWa3NSVUZCU2l4RlFVRlBMRWxCUVVzc1EwRkZPVU1zUjBGQlNTeG5Ra0ZCYVVJc1VVRkJVU3hGUVVNM1FpeEpRVUZKTEdWQlFXZENMRU5CUTJ4Q0xFZEJRVWtzYVVKQlFXdENMR1ZCUVdVc1kwRkRia01zWVVGRFFTeGxRVU5CTEdsQ1FVTkJMRmxCUlVVc2JVSkJRMFlzVDBGQlV5eGxRVUZsTEU5QlFWRXNiVUpCU1hSRExFMUJRVThzVTBGVlZDeGpRVUZsTEZOQlFWTXNVVUZEYkVJc1UwRkRSaXhYUVVGaExHVkJRV1VzVjBGQldTeFZRVk0xUXl4clFrRkJiVUlzVjBGSGFrSXNSMEZCU1N4elFrRkJkVUlzVlVGRE0wSXNXVUZCWVN4TFFVTmlMRzFDUVVGdFFpeHhRa0ZCYzBJc05rSkJRM2hETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGZEJRM1JETEZkQlEwUXNkMGxCUlVVc1YwRkJWeXhoUVUxcVFpeFJRVUZUTEZkQlExQXNhVUpCUjBZc2EwSkJRVzFDTEZkQlEycENMRTFCUVU4c1pVRkxXQ3hSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JGZG1WdWRGQnNkV2RwYmtoMVlseHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmtnUFNCeVpYRjFhWEpsS0Z3aUxpOUZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVYQ0lwTzF4dWRtRnlJRVYyWlc1MFVHeDFaMmx1VlhScGJITWdQU0J5WlhGMWFYSmxLRndpTGk5RmRtVnVkRkJzZFdkcGJsVjBhV3h6WENJcE8xeHVYRzUyWVhJZ1lXTmpkVzExYkdGMFpVbHVkRzhnUFNCeVpYRjFhWEpsS0Z3aUxpOWhZMk4xYlhWc1lYUmxTVzUwYjF3aUtUdGNiblpoY2lCbWIzSkZZV05vUVdOamRXMTFiR0YwWldRZ1BTQnlaWEYxYVhKbEtGd2lMaTltYjNKRllXTm9RV05qZFcxMWJHRjBaV1JjSWlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZhVzUyWVhKcFlXNTBYQ0lwTzF4dVhHNHZLaXBjYmlBcUlFbHVkR1Z5Ym1Gc0lITjBiM0psSUdadmNpQmxkbVZ1ZENCc2FYTjBaVzVsY25OY2JpQXFMMXh1ZG1GeUlHeHBjM1JsYm1WeVFtRnVheUE5SUh0OU8xeHVYRzR2S2lwY2JpQXFJRWx1ZEdWeWJtRnNJSEYxWlhWbElHOW1JR1YyWlc1MGN5QjBhR0YwSUdoaGRtVWdZV05qZFcxMWJHRjBaV1FnZEdobGFYSWdaR2x6Y0dGMFkyaGxjeUJoYm1RZ1lYSmxYRzRnS2lCM1lXbDBhVzVuSUhSdklHaGhkbVVnZEdobGFYSWdaR2x6Y0dGMFkyaGxjeUJsZUdWamRYUmxaQzVjYmlBcUwxeHVkbUZ5SUdWMlpXNTBVWFZsZFdVZ1BTQnVkV3hzTzF4dVhHNHZLaXBjYmlBcUlFUnBjM0JoZEdOb1pYTWdZVzRnWlhabGJuUWdZVzVrSUhKbGJHVmhjMlZ6SUdsMElHSmhZMnNnYVc1MGJ5QjBhR1VnY0c5dmJDd2dkVzVzWlhOeklIQmxjbk5wYzNSbGJuUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIcy9iMkpxWldOMGZTQmxkbVZ1ZENCVGVXNTBhR1YwYVdNZ1pYWmxiblFnZEc4Z1ltVWdaR2x6Y0dGMFkyaGxaQzVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm5aaGNpQmxlR1ZqZFhSbFJHbHpjR0YwWTJobGMwRnVaRkpsYkdWaGMyVWdQU0JtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1SUNCcFppQW9aWFpsYm5RcElIdGNiaUFnSUNCMllYSWdaWGhsWTNWMFpVUnBjM0JoZEdOb0lEMGdSWFpsYm5SUWJIVm5hVzVWZEdsc2N5NWxlR1ZqZFhSbFJHbHpjR0YwWTJnN1hHNGdJQ0FnTHk4Z1VHeDFaMmx1Y3lCallXNGdjSEp2ZG1sa1pTQmpkWE4wYjIwZ1ltVm9ZWFpwYjNJZ2QyaGxiaUJrYVhOd1lYUmphR2x1WnlCbGRtVnVkSE11WEc0Z0lDQWdkbUZ5SUZCc2RXZHBiazF2WkhWc1pTQTlJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmt1WjJWMFVHeDFaMmx1VFc5a2RXeGxSbTl5UlhabGJuUW9aWFpsYm5RcE8xeHVJQ0FnSUdsbUlDaFFiSFZuYVc1TmIyUjFiR1VnSmlZZ1VHeDFaMmx1VFc5a2RXeGxMbVY0WldOMWRHVkVhWE53WVhSamFDa2dlMXh1SUNBZ0lDQWdaWGhsWTNWMFpVUnBjM0JoZEdOb0lEMGdVR3gxWjJsdVRXOWtkV3hsTG1WNFpXTjFkR1ZFYVhOd1lYUmphRHRjYmlBZ0lDQjlYRzRnSUNBZ1JYWmxiblJRYkhWbmFXNVZkR2xzY3k1bGVHVmpkWFJsUkdsemNHRjBZMmhsYzBsdVQzSmtaWElvWlhabGJuUXNJR1Y0WldOMWRHVkVhWE53WVhSamFDazdYRzVjYmlBZ0lDQnBaaUFvSVdWMlpXNTBMbWx6VUdWeWMybHpkR1Z1ZENncEtTQjdYRzRnSUNBZ0lDQmxkbVZ1ZEM1amIyNXpkSEoxWTNSdmNpNXlaV3hsWVhObEtHVjJaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ0xTQmdTVzV6ZEdGdVkyVklZVzVrYkdWZ09pQmJjbVZ4ZFdseVpXUmRJRTF2WkhWc1pTQjBhR0YwSUhCbGNtWnZjbTF6SUd4dloybGpZV3dnZEhKaGRtVnljMkZzY3lCdlppQkVUMDFjYmlBcUlDQWdhR2xsY21GeVkyaDVJR2RwZG1WdUlHbGtjeUJ2WmlCMGFHVWdiRzluYVdOaGJDQkVUMDBnWld4bGJXVnVkSE1nYVc1MmIyeDJaV1F1WEc0Z0tpOWNiblpoY2lCSmJuTjBZVzVqWlVoaGJtUnNaU0E5SUc1MWJHdzdYRzVjYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsU1c1emRHRnVZMlZJWVc1a2JHVW9LU0I3WEc0Z0lIWmhjaUIyWVd4cFpDQTlYRzRnSUNBZ1NXNXpkR0Z1WTJWSVlXNWtiR1VnSmlaY2JpQWdJQ0JKYm5OMFlXNWpaVWhoYm1Sc1pTNTBjbUYyWlhKelpWUjNiMUJvWVhObElDWW1YRzRnSUNBZ1NXNXpkR0Z1WTJWSVlXNWtiR1V1ZEhKaGRtVnljMlZGYm5SbGNreGxZWFpsTzF4dUlDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUhaaGJHbGtMRnh1SUNBZ0lDZEpibk4wWVc1alpVaGhibVJzWlNCdWIzUWdhVzVxWldOMFpXUWdZbVZtYjNKbElIVnpaU0VuWEc0Z0lDa2dPaUJwYm5aaGNtbGhiblFvZG1Gc2FXUXBLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlVhR2x6SUdseklHRWdkVzVwWm1sbFpDQnBiblJsY21aaFkyVWdabTl5SUdWMlpXNTBJSEJzZFdkcGJuTWdkRzhnWW1VZ2FXNXpkR0ZzYkdWa0lHRnVaQ0JqYjI1bWFXZDFjbVZrTGx4dUlDcGNiaUFxSUVWMlpXNTBJSEJzZFdkcGJuTWdZMkZ1SUdsdGNHeGxiV1Z1ZENCMGFHVWdabTlzYkc5M2FXNW5JSEJ5YjNCbGNuUnBaWE02WEc0Z0tseHVJQ29nSUNCZ1pYaDBjbUZqZEVWMlpXNTBjMkFnZTJaMWJtTjBhVzl1S0hOMGNtbHVaeXdnUkU5TlJYWmxiblJVWVhKblpYUXNJSE4wY21sdVp5d2diMkpxWldOMEtUb2dLbjFjYmlBcUlDQWdJQ0JTWlhGMWFYSmxaQzRnVjJobGJpQmhJSFJ2Y0Mxc1pYWmxiQ0JsZG1WdWRDQnBjeUJtYVhKbFpDd2dkR2hwY3lCdFpYUm9iMlFnYVhNZ1pYaHdaV04wWldRZ2RHOWNiaUFxSUNBZ0lDQmxlSFJ5WVdOMElITjViblJvWlhScFl5QmxkbVZ1ZEhNZ2RHaGhkQ0IzYVd4c0lHbHVJSFIxY200Z1ltVWdjWFZsZFdWa0lHRnVaQ0JrYVhOd1lYUmphR1ZrTGx4dUlDcGNiaUFxSUNBZ1lHVjJaVzUwVkhsd1pYTmdJSHR2WW1wbFkzUjlYRzRnS2lBZ0lDQWdUM0IwYVc5dVlXd3NJSEJzZFdkcGJuTWdkR2hoZENCbWFYSmxJR1YyWlc1MGN5QnRkWE4wSUhCMVlteHBjMmdnWVNCdFlYQndhVzVuSUc5bUlISmxaMmx6ZEhKaGRHbHZibHh1SUNvZ0lDQWdJRzVoYldWeklIUm9ZWFFnWVhKbElIVnpaV1FnZEc4Z2NtVm5hWE4wWlhJZ2JHbHpkR1Z1WlhKekxpQldZV3gxWlhNZ2IyWWdkR2hwY3lCdFlYQndhVzVuSUcxMWMzUmNiaUFxSUNBZ0lDQmlaU0J2WW1wbFkzUnpJSFJvWVhRZ1kyOXVkR0ZwYmlCZ2NtVm5hWE4wY21GMGFXOXVUbUZ0WldBZ2IzSWdZSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWellDNWNiaUFxWEc0Z0tpQWdJR0JsZUdWamRYUmxSR2x6Y0dGMFkyaGdJSHRtZFc1amRHbHZiaWh2WW1wbFkzUXNJR1oxYm1OMGFXOXVMQ0J6ZEhKcGJtY3BmVnh1SUNvZ0lDQWdJRTl3ZEdsdmJtRnNMQ0JoYkd4dmQzTWdjR3gxWjJsdWN5QjBieUJ2ZG1WeWNtbGtaU0JvYjNjZ1lXNGdaWFpsYm5RZ1oyVjBjeUJrYVhOd1lYUmphR1ZrTGlCQ2VWeHVJQ29nSUNBZ0lHUmxabUYxYkhRc0lIUm9aU0JzYVhOMFpXNWxjaUJwY3lCemFXMXdiSGtnYVc1MmIydGxaQzVjYmlBcVhHNGdLaUJGWVdOb0lIQnNkV2RwYmlCMGFHRjBJR2x6SUdsdWFtVmpkR1ZrSUdsdWRHOGdZRVYyWlc1MGMxQnNkV2RwYmtoMVltQWdhWE1nYVcxdFpXUnBZWFJsYkhrZ2IzQmxjbUZpYkdVdVhHNGdLbHh1SUNvZ1FIQjFZbXhwWTF4dUlDb3ZYRzUyWVhJZ1JYWmxiblJRYkhWbmFXNUlkV0lnUFNCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxbGRHaHZaSE1nWm05eUlHbHVhbVZqZEdsdVp5QmtaWEJsYm1SbGJtTnBaWE11WEc0Z0lDQXFMMXh1SUNCcGJtcGxZM1JwYjI0NklIdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQkpibXBsWTNSbFpFMXZkVzUwWEc0Z0lDQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHVhbVZqZEUxdmRXNTBPaUJGZG1WdWRGQnNkV2RwYmxWMGFXeHpMbWx1YW1WamRHbHZiaTVwYm1wbFkzUk5iM1Z1ZEN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCSmJtcGxZM1JsWkVsdWMzUmhibU5sU0dGdVpHeGxYRzRnSUNBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWFtVmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bE9pQm1kVzVqZEdsdmJpaEpibXBsWTNSbFpFbHVjM1JoYm1ObFNHRnVaR3hsS1NCN1hHNGdJQ0FnSUNCSmJuTjBZVzVqWlVoaGJtUnNaU0E5SUVsdWFtVmpkR1ZrU1c1emRHRnVZMlZJWVc1a2JHVTdYRzRnSUNBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQWdJSFpoYkdsa1lYUmxTVzV6ZEdGdVkyVklZVzVrYkdVb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1oyVjBTVzV6ZEdGdVkyVklZVzVrYkdVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdJQ0IyWVd4cFpHRjBaVWx1YzNSaGJtTmxTR0Z1Wkd4bEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z1NXNXpkR0Z1WTJWSVlXNWtiR1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3WVhKeVlYbDlJRWx1YW1WamRHVmtSWFpsYm5SUWJIVm5hVzVQY21SbGNseHVJQ0FnSUNBcUlFQndkV0pzYVdOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm1wbFkzUkZkbVZ1ZEZCc2RXZHBiazl5WkdWeU9pQkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbWx1YW1WamRFVjJaVzUwVUd4MVoybHVUM0prWlhJc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2FXNXFaV04wWldST1lXMWxjMVJ2VUd4MVoybHVjeUJOWVhBZ1puSnZiU0J1WVcxbGN5QjBieUJ3YkhWbmFXNGdiVzlrZFd4bGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCcGJtcGxZM1JGZG1WdWRGQnNkV2RwYm5OQ2VVNWhiV1U2SUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rdWFXNXFaV04wUlhabGJuUlFiSFZuYVc1elFubE9ZVzFsWEc1Y2JpQWdmU3hjYmx4dUlDQmxkbVZ1ZEU1aGJXVkVhWE53WVhSamFFTnZibVpwWjNNNklFVjJaVzUwVUd4MVoybHVVbVZuYVhOMGNua3VaWFpsYm5ST1lXMWxSR2x6Y0dGMFkyaERiMjVtYVdkekxGeHVYRzRnSUhKbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpPaUJGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1TG5KbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRkRzl5WlhNZ1lHeHBjM1JsYm1WeVlDQmhkQ0JnYkdsemRHVnVaWEpDWVc1clczSmxaMmx6ZEhKaGRHbHZiazVoYldWZFcybGtYV0F1SUVseklHbGtaVzF3YjNSbGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JwWkNCSlJDQnZaaUIwYUdVZ1JFOU5JR1ZzWlcxbGJuUXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpXZHBjM1J5WVhScGIyNU9ZVzFsSUU1aGJXVWdiMllnYkdsemRHVnVaWElnS0dVdVp5NGdZRzl1UTJ4cFkydGdLUzVjYmlBZ0lDb2dRSEJoY21GdElIcy9ablZ1WTNScGIyNTlJR3hwYzNSbGJtVnlJRlJvWlNCallXeHNZbUZqYXlCMGJ5QnpkRzl5WlM1Y2JpQWdJQ292WEc0Z0lIQjFkRXhwYzNSbGJtVnlPaUJtZFc1amRHbHZiaWhwWkN3Z2NtVm5hWE4wY21GMGFXOXVUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnSVd4cGMzUmxibVZ5SUh4OElIUjVjR1Z2WmlCc2FYTjBaVzVsY2lBOVBUMGdKMloxYm1OMGFXOXVKeXhjYmlBZ0lDQWdJQ2RGZUhCbFkzUmxaQ0FsY3lCc2FYTjBaVzVsY2lCMGJ5QmlaU0JoSUdaMWJtTjBhVzl1TENCcGJuTjBaV0ZrSUdkdmRDQjBlWEJsSUNWekp5eGNiaUFnSUNBZ0lISmxaMmx6ZEhKaGRHbHZiazVoYldVc0lIUjVjR1Z2WmlCc2FYTjBaVzVsY2x4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb0lXeHBjM1JsYm1WeUlIeDhJSFI1Y0dWdlppQnNhWE4wWlc1bGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlrcE8xeHVYRzRnSUNBZ2RtRnlJR0poYm10R2IzSlNaV2RwYzNSeVlYUnBiMjVPWVcxbElEMWNiaUFnSUNBZ0lHeHBjM1JsYm1WeVFtRnVhMXR5WldkcGMzUnlZWFJwYjI1T1lXMWxYU0I4ZkNBb2JHbHpkR1Z1WlhKQ1lXNXJXM0psWjJsemRISmhkR2x2Yms1aGJXVmRJRDBnZTMwcE8xeHVJQ0FnSUdKaGJtdEdiM0pTWldkcGMzUnlZWFJwYjI1T1lXMWxXMmxrWFNBOUlHeHBjM1JsYm1WeU8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdkR2hsSUVSUFRTQmxiR1Z0Wlc1MExseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY21WbmFYTjBjbUYwYVc5dVRtRnRaU0JPWVcxbElHOW1JR3hwYzNSbGJtVnlJQ2hsTG1jdUlHQnZia05zYVdOcllDa3VYRzRnSUNBcUlFQnlaWFIxY200Z2V6OW1kVzVqZEdsdmJuMGdWR2hsSUhOMGIzSmxaQ0JqWVd4c1ltRmpheTVjYmlBZ0lDb3ZYRzRnSUdkbGRFeHBjM1JsYm1WeU9pQm1kVzVqZEdsdmJpaHBaQ3dnY21WbmFYTjBjbUYwYVc5dVRtRnRaU2tnZTF4dUlDQWdJSFpoY2lCaVlXNXJSbTl5VW1WbmFYTjBjbUYwYVc5dVRtRnRaU0E5SUd4cGMzUmxibVZ5UW1GdWExdHlaV2RwYzNSeVlYUnBiMjVPWVcxbFhUdGNiaUFnSUNCeVpYUjFjbTRnWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVWdKaVlnWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVmJhV1JkTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaV3hsZEdWeklHRWdiR2x6ZEdWdVpYSWdabkp2YlNCMGFHVWdjbVZuYVhOMGNtRjBhVzl1SUdKaGJtc3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JwWkNCSlJDQnZaaUIwYUdVZ1JFOU5JR1ZzWlcxbGJuUXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpXZHBjM1J5WVhScGIyNU9ZVzFsSUU1aGJXVWdiMllnYkdsemRHVnVaWElnS0dVdVp5NGdZRzl1UTJ4cFkydGdLUzVjYmlBZ0lDb3ZYRzRnSUdSbGJHVjBaVXhwYzNSbGJtVnlPaUJtZFc1amRHbHZiaWhwWkN3Z2NtVm5hWE4wY21GMGFXOXVUbUZ0WlNrZ2UxeHVJQ0FnSUhaaGNpQmlZVzVyUm05eVVtVm5hWE4wY21GMGFXOXVUbUZ0WlNBOUlHeHBjM1JsYm1WeVFtRnVhMXR5WldkcGMzUnlZWFJwYjI1T1lXMWxYVHRjYmlBZ0lDQnBaaUFvWW1GdWEwWnZjbEpsWjJsemRISmhkR2x2Yms1aGJXVXBJSHRjYmlBZ0lDQWdJR1JsYkdWMFpTQmlZVzVyUm05eVVtVm5hWE4wY21GMGFXOXVUbUZ0WlZ0cFpGMDdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFWld4bGRHVnpJR0ZzYkNCc2FYTjBaVzVsY25NZ1ptOXlJSFJvWlNCRVQwMGdaV3hsYldWdWRDQjNhWFJvSUhSb1pTQnpkWEJ3YkdsbFpDQkpSQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdsa0lFbEVJRzltSUhSb1pTQkVUMDBnWld4bGJXVnVkQzVjYmlBZ0lDb3ZYRzRnSUdSbGJHVjBaVUZzYkV4cGMzUmxibVZ5Y3pvZ1puVnVZM1JwYjI0b2FXUXBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnlaV2RwYzNSeVlYUnBiMjVPWVcxbElHbHVJR3hwYzNSbGJtVnlRbUZ1YXlrZ2UxeHVJQ0FnSUNBZ1pHVnNaWFJsSUd4cGMzUmxibVZ5UW1GdWExdHlaV2RwYzNSeVlYUnBiMjVPWVcxbFhWdHBaRjA3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmJHeHZkM01nY21WbmFYTjBaWEpsWkNCd2JIVm5hVzV6SUdGdUlHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdWNGRISmhZM1FnWlhabGJuUnpJR1p5YjIwZ2RHOXdMV3hsZG1Wc1hHNGdJQ0FxSUc1aGRHbDJaU0JpY205M2MyVnlJR1YyWlc1MGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFJ2Y0V4bGRtVnNWSGx3WlNCU1pXTnZjbVFnWm5KdmJTQmdSWFpsYm5SRGIyNXpkR0Z1ZEhOZ0xseHVJQ0FnS2lCQWNHRnlZVzBnZTBSUFRVVjJaVzUwVkdGeVoyVjBmU0IwYjNCTVpYWmxiRlJoY21kbGRDQlVhR1VnYkdsemRHVnVhVzVuSUdOdmJYQnZibVZ1ZENCeWIyOTBJRzV2WkdVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IwYjNCTVpYWmxiRlJoY21kbGRFbEVJRWxFSUc5bUlHQjBiM0JNWlhabGJGUmhjbWRsZEdBdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J1WVhScGRtVkZkbVZ1ZENCT1lYUnBkbVVnWW5KdmQzTmxjaUJsZG1WdWRDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN0tuMGdRVzRnWVdOamRXMTFiR0YwYVc5dUlHOW1JSE41Ym5Sb1pYUnBZeUJsZG1WdWRITXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdaWGgwY21GamRFVjJaVzUwY3pvZ1puVnVZM1JwYjI0b1hHNGdJQ0FnSUNCMGIzQk1aWFpsYkZSNWNHVXNYRzRnSUNBZ0lDQjBiM0JNWlhabGJGUmhjbWRsZEN4Y2JpQWdJQ0FnSUhSdmNFeGxkbVZzVkdGeVoyVjBTVVFzWEc0Z0lDQWdJQ0J1WVhScGRtVkZkbVZ1ZENrZ2UxeHVJQ0FnSUhaaGNpQmxkbVZ1ZEhNN1hHNGdJQ0FnZG1GeUlIQnNkV2RwYm5NZ1BTQkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbkJzZFdkcGJuTTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQndiSFZuYVc1ekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdMeThnVG05MElHVjJaWEo1SUhCc2RXZHBiaUJwYmlCMGFHVWdiM0prWlhKcGJtY2diV0Y1SUdKbElHeHZZV1JsWkNCaGRDQnlkVzUwYVcxbExseHVJQ0FnSUNBZ2RtRnlJSEJ2YzNOcFlteGxVR3gxWjJsdUlEMGdjR3gxWjJsdWMxdHBYVHRjYmlBZ0lDQWdJR2xtSUNod2IzTnphV0pzWlZCc2RXZHBiaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdaWGgwY21GamRHVmtSWFpsYm5SeklEMGdjRzl6YzJsaWJHVlFiSFZuYVc0dVpYaDBjbUZqZEVWMlpXNTBjeWhjYmlBZ0lDQWdJQ0FnSUNCMGIzQk1aWFpsYkZSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnZEc5d1RHVjJaV3hVWVhKblpYUXNYRzRnSUNBZ0lDQWdJQ0FnZEc5d1RHVjJaV3hVWVhKblpYUkpSQ3hjYmlBZ0lDQWdJQ0FnSUNCdVlYUnBkbVZGZG1WdWRGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYaDBjbUZqZEdWa1JYWmxiblJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdaWFpsYm5SeklEMGdZV05qZFcxMWJHRjBaVWx1ZEc4b1pYWmxiblJ6TENCbGVIUnlZV04wWldSRmRtVnVkSE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmxkbVZ1ZEhNN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVZ1Y1hWbGRXVnpJR0VnYzNsdWRHaGxkR2xqSUdWMlpXNTBJSFJvWVhRZ2MyaHZkV3hrSUdKbElHUnBjM0JoZEdOb1pXUWdkMmhsYmx4dUlDQWdLaUJnY0hKdlkyVnpjMFYyWlc1MFVYVmxkV1ZnSUdseklHbHVkbTlyWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnWlhabGJuUnpJRUZ1SUdGalkzVnRkV3hoZEdsdmJpQnZaaUJ6ZVc1MGFHVjBhV01nWlhabGJuUnpMbHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvdlhHNGdJR1Z1Y1hWbGRXVkZkbVZ1ZEhNNklHWjFibU4wYVc5dUtHVjJaVzUwY3lrZ2UxeHVJQ0FnSUdsbUlDaGxkbVZ1ZEhNcElIdGNiaUFnSUNBZ0lHVjJaVzUwVVhWbGRXVWdQU0JoWTJOMWJYVnNZWFJsU1c1MGJ5aGxkbVZ1ZEZGMVpYVmxMQ0JsZG1WdWRITXBPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUkdsemNHRjBZMmhsY3lCaGJHd2djM2x1ZEdobGRHbGpJR1YyWlc1MGN5QnZiaUIwYUdVZ1pYWmxiblFnY1hWbGRXVXVYRzRnSUNBcVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ2NISnZZMlZ6YzBWMlpXNTBVWFZsZFdVNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDOHZJRk5sZENCZ1pYWmxiblJSZFdWMVpXQWdkRzhnYm5Wc2JDQmlaV1p2Y21VZ2NISnZZMlZ6YzJsdVp5QnBkQ0J6YnlCMGFHRjBJSGRsSUdOaGJpQjBaV3hzSUdsbUlHMXZjbVZjYmlBZ0lDQXZMeUJsZG1WdWRITWdaMlYwSUdWdWNYVmxkV1ZrSUhkb2FXeGxJSEJ5YjJObGMzTnBibWN1WEc0Z0lDQWdkbUZ5SUhCeWIyTmxjM05wYm1kRmRtVnVkRkYxWlhWbElEMGdaWFpsYm5SUmRXVjFaVHRjYmlBZ0lDQmxkbVZ1ZEZGMVpYVmxJRDBnYm5Wc2JEdGNiaUFnSUNCbWIzSkZZV05vUVdOamRXMTFiR0YwWldRb2NISnZZMlZ6YzJsdVowVjJaVzUwVVhWbGRXVXNJR1Y0WldOMWRHVkVhWE53WVhSamFHVnpRVzVrVW1Wc1pXRnpaU2s3WEc0Z0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lDRmxkbVZ1ZEZGMVpYVmxMRnh1SUNBZ0lDQWdKM0J5YjJObGMzTkZkbVZ1ZEZGMVpYVmxLQ2s2SUVGa1pHbDBhVzl1WVd3Z1pYWmxiblJ6SUhkbGNtVWdaVzV4ZFdWMVpXUWdkMmhwYkdVZ2NISnZZMlZ6YzJsdVp5QW5JQ3RjYmlBZ0lDQWdJQ2RoYmlCbGRtVnVkQ0J4ZFdWMVpTNGdVM1Z3Y0c5eWRDQm1iM0lnZEdocGN5Qm9ZWE1nYm05MElIbGxkQ0JpWldWdUlHbHRjR3hsYldWdWRHVmtMaWRjYmlBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0NGbGRtVnVkRkYxWlhWbEtTazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pYTmxJR0Z5WlNCdVpXVmtaV1FnWm05eUlIUmxjM1J6SUc5dWJIa3VJRVJ2SUc1dmRDQjFjMlVoWEc0Z0lDQXFMMXh1SUNCZlgzQjFjbWRsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCc2FYTjBaVzVsY2tKaGJtc2dQU0I3ZlR0Y2JpQWdmU3hjYmx4dUlDQmZYMmRsZEV4cGMzUmxibVZ5UW1GdWF6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHeHBjM1JsYm1WeVFtRnVhenRjYmlBZ2ZWeHVYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFVjJaVzUwVUd4MVoybHVTSFZpTzF4dUlsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKXtpZihFdmVudFBsdWdpbk9yZGVyKWZvcih2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucyl7dmFyIFBsdWdpbk1vZHVsZT1uYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSxwbHVnaW5JbmRleD1FdmVudFBsdWdpbk9yZGVyLmluZGV4T2YocGx1Z2luTmFtZSk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQocGx1Z2luSW5kZXg+LTEsXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gdGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC5cIixwbHVnaW5OYW1lKTppbnZhcmlhbnQocGx1Z2luSW5kZXg+LTEpLCFFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChQbHVnaW5Nb2R1bGUuZXh0cmFjdEV2ZW50cyxcIkV2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgIG1ldGhvZCwgYnV0IGAlc2AgZG9lcyBub3QuXCIscGx1Z2luTmFtZSk6aW52YXJpYW50KFBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzKSxFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdPVBsdWdpbk1vZHVsZTt2YXIgcHVibGlzaGVkRXZlbnRzPVBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO2Zvcih2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cylcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChwdWJsaXNoRXZlbnRGb3JQbHVnaW4ocHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sUGx1Z2luTW9kdWxlLGV2ZW50TmFtZSksXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC5cIixldmVudE5hbWUscGx1Z2luTmFtZSk6aW52YXJpYW50KHB1Ymxpc2hFdmVudEZvclBsdWdpbihwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSxQbHVnaW5Nb2R1bGUsZXZlbnROYW1lKSl9fX1mdW5jdGlvbiBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oZGlzcGF0Y2hDb25maWcsUGx1Z2luTW9kdWxlLGV2ZW50TmFtZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSksXCJFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgZXZlbnQgbmFtZSwgYCVzYC5cIixldmVudE5hbWUpOmludmFyaWFudCghRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSksRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXT1kaXNwYXRjaENvbmZpZzt2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM9ZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKWlmKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlTmFtZSkpe3ZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lPXBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07cHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocGhhc2VkUmVnaXN0cmF0aW9uTmFtZSxQbHVnaW5Nb2R1bGUsZXZlbnROYW1lKX1yZXR1cm4hMH1yZXR1cm4gZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZT8ocHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSxQbHVnaW5Nb2R1bGUsZXZlbnROYW1lKSwhMCk6ITF9ZnVuY3Rpb24gcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocmVnaXN0cmF0aW9uTmFtZSxQbHVnaW5Nb2R1bGUsZXZlbnROYW1lKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSxcIkV2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSByZWdpc3RyYXRpb24gbmFtZSwgYCVzYC5cIixyZWdpc3RyYXRpb25OYW1lKTppbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0pLEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV09UGx1Z2luTW9kdWxlLEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXT1QbHVnaW5Nb2R1bGUuZXZlbnRUeXBlc1tldmVudE5hbWVdLmRlcGVuZGVuY2llc312YXIgaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxFdmVudFBsdWdpbk9yZGVyPW51bGwsbmFtZXNUb1BsdWdpbnM9e30sRXZlbnRQbHVnaW5SZWdpc3RyeT17cGx1Z2luczpbXSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6e30scmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6e30scmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp7fSxpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIUV2ZW50UGx1Z2luT3JkZXIsXCJFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LlwiKTppbnZhcmlhbnQoIUV2ZW50UGx1Z2luT3JkZXIpLEV2ZW50UGx1Z2luT3JkZXI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKSxyZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyl7dmFyIGlzT3JkZXJpbmdEaXJ0eT0hMTtmb3IodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucylpZihpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKXt2YXIgUGx1Z2luTW9kdWxlPWluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07bmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkmJm5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdPT09UGx1Z2luTW9kdWxlfHwoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdLFwiRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCB0d28gZGlmZmVyZW50IGV2ZW50IHBsdWdpbnMgdXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC5cIixwbHVnaW5OYW1lKTppbnZhcmlhbnQoIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdKSxuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXT1QbHVnaW5Nb2R1bGUsaXNPcmRlcmluZ0RpcnR5PSEwKX1pc09yZGVyaW5nRGlydHkmJnJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCl9LGdldFBsdWdpbk1vZHVsZUZvckV2ZW50OmZ1bmN0aW9uKGV2ZW50KXt2YXIgZGlzcGF0Y2hDb25maWc9ZXZlbnQuZGlzcGF0Y2hDb25maWc7aWYoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSlyZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lXXx8bnVsbDtmb3IodmFyIHBoYXNlIGluIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKWlmKGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSl7dmFyIFBsdWdpbk1vZHVsZT1FdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXV07aWYoUGx1Z2luTW9kdWxlKXJldHVybiBQbHVnaW5Nb2R1bGV9cmV0dXJuIG51bGx9LF9yZXNldEV2ZW50UGx1Z2luczpmdW5jdGlvbigpe0V2ZW50UGx1Z2luT3JkZXI9bnVsbDtmb3IodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkmJmRlbGV0ZSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoPTA7dmFyIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncz1FdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztmb3IodmFyIGV2ZW50TmFtZSBpbiBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MpZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkmJmRlbGV0ZSBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXTt2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM9RXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztmb3IodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMpcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocmVnaXN0cmF0aW9uTmFtZSkmJmRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXX19O21vZHVsZS5leHBvcnRzPUV2ZW50UGx1Z2luUmVnaXN0cnk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZSWFpsYm5SUWJIVm5hVzVTWldkcGMzUnllUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQldVRXNXVUZ0UWtFc1UwRkJVeXd5UWtGRFVDeEhRVUZMTEdsQ1FVbE1MRWxCUVVzc1IwRkJTU3hqUVVGakxHZENRVUZuUWl4RFFVTnlReXhIUVVGSkxHTkJRV1VzWlVGQlpTeFpRVU01UWl4WlFVRmpMR2xDUVVGcFFpeFJRVUZSTEZkQlR6TkRMRWxCVGtNc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEZGtNc1dVRkJZeXhIUVVOa0xHMUhRVVZCTEZsQlEwVXNWVUZCVlN4WlFVRmpMRXRCUTNoQ0xHOUNRVUZ2UWl4UlFVRlJMR0ZCUVdoRExFTkJSME1zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkRka01zWVVGQllTeGpRVU5pTEd0SFFVVkJMRmxCUTBVc1ZVRkJWU3hoUVVGaExHVkJRek5DTEc5Q1FVRnZRaXhSUVVGUkxHRkJRV1VzV1VGRE0wTXNTVUZCU1N4cFFrRkJhMElzWVVGQllTeFZRVU51UXl4TFFVRkxMRWRCUVVrc1lVRkJZU3hwUWtGRGJrSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNjMEpCUTBVc1owSkJRV2RDTEZkQlEyaENMR0ZCUTBFc1YwRkZSaXh4UlVGRFFTeFZRVU5CTEZsQlEwVXNWVUZCVlN4elFrRkRXaXhuUWtGQlowSXNWMEZEYUVJc1lVRkRRU3hqUVdOU0xGRkJRVk1zZFVKQlFYTkNMR1ZCUVdkQ0xHRkJRV01zVjBGRE1VUXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVjBGRGRFTXNiMEpCUVc5Q0xIbENRVUY1UWl4bFFVRmxMRmRCUXpkRUxIVkdRVVZCTEZkQlEwVXNWMEZCVnl4dlFrRkJiMElzZVVKQlFYbENMR1ZCUVdVc1dVRkRNMFVzYjBKQlFXOUNMSGxDUVVGNVFpeFhRVUZoTEdOQlJURkVMRWxCUVVrc2VVSkJRVEJDTEdWQlFXVXNkVUpCUXpkRExFbEJRVWtzZDBKQlFYbENMRU5CUXpOQ0xFbEJRVXNzUjBGQlNTeGhRVUZoTEhsQ1FVTndRaXhIUVVGSkxIZENRVUYzUWl4bFFVRmxMRmRCUVZrc1EwRkRja1FzUjBGQlNTeDNRa0ZCZVVJc2QwSkJRWGRDTEZWQlEzSkVMSGxDUVVORkxIVkNRVU5CTEdGQlEwRXNWMEZKVGl4UFFVRlBMRVZCUTBZc1RVRkJTU3huUWtGQlpTeHJRa0ZEZUVJc2QwSkJRMFVzWlVGQlpTeHBRa0ZEWml4aFFVTkJMRmxCUlVzc1NVRkZSaXhGUVZkVUxGRkJRVk1zZVVKQlFYZENMR2xDUVVGclFpeGhRVUZqTEZkQlF6bEVMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZkQlEzUkRMRzlDUVVGdlFpeDNRa0ZCZDBJc2EwSkJRemRETERoR1FVVkJMR3RDUVVORkxGZEJRVmNzYjBKQlFXOUNMSGRDUVVGM1FpeHRRa0ZETTBRc2IwSkJRVzlDTEhkQ1FVRjNRaXhyUWtGQmIwSXNZVUZEYUVVc2IwSkJRVzlDTERaQ1FVRTJRaXhyUWtGREwwTXNZVUZCWVN4WFFVRlhMRmRCUVZjc1lVRjJTSFpETEVkQlFVa3NWMEZCV1N4UlFVRlJMR1ZCUzNCQ0xHbENRVUZ0UWl4TFFVdHVRaXhyUWtGeFNFRXNjVUpCUzBZc1YwRkxRU3cwUWtGTFFTd3lRa0ZMUVN4blEwRlhRU3gxUWtGQmQwSXNVMEZCVXl3d1FrRkRPVUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1YwRkRkRU1zYVVKQlEwUXNkVWxCUlVVc1YwRkJWeXhyUWtGRlppeHBRa0ZCYlVJc1RVRkJUU3hWUVVGVkxFMUJRVTBzUzBGQlN5d3dRa0ZET1VNc01rSkJZVVlzZVVKQlFUQkNMRk5CUVZNc2QwSkJRMnBETEVkQlFVa3NhMEpCUVd0Q0xFTkJRM1JDTEV0QlFVc3NSMEZCU1N4alFVRmpMSGRDUVVOeVFpeEhRVUZMTEhWQ1FVRjFRaXhsUVVGbExGbEJRVE5ETEVOQlIwRXNSMEZCU1N4alFVRmxMSFZDUVVGMVFpeFhRVU55UXl4blFrRkJaU3hsUVVGbExHRkJReTlDTEdWQlFXVXNZMEZCWjBJc1pVRkRhRU1zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1YwRkRkRU1zWlVGQlpTeFpRVU5vUWl3MFJrRkZRU3haUVVORkxGZEJRVmNzWlVGQlpTeGhRVU01UWl4bFFVRmxMRmxCUVdNc1lVRkROMElzYVVKQlFXdENMRWRCUjJ4Q0xHbENRVU5HTERKQ1FWZEtMSGRDUVVGNVFpeFRRVUZUTEU5QlEyaERMRWRCUVVrc1owSkJRV2xDTEUxQlFVMHNZMEZETTBJc1NVRkJTU3hsUVVGbExHbENRVU5xUWl4TlFVRlBMSEZDUVVGdlFpeDNRa0ZEZWtJc1pVRkJaU3h0UWtGRFdpeEpRVVZRTEV0QlFVc3NSMEZCU1N4VFFVRlRMR2RDUVVGbExIZENRVU12UWl4SFFVRkxMR1ZCUVdVc2QwSkJRWGRDTEdWQlFXVXNUMEZCTTBRc1EwRkhRU3hIUVVGSkxHTkJRV1VzYjBKQlFXOUNMSGRDUVVOeVF5eGxRVUZsTEhkQ1FVRjNRaXhQUVVWNlF5eEpRVUZKTEdGQlEwWXNUVUZCVHl4alFVZFlMRTFCUVU4c1QwRlBWQ3h0UWtGQmIwSXNWMEZEYkVJc2FVSkJRVzFDTEVsQlEyNUNMRXRCUVVzc1IwRkJTU3hqUVVGakxHZENRVU5xUWl4bFFVRmxMR1ZCUVdVc2JVSkJRM3BDTEdkQ1FVRmxMRmRCUnpGQ0xIRkNRVUZ2UWl4UlFVRlJMRTlCUVZNc1EwRkZja01zU1VGQlNTd3dRa0ZCTWtJc2IwSkJRVzlDTEhkQ1FVTnVSQ3hMUVVGTExFZEJRVWtzWVVGQllTd3dRa0ZEYUVJc2VVSkJRWGxDTEdWQlFXVXNhMEpCUTI1RExEQkNRVUY1UWl4VlFVbHdReXhKUVVGSkxIbENRVUV3UWl4dlFrRkJiMElzZFVKQlEyeEVMRXRCUVVzc1IwRkJTU3h2UWtGQmIwSXNlVUpCUTNaQ0xIZENRVUYzUWl4bFFVRmxMSGxDUVVOc1F5eDVRa0ZCZDBJc2JVSkJUM1pETEZGQlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25sY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmFXNTJZWEpwWVc1MFhDSXBPMXh1WEc0dktpcGNiaUFxSUVsdWFtVmpkR0ZpYkdVZ2IzSmtaWEpwYm1jZ2IyWWdaWFpsYm5RZ2NHeDFaMmx1Y3k1Y2JpQXFMMXh1ZG1GeUlFVjJaVzUwVUd4MVoybHVUM0prWlhJZ1BTQnVkV3hzTzF4dVhHNHZLaXBjYmlBcUlFbHVhbVZqZEdGaWJHVWdiV0Z3Y0dsdVp5Qm1jbTl0SUc1aGJXVnpJSFJ2SUdWMlpXNTBJSEJzZFdkcGJpQnRiMlIxYkdWekxseHVJQ292WEc1MllYSWdibUZ0WlhOVWIxQnNkV2RwYm5NZ1BTQjdmVHRjYmx4dUx5b3FYRzRnS2lCU1pXTnZiWEIxZEdWeklIUm9aU0J3YkhWbmFXNGdiR2x6ZENCMWMybHVaeUIwYUdVZ2FXNXFaV04wWldRZ2NHeDFaMmx1Y3lCaGJtUWdjR3gxWjJsdUlHOXlaR1Z5YVc1bkxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbFkyOXRjSFYwWlZCc2RXZHBiazl5WkdWeWFXNW5LQ2tnZTF4dUlDQnBaaUFvSVVWMlpXNTBVR3gxWjJsdVQzSmtaWElwSUh0Y2JpQWdJQ0F2THlCWFlXbDBJSFZ1ZEdsc0lHRnVJR0JGZG1WdWRGQnNkV2RwYms5eVpHVnlZQ0JwY3lCcGJtcGxZM1JsWkM1Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JpQWdabTl5SUNoMllYSWdjR3gxWjJsdVRtRnRaU0JwYmlCdVlXMWxjMVJ2VUd4MVoybHVjeWtnZTF4dUlDQWdJSFpoY2lCUWJIVm5hVzVOYjJSMWJHVWdQU0J1WVcxbGMxUnZVR3gxWjJsdWMxdHdiSFZuYVc1T1lXMWxYVHRjYmlBZ0lDQjJZWElnY0d4MVoybHVTVzVrWlhnZ1BTQkZkbVZ1ZEZCc2RXZHBiazl5WkdWeUxtbHVaR1Y0VDJZb2NHeDFaMmx1VG1GdFpTazdYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUhCc2RXZHBia2x1WkdWNElENGdMVEVzWEc0Z0lDQWdJQ0FuUlhabGJuUlFiSFZuYVc1U1pXZHBjM1J5ZVRvZ1EyRnVibTkwSUdsdWFtVmpkQ0JsZG1WdWRDQndiSFZuYVc1eklIUm9ZWFFnWkc4Z2JtOTBJR1Y0YVhOMElHbHVJQ2NnSzF4dUlDQWdJQ0FnSjNSb1pTQndiSFZuYVc0Z2IzSmtaWEpwYm1jc0lHQWxjMkF1Snl4Y2JpQWdJQ0FnSUhCc2RXZHBiazVoYldWY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtIQnNkV2RwYmtsdVpHVjRJRDRnTFRFcEtUdGNiaUFnSUNCcFppQW9SWFpsYm5SUWJIVm5hVzVTWldkcGMzUnllUzV3YkhWbmFXNXpXM0JzZFdkcGJrbHVaR1Y0WFNrZ2UxeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQlFiSFZuYVc1TmIyUjFiR1V1WlhoMGNtRmpkRVYyWlc1MGN5eGNiaUFnSUNBZ0lDZEZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVPaUJGZG1WdWRDQndiSFZuYVc1eklHMTFjM1FnYVcxd2JHVnRaVzUwSUdGdUlHQmxlSFJ5WVdOMFJYWmxiblJ6WUNBbklDdGNiaUFnSUNBZ0lDZHRaWFJvYjJRc0lHSjFkQ0JnSlhOZ0lHUnZaWE1nYm05MExpY3NYRzRnSUNBZ0lDQndiSFZuYVc1T1lXMWxYRzRnSUNBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hRYkhWbmFXNU5iMlIxYkdVdVpYaDBjbUZqZEVWMlpXNTBjeWtwTzF4dUlDQWdJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbmt1Y0d4MVoybHVjMXR3YkhWbmFXNUpibVJsZUYwZ1BTQlFiSFZuYVc1TmIyUjFiR1U3WEc0Z0lDQWdkbUZ5SUhCMVlteHBjMmhsWkVWMlpXNTBjeUE5SUZCc2RXZHBiazF2WkhWc1pTNWxkbVZ1ZEZSNWNHVnpPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHVjJaVzUwVG1GdFpTQnBiaUJ3ZFdKc2FYTm9aV1JGZG1WdWRITXBJSHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQWdJSEIxWW14cGMyaEZkbVZ1ZEVadmNsQnNkV2RwYmloY2JpQWdJQ0FnSUNBZ0lDQndkV0pzYVhOb1pXUkZkbVZ1ZEhOYlpYWmxiblJPWVcxbFhTeGNiaUFnSUNBZ0lDQWdJQ0JRYkhWbmFXNU5iMlIxYkdVc1hHNGdJQ0FnSUNBZ0lDQWdaWFpsYm5ST1lXMWxYRzRnSUNBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0FnSUNkRmRtVnVkRkJzZFdkcGJsSmxaMmx6ZEhKNU9pQkdZV2xzWldRZ2RHOGdjSFZpYkdsemFDQmxkbVZ1ZENCZ0pYTmdJR1p2Y2lCd2JIVm5hVzRnWUNWellDNG5MRnh1SUNBZ0lDQWdJQ0JsZG1WdWRFNWhiV1VzWEc0Z0lDQWdJQ0FnSUhCc2RXZHBiazVoYldWY2JpQWdJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9jSFZpYkdsemFFVjJaVzUwUm05eVVHeDFaMmx1S0Z4dUlDQWdJQ0FnSUNCd2RXSnNhWE5vWldSRmRtVnVkSE5iWlhabGJuUk9ZVzFsWFN4Y2JpQWdJQ0FnSUNBZ1VHeDFaMmx1VFc5a2RXeGxMRnh1SUNBZ0lDQWdJQ0JsZG1WdWRFNWhiV1ZjYmlBZ0lDQWdJQ2twS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCUWRXSnNhWE5vWlhNZ1lXNGdaWFpsYm5RZ2MyOGdkR2hoZENCcGRDQmpZVzRnWW1VZ1pHbHpjR0YwWTJobFpDQmllU0IwYUdVZ2MzVndjR3hwWldRZ2NHeDFaMmx1TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JrYVhOd1lYUmphRU52Ym1acFp5QkVhWE53WVhSamFDQmpiMjVtYVdkMWNtRjBhVzl1SUdadmNpQjBhR1VnWlhabGJuUXVYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnVUd4MVoybHVUVzlrZFd4bElGQnNkV2RwYmlCd2RXSnNhWE5vYVc1bklIUm9aU0JsZG1WdWRDNWNiaUFxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZEdobElHVjJaVzUwSUhkaGN5QnpkV05qWlhOelpuVnNiSGtnY0hWaWJHbHphR1ZrTGx4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NIVmliR2x6YUVWMlpXNTBSbTl5VUd4MVoybHVLR1JwYzNCaGRHTm9RMjl1Wm1sbkxDQlFiSFZuYVc1TmIyUjFiR1VzSUdWMlpXNTBUbUZ0WlNrZ2UxeHVJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDRkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbVYyWlc1MFRtRnRaVVJwYzNCaGRHTm9RMjl1Wm1sbmN5NW9ZWE5QZDI1UWNtOXdaWEowZVNobGRtVnVkRTVoYldVcExGeHVJQ0FnSUNkRmRtVnVkRkJzZFdkcGJraDFZam9nVFc5eVpTQjBhR0Z1SUc5dVpTQndiSFZuYVc0Z1lYUjBaVzF3ZEdWa0lIUnZJSEIxWW14cGMyZ2dkR2hsSUhOaGJXVWdKeUFyWEc0Z0lDQWdKMlYyWlc1MElHNWhiV1VzSUdBbGMyQXVKeXhjYmlBZ0lDQmxkbVZ1ZEU1aGJXVmNiaUFnS1NBNklHbHVkbUZ5YVdGdWRDZ2hSWFpsYm5SUWJIVm5hVzVTWldkcGMzUnllUzVsZG1WdWRFNWhiV1ZFYVhOd1lYUmphRU52Ym1acFozTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1pYWmxiblJPWVcxbEtTa3BPMXh1SUNCRmRtVnVkRkJzZFdkcGJsSmxaMmx6ZEhKNUxtVjJaVzUwVG1GdFpVUnBjM0JoZEdOb1EyOXVabWxuYzF0bGRtVnVkRTVoYldWZElEMGdaR2x6Y0dGMFkyaERiMjVtYVdjN1hHNWNiaUFnZG1GeUlIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6SUQwZ1pHbHpjR0YwWTJoRGIyNW1hV2N1Y0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTdYRzRnSUdsbUlDaHdhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3lrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUhCb1lYTmxUbUZ0WlNCcGJpQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWekxtaGhjMDkzYmxCeWIzQmxjblI1S0hCb1lYTmxUbUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVWdQU0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGMxdHdhR0Z6WlU1aGJXVmRPMXh1SUNBZ0lDQWdJQ0J3ZFdKc2FYTm9VbVZuYVhOMGNtRjBhVzl1VG1GdFpTaGNiaUFnSUNBZ0lDQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbExGeHVJQ0FnSUNBZ0lDQWdJRkJzZFdkcGJrMXZaSFZzWlN4Y2JpQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEU1aGJXVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgwZ1pXeHpaU0JwWmlBb1pHbHpjR0YwWTJoRGIyNW1hV2N1Y21WbmFYTjBjbUYwYVc5dVRtRnRaU2tnZTF4dUlDQWdJSEIxWW14cGMyaFNaV2RwYzNSeVlYUnBiMjVPWVcxbEtGeHVJQ0FnSUNBZ1pHbHpjR0YwWTJoRGIyNW1hV2N1Y21WbmFYTjBjbUYwYVc5dVRtRnRaU3hjYmlBZ0lDQWdJRkJzZFdkcGJrMXZaSFZzWlN4Y2JpQWdJQ0FnSUdWMlpXNTBUbUZ0WlZ4dUlDQWdJQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc0dktpcGNiaUFxSUZCMVlteHBjMmhsY3lCaElISmxaMmx6ZEhKaGRHbHZiaUJ1WVcxbElIUm9ZWFFnYVhNZ2RYTmxaQ0IwYnlCcFpHVnVkR2xtZVNCa2FYTndZWFJqYUdWa0lHVjJaVzUwY3lCaGJtUmNiaUFxSUdOaGJpQmlaU0IxYzJWa0lIZHBkR2dnWUVWMlpXNTBVR3gxWjJsdVNIVmlMbkIxZEV4cGMzUmxibVZ5WUNCMGJ5QnlaV2RwYzNSbGNpQnNhWE4wWlc1bGNuTXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxaMmx6ZEhKaGRHbHZiazVoYldVZ1VtVm5hWE4wY21GMGFXOXVJRzVoYldVZ2RHOGdZV1JrTGx4dUlDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlGQnNkV2RwYmsxdlpIVnNaU0JRYkhWbmFXNGdjSFZpYkdsemFHbHVaeUIwYUdVZ1pYWmxiblF1WEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCd2RXSnNhWE5vVW1WbmFYTjBjbUYwYVc5dVRtRnRaU2h5WldkcGMzUnlZWFJwYjI1T1lXMWxMQ0JRYkhWbmFXNU5iMlIxYkdVc0lHVjJaVzUwVG1GdFpTa2dlMXh1SUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0ZGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1TG5KbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpXM0psWjJsemRISmhkR2x2Yms1aGJXVmRMRnh1SUNBZ0lDZEZkbVZ1ZEZCc2RXZHBia2gxWWpvZ1RXOXlaU0IwYUdGdUlHOXVaU0J3YkhWbmFXNGdZWFIwWlcxd2RHVmtJSFJ2SUhCMVlteHBjMmdnZEdobElITmhiV1VnSnlBclhHNGdJQ0FnSjNKbFoybHpkSEpoZEdsdmJpQnVZVzFsTENCZ0pYTmdMaWNzWEc0Z0lDQWdjbVZuYVhOMGNtRjBhVzl1VG1GdFpWeHVJQ0FwSURvZ2FXNTJZWEpwWVc1MEtDRkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbkpsWjJsemRISmhkR2x2Yms1aGJXVk5iMlIxYkdWelczSmxaMmx6ZEhKaGRHbHZiazVoYldWZEtTazdYRzRnSUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rdWNtVm5hWE4wY21GMGFXOXVUbUZ0WlUxdlpIVnNaWE5iY21WbmFYTjBjbUYwYVc5dVRtRnRaVjBnUFNCUWJIVm5hVzVOYjJSMWJHVTdYRzRnSUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rdWNtVm5hWE4wY21GMGFXOXVUbUZ0WlVSbGNHVnVaR1Z1WTJsbGMxdHlaV2RwYzNSeVlYUnBiMjVPWVcxbFhTQTlYRzRnSUNBZ1VHeDFaMmx1VFc5a2RXeGxMbVYyWlc1MFZIbHdaWE5iWlhabGJuUk9ZVzFsWFM1a1pYQmxibVJsYm1OcFpYTTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVm5hWE4wWlhKeklIQnNkV2RwYm5NZ2MyOGdkR2hoZENCMGFHVjVJR05oYmlCbGVIUnlZV04wSUdGdVpDQmthWE53WVhSamFDQmxkbVZ1ZEhNdVhHNGdLbHh1SUNvZ1FITmxaU0I3UlhabGJuUlFiSFZuYVc1SWRXSjlYRzRnS2k5Y2JuWmhjaUJGZG1WdWRGQnNkV2RwYmxKbFoybHpkSEo1SUQwZ2UxeHVYRzRnSUM4cUtseHVJQ0FnS2lCUGNtUmxjbVZrSUd4cGMzUWdiMllnYVc1cVpXTjBaV1FnY0d4MVoybHVjeTVjYmlBZ0lDb3ZYRzRnSUhCc2RXZHBibk02SUZ0ZExGeHVYRzRnSUM4cUtseHVJQ0FnS2lCTllYQndhVzVuSUdaeWIyMGdaWFpsYm5RZ2JtRnRaU0IwYnlCa2FYTndZWFJqYUNCamIyNW1hV2RjYmlBZ0lDb3ZYRzRnSUdWMlpXNTBUbUZ0WlVScGMzQmhkR05vUTI5dVptbG5jem9nZTMwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGNIQnBibWNnWm5KdmJTQnlaV2RwYzNSeVlYUnBiMjRnYm1GdFpTQjBieUJ3YkhWbmFXNGdiVzlrZFd4bFhHNGdJQ0FxTDF4dUlDQnlaV2RwYzNSeVlYUnBiMjVPWVcxbFRXOWtkV3hsY3pvZ2UzMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMWhjSEJwYm1jZ1puSnZiU0J5WldkcGMzUnlZWFJwYjI0Z2JtRnRaU0IwYnlCbGRtVnVkQ0J1WVcxbFhHNGdJQ0FxTDF4dUlDQnlaV2RwYzNSeVlYUnBiMjVPWVcxbFJHVndaVzVrWlc1amFXVnpPaUI3ZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1cVpXTjBjeUJoYmlCdmNtUmxjbWx1WnlCdlppQndiSFZuYVc1eklDaGllU0J3YkhWbmFXNGdibUZ0WlNrdUlGUm9hWE1nWVd4c2IzZHpJSFJvWlNCdmNtUmxjbWx1WjF4dUlDQWdLaUIwYnlCaVpTQmtaV052ZFhCc1pXUWdabkp2YlNCcGJtcGxZM1JwYjI0Z2IyWWdkR2hsSUdGamRIVmhiQ0J3YkhWbmFXNXpJSE52SUhSb1lYUWdiM0prWlhKcGJtY2dhWE5jYmlBZ0lDb2dZV3gzWVhseklHUmxkR1Z5YldsdWFYTjBhV01nY21WbllYSmtiR1Z6Y3lCdlppQndZV05yWVdkcGJtY3NJRzl1TFhSb1pTMW1iSGtnYVc1cVpXTjBhVzl1TENCbGRHTXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3WVhKeVlYbDlJRWx1YW1WamRHVmtSWFpsYm5SUWJIVm5hVzVQY21SbGNseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ29nUUhObFpTQjdSWFpsYm5SUWJIVm5hVzVJZFdJdWFXNXFaV04wYVc5dUxtbHVhbVZqZEVWMlpXNTBVR3gxWjJsdVQzSmtaWEo5WEc0Z0lDQXFMMXh1SUNCcGJtcGxZM1JGZG1WdWRGQnNkV2RwYms5eVpHVnlPaUJtZFc1amRHbHZiaWhKYm1wbFkzUmxaRVYyWlc1MFVHeDFaMmx1VDNKa1pYSXBJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ0lVVjJaVzUwVUd4MVoybHVUM0prWlhJc1hHNGdJQ0FnSUNBblJYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVUb2dRMkZ1Ym05MElHbHVhbVZqZENCbGRtVnVkQ0J3YkhWbmFXNGdiM0prWlhKcGJtY2diVzl5WlNCMGFHRnVJQ2NnSzF4dUlDQWdJQ0FnSjI5dVkyVXVJRmx2ZFNCaGNtVWdiR2xyWld4NUlIUnllV2x1WnlCMGJ5QnNiMkZrSUcxdmNtVWdkR2hoYmlCdmJtVWdZMjl3ZVNCdlppQlNaV0ZqZEM0blhHNGdJQ0FnS1NBNklHbHVkbUZ5YVdGdWRDZ2hSWFpsYm5SUWJIVm5hVzVQY21SbGNpa3BPMXh1SUNBZ0lDOHZJRU5zYjI1bElIUm9aU0J2Y21SbGNtbHVaeUJ6YnlCcGRDQmpZVzV1YjNRZ1ltVWdaSGx1WVcxcFkyRnNiSGtnYlhWMFlYUmxaQzVjYmlBZ0lDQkZkbVZ1ZEZCc2RXZHBiazl5WkdWeUlEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29TVzVxWldOMFpXUkZkbVZ1ZEZCc2RXZHBiazl5WkdWeUtUdGNiaUFnSUNCeVpXTnZiWEIxZEdWUWJIVm5hVzVQY21SbGNtbHVaeWdwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibXBsWTNSeklIQnNkV2RwYm5NZ2RHOGdZbVVnZFhObFpDQmllU0JnUlhabGJuUlFiSFZuYVc1SWRXSmdMaUJVYUdVZ2NHeDFaMmx1SUc1aGJXVnpJRzExYzNRZ1ltVmNiaUFnSUNvZ2FXNGdkR2hsSUc5eVpHVnlhVzVuSUdsdWFtVmpkR1ZrSUdKNUlHQnBibXBsWTNSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5WUM1Y2JpQWdJQ3BjYmlBZ0lDb2dVR3gxWjJsdWN5QmpZVzRnWW1VZ2FXNXFaV04wWldRZ1lYTWdjR0Z5ZENCdlppQndZV2RsSUdsdWFYUnBZV3hwZW1GMGFXOXVJRzl5SUc5dUxYUm9aUzFtYkhrdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnBibXBsWTNSbFpFNWhiV1Z6Vkc5UWJIVm5hVzV6SUUxaGNDQm1jbTl0SUc1aGJXVnpJSFJ2SUhCc2RXZHBiaUJ0YjJSMWJHVnpMbHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvZ1FITmxaU0I3UlhabGJuUlFiSFZuYVc1SWRXSXVhVzVxWldOMGFXOXVMbWx1YW1WamRFVjJaVzUwVUd4MVoybHVjMEo1VG1GdFpYMWNiaUFnSUNvdlhHNGdJR2x1YW1WamRFVjJaVzUwVUd4MVoybHVjMEo1VG1GdFpUb2dablZ1WTNScGIyNG9hVzVxWldOMFpXUk9ZVzFsYzFSdlVHeDFaMmx1Y3lrZ2UxeHVJQ0FnSUhaaGNpQnBjMDl5WkdWeWFXNW5SR2x5ZEhrZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3YkhWbmFXNU9ZVzFsSUdsdUlHbHVhbVZqZEdWa1RtRnRaWE5VYjFCc2RXZHBibk1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hhVzVxWldOMFpXUk9ZVzFsYzFSdlVHeDFaMmx1Y3k1b1lYTlBkMjVRY205d1pYSjBlU2h3YkhWbmFXNU9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJRYkhWbmFXNU5iMlIxYkdVZ1BTQnBibXBsWTNSbFpFNWhiV1Z6Vkc5UWJIVm5hVzV6VzNCc2RXZHBiazVoYldWZE8xeHVJQ0FnSUNBZ2FXWWdLQ0Z1WVcxbGMxUnZVR3gxWjJsdWN5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2JIVm5hVzVPWVcxbEtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUc1aGJXVnpWRzlRYkhWbmFXNXpXM0JzZFdkcGJrNWhiV1ZkSUNFOVBTQlFiSFZuYVc1TmIyUjFiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUNBZ0lDQWhibUZ0WlhOVWIxQnNkV2RwYm5OYmNHeDFaMmx1VG1GdFpWMHNYRzRnSUNBZ0lDQWdJQ0FnSjBWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rNklFTmhibTV2ZENCcGJtcGxZM1FnZEhkdklHUnBabVpsY21WdWRDQmxkbVZ1ZENCd2JIVm5hVzV6SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2QxYzJsdVp5QjBhR1VnYzJGdFpTQnVZVzFsTENCZ0pYTmdMaWNzWEc0Z0lDQWdJQ0FnSUNBZ2NHeDFaMmx1VG1GdFpWeHVJQ0FnSUNBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0NGdVlXMWxjMVJ2VUd4MVoybHVjMXR3YkhWbmFXNU9ZVzFsWFNrcE8xeHVJQ0FnSUNBZ0lDQnVZVzFsYzFSdlVHeDFaMmx1YzF0d2JIVm5hVzVPWVcxbFhTQTlJRkJzZFdkcGJrMXZaSFZzWlR0Y2JpQWdJQ0FnSUNBZ2FYTlBjbVJsY21sdVowUnBjblI1SUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6VDNKa1pYSnBibWRFYVhKMGVTa2dlMXh1SUNBZ0lDQWdjbVZqYjIxd2RYUmxVR3gxWjJsdVQzSmtaWEpwYm1jb0tUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRXh2YjJ0eklIVndJSFJvWlNCd2JIVm5hVzRnWm05eUlIUm9aU0J6ZFhCd2JHbGxaQ0JsZG1WdWRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR1YyWlc1MElFRWdjM2x1ZEdobGRHbGpJR1YyWlc1MExseHVJQ0FnS2lCQWNtVjBkWEp1SUhzL2IySnFaV04wZlNCVWFHVWdjR3gxWjJsdUlIUm9ZWFFnWTNKbFlYUmxaQ0IwYUdVZ2MzVndjR3hwWldRZ1pYWmxiblF1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnWjJWMFVHeDFaMmx1VFc5a2RXeGxSbTl5UlhabGJuUTZJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ2RtRnlJR1JwYzNCaGRHTm9RMjl1Wm1sbklEMGdaWFpsYm5RdVpHbHpjR0YwWTJoRGIyNW1hV2M3WEc0Z0lDQWdhV1lnS0dScGMzQmhkR05vUTI5dVptbG5MbkpsWjJsemRISmhkR2x2Yms1aGJXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbkpsWjJsemRISmhkR2x2Yms1aGJXVk5iMlIxYkdWelcxeHVJQ0FnSUNBZ0lDQmthWE53WVhSamFFTnZibVpwWnk1eVpXZHBjM1J5WVhScGIyNU9ZVzFsWEc0Z0lDQWdJQ0JkSUh4OElHNTFiR3c3WEc0Z0lDQWdmVnh1SUNBZ0lHWnZjaUFvZG1GeUlIQm9ZWE5sSUdsdUlHUnBjM0JoZEdOb1EyOXVabWxuTG5Cb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXUnBjM0JoZEdOb1EyOXVabWxuTG5Cb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpMbWhoYzA5M2JsQnliM0JsY25SNUtIQm9ZWE5sS1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJRYkhWbmFXNU5iMlIxYkdVZ1BTQkZkbVZ1ZEZCc2RXZHBibEpsWjJsemRISjVMbkpsWjJsemRISmhkR2x2Yms1aGJXVk5iMlIxYkdWelcxeHVJQ0FnSUNBZ0lDQmthWE53WVhSamFFTnZibVpwWnk1d2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjMXR3YUdGelpWMWNiaUFnSUNBZ0lGMDdYRzRnSUNBZ0lDQnBaaUFvVUd4MVoybHVUVzlrZFd4bEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFiSFZuYVc1TmIyUjFiR1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmVIQnZjMlZrSUdadmNpQjFibWwwSUhSbGMzUnBibWN1WEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmY21WelpYUkZkbVZ1ZEZCc2RXZHBibk02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUVWMlpXNTBVR3gxWjJsdVQzSmtaWElnUFNCdWRXeHNPMXh1SUNBZ0lHWnZjaUFvZG1GeUlIQnNkV2RwYms1aGJXVWdhVzRnYm1GdFpYTlViMUJzZFdkcGJuTXBJSHRjYmlBZ0lDQWdJR2xtSUNodVlXMWxjMVJ2VUd4MVoybHVjeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHdiSFZuYVc1T1lXMWxLU2tnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnYm1GdFpYTlViMUJzZFdkcGJuTmJjR3gxWjJsdVRtRnRaVjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lFVjJaVzUwVUd4MVoybHVVbVZuYVhOMGNua3VjR3gxWjJsdWN5NXNaVzVuZEdnZ1BTQXdPMXh1WEc0Z0lDQWdkbUZ5SUdWMlpXNTBUbUZ0WlVScGMzQmhkR05vUTI5dVptbG5jeUE5SUVWMlpXNTBVR3gxWjJsdVVtVm5hWE4wY25rdVpYWmxiblJPWVcxbFJHbHpjR0YwWTJoRGIyNW1hV2R6TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR1YyWlc1MFRtRnRaU0JwYmlCbGRtVnVkRTVoYldWRWFYTndZWFJqYUVOdmJtWnBaM01wSUh0Y2JpQWdJQ0FnSUdsbUlDaGxkbVZ1ZEU1aGJXVkVhWE53WVhSamFFTnZibVpwWjNNdWFHRnpUM2R1VUhKdmNHVnlkSGtvWlhabGJuUk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1pYWmxiblJPWVcxbFJHbHpjR0YwWTJoRGIyNW1hV2R6VzJWMlpXNTBUbUZ0WlYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlISmxaMmx6ZEhKaGRHbHZiazVoYldWTmIyUjFiR1Z6SUQwZ1JYWmxiblJRYkhWbmFXNVNaV2RwYzNSeWVTNXlaV2RwYzNSeVlYUnBiMjVPWVcxbFRXOWtkV3hsY3p0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ5WldkcGMzUnlZWFJwYjI1T1lXMWxJR2x1SUhKbFoybHpkSEpoZEdsdmJrNWhiV1ZOYjJSMWJHVnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NtVm5hWE4wY21GMGFXOXVUbUZ0WlUxdlpIVnNaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29jbVZuYVhOMGNtRjBhVzl1VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJSEpsWjJsemRISmhkR2x2Yms1aGJXVk5iMlIxYkdWelczSmxaMmx6ZEhKaGRHbHZiazVoYldWZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVYyWlc1MFVHeDFaMmx1VW1WbmFYTjBjbms3WEc0aVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKXtyZXR1cm4gdG9wTGV2ZWxUeXBlPT09dG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwfHx0b3BMZXZlbFR5cGU9PT10b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kfHx0b3BMZXZlbFR5cGU9PT10b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsfWZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpe3JldHVybiB0b3BMZXZlbFR5cGU9PT10b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZXx8dG9wTGV2ZWxUeXBlPT09dG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmV9ZnVuY3Rpb24gaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpe3JldHVybiB0b3BMZXZlbFR5cGU9PT10b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bnx8dG9wTGV2ZWxUeXBlPT09dG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0fWZ1bmN0aW9uIGZvckVhY2hFdmVudERpc3BhdGNoKGV2ZW50LGNiKXt2YXIgZGlzcGF0Y2hMaXN0ZW5lcnM9ZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLGRpc3BhdGNoSURzPWV2ZW50Ll9kaXNwYXRjaElEcztpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCksQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpZm9yKHZhciBpPTA7aTxkaXNwYXRjaExpc3RlbmVycy5sZW5ndGgmJiFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2krKyljYihldmVudCxkaXNwYXRjaExpc3RlbmVyc1tpXSxkaXNwYXRjaElEc1tpXSk7ZWxzZSBkaXNwYXRjaExpc3RlbmVycyYmY2IoZXZlbnQsZGlzcGF0Y2hMaXN0ZW5lcnMsZGlzcGF0Y2hJRHMpfWZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaChldmVudCxsaXN0ZW5lcixkb21JRCl7ZXZlbnQuY3VycmVudFRhcmdldD1pbmplY3Rpb24uTW91bnQuZ2V0Tm9kZShkb21JRCk7dmFyIHJldHVyblZhbHVlPWxpc3RlbmVyKGV2ZW50LGRvbUlEKTtyZXR1cm4gZXZlbnQuY3VycmVudFRhcmdldD1udWxsLHJldHVyblZhbHVlfWZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCxjYil7Zm9yRWFjaEV2ZW50RGlzcGF0Y2goZXZlbnQsY2IpLGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycz1udWxsLGV2ZW50Ll9kaXNwYXRjaElEcz1udWxsfWZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KXt2YXIgZGlzcGF0Y2hMaXN0ZW5lcnM9ZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLGRpc3BhdGNoSURzPWV2ZW50Ll9kaXNwYXRjaElEcztpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCksQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpe2Zvcih2YXIgaT0wO2k8ZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoJiYhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtpKyspaWYoZGlzcGF0Y2hMaXN0ZW5lcnNbaV0oZXZlbnQsZGlzcGF0Y2hJRHNbaV0pKXJldHVybiBkaXNwYXRjaElEc1tpXX1lbHNlIGlmKGRpc3BhdGNoTGlzdGVuZXJzJiZkaXNwYXRjaExpc3RlbmVycyhldmVudCxkaXNwYXRjaElEcykpcmV0dXJuIGRpc3BhdGNoSURzO3JldHVybiBudWxsfWZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUoZXZlbnQpe3ZhciByZXQ9ZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO3JldHVybiBldmVudC5fZGlzcGF0Y2hJRHM9bnVsbCxldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbCxyZXR9ZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7dmFyIGRpc3BhdGNoTGlzdGVuZXI9ZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLGRpc3BhdGNoSUQ9ZXZlbnQuX2Rpc3BhdGNoSURzO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpLFwiZXhlY3V0ZURpcmVjdERpc3BhdGNoKC4uLik6IEludmFsaWQgYGV2ZW50YC5cIik6aW52YXJpYW50KCFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpKTt2YXIgcmVzPWRpc3BhdGNoTGlzdGVuZXI/ZGlzcGF0Y2hMaXN0ZW5lcihldmVudCxkaXNwYXRjaElEKTpudWxsO3JldHVybiBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbCxldmVudC5fZGlzcGF0Y2hJRHM9bnVsbCxyZXN9ZnVuY3Rpb24gaGFzRGlzcGF0Y2hlcyhldmVudCl7cmV0dXJuISFldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnN9dmFyIEV2ZW50Q29uc3RhbnRzPXJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIiksaW5qZWN0aW9uPXtNb3VudDpudWxsLGluamVjdE1vdW50OmZ1bmN0aW9uKEluamVjdGVkTW91bnQpe2luamVjdGlvbi5Nb3VudD1JbmplY3RlZE1vdW50LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChJbmplY3RlZE1vdW50JiZJbmplY3RlZE1vdW50LmdldE5vZGUsXCJFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RNb3VudCguLi4pOiBJbmplY3RlZCBNb3VudCBtb2R1bGUgaXMgbWlzc2luZyBnZXROb2RlLlwiKTppbnZhcmlhbnQoSW5qZWN0ZWRNb3VudCYmSW5qZWN0ZWRNb3VudC5nZXROb2RlKSl9fSx0b3BMZXZlbFR5cGVzPUV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMsdmFsaWRhdGVFdmVudERpc3BhdGNoZXM7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzPWZ1bmN0aW9uKGV2ZW50KXt2YXIgZGlzcGF0Y2hMaXN0ZW5lcnM9ZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLGRpc3BhdGNoSURzPWV2ZW50Ll9kaXNwYXRjaElEcyxsaXN0ZW5lcnNJc0Fycj1BcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSxpZHNJc0Fycj1BcnJheS5pc0FycmF5KGRpc3BhdGNoSURzKSxJRHNMZW49aWRzSXNBcnI/ZGlzcGF0Y2hJRHMubGVuZ3RoOmRpc3BhdGNoSURzPzE6MCxsaXN0ZW5lcnNMZW49bGlzdGVuZXJzSXNBcnI/ZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOmRpc3BhdGNoTGlzdGVuZXJzPzE6MDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChpZHNJc0Fycj09PWxpc3RlbmVyc0lzQXJyJiZJRHNMZW49PT1saXN0ZW5lcnNMZW4sXCJFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuXCIpOmludmFyaWFudChpZHNJc0Fycj09PWxpc3RlbmVyc0lzQXJyJiZJRHNMZW49PT1saXN0ZW5lcnNMZW4pfSk7dmFyIEV2ZW50UGx1Z2luVXRpbHM9e2lzRW5kaXNoOmlzRW5kaXNoLGlzTW92ZWlzaDppc01vdmVpc2gsaXNTdGFydGlzaDppc1N0YXJ0aXNoLGV4ZWN1dGVEaXJlY3REaXNwYXRjaDpleGVjdXRlRGlyZWN0RGlzcGF0Y2gsZXhlY3V0ZURpc3BhdGNoOmV4ZWN1dGVEaXNwYXRjaCxleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXI6ZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyLGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6ZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSxoYXNEaXNwYXRjaGVzOmhhc0Rpc3BhdGNoZXMsaW5qZWN0aW9uOmluamVjdGlvbix1c2VUb3VjaEV2ZW50czohMX07bW9kdWxlLmV4cG9ydHM9RXZlbnRQbHVnaW5VdGlscztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJYWmxiblJRYkhWbmFXNVZkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJWMEVzV1VFNFFrRXNVMEZCVXl4VlFVRlRMR05CUTJoQ0xFMUJRVThzWjBKQlFXbENMR05CUVdNc1dVRkRMMElzWlVGQmFVSXNZMEZCWXl4aFFVTXZRaXhsUVVGcFFpeGpRVUZqTEdWQlIzaERMRkZCUVZNc1YwRkJWU3hqUVVOcVFpeE5RVUZQTEdkQ1FVRnBRaXhqUVVGakxHTkJReTlDTEdWQlFXbENMR05CUVdNc1lVRkZlRU1zVVVGQlV5eFpRVUZYTEdOQlEyeENMRTFCUVU4c1owSkJRV2xDTEdOQlFXTXNZMEZETDBJc1pVRkJhVUlzWTBGQll5eGpRVFpDZUVNc1VVRkJVeXh6UWtGQmNVSXNUVUZCVHl4SlFVTnVReXhIUVVGSkxHMUNRVUZ2UWl4TlFVRk5MRzFDUVVNeFFpeFpRVUZqTEUxQlFVMHNXVUZKZUVJc1NVRklTU3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NWVUZETDBJc2QwSkJRWGRDTEU5QlJYUkNMRTFCUVUwc1VVRkJVU3h0UWtGRGFFSXNTVUZCU3l4SFFVRkpMRWRCUVVrc1JVRkJSeXhGUVVGSkxHdENRVUZyUWl4VFFVTm9ReXhOUVVGTkxIVkNRVVJyUXl4SlFVczFReXhIUVVGSExFMUJRVThzYTBKQlFXdENMRWRCUVVrc1dVRkJXU3hSUVVWeVF5eHZRa0ZEVkN4SFFVRkhMRTFCUVU4c2EwSkJRVzFDTEdGQlZXcERMRkZCUVZNc2FVSkJRV2RDTEUxQlFVOHNVMEZCVlN4UFFVTjRReXhOUVVGTkxHTkJRV2RDTEZWQlFWVXNUVUZCVFN4UlFVRlJMRTFCUXpsRExFbEJRVWtzWVVGQll5eFRRVUZUTEUxQlFVOHNUVUZGYkVNc1QwRkVRU3hQUVVGTkxHTkJRV2RDTEV0QlEyWXNXVUZOVkN4UlFVRlRMREJDUVVGNVFpeE5RVUZQTEVsQlEzWkRMSEZDUVVGeFFpeE5RVUZQTEVsQlF6VkNMRTFCUVUwc2JVSkJRWEZDTEV0QlF6TkNMRTFCUVUwc1lVRkJaU3hMUVZWMlFpeFJRVUZUTEhkRFFVRjFReXhQUVVNNVF5eEhRVUZKTEcxQ1FVRnZRaXhOUVVGTkxHMUNRVU14UWl4WlFVRmpMRTFCUVUwc1dVRkplRUlzU1VGSVNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1ZVRkRMMElzZDBKQlFYZENMRTlCUlhSQ0xFMUJRVTBzVVVGQlVTeHZRa0ZEYUVJc1NVRkJTeXhIUVVGSkxFZEJRVWtzUlVGQlJ5eEZRVUZKTEd0Q1FVRnJRaXhUUVVOb1F5eE5RVUZOTEhWQ1FVUnJReXhKUVVzMVF5eEhRVUZKTEd0Q1FVRnJRaXhIUVVGSExFMUJRVThzV1VGQldTeEpRVU14UXl4TlFVRlBMR0ZCUVZrc1QwRkhiRUlzU1VGQlNTeHRRa0ZEVEN4clFrRkJhMElzVFVGQlR5eGhRVU16UWl4TlFVRlBMRmxCUjFnc1QwRkJUeXhOUVUxVUxGRkJRVk1zYjBOQlFXMURMRTlCUXpGRExFZEJRVWtzUzBGQlRTeDFRMEZCZFVNc1RVRkhha1FzVDBGR1FTeFBRVUZOTEdGQlFXVXNTMEZEY2tJc1RVRkJUU3h0UWtGQmNVSXNTMEZEY0VJc1NVRlpWQ3hSUVVGVExIVkNRVUZ6UWl4UFFVTjZRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NWVUZETDBJc2QwSkJRWGRDTEUxQlJURkNMRWxCUVVrc2EwSkJRVzFDTEUxQlFVMHNiVUpCUTNwQ0xGZEJRV0VzVFVGQlRTeFpRVU4wUWl4blFrRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWMEZEZEVNc1RVRkJUU3hSUVVGUkxHdENRVU5tTEdkRVFVTkZMRmRCUVZjc1RVRkJUU3hSUVVGUkxHdENRVU0zUWl4SlFVRkpMRXRCUVUwc2FVSkJRMUlzYVVKQlFXbENMRTFCUVU4c1dVRkRlRUlzU1VGSFJpeFBRVVpCTEU5QlFVMHNiVUpCUVhGQ0xFdEJRek5DTEUxQlFVMHNZVUZCWlN4TFFVTmtMRWxCVDFRc1VVRkJVeXhsUVVGakxFOUJRM0pDTEZGQlFWTXNUVUZCVFN4dFFrRjJUR3BDTEVkQlFVa3NaMEpCUVdsQ0xGRkJRVkVzYjBKQlJYcENMRlZCUVZrc1VVRkJVU3hsUVZWd1FpeFhRVU5HTEUxQlFVOHNTMEZEVUN4WlFVRmhMRk5CUVZNc1pVRkRjRUlzVlVGQlZTeE5RVUZSTEdOQlEyUXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGZEJRemxDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM1pETEdWQlFXbENMR05CUVdNc1VVRkRMMElzTUVaQlJVVXNWVUZCVlN4bFFVRnBRaXhqUVVGakxGbEJTeTlETEdOQlFXZENMR1ZCUVdVc1kwRnJRaTlDTEhWQ1FVTkJMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NWMEZETDBJc2QwSkJRVEJDTEZOQlFWTXNUMEZEYWtNc1IwRkJTU3h0UWtGQmIwSXNUVUZCVFN4dFFrRkRNVUlzV1VGQll5eE5RVUZOTEdGQlJYQkNMR1ZCUVdsQ0xFMUJRVTBzVVVGQlVTeHRRa0ZETDBJc1UwRkJWeXhOUVVGTkxGRkJRVkVzWVVGRGVrSXNUMEZCVXl4VFFVRlhMRmxCUVZrc1QwRkJVeXhaUVVGakxFVkJRVWtzUlVGRE0wUXNZVUZCWlN4bFFVTnFRaXhyUWtGQmEwSXNUMEZEYkVJc2EwSkJRVzlDTEVWQlFVa3NRMEZGZWtJc1owSkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExGZEJRV0VzWjBKQlFXdENMRk5CUVZjc1lVRkRNVU1zYzBOQlEwVXNWVUZCVlN4WFFVRmhMR2RDUVVGclFpeFRRVUZYTEdWQmFVazFSQ3hKUVVGSkxHMUNRVU5HTEZOQlFWVXNVMEZEVml4VlFVRlhMRlZCUTFnc1YwRkJXU3hYUVVWYUxITkNRVUYxUWl4elFrRkRka0lzWjBKQlFXbENMR2RDUVVOcVFpeDVRa0ZCTUVJc2VVSkJRekZDTEcxRFFVRnZReXh0UTBGRGNFTXNZMEZCWlN4alFVTm1MRlZCUVZjc1ZVRkRXQ3huUWtGQlowSXNSVUZIYkVJc1VVRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1JYWmxiblJRYkhWbmFXNVZkR2xzYzF4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlFVjJaVzUwUTI5dWMzUmhiblJ6SUQwZ2NtVnhkV2x5WlNoY0lpNHZSWFpsYm5SRGIyNXpkR0Z1ZEhOY0lpazdYRzVjYm5aaGNpQnBiblpoY21saGJuUWdQU0J5WlhGMWFYSmxLRndpTGk5cGJuWmhjbWxoYm5SY0lpazdYRzVjYmk4cUtseHVJQ29nU1c1cVpXTjBaV1FnWkdWd1pXNWtaVzVqYVdWek9seHVJQ292WEc1Y2JpOHFLbHh1SUNvZ0xTQmdUVzkxYm5SZ09pQmJjbVZ4ZFdseVpXUmRJRTF2WkhWc1pTQjBhR0YwSUdOaGJpQmpiMjUyWlhKMElHSmxkSGRsWlc0Z1VtVmhZM1FnWkc5dElFbEVjeUJoYm1SY2JpQXFJQ0FnWVdOMGRXRnNJRzV2WkdVZ2NtVm1aWEpsYm1ObGN5NWNiaUFxTDF4dWRtRnlJR2x1YW1WamRHbHZiaUE5SUh0Y2JpQWdUVzkxYm5RNklHNTFiR3dzWEc0Z0lHbHVhbVZqZEUxdmRXNTBPaUJtZFc1amRHbHZiaWhKYm1wbFkzUmxaRTF2ZFc1MEtTQjdYRzRnSUNBZ2FXNXFaV04wYVc5dUxrMXZkVzUwSUQwZ1NXNXFaV04wWldSTmIzVnVkRHRjYmlBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ0lDQkpibXBsWTNSbFpFMXZkVzUwSUNZbUlFbHVhbVZqZEdWa1RXOTFiblF1WjJWMFRtOWtaU3hjYmlBZ0lDQWdJQ0FnSjBWMlpXNTBVR3gxWjJsdVZYUnBiSE11YVc1cVpXTjBhVzl1TG1sdWFtVmpkRTF2ZFc1MEtDNHVMaWs2SUVsdWFtVmpkR1ZrSUUxdmRXNTBJRzF2WkhWc1pTQW5JQ3RjYmlBZ0lDQWdJQ0FnSjJseklHMXBjM05wYm1jZ1oyVjBUbTlrWlM0blhHNGdJQ0FnSUNBcElEb2dhVzUyWVhKcFlXNTBLRWx1YW1WamRHVmtUVzkxYm5RZ0ppWWdTVzVxWldOMFpXUk5iM1Z1ZEM1blpYUk9iMlJsS1NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVhHNTJZWElnZEc5d1RHVjJaV3hVZVhCbGN5QTlJRVYyWlc1MFEyOXVjM1JoYm5SekxuUnZjRXhsZG1Wc1ZIbHdaWE03WEc1Y2JtWjFibU4wYVc5dUlHbHpSVzVrYVhOb0tIUnZjRXhsZG1Wc1ZIbHdaU2tnZTF4dUlDQnlaWFIxY200Z2RHOXdUR1YyWld4VWVYQmxJRDA5UFNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0UxdmRYTmxWWEFnZkh4Y2JpQWdJQ0FnSUNBZ0lIUnZjRXhsZG1Wc1ZIbHdaU0E5UFQwZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCVWIzVmphRVZ1WkNCOGZGeHVJQ0FnSUNBZ0lDQWdkRzl3VEdWMlpXeFVlWEJsSUQwOVBTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNGUnZkV05vUTJGdVkyVnNPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMDF2ZG1WcGMyZ29kRzl3VEdWMlpXeFVlWEJsS1NCN1hHNGdJSEpsZEhWeWJpQjBiM0JNWlhabGJGUjVjR1VnUFQwOUlIUnZjRXhsZG1Wc1ZIbHdaWE11ZEc5d1RXOTFjMlZOYjNabElIeDhYRzRnSUNBZ0lDQWdJQ0IwYjNCTVpYWmxiRlI1Y0dVZ1BUMDlJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdWRzkxWTJoTmIzWmxPMXh1ZlZ4dVpuVnVZM1JwYjI0Z2FYTlRkR0Z5ZEdsemFDaDBiM0JNWlhabGJGUjVjR1VwSUh0Y2JpQWdjbVYwZFhKdUlIUnZjRXhsZG1Wc1ZIbHdaU0E5UFQwZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCTmIzVnpaVVJ2ZDI0Z2ZIeGNiaUFnSUNBZ0lDQWdJSFJ2Y0V4bGRtVnNWSGx3WlNBOVBUMGdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlViM1ZqYUZOMFlYSjBPMXh1ZlZ4dVhHNWNiblpoY2lCMllXeHBaR0YwWlVWMlpXNTBSR2x6Y0dGMFkyaGxjenRjYm1sbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdkbUZzYVdSaGRHVkZkbVZ1ZEVScGMzQmhkR05vWlhNZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUhaaGNpQmthWE53WVhSamFFeHBjM1JsYm1WeWN5QTlJR1YyWlc1MExsOWthWE53WVhSamFFeHBjM1JsYm1WeWN6dGNiaUFnSUNCMllYSWdaR2x6Y0dGMFkyaEpSSE1nUFNCbGRtVnVkQzVmWkdsemNHRjBZMmhKUkhNN1hHNWNiaUFnSUNCMllYSWdiR2x6ZEdWdVpYSnpTWE5CY25JZ1BTQkJjbkpoZVM1cGMwRnljbUY1S0dScGMzQmhkR05vVEdsemRHVnVaWEp6S1R0Y2JpQWdJQ0IyWVhJZ2FXUnpTWE5CY25JZ1BTQkJjbkpoZVM1cGMwRnljbUY1S0dScGMzQmhkR05vU1VSektUdGNiaUFnSUNCMllYSWdTVVJ6VEdWdUlEMGdhV1J6U1hOQmNuSWdQeUJrYVhOd1lYUmphRWxFY3k1c1pXNW5kR2dnT2lCa2FYTndZWFJqYUVsRWN5QS9JREVnT2lBd08xeHVJQ0FnSUhaaGNpQnNhWE4wWlc1bGNuTk1aVzRnUFNCc2FYTjBaVzVsY25OSmMwRnljaUEvWEc0Z0lDQWdJQ0JrYVhOd1lYUmphRXhwYzNSbGJtVnljeTVzWlc1bmRHZ2dPbHh1SUNBZ0lDQWdaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTWdQeUF4SURvZ01EdGNibHh1SUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnSUNCcFpITkpjMEZ5Y2lBOVBUMGdiR2x6ZEdWdVpYSnpTWE5CY25JZ0ppWWdTVVJ6VEdWdUlEMDlQU0JzYVhOMFpXNWxjbk5NWlc0c1hHNGdJQ0FnSUNBblJYWmxiblJRYkhWbmFXNVZkR2xzY3pvZ1NXNTJZV3hwWkNCZ1pYWmxiblJnTGlkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtHbGtjMGx6UVhKeUlEMDlQU0JzYVhOMFpXNWxjbk5KYzBGeWNpQW1KaUJKUkhOTVpXNGdQVDA5SUd4cGMzUmxibVZ5YzB4bGJpa3BPMXh1SUNCOU8xeHVmVnh1WEc0dktpcGNiaUFxSUVsdWRtOXJaWE1nWUdOaUtHVjJaVzUwTENCc2FYTjBaVzVsY2l3Z2FXUXBZQzRnUVhadmFXUnpJSFZ6YVc1bklHTmhiR3dnYVdZZ2JtOGdjMk52Y0dVZ2FYTmNiaUFxSUhCeWIzWnBaR1ZrTGlCVWFHVWdZQ2hzYVhOMFpXNWxjaXhwWkNsZ0lIQmhhWElnWldabVpXTjBhWFpsYkhrZ1ptOXliWE1nZEdobElGd2laR2x6Y0dGMFkyaGNJaUJpZFhRZ1lYSmxYRzRnS2lCclpYQjBJSE5sY0dGeVlYUmxJSFJ2SUdOdmJuTmxjblpsSUcxbGJXOXllUzVjYmlBcUwxeHVablZ1WTNScGIyNGdabTl5UldGamFFVjJaVzUwUkdsemNHRjBZMmdvWlhabGJuUXNJR05pS1NCN1hHNGdJSFpoY2lCa2FYTndZWFJqYUV4cGMzUmxibVZ5Y3lBOUlHVjJaVzUwTGw5a2FYTndZWFJqYUV4cGMzUmxibVZ5Y3p0Y2JpQWdkbUZ5SUdScGMzQmhkR05vU1VSeklEMGdaWFpsYm5RdVgyUnBjM0JoZEdOb1NVUnpPMXh1SUNCcFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJQ0FnZG1Gc2FXUmhkR1ZGZG1WdWRFUnBjM0JoZEdOb1pYTW9aWFpsYm5RcE8xeHVJQ0I5WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHUnBjM0JoZEdOb1RHbHpkR1Z1WlhKektTa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2daR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdsbUlDaGxkbVZ1ZEM1cGMxQnliM0JoWjJGMGFXOXVVM1J2Y0hCbFpDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnVEdsemRHVnVaWEp6SUdGdVpDQkpSSE1nWVhKbElIUjNieUJ3WVhKaGJHeGxiQ0JoY25KaGVYTWdkR2hoZENCaGNtVWdZV3gzWVhseklHbHVJSE41Ym1NdVhHNGdJQ0FnSUNCallpaGxkbVZ1ZEN3Z1pHbHpjR0YwWTJoTWFYTjBaVzVsY25OYmFWMHNJR1JwYzNCaGRHTm9TVVJ6VzJsZEtUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvWkdsemNHRjBZMmhNYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0JqWWlobGRtVnVkQ3dnWkdsemNHRjBZMmhNYVhOMFpXNWxjbk1zSUdScGMzQmhkR05vU1VSektUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRVJsWm1GMWJIUWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdVR3gxWjJsdVRXOWtkV3hsTG1WNFpXTjFkR1ZFYVhOd1lYUmphQ2dwTGx4dUlDb2dRSEJoY21GdElIdFRlVzUwYUdWMGFXTkZkbVZ1ZEgwZ1UzbHVkR2hsZEdsalJYWmxiblFnZEc4Z2FHRnVaR3hsWEc0Z0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQkJjSEJzYVdOaGRHbHZiaTFzWlhabGJDQmpZV3hzWW1GamExeHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR1J2YlVsRUlFUlBUU0JwWkNCMGJ5QndZWE56SUhSdklIUm9aU0JqWVd4c1ltRmpheTVjYmlBcUwxeHVablZ1WTNScGIyNGdaWGhsWTNWMFpVUnBjM0JoZEdOb0tHVjJaVzUwTENCc2FYTjBaVzVsY2l3Z1pHOXRTVVFwSUh0Y2JpQWdaWFpsYm5RdVkzVnljbVZ1ZEZSaGNtZGxkQ0E5SUdsdWFtVmpkR2x2Ymk1TmIzVnVkQzVuWlhST2IyUmxLR1J2YlVsRUtUdGNiaUFnZG1GeUlISmxkSFZ5YmxaaGJIVmxJRDBnYkdsemRHVnVaWElvWlhabGJuUXNJR1J2YlVsRUtUdGNiaUFnWlhabGJuUXVZM1Z5Y21WdWRGUmhjbWRsZENBOUlHNTFiR3c3WEc0Z0lISmxkSFZ5YmlCeVpYUjFjbTVXWVd4MVpUdGNibjFjYmx4dUx5b3FYRzRnS2lCVGRHRnVaR0Z5WkM5emFXMXdiR1VnYVhSbGNtRjBhVzl1SUhSb2NtOTFaMmdnWVc0Z1pYWmxiblFuY3lCamIyeHNaV04wWldRZ1pHbHpjR0YwWTJobGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pYaGxZM1YwWlVScGMzQmhkR05vWlhOSmJrOXlaR1Z5S0dWMlpXNTBMQ0JqWWlrZ2UxeHVJQ0JtYjNKRllXTm9SWFpsYm5SRWFYTndZWFJqYUNobGRtVnVkQ3dnWTJJcE8xeHVJQ0JsZG1WdWRDNWZaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTWdQU0J1ZFd4c08xeHVJQ0JsZG1WdWRDNWZaR2x6Y0dGMFkyaEpSSE1nUFNCdWRXeHNPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGTjBZVzVrWVhKa0wzTnBiWEJzWlNCcGRHVnlZWFJwYjI0Z2RHaHliM1ZuYUNCaGJpQmxkbVZ1ZENkeklHTnZiR3hsWTNSbFpDQmthWE53WVhSamFHVnpMQ0JpZFhRZ2MzUnZjSE5jYmlBcUlHRjBJSFJvWlNCbWFYSnpkQ0JrYVhOd1lYUmphQ0JsZUdWamRYUnBiMjRnY21WMGRYSnVhVzVuSUhSeWRXVXNJR0Z1WkNCeVpYUjFjbTV6SUhSb1lYUWdhV1F1WEc0Z0tseHVJQ29nUUhKbGRIVnliaUJwWkNCdlppQjBhR1VnWm1seWMzUWdaR2x6Y0dGMFkyZ2daWGhsWTNWMGFXOXVJSGRvYnlkeklHeHBjM1JsYm1WeUlISmxkSFZ5Ym5NZ2RISjFaU3dnYjNKY2JpQXFJRzUxYkd3Z2FXWWdibThnYkdsemRHVnVaWElnY21WMGRYSnVaV1FnZEhKMVpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pYaGxZM1YwWlVScGMzQmhkR05vWlhOSmJrOXlaR1Z5VTNSdmNFRjBWSEoxWlVsdGNHd29aWFpsYm5RcElIdGNiaUFnZG1GeUlHUnBjM0JoZEdOb1RHbHpkR1Z1WlhKeklEMGdaWFpsYm5RdVgyUnBjM0JoZEdOb1RHbHpkR1Z1WlhKek8xeHVJQ0IyWVhJZ1pHbHpjR0YwWTJoSlJITWdQU0JsZG1WdWRDNWZaR2x6Y0dGMFkyaEpSSE03WEc0Z0lHbG1JQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZcElIdGNiaUFnSUNCMllXeHBaR0YwWlVWMlpXNTBSR2x6Y0dGMFkyaGxjeWhsZG1WdWRDazdYRzRnSUgxY2JpQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTXBLU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrYVhOd1lYUmphRXhwYzNSbGJtVnljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtbHpVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCTWFYTjBaVzVsY25NZ1lXNWtJRWxFY3lCaGNtVWdkSGR2SUhCaGNtRnNiR1ZzSUdGeWNtRjVjeUIwYUdGMElHRnlaU0JoYkhkaGVYTWdhVzRnYzNsdVl5NWNiaUFnSUNBZ0lHbG1JQ2hrYVhOd1lYUmphRXhwYzNSbGJtVnljMXRwWFNobGRtVnVkQ3dnWkdsemNHRjBZMmhKUkhOYmFWMHBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrYVhOd1lYUmphRWxFYzF0cFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnWld4elpTQnBaaUFvWkdsemNHRjBZMmhNYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0JwWmlBb1pHbHpjR0YwWTJoTWFYTjBaVzVsY25Nb1pYWmxiblFzSUdScGMzQmhkR05vU1VSektTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHUnBjM0JoZEdOb1NVUnpPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2JuVnNiRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkFjMlZsSUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6U1c1UGNtUmxjbE4wYjNCQmRGUnlkV1ZKYlhCc1hHNGdLaTljYm1aMWJtTjBhVzl1SUdWNFpXTjFkR1ZFYVhOd1lYUmphR1Z6U1c1UGNtUmxjbE4wYjNCQmRGUnlkV1VvWlhabGJuUXBJSHRjYmlBZ2RtRnlJSEpsZENBOUlHVjRaV04xZEdWRWFYTndZWFJqYUdWelNXNVBjbVJsY2xOMGIzQkJkRlJ5ZFdWSmJYQnNLR1YyWlc1MEtUdGNiaUFnWlhabGJuUXVYMlJwYzNCaGRHTm9TVVJ6SUQwZ2JuVnNiRHRjYmlBZ1pYWmxiblF1WDJScGMzQmhkR05vVEdsemRHVnVaWEp6SUQwZ2JuVnNiRHRjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjFjYmx4dUx5b3FYRzRnS2lCRmVHVmpkWFJwYjI0Z2IyWWdZU0JjSW1ScGNtVmpkRndpSUdScGMzQmhkR05vSUMwZ2RHaGxjbVVnYlhWemRDQmlaU0JoZENCdGIzTjBJRzl1WlNCa2FYTndZWFJqYUZ4dUlDb2dZV05qZFcxMWJHRjBaV1FnYjI0Z2RHaGxJR1YyWlc1MElHOXlJR2wwSUdseklHTnZibk5wWkdWeVpXUWdZVzRnWlhKeWIzSXVJRWwwSUdSdlpYTnVKM1FnY21WaGJHeDVJRzFoYTJWY2JpQXFJSE5sYm5ObElHWnZjaUJoYmlCbGRtVnVkQ0IzYVhSb0lHMTFiSFJwY0d4bElHUnBjM0JoZEdOb1pYTWdLR0oxWW1Kc1pXUXBJSFJ2SUd0bFpYQWdkSEpoWTJzZ2IyWWdkR2hsWEc0Z0tpQnlaWFIxY200Z2RtRnNkV1Z6SUdGMElHVmhZMmdnWkdsemNHRjBZMmdnWlhobFkzVjBhVzl1TENCaWRYUWdhWFFnWkc5bGN5QjBaVzVrSUhSdklHMWhhMlVnYzJWdWMyVWdkMmhsYmx4dUlDb2daR1ZoYkdsdVp5QjNhWFJvSUZ3aVpHbHlaV04wWENJZ1pHbHpjR0YwWTJobGN5NWNiaUFxWEc0Z0tpQkFjbVYwZFhKdUlGUm9aU0J5WlhSMWNtNGdkbUZzZFdVZ2IyWWdaWGhsWTNWMGFXNW5JSFJvWlNCemFXNW5iR1VnWkdsemNHRjBZMmd1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1Y0WldOMWRHVkVhWEpsWTNSRWFYTndZWFJqYUNobGRtVnVkQ2tnZTF4dUlDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ2RtRnNhV1JoZEdWRmRtVnVkRVJwYzNCaGRHTm9aWE1vWlhabGJuUXBPMXh1SUNCOVhHNGdJSFpoY2lCa2FYTndZWFJqYUV4cGMzUmxibVZ5SUQwZ1pYWmxiblF1WDJScGMzQmhkR05vVEdsemRHVnVaWEp6TzF4dUlDQjJZWElnWkdsemNHRjBZMmhKUkNBOUlHVjJaVzUwTGw5a2FYTndZWFJqYUVsRWN6dGNiaUFnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQWhRWEp5WVhrdWFYTkJjbkpoZVNoa2FYTndZWFJqYUV4cGMzUmxibVZ5S1N4Y2JpQWdJQ0FuWlhobFkzVjBaVVJwY21WamRFUnBjM0JoZEdOb0tDNHVMaWs2SUVsdWRtRnNhV1FnWUdWMlpXNTBZQzRuWEc0Z0lDa2dPaUJwYm5aaGNtbGhiblFvSVVGeWNtRjVMbWx6UVhKeVlYa29aR2x6Y0dGMFkyaE1hWE4wWlc1bGNpa3BLVHRjYmlBZ2RtRnlJSEpsY3lBOUlHUnBjM0JoZEdOb1RHbHpkR1Z1WlhJZ1AxeHVJQ0FnSUdScGMzQmhkR05vVEdsemRHVnVaWElvWlhabGJuUXNJR1JwYzNCaGRHTm9TVVFwSURwY2JpQWdJQ0J1ZFd4c08xeHVJQ0JsZG1WdWRDNWZaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTWdQU0J1ZFd4c08xeHVJQ0JsZG1WdWRDNWZaR2x6Y0dGMFkyaEpSSE1nUFNCdWRXeHNPMXh1SUNCeVpYUjFjbTRnY21Wek8xeHVmVnh1WEc0dktpcGNiaUFxSUVCd1lYSmhiU0I3VTNsdWRHaGxkR2xqUlhabGJuUjlJR1YyWlc1MFhHNGdLaUJBY21WMGRYSnVJSHRpYjI5c2ZTQlVjblZsSUdsbVppQnVkVzFpWlhJZ2IyWWdaR2x6Y0dGMFkyaGxjeUJoWTJOMWJYVnNZWFJsWkNCcGN5Qm5jbVZoZEdWeUlIUm9ZVzRnTUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYUdGelJHbHpjR0YwWTJobGN5aGxkbVZ1ZENrZ2UxeHVJQ0J5WlhSMWNtNGdJU0ZsZG1WdWRDNWZaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1IyVnVaWEpoYkNCMWRHbHNhWFJwWlhNZ2RHaGhkQ0JoY21VZ2RYTmxablZzSUdsdUlHTnlaV0YwYVc1bklHTjFjM1J2YlNCRmRtVnVkQ0JRYkhWbmFXNXpMbHh1SUNvdlhHNTJZWElnUlhabGJuUlFiSFZuYVc1VmRHbHNjeUE5SUh0Y2JpQWdhWE5GYm1ScGMyZzZJR2x6Ulc1a2FYTm9MRnh1SUNCcGMwMXZkbVZwYzJnNklHbHpUVzkyWldsemFDeGNiaUFnYVhOVGRHRnlkR2x6YURvZ2FYTlRkR0Z5ZEdsemFDeGNibHh1SUNCbGVHVmpkWFJsUkdseVpXTjBSR2x6Y0dGMFkyZzZJR1Y0WldOMWRHVkVhWEpsWTNSRWFYTndZWFJqYUN4Y2JpQWdaWGhsWTNWMFpVUnBjM0JoZEdOb09pQmxlR1ZqZFhSbFJHbHpjR0YwWTJnc1hHNGdJR1Y0WldOMWRHVkVhWE53WVhSamFHVnpTVzVQY21SbGNqb2daWGhsWTNWMFpVUnBjM0JoZEdOb1pYTkpiazl5WkdWeUxGeHVJQ0JsZUdWamRYUmxSR2x6Y0dGMFkyaGxjMGx1VDNKa1pYSlRkRzl3UVhSVWNuVmxPaUJsZUdWamRYUmxSR2x6Y0dGMFkyaGxjMGx1VDNKa1pYSlRkRzl3UVhSVWNuVmxMRnh1SUNCb1lYTkVhWE53WVhSamFHVnpPaUJvWVhORWFYTndZWFJqYUdWekxGeHVJQ0JwYm1wbFkzUnBiMjQ2SUdsdWFtVmpkR2x2Yml4Y2JpQWdkWE5sVkc5MVkyaEZkbVZ1ZEhNNklHWmhiSE5sWEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVYyWlc1MFVHeDFaMmx1VlhScGJITTdYRzRpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaWQsZXZlbnQscHJvcGFnYXRpb25QaGFzZSl7dmFyIHJlZ2lzdHJhdGlvbk5hbWU9ZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07cmV0dXJuIGdldExpc3RlbmVyKGlkLHJlZ2lzdHJhdGlvbk5hbWUpfWZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoZG9tSUQsdXB3YXJkcyxldmVudCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmIWRvbUlEKXRocm93IG5ldyBFcnJvcihcIkRpc3BhdGNoaW5nIGlkIG11c3Qgbm90IGJlIG51bGxcIik7dmFyIHBoYXNlPXVwd2FyZHM/UHJvcGFnYXRpb25QaGFzZXMuYnViYmxlZDpQcm9wYWdhdGlvblBoYXNlcy5jYXB0dXJlZCxsaXN0ZW5lcj1saXN0ZW5lckF0UGhhc2UoZG9tSUQsZXZlbnQscGhhc2UpO2xpc3RlbmVyJiYoZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzPWFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyxsaXN0ZW5lciksZXZlbnQuX2Rpc3BhdGNoSURzPWFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcyxkb21JRCkpfWZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpe2V2ZW50JiZldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZShldmVudC5kaXNwYXRjaE1hcmtlcixhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLGV2ZW50KX1mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpZCxpZ25vcmVkRGlyZWN0aW9uLGV2ZW50KXtpZihldmVudCYmZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSl7dmFyIHJlZ2lzdHJhdGlvbk5hbWU9ZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSxsaXN0ZW5lcj1nZXRMaXN0ZW5lcihpZCxyZWdpc3RyYXRpb25OYW1lKTtsaXN0ZW5lciYmKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycz1hY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsbGlzdGVuZXIpLGV2ZW50Ll9kaXNwYXRjaElEcz1hY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJRHMsaWQpKX19ZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpe2V2ZW50JiZldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5kaXNwYXRjaE1hcmtlcixudWxsLGV2ZW50KX1mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cyl7Zm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cyxhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKX1mdW5jdGlvbiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsZW50ZXIsZnJvbUlELHRvSUQpe0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tSUQsdG9JRCxhY2N1bXVsYXRlRGlzcGF0Y2hlcyxsZWF2ZSxlbnRlcil9ZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKXtmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKX12YXIgRXZlbnRDb25zdGFudHM9cmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIiksRXZlbnRQbHVnaW5IdWI9cmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIiksYWNjdW11bGF0ZUludG89cmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIiksZm9yRWFjaEFjY3VtdWxhdGVkPXJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKSxQcm9wYWdhdGlvblBoYXNlcz1FdmVudENvbnN0YW50cy5Qcm9wYWdhdGlvblBoYXNlcyxnZXRMaXN0ZW5lcj1FdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcixFdmVudFByb3BhZ2F0b3JzPXthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6YWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc307bW9kdWxlLmV4cG9ydHM9RXZlbnRQcm9wYWdhdG9ycztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlJYWmxiblJRY205d1lXZGhkRzl5Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJWMEVzV1VGbFFTeFRRVUZUTEdsQ1FVRm5RaXhIUVVGSkxFMUJRVThzYTBKQlEyeERMRWRCUVVrc2EwSkJRMFlzVFVGQlRTeGxRVUZsTEhkQ1FVRjNRaXhwUWtGREwwTXNUMEZCVHl4aFFVRlpMRWRCUVVrc2EwSkJVM3BDTEZGQlFWTXNhVU5CUVdkRExFMUJRVThzVVVGQlV5eFBRVU4yUkN4SFFVRkpMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFhRVU14UWl4TlFVTklMRXRCUVUwc1NVRkJTU3hQUVVGTkxHdERRVWR3UWl4SlFVRkpMRTlCUVZFc1VVRkJWU3hyUWtGQmEwSXNVVUZCVlN4clFrRkJhMElzVTBGRGFFVXNVMEZCVnl4blFrRkJaMElzVFVGQlR5eE5RVUZQTEUxQlEzcERMRmxCUTBZc1RVRkJUU3h0UWtGRFNpeGxRVUZsTEUxQlFVMHNiVUpCUVc5Q0xGVkJRek5ETEUxQlFVMHNZVUZCWlN4bFFVRmxMRTFCUVUwc1lVRkJZeXhSUVZjMVJDeFJRVUZUTEc5RFFVRnRReXhQUVVOMFF5eFBRVUZUTEUxQlFVMHNaVUZCWlN4NVFrRkRhRU1zWlVGQlpTeFZRVUZWTEc5Q1FVRnZRaXhwUWtGRE0wTXNUVUZCVFN4bFFVTk9MR2REUVVOQkxFOUJWMDRzVVVGQlV5eHpRa0ZCY1VJc1IwRkJTU3hwUWtGQmEwSXNUMEZEYkVRc1IwRkJTU3hQUVVGVExFMUJRVTBzWlVGQlpTeHBRa0ZCYTBJc1EwRkRiRVFzUjBGQlNTeHJRa0ZCYlVJc1RVRkJUU3hsUVVGbExHbENRVU40UXl4VFFVRlhMRmxCUVZrc1IwRkJTU3hwUWtGRE0wSXNXVUZEUml4TlFVRk5MRzFDUVVOS0xHVkJRV1VzVFVGQlRTeHRRa0ZCYjBJc1ZVRkRNME1zVFVGQlRTeGhRVUZsTEdWQlFXVXNUVUZCVFN4aFFVRmpMRTFCVlRsRUxGRkJRVk1zYTBOQlFXbERMRTlCUTNCRExFOUJRVk1zVFVGQlRTeGxRVUZsTEd0Q1FVTm9ReXh4UWtGQmNVSXNUVUZCVFN4bFFVRm5RaXhMUVVGTkxFOUJTWEpFTEZGQlFWTXNPRUpCUVRaQ0xGRkJRM0JETEcxQ1FVRnRRaXhQUVVGUkxHOURRVWMzUWl4UlFVRlRMR2REUVVFclFpeE5RVUZQTEUxQlFVOHNUMEZCVVN4TlFVTTFSQ3hsUVVGbExGVkJRVlVzYjBKQlFXOUNMRzFDUVVNelF5eFBRVU5CTEV0QlEwRXNjVUpCUTBFc1RVRkRRU3hQUVV0S0xGRkJRVk1zTkVKQlFUSkNMRkZCUTJ4RExHMUNRVUZ0UWl4UFFVRlJMR3REUVhSSE4wSXNSMEZCU1N4blFrRkJhVUlzVVVGQlVTeHZRa0ZEZWtJc1pVRkJhVUlzVVVGQlVTeHZRa0ZGZWtJc1pVRkJhVUlzVVVGQlVTeHZRa0ZEZWtJc2JVSkJRWEZDTEZGQlFWRXNkMEpCUlRkQ0xHdENRVUZ2UWl4bFFVRmxMR3RDUVVOdVF5eFpRVUZqTEdWQlFXVXNXVUVyUnpkQ0xHdENRVU5HTERaQ1FVRTRRaXcyUWtGRE9VSXNNa0pCUVRSQ0xESkNRVU0xUWl3clFrRkJaME1zSzBKQlIyeERMRkZCUVU4c1VVRkJWU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRVYyWlc1MFVISnZjR0ZuWVhSdmNuTmNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJGZG1WdWRFTnZibk4wWVc1MGN5QTlJSEpsY1hWcGNtVW9YQ0l1TDBWMlpXNTBRMjl1YzNSaGJuUnpYQ0lwTzF4dWRtRnlJRVYyWlc1MFVHeDFaMmx1U0hWaUlEMGdjbVZ4ZFdseVpTaGNJaTR2UlhabGJuUlFiSFZuYVc1SWRXSmNJaWs3WEc1Y2JuWmhjaUJoWTJOMWJYVnNZWFJsU1c1MGJ5QTlJSEpsY1hWcGNtVW9YQ0l1TDJGalkzVnRkV3hoZEdWSmJuUnZYQ0lwTzF4dWRtRnlJR1p2Y2tWaFkyaEJZMk4xYlhWc1lYUmxaQ0E5SUhKbGNYVnBjbVVvWENJdUwyWnZja1ZoWTJoQlkyTjFiWFZzWVhSbFpGd2lLVHRjYmx4dWRtRnlJRkJ5YjNCaFoyRjBhVzl1VUdoaGMyVnpJRDBnUlhabGJuUkRiMjV6ZEdGdWRITXVVSEp2Y0dGbllYUnBiMjVRYUdGelpYTTdYRzUyWVhJZ1oyVjBUR2x6ZEdWdVpYSWdQU0JGZG1WdWRGQnNkV2RwYmtoMVlpNW5aWFJNYVhOMFpXNWxjanRjYmx4dUx5b3FYRzRnS2lCVGIyMWxJR1YyWlc1MElIUjVjR1Z6SUdoaGRtVWdZU0J1YjNScGIyNGdiMllnWkdsbVptVnlaVzUwSUhKbFoybHpkSEpoZEdsdmJpQnVZVzFsY3lCbWIzSWdaR2xtWm1WeVpXNTBYRzRnS2lCY0luQm9ZWE5sYzF3aUlHOW1JSEJ5YjNCaFoyRjBhVzl1TGlCVWFHbHpJR1pwYm1SeklHeHBjM1JsYm1WeWN5QmllU0JoSUdkcGRtVnVJSEJvWVhObExseHVJQ292WEc1bWRXNWpkR2x2YmlCc2FYTjBaVzVsY2tGMFVHaGhjMlVvYVdRc0lHVjJaVzUwTENCd2NtOXdZV2RoZEdsdmJsQm9ZWE5sS1NCN1hHNGdJSFpoY2lCeVpXZHBjM1J5WVhScGIyNU9ZVzFsSUQxY2JpQWdJQ0JsZG1WdWRDNWthWE53WVhSamFFTnZibVpwWnk1d2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjMXR3Y205d1lXZGhkR2x2YmxCb1lYTmxYVHRjYmlBZ2NtVjBkWEp1SUdkbGRFeHBjM1JsYm1WeUtHbGtMQ0J5WldkcGMzUnlZWFJwYjI1T1lXMWxLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlVZV2R6SUdFZ1lGTjViblJvWlhScFkwVjJaVzUwWUNCM2FYUm9JR1JwYzNCaGRHTm9aV1FnYkdsemRHVnVaWEp6TGlCRGNtVmhkR2x1WnlCMGFHbHpJR1oxYm1OMGFXOXVYRzRnS2lCb1pYSmxMQ0JoYkd4dmQzTWdkWE1nZEc4Z2JtOTBJR2hoZG1VZ2RHOGdZbWx1WkNCdmNpQmpjbVZoZEdVZ1puVnVZM1JwYjI1eklHWnZjaUJsWVdOb0lHVjJaVzUwTGx4dUlDb2dUWFYwWVhScGJtY2dkR2hsSUdWMlpXNTBKM01nYldWdFltVnljeUJoYkd4dmQzTWdkWE1nZEc4Z2JtOTBJR2hoZG1VZ2RHOGdZM0psWVhSbElHRWdkM0poY0hCcGJtZGNiaUFxSUZ3aVpHbHpjR0YwWTJoY0lpQnZZbXBsWTNRZ2RHaGhkQ0J3WVdseWN5QjBhR1VnWlhabGJuUWdkMmwwYUNCMGFHVWdiR2x6ZEdWdVpYSXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHRmpZM1Z0ZFd4aGRHVkVhWEpsWTNScGIyNWhiRVJwYzNCaGRHTm9aWE1vWkc5dFNVUXNJSFZ3ZDJGeVpITXNJR1YyWlc1MEtTQjdYRzRnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0JwWmlBb0lXUnZiVWxFS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBScGMzQmhkR05vYVc1bklHbGtJRzExYzNRZ2JtOTBJR0psSUc1MWJHd25LVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdkbUZ5SUhCb1lYTmxJRDBnZFhCM1lYSmtjeUEvSUZCeWIzQmhaMkYwYVc5dVVHaGhjMlZ6TG1KMVltSnNaV1FnT2lCUWNtOXdZV2RoZEdsdmJsQm9ZWE5sY3k1allYQjBkWEpsWkR0Y2JpQWdkbUZ5SUd4cGMzUmxibVZ5SUQwZ2JHbHpkR1Z1WlhKQmRGQm9ZWE5sS0dSdmJVbEVMQ0JsZG1WdWRDd2djR2hoYzJVcE8xeHVJQ0JwWmlBb2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCbGRtVnVkQzVmWkdsemNHRjBZMmhNYVhOMFpXNWxjbk1nUFZ4dUlDQWdJQ0FnWVdOamRXMTFiR0YwWlVsdWRHOG9aWFpsYm5RdVgyUnBjM0JoZEdOb1RHbHpkR1Z1WlhKekxDQnNhWE4wWlc1bGNpazdYRzRnSUNBZ1pYWmxiblF1WDJScGMzQmhkR05vU1VSeklEMGdZV05qZFcxMWJHRjBaVWx1ZEc4b1pYWmxiblF1WDJScGMzQmhkR05vU1VSekxDQmtiMjFKUkNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkRiMnhzWldOMElHUnBjM0JoZEdOb1pYTWdLRzExYzNRZ1ltVWdaVzUwYVhKbGJIa2dZMjlzYkdWamRHVmtJR0psWm05eVpTQmthWE53WVhSamFHbHVaeUF0SUhObFpTQjFibWwwWEc0Z0tpQjBaWE4wY3lrdUlFeGhlbWxzZVNCaGJHeHZZMkYwWlNCMGFHVWdZWEp5WVhrZ2RHOGdZMjl1YzJWeWRtVWdiV1Z0YjNKNUxpQWdWMlVnYlhWemRDQnNiMjl3SUhSb2NtOTFaMmhjYmlBcUlHVmhZMmdnWlhabGJuUWdZVzVrSUhCbGNtWnZjbTBnZEdobElIUnlZWFpsY25OaGJDQm1iM0lnWldGamFDQnZibVV1SUZkbElHTmhiaUJ1YjNRZ2NHVnlabTl5YlNCaFhHNGdLaUJ6YVc1bmJHVWdkSEpoZG1WeWMyRnNJR1p2Y2lCMGFHVWdaVzUwYVhKbElHTnZiR3hsWTNScGIyNGdiMllnWlhabGJuUnpJR0psWTJGMWMyVWdaV0ZqYUNCbGRtVnVkQ0J0WVhsY2JpQXFJR2hoZG1VZ1lTQmthV1ptWlhKbGJuUWdkR0Z5WjJWMExseHVJQ292WEc1bWRXNWpkR2x2YmlCaFkyTjFiWFZzWVhSbFZIZHZVR2hoYzJWRWFYTndZWFJqYUdWelUybHVaMnhsS0dWMlpXNTBLU0I3WEc0Z0lHbG1JQ2hsZG1WdWRDQW1KaUJsZG1WdWRDNWthWE53WVhSamFFTnZibVpwWnk1d2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjeWtnZTF4dUlDQWdJRVYyWlc1MFVHeDFaMmx1U0hWaUxtbHVhbVZqZEdsdmJpNW5aWFJKYm5OMFlXNWpaVWhoYm1Sc1pTZ3BMblJ5WVhabGNuTmxWSGR2VUdoaGMyVW9YRzRnSUNBZ0lDQmxkbVZ1ZEM1a2FYTndZWFJqYUUxaGNtdGxjaXhjYmlBZ0lDQWdJR0ZqWTNWdGRXeGhkR1ZFYVhKbFkzUnBiMjVoYkVScGMzQmhkR05vWlhNc1hHNGdJQ0FnSUNCbGRtVnVkRnh1SUNBZ0lDazdYRzRnSUgxY2JuMWNibHh1WEc0dktpcGNiaUFxSUVGalkzVnRkV3hoZEdWeklIZHBkR2h2ZFhRZ2NtVm5ZWEprSUhSdklHUnBjbVZqZEdsdmJpd2daRzlsY3lCdWIzUWdiRzl2YXlCbWIzSWdjR2hoYzJWa1hHNGdLaUJ5WldkcGMzUnlZWFJwYjI0Z2JtRnRaWE11SUZOaGJXVWdZWE1nWUdGalkzVnRkV3hoZEdWRWFYSmxZM1JFYVhOd1lYUmphR1Z6VTJsdVoyeGxZQ0JpZFhRZ2QybDBhRzkxZEZ4dUlDb2djbVZ4ZFdseWFXNW5JSFJvWVhRZ2RHaGxJR0JrYVhOd1lYUmphRTFoY210bGNtQWdZbVVnZEdobElITmhiV1VnWVhNZ2RHaGxJR1JwYzNCaGRHTm9aV1FnU1VRdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdGalkzVnRkV3hoZEdWRWFYTndZWFJqYUdWektHbGtMQ0JwWjI1dmNtVmtSR2x5WldOMGFXOXVMQ0JsZG1WdWRDa2dlMXh1SUNCcFppQW9aWFpsYm5RZ0ppWWdaWFpsYm5RdVpHbHpjR0YwWTJoRGIyNW1hV2N1Y21WbmFYTjBjbUYwYVc5dVRtRnRaU2tnZTF4dUlDQWdJSFpoY2lCeVpXZHBjM1J5WVhScGIyNU9ZVzFsSUQwZ1pYWmxiblF1WkdsemNHRjBZMmhEYjI1bWFXY3VjbVZuYVhOMGNtRjBhVzl1VG1GdFpUdGNiaUFnSUNCMllYSWdiR2x6ZEdWdVpYSWdQU0JuWlhSTWFYTjBaVzVsY2locFpDd2djbVZuYVhOMGNtRjBhVzl1VG1GdFpTazdYRzRnSUNBZ2FXWWdLR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdJQ0JsZG1WdWRDNWZaR2x6Y0dGMFkyaE1hWE4wWlc1bGNuTWdQVnh1SUNBZ0lDQWdJQ0JoWTJOMWJYVnNZWFJsU1c1MGJ5aGxkbVZ1ZEM1ZlpHbHpjR0YwWTJoTWFYTjBaVzVsY25Nc0lHeHBjM1JsYm1WeUtUdGNiaUFnSUNBZ0lHVjJaVzUwTGw5a2FYTndZWFJqYUVsRWN5QTlJR0ZqWTNWdGRXeGhkR1ZKYm5SdktHVjJaVzUwTGw5a2FYTndZWFJqYUVsRWN5d2dhV1FwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGalkzVnRkV3hoZEdWeklHUnBjM0JoZEdOb1pYTWdiMjRnWVc0Z1lGTjViblJvWlhScFkwVjJaVzUwWUN3Z1luVjBJRzl1YkhrZ1ptOXlJSFJvWlZ4dUlDb2dZR1JwYzNCaGRHTm9UV0Z5YTJWeVlDNWNiaUFxSUVCd1lYSmhiU0I3VTNsdWRHaGxkR2xqUlhabGJuUjlJR1YyWlc1MFhHNGdLaTljYm1aMWJtTjBhVzl1SUdGalkzVnRkV3hoZEdWRWFYSmxZM1JFYVhOd1lYUmphR1Z6VTJsdVoyeGxLR1YyWlc1MEtTQjdYRzRnSUdsbUlDaGxkbVZ1ZENBbUppQmxkbVZ1ZEM1a2FYTndZWFJqYUVOdmJtWnBaeTV5WldkcGMzUnlZWFJwYjI1T1lXMWxLU0I3WEc0Z0lDQWdZV05qZFcxMWJHRjBaVVJwYzNCaGRHTm9aWE1vWlhabGJuUXVaR2x6Y0dGMFkyaE5ZWEpyWlhJc0lHNTFiR3dzSUdWMlpXNTBLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCaFkyTjFiWFZzWVhSbFZIZHZVR2hoYzJWRWFYTndZWFJqYUdWektHVjJaVzUwY3lrZ2UxeHVJQ0JtYjNKRllXTm9RV05qZFcxMWJHRjBaV1FvWlhabGJuUnpMQ0JoWTJOMWJYVnNZWFJsVkhkdlVHaGhjMlZFYVhOd1lYUmphR1Z6VTJsdVoyeGxLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZV05qZFcxMWJHRjBaVVZ1ZEdWeVRHVmhkbVZFYVhOd1lYUmphR1Z6S0d4bFlYWmxMQ0JsYm5SbGNpd2dabkp2YlVsRUxDQjBiMGxFS1NCN1hHNGdJRVYyWlc1MFVHeDFaMmx1U0hWaUxtbHVhbVZqZEdsdmJpNW5aWFJKYm5OMFlXNWpaVWhoYm1Sc1pTZ3BMblJ5WVhabGNuTmxSVzUwWlhKTVpXRjJaU2hjYmlBZ0lDQm1jbTl0U1VRc1hHNGdJQ0FnZEc5SlJDeGNiaUFnSUNCaFkyTjFiWFZzWVhSbFJHbHpjR0YwWTJobGN5eGNiaUFnSUNCc1pXRjJaU3hjYmlBZ0lDQmxiblJsY2x4dUlDQXBPMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJR0ZqWTNWdGRXeGhkR1ZFYVhKbFkzUkVhWE53WVhSamFHVnpLR1YyWlc1MGN5a2dlMXh1SUNCbWIzSkZZV05vUVdOamRXMTFiR0YwWldRb1pYWmxiblJ6TENCaFkyTjFiWFZzWVhSbFJHbHlaV04wUkdsemNHRjBZMmhsYzFOcGJtZHNaU2s3WEc1OVhHNWNibHh1WEc0dktpcGNiaUFxSUVFZ2MyMWhiR3dnYzJWMElHOW1JSEJ5YjNCaFoyRjBhVzl1SUhCaGRIUmxjbTV6TENCbFlXTm9JRzltSUhkb2FXTm9JSGRwYkd3Z1lXTmpaWEIwSUdFZ2MyMWhiR3dnWVcxdmRXNTBYRzRnS2lCdlppQnBibVp2Y20xaGRHbHZiaXdnWVc1a0lHZGxibVZ5WVhSbElHRWdjMlYwSUc5bUlGd2laR2x6Y0dGMFkyZ2djbVZoWkhrZ1pYWmxiblFnYjJKcVpXTjBjMXdpSUMwZ2QyaHBZMmhjYmlBcUlHRnlaU0J6WlhSeklHOW1JR1YyWlc1MGN5QjBhR0YwSUdoaGRtVWdZV3h5WldGa2VTQmlaV1Z1SUdGdWJtOTBZWFJsWkNCM2FYUm9JR0VnYzJWMElHOW1JR1JwYzNCaGRHTm9aV1JjYmlBcUlHeHBjM1JsYm1WeUlHWjFibU4wYVc5dWN5OXBaSE11SUZSb1pTQkJVRWtnYVhNZ1pHVnphV2R1WldRZ2RHaHBjeUIzWVhrZ2RHOGdaR2x6WTI5MWNtRm5aU0IwYUdWelpWeHVJQ29nY0hKdmNHRm5ZWFJwYjI0Z2MzUnlZWFJsWjJsbGN5Qm1jbTl0SUdGamRIVmhiR3g1SUdWNFpXTjFkR2x1WnlCMGFHVWdaR2x6Y0dGMFkyaGxjeXdnYzJsdVkyVWdkMlZjYmlBcUlHRnNkMkY1Y3lCM1lXNTBJSFJ2SUdOdmJHeGxZM1FnZEdobElHVnVkR2x5WlNCelpYUWdiMllnWkdsemNHRjBZMmhsY3lCaVpXWnZjbVVnWlhobFkzVjBhVzVuSUdWMlpXNTBJR0ZjYmlBcUlITnBibWRzWlNCdmJtVXVYRzRnS2x4dUlDb2dRR052Ym5OMGNuVmpkRzl5SUVWMlpXNTBVSEp2Y0dGbllYUnZjbk5jYmlBcUwxeHVkbUZ5SUVWMlpXNTBVSEp2Y0dGbllYUnZjbk1nUFNCN1hHNGdJR0ZqWTNWdGRXeGhkR1ZVZDI5UWFHRnpaVVJwYzNCaGRHTm9aWE02SUdGalkzVnRkV3hoZEdWVWQyOVFhR0Z6WlVScGMzQmhkR05vWlhNc1hHNGdJR0ZqWTNWdGRXeGhkR1ZFYVhKbFkzUkVhWE53WVhSamFHVnpPaUJoWTJOMWJYVnNZWFJsUkdseVpXTjBSR2x6Y0dGMFkyaGxjeXhjYmlBZ1lXTmpkVzExYkdGMFpVVnVkR1Z5VEdWaGRtVkVhWE53WVhSamFHVnpPaUJoWTJOMWJYVnNZWFJsUlc1MFpYSk1aV0YyWlVScGMzQmhkR05vWlhOY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUlhabGJuUlFjbTl3WVdkaGRHOXljenRjYmlKZGZRPT0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgY2FuVXNlRE9NID0gISEoXG4gICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpXG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoXCIuL2dldFRleHRDb250ZW50QWNjZXNzb3JcIik7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgY2xhc3Mgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gcm9vdFxuICovXG5mdW5jdGlvbiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUocm9vdCkge1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fc3RhcnRUZXh0ID0gdGhpcy5nZXRUZXh0KCk7XG4gIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbmFzc2lnbihGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucHJvdG90eXBlLCB7XG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB0ZXh0IG9mIGlucHV0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUZXh0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoJ3ZhbHVlJyBpbiB0aGlzLl9yb290KSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdC52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3RbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHRoZSBkaWZmZXJpbmcgc3Vic3RyaW5nIGJldHdlZW4gdGhlIGluaXRpYWxseSBzdG9yZWRcbiAgICogdGV4dCBjb250ZW50IGFuZCB0aGUgY3VycmVudCBjb250ZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXREYXRhOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fZmFsbGJhY2tUZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICAgIH1cblxuICAgIHZhciBzdGFydDtcbiAgICB2YXIgc3RhcnRWYWx1ZSA9IHRoaXMuX3N0YXJ0VGV4dDtcbiAgICB2YXIgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aDtcbiAgICB2YXIgZW5kO1xuICAgIHZhciBlbmRWYWx1ZSA9IHRoaXMuZ2V0VGV4dCgpO1xuICAgIHZhciBlbmRMZW5ndGggPSBlbmRWYWx1ZS5sZW5ndGg7XG5cbiAgICBmb3IgKHN0YXJ0ID0gMDsgc3RhcnQgPCBzdGFydExlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRdICE9PSBlbmRWYWx1ZVtzdGFydF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gICAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRMZW5ndGggLSBlbmRdICE9PSBlbmRWYWx1ZVtlbmRMZW5ndGggLSBlbmRdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzbGljZVRhaWwgPSBlbmQgPiAxID8gMSAtIGVuZCA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgc2xpY2VUYWlsKTtcbiAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEhUTUxET01Qcm9wZXJ0eUNvbmZpZ1xuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xudmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xudmFyIEhBU19CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFO1xudmFyIEhBU19TSURFX0VGRkVDVFMgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUztcbnZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSA9XG4gIERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID1cbiAgRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU7XG5cbnZhciBoYXNTVkc7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHZhciBpbXBsZW1lbnRhdGlvbiA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uO1xuICBoYXNTVkcgPSAoXG4gICAgaW1wbGVtZW50YXRpb24gJiZcbiAgICBpbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcbiAgICAgICdodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlJyxcbiAgICAgICcxLjEnXG4gICAgKVxuICApO1xufVxuXG5cbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChcbiAgICAvXihkYXRhfGFyaWEpLVthLXpfXVthLXpcXGRfLlxcLV0qJC9cbiAgKSxcbiAgUHJvcGVydGllczoge1xuICAgIC8qKlxuICAgICAqIFN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhY2NlcHQ6IG51bGwsXG4gICAgYWNjZXB0Q2hhcnNldDogbnVsbCxcbiAgICBhY2Nlc3NLZXk6IG51bGwsXG4gICAgYWN0aW9uOiBudWxsLFxuICAgIGFsbG93RnVsbFNjcmVlbjogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBhbHQ6IG51bGwsXG4gICAgYXN5bmM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICAvLyBhdXRvRm9jdXMgaXMgcG9seWZpbGxlZC9ub3JtYWxpemVkIGJ5IEF1dG9Gb2N1c01peGluXG4gICAgLy8gYXV0b0ZvY3VzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvUGxheTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2VsbFBhZGRpbmc6IG51bGwsXG4gICAgY2VsbFNwYWNpbmc6IG51bGwsXG4gICAgY2hhclNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2xhc3NJRDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIFRvIHNldCBjbGFzc05hbWUgb24gU1ZHIGVsZW1lbnRzLCBpdCdzIG5lY2Vzc2FyeSB0byB1c2UgLnNldEF0dHJpYnV0ZTtcbiAgICAvLyB0aGlzIHdvcmtzIG9uIEhUTUwgZWxlbWVudHMgdG9vIGluIGFsbCBicm93c2VycyBleGNlcHQgSUU4LiBDb252ZW5pZW50bHksXG4gICAgLy8gSUU4IGRvZXNuJ3Qgc3VwcG9ydCBTVkcgYW5kIHNvIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSBhdHRyaWJ1dGUgaW5cbiAgICAvLyBicm93c2VycyB0aGF0IHN1cHBvcnQgU1ZHIGFuZCB0aGUgcHJvcGVydHkgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCxcbiAgICAvLyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgSFRNTCBvciBTVkcuXG4gICAgY2xhc3NOYW1lOiBoYXNTVkcgPyBNVVNUX1VTRV9BVFRSSUJVVEUgOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBjb2xzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBjb2xTcGFuOiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgY29udGVudEVkaXRhYmxlOiBudWxsLFxuICAgIGNvbnRleHRNZW51OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY29udHJvbHM6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY29vcmRzOiBudWxsLFxuICAgIGNyb3NzT3JpZ2luOiBudWxsLFxuICAgIGRhdGE6IG51bGwsIC8vIEZvciBgPG9iamVjdCAvPmAgYWN0cyBhcyBgc3JjYC5cbiAgICBkYXRlVGltZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkaXI6IG51bGwsXG4gICAgZGlzYWJsZWQ6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgIGRyYWdnYWJsZTogbnVsbCxcbiAgICBlbmNUeXBlOiBudWxsLFxuICAgIGZvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtQWN0aW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybUVuY1R5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybU5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGZvcm1UYXJnZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmcmFtZUJvcmRlcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGhlYWRlcnM6IG51bGwsXG4gICAgaGVpZ2h0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaGlkZGVuOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBoaWdoOiBudWxsLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaHRtbEZvcjogbnVsbCxcbiAgICBodHRwRXF1aXY6IG51bGwsXG4gICAgaWNvbjogbnVsbCxcbiAgICBpZDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgbGFiZWw6IG51bGwsXG4gICAgbGFuZzogbnVsbCxcbiAgICBsaXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbG9vcDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBsb3c6IG51bGwsXG4gICAgbWFuaWZlc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJnaW5IZWlnaHQ6IG51bGwsXG4gICAgbWFyZ2luV2lkdGg6IG51bGwsXG4gICAgbWF4OiBudWxsLFxuICAgIG1heExlbmd0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1lZGlhOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWFHcm91cDogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgbWluOiBudWxsLFxuICAgIG11bHRpcGxlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG11dGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG5hbWU6IG51bGwsXG4gICAgbm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgb3BlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgb3B0aW11bTogbnVsbCxcbiAgICBwYXR0ZXJuOiBudWxsLFxuICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgIHBvc3RlcjogbnVsbCxcbiAgICBwcmVsb2FkOiBudWxsLFxuICAgIHJhZGlvR3JvdXA6IG51bGwsXG4gICAgcmVhZE9ubHk6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcmVsOiBudWxsLFxuICAgIHJlcXVpcmVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByb2xlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcm93czogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgcm93U3BhbjogbnVsbCxcbiAgICBzYW5kYm94OiBudWxsLFxuICAgIHNjb3BlOiBudWxsLFxuICAgIHNjb3BlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2Nyb2xsaW5nOiBudWxsLFxuICAgIHNlYW1sZXNzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzZWxlY3RlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzaGFwZTogbnVsbCxcbiAgICBzaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzaXplczogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwYW46IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNwZWxsQ2hlY2s6IG51bGwsXG4gICAgc3JjOiBudWxsLFxuICAgIHNyY0RvYzogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgc3JjU2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RhcnQ6IEhBU19OVU1FUklDX1ZBTFVFLFxuICAgIHN0ZXA6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgdGFiSW5kZXg6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHR5cGU6IG51bGwsXG4gICAgdXNlTWFwOiBudWxsLFxuICAgIHZhbHVlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19TSURFX0VGRkVDVFMsXG4gICAgd2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB3bW9kZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXG4gICAgLyoqXG4gICAgICogTm9uLXN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICAvLyBhdXRvQ2FwaXRhbGl6ZSBhbmQgYXV0b0NvcnJlY3QgYXJlIHN1cHBvcnRlZCBpbiBNb2JpbGUgU2FmYXJpIGZvclxuICAgIC8vIGtleWJvYXJkIGhpbnRzLlxuICAgIGF1dG9DYXBpdGFsaXplOiBudWxsLFxuICAgIGF1dG9Db3JyZWN0OiBudWxsLFxuICAgIC8vIGl0ZW1Qcm9wLCBpdGVtU2NvcGUsIGl0ZW1UeXBlIGFyZSBmb3JcbiAgICAvLyBNaWNyb2RhdGEgc3VwcG9ydC4gU2VlIGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuICAgIGl0ZW1Qcm9wOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaXRlbVNjb3BlOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBpdGVtVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIGl0ZW1JRCBhbmQgaXRlbVJlZiBhcmUgZm9yIE1pY3JvZGF0YSBzdXBwb3J0IGFzIHdlbGwgYnV0XG4gICAgLy8gb25seSBzcGVjaWZpZWQgaW4gdGhlIHRoZSBXSEFUV0cgc3BlYyBkb2N1bWVudC4gU2VlXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWljcm9kYXRhLmh0bWwjbWljcm9kYXRhLWRvbS1hcGlcbiAgICBpdGVtSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpdGVtUmVmOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gcHJvcGVydHkgaXMgc3VwcG9ydGVkIGZvciBPcGVuR3JhcGggaW4gbWV0YSB0YWdzLlxuICAgIHByb3BlcnR5OiBudWxsLFxuICAgIC8vIElFLW9ubHkgYXR0cmlidXRlIHRoYXQgY29udHJvbHMgZm9jdXMgYmVoYXZpb3JcbiAgICB1bnNlbGVjdGFibGU6IE1VU1RfVVNFX0FUVFJJQlVURVxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxGb3I6ICdmb3InLFxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIERPTVByb3BlcnR5TmFtZXM6IHtcbiAgICBhdXRvQ2FwaXRhbGl6ZTogJ2F1dG9jYXBpdGFsaXplJyxcbiAgICBhdXRvQ29tcGxldGU6ICdhdXRvY29tcGxldGUnLFxuICAgIGF1dG9Db3JyZWN0OiAnYXV0b2NvcnJlY3QnLFxuICAgIGF1dG9Gb2N1czogJ2F1dG9mb2N1cycsXG4gICAgYXV0b1BsYXk6ICdhdXRvcGxheScsXG4gICAgLy8gYGVuY29kaW5nYCBpcyBlcXVpdmFsZW50IHRvIGBlbmN0eXBlYCwgSUU4IGxhY2tzIGFuIGBlbmN0eXBlYCBzZXR0ZXIuXG4gICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNkb20tZnMtZW5jb2RpbmdcbiAgICBlbmNUeXBlOiAnZW5jb2RpbmcnLFxuICAgIGhyZWZMYW5nOiAnaHJlZmxhbmcnLFxuICAgIHJhZGlvR3JvdXA6ICdyYWRpb2dyb3VwJyxcbiAgICBzcGVsbENoZWNrOiAnc3BlbGxjaGVjaycsXG4gICAgc3JjRG9jOiAnc3JjZG9jJyxcbiAgICBzcmNTZXQ6ICdzcmNzZXQnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTERPTVByb3BlcnR5Q29uZmlnO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChudWxsPT1pbnB1dC5wcm9wcy5jaGVja2VkTGlua3x8bnVsbD09aW5wdXQucHJvcHMudmFsdWVMaW5rLFwiQ2Fubm90IHByb3ZpZGUgYSBjaGVja2VkTGluayBhbmQgYSB2YWx1ZUxpbmsuIElmIHlvdSB3YW50IHRvIHVzZSBjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS5cIik6aW52YXJpYW50KG51bGw9PWlucHV0LnByb3BzLmNoZWNrZWRMaW5rfHxudWxsPT1pbnB1dC5wcm9wcy52YWx1ZUxpbmspfWZ1bmN0aW9uIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXQpe19hc3NlcnRTaW5nbGVMaW5rKGlucHV0KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChudWxsPT1pbnB1dC5wcm9wcy52YWx1ZSYmbnVsbD09aW5wdXQucHJvcHMub25DaGFuZ2UsXCJDYW5ub3QgcHJvdmlkZSBhIHZhbHVlTGluayBhbmQgYSB2YWx1ZSBvciBvbkNoYW5nZSBldmVudC4gSWYgeW91IHdhbnQgdG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rLlwiKTppbnZhcmlhbnQobnVsbD09aW5wdXQucHJvcHMudmFsdWUmJm51bGw9PWlucHV0LnByb3BzLm9uQ2hhbmdlKX1mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpe19hc3NlcnRTaW5nbGVMaW5rKGlucHV0KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChudWxsPT1pbnB1dC5wcm9wcy5jaGVja2VkJiZudWxsPT1pbnB1dC5wcm9wcy5vbkNoYW5nZSxcIkNhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gSWYgeW91IHdhbnQgdG8gdXNlIGNoZWNrZWQgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIHVzZSBjaGVja2VkTGlua1wiKTppbnZhcmlhbnQobnVsbD09aW5wdXQucHJvcHMuY2hlY2tlZCYmbnVsbD09aW5wdXQucHJvcHMub25DaGFuZ2UpfWZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZShlKXt0aGlzLnByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LnZhbHVlKX1mdW5jdGlvbiBfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2UoZSl7dGhpcy5wcm9wcy5jaGVja2VkTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LmNoZWNrZWQpfXZhciBSZWFjdFByb3BUeXBlcz1yZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlc1wiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLGhhc1JlYWRPbmx5VmFsdWU9e2J1dHRvbjohMCxjaGVja2JveDohMCxpbWFnZTohMCxoaWRkZW46ITAscmFkaW86ITAscmVzZXQ6ITAsc3VibWl0OiEwfSxMaW5rZWRWYWx1ZVV0aWxzPXtNaXhpbjp7cHJvcFR5cGVzOnt2YWx1ZTpmdW5jdGlvbihwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lKXtyZXR1cm4hcHJvcHNbcHJvcE5hbWVdfHxoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdfHxwcm9wcy5vbkNoYW5nZXx8cHJvcHMucmVhZE9ubHl8fHByb3BzLmRpc2FibGVkP251bGw6bmV3IEVycm9yKFwiWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuIGBvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgdGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCBzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC5cIil9LGNoZWNrZWQ6ZnVuY3Rpb24ocHJvcHMscHJvcE5hbWUsY29tcG9uZW50TmFtZSl7cmV0dXJuIXByb3BzW3Byb3BOYW1lXXx8cHJvcHMub25DaGFuZ2V8fHByb3BzLnJlYWRPbmx5fHxwcm9wcy5kaXNhYmxlZD9udWxsOm5ldyBFcnJvcihcIllvdSBwcm92aWRlZCBhIGBjaGVja2VkYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuIGBvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgdGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsIHNldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLlwiKX0sb25DaGFuZ2U6UmVhY3RQcm9wVHlwZXMuZnVuY319LGdldFZhbHVlOmZ1bmN0aW9uKGlucHV0KXtyZXR1cm4gaW5wdXQucHJvcHMudmFsdWVMaW5rPyhfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KSxpbnB1dC5wcm9wcy52YWx1ZUxpbmsudmFsdWUpOmlucHV0LnByb3BzLnZhbHVlfSxnZXRDaGVja2VkOmZ1bmN0aW9uKGlucHV0KXtyZXR1cm4gaW5wdXQucHJvcHMuY2hlY2tlZExpbms/KF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCksaW5wdXQucHJvcHMuY2hlY2tlZExpbmsudmFsdWUpOmlucHV0LnByb3BzLmNoZWNrZWR9LGdldE9uQ2hhbmdlOmZ1bmN0aW9uKGlucHV0KXtyZXR1cm4gaW5wdXQucHJvcHMudmFsdWVMaW5rPyhfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KSxfaGFuZGxlTGlua2VkVmFsdWVDaGFuZ2UpOmlucHV0LnByb3BzLmNoZWNrZWRMaW5rPyhfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpLF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZSk6aW5wdXQucHJvcHMub25DaGFuZ2V9fTttb2R1bGUuZXhwb3J0cz1MaW5rZWRWYWx1ZVV0aWxzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VEdsdWEyVmtWbUZzZFdWVmRHbHNjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQldVRXNXVUZuUWtFc1UwRkJVeXh0UWtGQmEwSXNUMEZEZUVJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEV2l4TlFVRXpRaXhOUVVGTkxFMUJRVTBzWVVGQlowUXNUVUZCZWtJc1RVRkJUU3hOUVVGTkxGVkJReTlETERCSlFVVkZMRlZCUVhGRExFMUJRVE5DTEUxQlFVMHNUVUZCVFN4aFFVRm5SQ3hOUVVGNlFpeE5RVUZOTEUxQlFVMHNWMEZGTDBRc1VVRkJVeXhyUWtGQmFVSXNUMEZEZUVJc2EwSkJRV3RDTEU5QlEycENMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEyeENMRTFCUVhKQ0xFMUJRVTBzVFVGQlRTeFBRVUY1UXl4TlFVRjRRaXhOUVVGTkxFMUJRVTBzVTBGRGVrTXNOa2xCUlVVc1ZVRkJLMElzVFVGQmNrSXNUVUZCVFN4TlFVRk5MRTlCUVhsRExFMUJRWGhDTEUxQlFVMHNUVUZCVFN4VlFVZDZSQ3hSUVVGVExHOUNRVUZ0UWl4UFFVTXhRaXhyUWtGQmEwSXNUMEZEYWtJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEYUVJc1RVRkJka0lzVFVGQlRTeE5RVUZOTEZOQlFUSkRMRTFCUVhoQ0xFMUJRVTBzVFVGQlRTeFRRVU16UXl3MlNrRkhSU3hWUVVGcFF5eE5RVUYyUWl4TlFVRk5MRTFCUVUwc1UwRkJNa01zVFVGQmVFSXNUVUZCVFN4TlFVRk5MRlZCVFRORUxGRkJRVk1zTUVKQlFYbENMRWRCUldoRExFdEJRVXNzVFVGQlRTeFZRVUZWTEdOQlFXTXNSVUZCUlN4UFFVRlBMRTlCVFRsRExGRkJRVk1zTUVKQlFYbENMRWRCUldoRExFdEJRVXNzVFVGQlRTeFpRVUZaTEdOQlFXTXNSVUZCUlN4UFFVRlBMRk5CY2tSb1JDeEhRVUZKTEdkQ1FVRnBRaXhSUVVGUkxHOUNRVVY2UWl4VlFVRlpMRkZCUVZFc1pVRkZjRUlzYTBKQlEwWXNVVUZCVlN4RlFVTldMRlZCUVZrc1JVRkRXaXhQUVVGVExFVkJRMVFzVVVGQlZTeEZRVU5XTEU5QlFWTXNSVUZEVkN4UFFVRlRMRVZCUTFRc1VVRkJWU3hIUVdsRVVpeHJRa0ZEUml4UFFVTkZMRmRCUTBVc1RVRkJUeXhUUVVGVExFMUJRVThzVTBGQlZTeGxRVU12UWl4UFFVRkxMRTFCUVUwc1YwRkRVQ3hwUWtGQmFVSXNUVUZCVFN4UFFVTjJRaXhOUVVGTkxGVkJRMDRzVFVGQlRTeFZRVU5PTEUxQlFVMHNVMEZEUkN4TFFVVkdMRWRCUVVrc1QwRkRWQ3h6VGtGTlNpeFJRVUZUTEZOQlFWTXNUVUZCVHl4VFFVRlZMR1ZCUTJwRExFOUJRVXNzVFVGQlRTeFhRVU5RTEUxQlFVMHNWVUZEVGl4TlFVRk5MRlZCUTA0c1RVRkJUU3hUUVVORUxFdEJSVVlzUjBGQlNTeFBRVU5VTERCT1FVMUtMRk5CUVZVc1pVRkJaU3hQUVZFM1FpeFRRVUZWTEZOQlFWTXNUMEZEYWtJc1RVRkJTU3hQUVVGTkxFMUJRVTBzVjBGRFpDeHBRa0ZCYVVJc1QwRkRWaXhOUVVGTkxFMUJRVTBzVlVGQlZTeFBRVVY0UWl4TlFVRk5MRTFCUVUwc1QwRlJja0lzVjBGQldTeFRRVUZUTEU5QlEyNUNMRTFCUVVrc1QwRkJUU3hOUVVGTkxHRkJRMlFzYlVKQlFXMUNMRTlCUTFvc1RVRkJUU3hOUVVGTkxGbEJRVmtzVDBGRk1VSXNUVUZCVFN4TlFVRk5MRk5CVDNKQ0xGbEJRV0VzVTBGQlV5eFBRVU53UWl4TlFVRkpMRTlCUVUwc1RVRkJUU3hYUVVOa0xHbENRVUZwUWl4UFFVTldMREJDUVVORkxFMUJRVTBzVFVGQlRTeGhRVU55UWl4dFFrRkJiVUlzVDBGRFdpd3dRa0ZGUml4TlFVRk5MRTFCUVUwc1ZVRkpka0lzVVVGQlR5eFJRVUZWSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVEdsdWEyVmtWbUZzZFdWVmRHbHNjMXh1SUNvZ1FIUjVjR1ZqYUdWamEzTWdjM1JoZEdsakxXOXViSGxjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCU1pXRmpkRkJ5YjNCVWVYQmxjeUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wVUhKdmNGUjVjR1Z6WENJcE8xeHVYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVYRzUyWVhJZ2FHRnpVbVZoWkU5dWJIbFdZV3gxWlNBOUlIdGNiaUFnSjJKMWRIUnZiaWM2SUhSeWRXVXNYRzRnSUNkamFHVmphMkp2ZUNjNklIUnlkV1VzWEc0Z0lDZHBiV0ZuWlNjNklIUnlkV1VzWEc0Z0lDZG9hV1JrWlc0bk9pQjBjblZsTEZ4dUlDQW5jbUZrYVc4bk9pQjBjblZsTEZ4dUlDQW5jbVZ6WlhRbk9pQjBjblZsTEZ4dUlDQW5jM1ZpYldsMEp6b2dkSEoxWlZ4dWZUdGNibHh1Wm5WdVkzUnBiMjRnWDJGemMyVnlkRk5wYm1kc1pVeHBibXNvYVc1d2RYUXBJSHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0JwYm5CMWRDNXdjbTl3Y3k1amFHVmphMlZrVEdsdWF5QTlQU0J1ZFd4c0lIeDhJR2x1Y0hWMExuQnliM0J6TG5aaGJIVmxUR2x1YXlBOVBTQnVkV3hzTEZ4dUlDQWdJQ2REWVc1dWIzUWdjSEp2ZG1sa1pTQmhJR05vWldOclpXUk1hVzVySUdGdVpDQmhJSFpoYkhWbFRHbHVheTRnU1dZZ2VXOTFJSGRoYm5RZ2RHOGdkWE5sSUNjZ0sxeHVJQ0FnSUNkamFHVmphMlZrVEdsdWF5d2dlVzkxSUhCeWIySmhZbXg1SUdSdmJseGNKM1FnZDJGdWRDQjBieUIxYzJVZ2RtRnNkV1ZNYVc1cklHRnVaQ0IyYVdObElIWmxjbk5oTGlkY2JpQWdLU0E2SUdsdWRtRnlhV0Z1ZENocGJuQjFkQzV3Y205d2N5NWphR1ZqYTJWa1RHbHVheUE5UFNCdWRXeHNJSHg4SUdsdWNIVjBMbkJ5YjNCekxuWmhiSFZsVEdsdWF5QTlQU0J1ZFd4c0tTazdYRzU5WEc1bWRXNWpkR2x2YmlCZllYTnpaWEowVm1Gc2RXVk1hVzVyS0dsdWNIVjBLU0I3WEc0Z0lGOWhjM05sY25SVGFXNW5iR1ZNYVc1cktHbHVjSFYwS1R0Y2JpQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNCcGJuQjFkQzV3Y205d2N5NTJZV3gxWlNBOVBTQnVkV3hzSUNZbUlHbHVjSFYwTG5CeWIzQnpMbTl1UTJoaGJtZGxJRDA5SUc1MWJHd3NYRzRnSUNBZ0owTmhibTV2ZENCd2NtOTJhV1JsSUdFZ2RtRnNkV1ZNYVc1cklHRnVaQ0JoSUhaaGJIVmxJRzl5SUc5dVEyaGhibWRsSUdWMlpXNTBMaUJKWmlCNWIzVWdkMkZ1ZENBbklDdGNiaUFnSUNBbmRHOGdkWE5sSUhaaGJIVmxJRzl5SUc5dVEyaGhibWRsTENCNWIzVWdjSEp2WW1GaWJIa2daRzl1WEZ3bmRDQjNZVzUwSUhSdklIVnpaU0IyWVd4MVpVeHBibXN1SjF4dUlDQXBJRG9nYVc1MllYSnBZVzUwS0dsdWNIVjBMbkJ5YjNCekxuWmhiSFZsSUQwOUlHNTFiR3dnSmlZZ2FXNXdkWFF1Y0hKdmNITXViMjVEYUdGdVoyVWdQVDBnYm5Wc2JDa3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZZWE56WlhKMFEyaGxZMnRsWkV4cGJtc29hVzV3ZFhRcElIdGNiaUFnWDJGemMyVnlkRk5wYm1kc1pVeHBibXNvYVc1d2RYUXBPMXh1SUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJR2x1Y0hWMExuQnliM0J6TG1Ob1pXTnJaV1FnUFQwZ2JuVnNiQ0FtSmlCcGJuQjFkQzV3Y205d2N5NXZia05vWVc1blpTQTlQU0J1ZFd4c0xGeHVJQ0FnSUNkRFlXNXViM1FnY0hKdmRtbGtaU0JoSUdOb1pXTnJaV1JNYVc1cklHRnVaQ0JoSUdOb1pXTnJaV1FnY0hKdmNHVnlkSGtnYjNJZ2IyNURhR0Z1WjJVZ1pYWmxiblF1SUNjZ0sxeHVJQ0FnSUNkSlppQjViM1VnZDJGdWRDQjBieUIxYzJVZ1kyaGxZMnRsWkNCdmNpQnZia05vWVc1blpTd2dlVzkxSUhCeWIySmhZbXg1SUdSdmJseGNKM1FnZDJGdWRDQjBieUFuSUN0Y2JpQWdJQ0FuZFhObElHTm9aV05yWldSTWFXNXJKMXh1SUNBcElEb2dhVzUyWVhKcFlXNTBLR2x1Y0hWMExuQnliM0J6TG1Ob1pXTnJaV1FnUFQwZ2JuVnNiQ0FtSmlCcGJuQjFkQzV3Y205d2N5NXZia05vWVc1blpTQTlQU0J1ZFd4c0tTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FIQmhjbUZ0SUh0VGVXNTBhR1YwYVdORmRtVnVkSDBnWlNCamFHRnVaMlVnWlhabGJuUWdkRzhnYUdGdVpHeGxYRzRnS2k5Y2JtWjFibU4wYVc5dUlGOW9ZVzVrYkdWTWFXNXJaV1JXWVd4MVpVTm9ZVzVuWlNobEtTQjdYRzRnSUM4cWFuTm9hVzUwSUhaaGJHbGtkR2hwY3pwMGNuVmxJQ292WEc0Z0lIUm9hWE11Y0hKdmNITXVkbUZzZFdWTWFXNXJMbkpsY1hWbGMzUkRhR0Z1WjJVb1pTNTBZWEpuWlhRdWRtRnNkV1VwTzF4dWZWeHVYRzR2S2lwY2JpQWdLaUJBY0dGeVlXMGdlMU41Ym5Sb1pYUnBZMFYyWlc1MGZTQmxJR05vWVc1blpTQmxkbVZ1ZENCMGJ5Qm9ZVzVrYkdWY2JpQWdLaTljYm1aMWJtTjBhVzl1SUY5b1lXNWtiR1ZNYVc1clpXUkRhR1ZqYTBOb1lXNW5aU2hsS1NCN1hHNGdJQzhxYW5Ob2FXNTBJSFpoYkdsa2RHaHBjenAwY25WbElDb3ZYRzRnSUhSb2FYTXVjSEp2Y0hNdVkyaGxZMnRsWkV4cGJtc3VjbVZ4ZFdWemRFTm9ZVzVuWlNobExuUmhjbWRsZEM1amFHVmphMlZrS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJRY205MmFXUmxJR0VnYkdsdWEyVmtJR0IyWVd4MVpXQWdZWFIwY21saWRYUmxJR1p2Y2lCamIyNTBjbTlzYkdWa0lHWnZjbTF6TGlCWmIzVWdjMmh2ZFd4a0lHNXZkQ0IxYzJWY2JpQXFJSFJvYVhNZ2IzVjBjMmxrWlNCdlppQjBhR1VnVW1WaFkzUkVUMDBnWTI5dWRISnZiR3hsWkNCbWIzSnRJR052YlhCdmJtVnVkSE11WEc0Z0tpOWNiblpoY2lCTWFXNXJaV1JXWVd4MVpWVjBhV3h6SUQwZ2UxeHVJQ0JOYVhocGJqb2dlMXh1SUNBZ0lIQnliM0JVZVhCbGN6b2dlMXh1SUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUtIQnliM0J6TENCd2NtOXdUbUZ0WlN3Z1kyOXRjRzl1Wlc1MFRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWEJ5YjNCelczQnliM0JPWVcxbFhTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnpVbVZoWkU5dWJIbFdZV3gxWlZ0d2NtOXdjeTUwZVhCbFhTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE11YjI1RGFHRnVaMlVnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCekxuSmxZV1JQYm14NUlIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdjeTVrYVhOaFlteGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0oxbHZkU0J3Y205MmFXUmxaQ0JoSUdCMllXeDFaV0FnY0hKdmNDQjBieUJoSUdadmNtMGdabWxsYkdRZ2QybDBhRzkxZENCaGJpQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBbllHOXVRMmhoYm1kbFlDQm9ZVzVrYkdWeUxpQlVhR2x6SUhkcGJHd2djbVZ1WkdWeUlHRWdjbVZoWkMxdmJteDVJR1pwWld4a0xpQkpaaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5kR2hsSUdacFpXeGtJSE5vYjNWc1pDQmlaU0J0ZFhSaFlteGxJSFZ6WlNCZ1pHVm1ZWFZzZEZaaGJIVmxZQzRnVDNSb1pYSjNhWE5sTENBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuYzJWMElHVnBkR2hsY2lCZ2IyNURhR0Z1WjJWZ0lHOXlJR0J5WldGa1QyNXNlV0F1SjF4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHTm9aV05yWldRNklHWjFibU4wYVc5dUtIQnliM0J6TENCd2NtOXdUbUZ0WlN3Z1kyOXRjRzl1Wlc1MFRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWEJ5YjNCelczQnliM0JPWVcxbFhTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE11YjI1RGFHRnVaMlVnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCekxuSmxZV1JQYm14NUlIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdjeTVrYVhOaFlteGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0oxbHZkU0J3Y205MmFXUmxaQ0JoSUdCamFHVmphMlZrWUNCd2NtOXdJSFJ2SUdFZ1ptOXliU0JtYVdWc1pDQjNhWFJvYjNWMElHRnVJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZGdiMjVEYUdGdVoyVmdJR2hoYm1Sc1pYSXVJRlJvYVhNZ2QybHNiQ0J5Wlc1a1pYSWdZU0J5WldGa0xXOXViSGtnWm1sbGJHUXVJRWxtSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2QwYUdVZ1ptbGxiR1FnYzJodmRXeGtJR0psSUcxMWRHRmliR1VnZFhObElHQmtaV1poZFd4MFEyaGxZMnRsWkdBdUlFOTBhR1Z5ZDJselpTd2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0ozTmxkQ0JsYVhSb1pYSWdZRzl1UTJoaGJtZGxZQ0J2Y2lCZ2NtVmhaRTl1YkhsZ0xpZGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0J2YmtOb1lXNW5aVG9nVW1WaFkzUlFjbTl3Vkhsd1pYTXVablZ1WTF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRU52YlhCdmJtVnVkSDBnYVc1d2RYUWdSbTl5YlNCamIyMXdiMjVsYm5SY2JpQWdJQ29nUUhKbGRIVnliaUI3S24wZ1kzVnljbVZ1ZENCMllXeDFaU0J2WmlCMGFHVWdhVzV3ZFhRZ1pXbDBhR1Z5SUdaeWIyMGdkbUZzZFdVZ2NISnZjQ0J2Y2lCc2FXNXJMbHh1SUNBZ0tpOWNiaUFnWjJWMFZtRnNkV1U2SUdaMWJtTjBhVzl1S0dsdWNIVjBLU0I3WEc0Z0lDQWdhV1lnS0dsdWNIVjBMbkJ5YjNCekxuWmhiSFZsVEdsdWF5a2dlMXh1SUNBZ0lDQWdYMkZ6YzJWeWRGWmhiSFZsVEdsdWF5aHBibkIxZENrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYVc1d2RYUXVjSEp2Y0hNdWRtRnNkV1ZNYVc1ckxuWmhiSFZsTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2FXNXdkWFF1Y0hKdmNITXVkbUZzZFdVN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRGIyMXdiMjVsYm5SOUlHbHVjSFYwSUVadmNtMGdZMjl0Y0c5dVpXNTBYRzRnSUNBcUlFQnlaWFIxY200Z2V5cDlJR04xY25KbGJuUWdZMmhsWTJ0bFpDQnpkR0YwZFhNZ2IyWWdkR2hsSUdsdWNIVjBJR1ZwZEdobGNpQm1jbTl0SUdOb1pXTnJaV1FnY0hKdmNGeHVJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQnZjaUJzYVc1ckxseHVJQ0FnS2k5Y2JpQWdaMlYwUTJobFkydGxaRG9nWm5WdVkzUnBiMjRvYVc1d2RYUXBJSHRjYmlBZ0lDQnBaaUFvYVc1d2RYUXVjSEp2Y0hNdVkyaGxZMnRsWkV4cGJtc3BJSHRjYmlBZ0lDQWdJRjloYzNObGNuUkRhR1ZqYTJWa1RHbHVheWhwYm5CMWRDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2FXNXdkWFF1Y0hKdmNITXVZMmhsWTJ0bFpFeHBibXN1ZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJwYm5CMWRDNXdjbTl3Y3k1amFHVmphMlZrTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCcGJuQjFkQ0JHYjNKdElHTnZiWEJ2Ym1WdWRGeHVJQ0FnS2lCQWNtVjBkWEp1SUh0bWRXNWpkR2x2Ym4wZ1kyaGhibWRsSUdOaGJHeGlZV05ySUdWcGRHaGxjaUJtY205dElHOXVRMmhoYm1kbElIQnliM0FnYjNJZ2JHbHVheTVjYmlBZ0lDb3ZYRzRnSUdkbGRFOXVRMmhoYm1kbE9pQm1kVzVqZEdsdmJpaHBibkIxZENrZ2UxeHVJQ0FnSUdsbUlDaHBibkIxZEM1d2NtOXdjeTUyWVd4MVpVeHBibXNwSUh0Y2JpQWdJQ0FnSUY5aGMzTmxjblJXWVd4MVpVeHBibXNvYVc1d2RYUXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlGOW9ZVzVrYkdWTWFXNXJaV1JXWVd4MVpVTm9ZVzVuWlR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dsdWNIVjBMbkJ5YjNCekxtTm9aV05yWldSTWFXNXJLU0I3WEc0Z0lDQWdJQ0JmWVhOelpYSjBRMmhsWTJ0bFpFeHBibXNvYVc1d2RYUXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlGOW9ZVzVrYkdWTWFXNXJaV1JEYUdWamEwTm9ZVzVuWlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHbHVjSFYwTG5CeWIzQnpMbTl1UTJoaGJtZGxPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUV4cGJtdGxaRlpoYkhWbFZYUnBiSE03WEc0aVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcmVtb3ZlKGV2ZW50KXtldmVudC5yZW1vdmUoKX12YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKSxhY2N1bXVsYXRlSW50bz1yZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKSxmb3JFYWNoQWNjdW11bGF0ZWQ9cmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIiksTG9jYWxFdmVudFRyYXBNaXhpbj17dHJhcEJ1YmJsZWRFdmVudDpmdW5jdGlvbih0b3BMZXZlbFR5cGUsaGFuZGxlckJhc2VOYW1lKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpLFwiTXVzdCBiZSBtb3VudGVkIHRvIHRyYXAgZXZlbnRzXCIpOmludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKTt2YXIgbm9kZT10aGlzLmdldERPTU5vZGUoKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChub2RlLFwiTG9jYWxFdmVudFRyYXBNaXhpbi50cmFwQnViYmxlZEV2ZW50KC4uLik6IFJlcXVpcmVzIG5vZGUgdG8gYmUgcmVuZGVyZWQuXCIpOmludmFyaWFudChub2RlKTt2YXIgbGlzdGVuZXI9UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlLGhhbmRsZXJCYXNlTmFtZSxub2RlKTt0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzPWFjY3VtdWxhdGVJbnRvKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMsbGlzdGVuZXIpfSxjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpe3RoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMmJmZvckVhY2hBY2N1bXVsYXRlZCh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzLHJlbW92ZSl9fTttb2R1bGUuZXhwb3J0cz1Mb2NhbEV2ZW50VHJhcE1peGluO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VEc5allXeEZkbVZ1ZEZSeVlYQk5hWGhwYmk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJWMEVzV1VGUlFTeFRRVUZUTEZGQlFVOHNUMEZEWkN4TlFVRk5MRk5CVUZJc1IwRkJTU3d3UWtGQk1rSXNVVUZCVVN3NFFrRkZia01zWlVGQmFVSXNVVUZCVVN4dlFrRkRla0lzYlVKQlFYRkNMRkZCUVZFc2QwSkJRemRDTEZWQlFWa3NVVUZCVVN4bFFVMXdRaXh4UWtGRFJpeHBRa0ZCYVVJc1UwRkJVeXhoUVVGakxHbENRVU55UXl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVUZWTEV0QlFVc3NXVUZCWVN4clEwRkJiME1zVlVGQlZTeExRVUZMTEZsQlIzaElMRWxCUVVrc1RVRkJUeXhMUVVGTExGbEJRMllzWjBKQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM1pETEV0QlEwRXNORVZCUTBVc1ZVRkJWU3hMUVVOa0xFbEJRVWtzVlVGQlZ5eDVRa0ZCZVVJc2FVSkJRM1JETEdGQlEwRXNaMEpCUTBFc1MwRkZSaXhOUVVGTExIRkNRVU5JTEdWQlFXVXNTMEZCU3l4eFFrRkJjMElzVjBGTk9VTXNjVUpCUVhGQ0xGZEJRMllzUzBGQlN5eHpRa0ZEVUN4dFFrRkJiVUlzUzBGQlN5eHhRa0ZCYzBJc1UwRkxjRVFzVVVGQlR5eFJRVUZWSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREUwTFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnVEc5allXeEZkbVZ1ZEZSeVlYQk5hWGhwYmx4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGSmxZV04wUW5KdmQzTmxja1YyWlc1MFJXMXBkSFJsY2lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFFuSnZkM05sY2tWMlpXNTBSVzFwZEhSbGNsd2lLVHRjYmx4dWRtRnlJR0ZqWTNWdGRXeGhkR1ZKYm5SdklEMGdjbVZ4ZFdseVpTaGNJaTR2WVdOamRXMTFiR0YwWlVsdWRHOWNJaWs3WEc1MllYSWdabTl5UldGamFFRmpZM1Z0ZFd4aGRHVmtJRDBnY21WeGRXbHlaU2hjSWk0dlptOXlSV0ZqYUVGalkzVnRkV3hoZEdWa1hDSXBPMXh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9YQ0l1TDJsdWRtRnlhV0Z1ZEZ3aUtUdGNibHh1Wm5WdVkzUnBiMjRnY21WdGIzWmxLR1YyWlc1MEtTQjdYRzRnSUdWMlpXNTBMbkpsYlc5MlpTZ3BPMXh1ZlZ4dVhHNTJZWElnVEc5allXeEZkbVZ1ZEZSeVlYQk5hWGhwYmlBOUlIdGNiaUFnZEhKaGNFSjFZbUpzWldSRmRtVnVkRHBtZFc1amRHbHZiaWgwYjNCTVpYWmxiRlI1Y0dVc0lHaGhibVJzWlhKQ1lYTmxUbUZ0WlNrZ2UxeHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvZEdocGN5NXBjMDF2ZFc1MFpXUW9LU3dnSjAxMWMzUWdZbVVnYlc5MWJuUmxaQ0IwYnlCMGNtRndJR1YyWlc1MGN5Y3BJRG9nYVc1MllYSnBZVzUwS0hSb2FYTXVhWE5OYjNWdWRHVmtLQ2twS1R0Y2JpQWdJQ0F2THlCSlppQmhJR052YlhCdmJtVnVkQ0J5Wlc1a1pYSnpJSFJ2SUc1MWJHd2diM0lnYVdZZ1lXNXZkR2hsY2lCamIyMXdiMjVsYm5RZ1ptRjBZV3h6SUdGdVpDQmpZWFZ6WlhOY2JpQWdJQ0F2THlCMGFHVWdjM1JoZEdVZ2IyWWdkR2hsSUhSeVpXVWdkRzhnWW1VZ1kyOXljblZ3ZEdWa0xDQmdibTlrWldBZ2FHVnlaU0JqWVc0Z1ltVWdiblZzYkM1Y2JpQWdJQ0IyWVhJZ2JtOWtaU0E5SUhSb2FYTXVaMlYwUkU5TlRtOWtaU2dwTzF4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQnViMlJsTEZ4dUlDQWdJQ0FnSjB4dlkyRnNSWFpsYm5SVWNtRndUV2w0YVc0dWRISmhjRUoxWW1Kc1pXUkZkbVZ1ZENndUxpNHBPaUJTWlhGMWFYSmxjeUJ1YjJSbElIUnZJR0psSUhKbGJtUmxjbVZrTGlkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtHNXZaR1VwS1R0Y2JpQWdJQ0IyWVhJZ2JHbHpkR1Z1WlhJZ1BTQlNaV0ZqZEVKeWIzZHpaWEpGZG1WdWRFVnRhWFIwWlhJdWRISmhjRUoxWW1Kc1pXUkZkbVZ1ZENoY2JpQWdJQ0FnSUhSdmNFeGxkbVZzVkhsd1pTeGNiaUFnSUNBZ0lHaGhibVJzWlhKQ1lYTmxUbUZ0WlN4Y2JpQWdJQ0FnSUc1dlpHVmNiaUFnSUNBcE8xeHVJQ0FnSUhSb2FYTXVYMnh2WTJGc1JYWmxiblJNYVhOMFpXNWxjbk1nUFZ4dUlDQWdJQ0FnWVdOamRXMTFiR0YwWlVsdWRHOG9kR2hwY3k1ZmJHOWpZV3hGZG1WdWRFeHBjM1JsYm1WeWN5d2diR2x6ZEdWdVpYSXBPMXh1SUNCOUxGeHVYRzRnSUM4dklIUnlZWEJEWVhCMGRYSmxaRVYyWlc1MElIZHZkV3hrSUd4dmIyc2dibVZoY214NUlHbGtaVzUwYVdOaGJDNGdWMlVnWkc5dUozUWdhVzF3YkdWdFpXNTBJSFJvWVhSY2JpQWdMeThnYldWMGFHOWtJR0psWTJGMWMyVWdhWFFnYVhOdUozUWdZM1Z5Y21WdWRHeDVJRzVsWldSbFpDNWNibHh1SUNCamIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWREcG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWZiRzlqWVd4RmRtVnVkRXhwYzNSbGJtVnljeWtnZTF4dUlDQWdJQ0FnWm05eVJXRmphRUZqWTNWdGRXeGhkR1ZrS0hSb2FYTXVYMnh2WTJGc1JYWmxiblJNYVhOMFpXNWxjbk1zSUhKbGJXOTJaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUV4dlkyRnNSWFpsYm5SVWNtRndUV2w0YVc0N1hHNGlYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8qKlxuICogTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb24gbm9uLWludGVyYWN0aXZlXG4gKiBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3QgZmlyZS4gVGhlIHdvcmthcm91bmRcbiAqIGZvciB0aGlzIGJ1ZyBpbnZvbHZlcyBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2sgbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGFydGljdWxhciBwbHVnaW4gd29ya3MgYXJvdW5kIHRoZSBidWcgYnkgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gKiBsaXN0ZW5lciBvbiBgdG91Y2hzdGFydGAgKHdoaWNoIGRvZXMgZmlyZSBvbiBldmVyeSBlbGVtZW50KS5cbiAqL1xudmFyIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogbnVsbCxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldCAmJiAhdGFyZ2V0Lm9uY2xpY2spIHtcbiAgICAgICAgdGFyZ2V0Lm9uY2xpY2sgPSBlbXB0eUZ1bmN0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgT2JqZWN0LmFzc2lnblxuICovXG5cbi8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuYXNzaWduXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlcykge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIHRhcmdldCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIG5leHRJbmRleCA9IDE7IG5leHRJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG4gICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbbmV4dEluZGV4XTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IE9iamVjdChuZXh0U291cmNlKTtcblxuICAgIC8vIFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IGFjY2Vzc29ycyBub3IgcHJveGllcy4gVGhlcmVmb3JlIHRoaXNcbiAgICAvLyBjb3B5IGNhbm5vdCB0aHJvdy4gSWYgd2UgZXZlciBzdXBwb3J0ZWQgdGhpcyB0aGVuIHdlIG11c3QgaGFuZGxlXG4gICAgLy8gZXhjZXB0aW9ucyBhbmQgc2lkZS1lZmZlY3RzLiBXZSBkb24ndCBzdXBwb3J0IHN5bWJvbHMgc28gdGhleSB3b24ndFxuICAgIC8vIGJlIHRyYW5zZmVycmVkLlxuXG4gICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcbiAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLG9uZUFyZ3VtZW50UG9vbGVyPWZ1bmN0aW9uKGNvcHlGaWVsZHNGcm9tKXt2YXIgS2xhc3M9dGhpcztpZihLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgaW5zdGFuY2U9S2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiBLbGFzcy5jYWxsKGluc3RhbmNlLGNvcHlGaWVsZHNGcm9tKSxpbnN0YW5jZX1yZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKX0sdHdvQXJndW1lbnRQb29sZXI9ZnVuY3Rpb24oYTEsYTIpe3ZhciBLbGFzcz10aGlzO2lmKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciBpbnN0YW5jZT1LbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7cmV0dXJuIEtsYXNzLmNhbGwoaW5zdGFuY2UsYTEsYTIpLGluc3RhbmNlfXJldHVybiBuZXcgS2xhc3MoYTEsYTIpfSx0aHJlZUFyZ3VtZW50UG9vbGVyPWZ1bmN0aW9uKGExLGEyLGEzKXt2YXIgS2xhc3M9dGhpcztpZihLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgaW5zdGFuY2U9S2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiBLbGFzcy5jYWxsKGluc3RhbmNlLGExLGEyLGEzKSxpbnN0YW5jZX1yZXR1cm4gbmV3IEtsYXNzKGExLGEyLGEzKX0sZml2ZUFyZ3VtZW50UG9vbGVyPWZ1bmN0aW9uKGExLGEyLGEzLGE0LGE1KXt2YXIgS2xhc3M9dGhpcztpZihLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgaW5zdGFuY2U9S2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiBLbGFzcy5jYWxsKGluc3RhbmNlLGExLGEyLGEzLGE0LGE1KSxpbnN0YW5jZX1yZXR1cm4gbmV3IEtsYXNzKGExLGEyLGEzLGE0LGE1KX0sc3RhbmRhcmRSZWxlYXNlcj1mdW5jdGlvbihpbnN0YW5jZSl7dmFyIEtsYXNzPXRoaXM7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcyxcIlRyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuXCIpOmludmFyaWFudChpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzKSxpbnN0YW5jZS5kZXN0cnVjdG9yJiZpbnN0YW5jZS5kZXN0cnVjdG9yKCksS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aDxLbGFzcy5wb29sU2l6ZSYmS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpfSxERUZBVUxUX1BPT0xfU0laRT0xMCxERUZBVUxUX1BPT0xFUj1vbmVBcmd1bWVudFBvb2xlcixhZGRQb29saW5nVG89ZnVuY3Rpb24oQ29weUNvbnN0cnVjdG9yLHBvb2xlcil7dmFyIE5ld0tsYXNzPUNvcHlDb25zdHJ1Y3RvcjtyZXR1cm4gTmV3S2xhc3MuaW5zdGFuY2VQb29sPVtdLE5ld0tsYXNzLmdldFBvb2xlZD1wb29sZXJ8fERFRkFVTFRfUE9PTEVSLE5ld0tsYXNzLnBvb2xTaXplfHwoTmV3S2xhc3MucG9vbFNpemU9REVGQVVMVF9QT09MX1NJWkUpLE5ld0tsYXNzLnJlbGVhc2U9c3RhbmRhcmRSZWxlYXNlcixOZXdLbGFzc30sUG9vbGVkQ2xhc3M9e2FkZFBvb2xpbmdUbzphZGRQb29saW5nVG8sb25lQXJndW1lbnRQb29sZXI6b25lQXJndW1lbnRQb29sZXIsdHdvQXJndW1lbnRQb29sZXI6dHdvQXJndW1lbnRQb29sZXIsdGhyZWVBcmd1bWVudFBvb2xlcjp0aHJlZUFyZ3VtZW50UG9vbGVyLGZpdmVBcmd1bWVudFBvb2xlcjpmaXZlQXJndW1lbnRQb29sZXJ9O21vZHVsZS5leHBvcnRzPVBvb2xlZENsYXNzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VUc5dmJHVmtRMnhoYzNNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmRCTEZsQlJVRXNTVUZCU1N4WFFVRlpMRkZCUVZFc1pVRlRjRUlzYTBKQlFXOUNMRk5CUVZNc1owSkJReTlDTEVkQlFVa3NUMEZCVVN4SlFVTmFMRWxCUVVrc1RVRkJUU3hoUVVGaExFOUJRVkVzUTBGRE4wSXNSMEZCU1N4VlFVRlhMRTFCUVUwc1lVRkJZU3hMUVVWc1F5eFBRVVJCTEU5QlFVMHNTMEZCU3l4VFFVRlZMR2RDUVVOa0xGTkJSVkFzVFVGQlR5eEpRVUZKTEU5QlFVMHNhVUpCU1dwQ0xHdENRVUZ2UWl4VFFVRlRMRWRCUVVrc1NVRkRia01zUjBGQlNTeFBRVUZSTEVsQlExb3NTVUZCU1N4TlFVRk5MR0ZCUVdFc1QwRkJVU3hEUVVNM1FpeEhRVUZKTEZWQlFWY3NUVUZCVFN4aFFVRmhMRXRCUld4RExFOUJSRUVzVDBGQlRTeExRVUZMTEZOQlFWVXNSMEZCU1N4SlFVTnNRaXhUUVVWUUxFMUJRVThzU1VGQlNTeFBRVUZOTEVkQlFVa3NTMEZKY2tJc2IwSkJRWE5DTEZOQlFWTXNSMEZCU1N4SFFVRkpMRWxCUTNwRExFZEJRVWtzVDBGQlVTeEpRVU5hTEVsQlFVa3NUVUZCVFN4aFFVRmhMRTlCUVZFc1EwRkROMElzUjBGQlNTeFZRVUZYTEUxQlFVMHNZVUZCWVN4TFFVVnNReXhQUVVSQkxFOUJRVTBzUzBGQlN5eFRRVUZWTEVkQlFVa3NSMEZCU1N4SlFVTjBRaXhUUVVWUUxFMUJRVThzU1VGQlNTeFBRVUZOTEVkQlFVa3NSMEZCU1N4TFFVbDZRaXh0UWtGQmNVSXNVMEZCVXl4SFFVRkpMRWRCUVVrc1IwRkJTU3hIUVVGSkxFbEJRMmhFTEVkQlFVa3NUMEZCVVN4SlFVTmFMRWxCUVVrc1RVRkJUU3hoUVVGaExFOUJRVkVzUTBGRE4wSXNSMEZCU1N4VlFVRlhMRTFCUVUwc1lVRkJZU3hMUVVWc1F5eFBRVVJCTEU5QlFVMHNTMEZCU3l4VFFVRlZMRWRCUVVrc1IwRkJTU3hIUVVGSkxFZEJRVWtzU1VGRE9VSXNVMEZGVUN4TlFVRlBMRWxCUVVrc1QwRkJUU3hIUVVGSkxFZEJRVWtzUjBGQlNTeEhRVUZKTEV0QlNXcERMR2xDUVVGdFFpeFRRVUZUTEZWQlF6bENMRWRCUVVrc1QwRkJVU3hKUVVOWUxHZENRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eHRRa0ZCYjBJc1QwRkRjRUlzYTBWQlEwVXNWVUZCVlN4dFFrRkJiMElzVVVGRE9VSXNVMEZCVXl4WlFVTllMRk5CUVZNc1lVRkZVQ3hOUVVGTkxHRkJRV0VzVDBGQlV5eE5RVUZOTEZWQlEzQkRMRTFCUVUwc1lVRkJZU3hMUVVGTExGZEJTWGhDTEd0Q1FVRnZRaXhIUVVOd1FpeGxRVUZwUWl4clFrRlhha0lzWVVGQlpTeFRRVUZUTEdkQ1FVRnBRaXhSUVVNelF5eEhRVUZKTEZWQlFWY3NaVUZQWml4UFFVNUJMRlZCUVZNc1owSkJRMVFzVTBGQlV5eFZRVUZaTEZGQlFWVXNaVUZETVVJc1UwRkJVeXhYUVVOYUxGTkJRVk1zVTBGQlZ5eHRRa0ZGZEVJc1UwRkJVeXhSUVVGVkxHbENRVU5hTEZWQlIwd3NZVUZEUml4aFFVRmpMR0ZCUTJRc2EwSkJRVzFDTEd0Q1FVTnVRaXhyUWtGQmJVSXNhMEpCUTI1Q0xHOUNRVUZ4UWl4dlFrRkRja0lzYlVKQlFXOUNMRzFDUVVkMFFpeFJRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlFiMjlzWldSRGJHRnpjMXh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMmx1ZG1GeWFXRnVkRndpS1R0Y2JseHVMeW9xWEc0Z0tpQlRkR0YwYVdNZ2NHOXZiR1Z5Y3k0Z1UyVjJaWEpoYkNCamRYTjBiMjBnZG1WeWMybHZibk1nWm05eUlHVmhZMmdnY0c5MFpXNTBhV0ZzSUc1MWJXSmxjaUJ2Wmx4dUlDb2dZWEpuZFcxbGJuUnpMaUJCSUdOdmJYQnNaWFJsYkhrZ1oyVnVaWEpwWXlCd2IyOXNaWElnYVhNZ1pXRnplU0IwYnlCcGJYQnNaVzFsYm5Rc0lHSjFkQ0IzYjNWc1pGeHVJQ29nY21WeGRXbHlaU0JoWTJObGMzTnBibWNnZEdobElHQmhjbWQxYldWdWRITmdJRzlpYW1WamRDNGdTVzRnWldGamFDQnZaaUIwYUdWelpTd2dZSFJvYVhOZ0lISmxabVZ5Y3lCMGIxeHVJQ29nZEdobElFTnNZWE56SUdsMGMyVnNaaXdnYm05MElHRnVJR2x1YzNSaGJtTmxMaUJKWmlCaGJua2diM1JvWlhKeklHRnlaU0J1WldWa1pXUXNJSE5wYlhCc2VTQmhaR1FnZEdobGJWeHVJQ29nYUdWeVpTd2diM0lnYVc0Z2RHaGxhWElnYjNkdUlHWnBiR1Z6TGx4dUlDb3ZYRzUyWVhJZ2IyNWxRWEpuZFcxbGJuUlFiMjlzWlhJZ1BTQm1kVzVqZEdsdmJpaGpiM0I1Um1sbGJHUnpSbkp2YlNrZ2UxeHVJQ0IyWVhJZ1MyeGhjM01nUFNCMGFHbHpPMXh1SUNCcFppQW9TMnhoYzNNdWFXNXpkR0Z1WTJWUWIyOXNMbXhsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJwYm5OMFlXNWpaU0E5SUV0c1lYTnpMbWx1YzNSaGJtTmxVRzl2YkM1d2IzQW9LVHRjYmlBZ0lDQkxiR0Z6Y3k1allXeHNLR2x1YzNSaGJtTmxMQ0JqYjNCNVJtbGxiR1J6Um5KdmJTazdYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1MyeGhjM01vWTI5d2VVWnBaV3hrYzBaeWIyMHBPMXh1SUNCOVhHNTlPMXh1WEc1MllYSWdkSGR2UVhKbmRXMWxiblJRYjI5c1pYSWdQU0JtZFc1amRHbHZiaWhoTVN3Z1lUSXBJSHRjYmlBZ2RtRnlJRXRzWVhOeklEMGdkR2hwY3p0Y2JpQWdhV1lnS0V0c1lYTnpMbWx1YzNSaGJtTmxVRzl2YkM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0IyWVhJZ2FXNXpkR0Z1WTJVZ1BTQkxiR0Z6Y3k1cGJuTjBZVzVqWlZCdmIyd3VjRzl3S0NrN1hHNGdJQ0FnUzJ4aGMzTXVZMkZzYkNocGJuTjBZVzVqWlN3Z1lURXNJR0V5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdhVzV6ZEdGdVkyVTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJMYkdGemN5aGhNU3dnWVRJcE8xeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ2RHaHlaV1ZCY21kMWJXVnVkRkJ2YjJ4bGNpQTlJR1oxYm1OMGFXOXVLR0V4TENCaE1pd2dZVE1wSUh0Y2JpQWdkbUZ5SUV0c1lYTnpJRDBnZEdocGN6dGNiaUFnYVdZZ0tFdHNZWE56TG1sdWMzUmhibU5sVUc5dmJDNXNaVzVuZEdncElIdGNiaUFnSUNCMllYSWdhVzV6ZEdGdVkyVWdQU0JMYkdGemN5NXBibk4wWVc1alpWQnZiMnd1Y0c5d0tDazdYRzRnSUNBZ1MyeGhjM011WTJGc2JDaHBibk4wWVc1alpTd2dZVEVzSUdFeUxDQmhNeWs3WEc0Z0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dTMnhoYzNNb1lURXNJR0V5TENCaE15azdYRzRnSUgxY2JuMDdYRzVjYm5aaGNpQm1hWFpsUVhKbmRXMWxiblJRYjI5c1pYSWdQU0JtZFc1amRHbHZiaWhoTVN3Z1lUSXNJR0V6TENCaE5Dd2dZVFVwSUh0Y2JpQWdkbUZ5SUV0c1lYTnpJRDBnZEdocGN6dGNiaUFnYVdZZ0tFdHNZWE56TG1sdWMzUmhibU5sVUc5dmJDNXNaVzVuZEdncElIdGNiaUFnSUNCMllYSWdhVzV6ZEdGdVkyVWdQU0JMYkdGemN5NXBibk4wWVc1alpWQnZiMnd1Y0c5d0tDazdYRzRnSUNBZ1MyeGhjM011WTJGc2JDaHBibk4wWVc1alpTd2dZVEVzSUdFeUxDQmhNeXdnWVRRc0lHRTFLVHRjYmlBZ0lDQnlaWFIxY200Z2FXNXpkR0Z1WTJVN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkxiR0Z6Y3loaE1Td2dZVElzSUdFekxDQmhOQ3dnWVRVcE8xeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ2MzUmhibVJoY21SU1pXeGxZWE5sY2lBOUlHWjFibU4wYVc5dUtHbHVjM1JoYm1ObEtTQjdYRzRnSUhaaGNpQkxiR0Z6Y3lBOUlIUm9hWE03WEc0Z0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnYVc1emRHRnVZMlVnYVc1emRHRnVZMlZ2WmlCTGJHRnpjeXhjYmlBZ0lDQW5WSEo1YVc1bklIUnZJSEpsYkdWaGMyVWdZVzRnYVc1emRHRnVZMlVnYVc1MGJ5QmhJSEJ2YjJ3Z2IyWWdZU0JrYVdabVpYSmxiblFnZEhsd1pTNG5YRzRnSUNrZ09pQnBiblpoY21saGJuUW9hVzV6ZEdGdVkyVWdhVzV6ZEdGdVkyVnZaaUJMYkdGemN5a3BPMXh1SUNCcFppQW9hVzV6ZEdGdVkyVXVaR1Z6ZEhKMVkzUnZjaWtnZTF4dUlDQWdJR2x1YzNSaGJtTmxMbVJsYzNSeWRXTjBiM0lvS1R0Y2JpQWdmVnh1SUNCcFppQW9TMnhoYzNNdWFXNXpkR0Z1WTJWUWIyOXNMbXhsYm1kMGFDQThJRXRzWVhOekxuQnZiMnhUYVhwbEtTQjdYRzRnSUNBZ1MyeGhjM011YVc1emRHRnVZMlZRYjI5c0xuQjFjMmdvYVc1emRHRnVZMlVwTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnUkVWR1FWVk1WRjlRVDA5TVgxTkpXa1VnUFNBeE1EdGNiblpoY2lCRVJVWkJWVXhVWDFCUFQweEZVaUE5SUc5dVpVRnlaM1Z0Wlc1MFVHOXZiR1Z5TzF4dVhHNHZLaXBjYmlBcUlFRjFaMjFsYm5SeklHQkRiM0I1UTI5dWMzUnlkV04wYjNKZ0lIUnZJR0psSUdFZ2NHOXZiR0ZpYkdVZ1kyeGhjM01zSUdGMVoyMWxiblJwYm1jZ2IyNXNlU0IwYUdVZ1kyeGhjM05jYmlBcUlHbDBjMlZzWmlBb2MzUmhkR2xqWVd4c2VTa2dibTkwSUdGa1pHbHVaeUJoYm5rZ2NISnZkRzkwZVhCcFkyRnNJR1pwWld4a2N5NGdRVzU1SUVOdmNIbERiMjV6ZEhKMVkzUnZjbHh1SUNvZ2VXOTFJR2RwZG1VZ2RHaHBjeUJ0WVhrZ2FHRjJaU0JoSUdCd2IyOXNVMmw2WldBZ2NISnZjR1Z5ZEhrc0lHRnVaQ0IzYVd4c0lHeHZiMnNnWm05eUlHRmNiaUFxSUhCeWIzUnZkSGx3YVdOaGJDQmdaR1Z6ZEhKMVkzUnZjbUFnYjI0Z2FXNXpkR0Z1WTJWeklDaHZjSFJwYjI1aGJDa3VYRzRnS2x4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdRMjl3ZVVOdmJuTjBjblZqZEc5eUlFTnZibk4wY25WamRHOXlJSFJvWVhRZ1kyRnVJR0psSUhWelpXUWdkRzhnY21WelpYUXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCd2IyOXNaWElnUTNWemRHOXRhWHBoWW14bElIQnZiMnhsY2k1Y2JpQXFMMXh1ZG1GeUlHRmtaRkJ2YjJ4cGJtZFVieUE5SUdaMWJtTjBhVzl1S0VOdmNIbERiMjV6ZEhKMVkzUnZjaXdnY0c5dmJHVnlLU0I3WEc0Z0lIWmhjaUJPWlhkTGJHRnpjeUE5SUVOdmNIbERiMjV6ZEhKMVkzUnZjanRjYmlBZ1RtVjNTMnhoYzNNdWFXNXpkR0Z1WTJWUWIyOXNJRDBnVzEwN1hHNGdJRTVsZDB0c1lYTnpMbWRsZEZCdmIyeGxaQ0E5SUhCdmIyeGxjaUI4ZkNCRVJVWkJWVXhVWDFCUFQweEZVanRjYmlBZ2FXWWdLQ0ZPWlhkTGJHRnpjeTV3YjI5c1UybDZaU2tnZTF4dUlDQWdJRTVsZDB0c1lYTnpMbkJ2YjJ4VGFYcGxJRDBnUkVWR1FWVk1WRjlRVDA5TVgxTkpXa1U3WEc0Z0lIMWNiaUFnVG1WM1MyeGhjM011Y21Wc1pXRnpaU0E5SUhOMFlXNWtZWEprVW1Wc1pXRnpaWEk3WEc0Z0lISmxkSFZ5YmlCT1pYZExiR0Z6Y3p0Y2JuMDdYRzVjYm5aaGNpQlFiMjlzWldSRGJHRnpjeUE5SUh0Y2JpQWdZV1JrVUc5dmJHbHVaMVJ2T2lCaFpHUlFiMjlzYVc1blZHOHNYRzRnSUc5dVpVRnlaM1Z0Wlc1MFVHOXZiR1Z5T2lCdmJtVkJjbWQxYldWdWRGQnZiMnhsY2l4Y2JpQWdkSGR2UVhKbmRXMWxiblJRYjI5c1pYSTZJSFIzYjBGeVozVnRaVzUwVUc5dmJHVnlMRnh1SUNCMGFISmxaVUZ5WjNWdFpXNTBVRzl2YkdWeU9pQjBhSEpsWlVGeVozVnRaVzUwVUc5dmJHVnlMRnh1SUNCbWFYWmxRWEpuZFcxbGJuUlFiMjlzWlhJNklHWnBkbVZCY21kMWJXVnVkRkJ2YjJ4bGNseHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUWIyOXNaV1JEYkdGemN6dGNiaUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjt2YXIgRXZlbnRQbHVnaW5VdGlscz1yZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpLFJlYWN0Q2hpbGRyZW49cmVxdWlyZShcIi4vUmVhY3RDaGlsZHJlblwiKSxSZWFjdENvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKSxSZWFjdENsYXNzPXJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIiksUmVhY3RDb250ZXh0PXJlcXVpcmUoXCIuL1JlYWN0Q29udGV4dFwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLFJlYWN0RWxlbWVudFZhbGlkYXRvcj1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3JcIiksUmVhY3RET009cmVxdWlyZShcIi4vUmVhY3RET01cIiksUmVhY3RET01UZXh0Q29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiKSxSZWFjdERlZmF1bHRJbmplY3Rpb249cmVxdWlyZShcIi4vUmVhY3REZWZhdWx0SW5qZWN0aW9uXCIpLFJlYWN0SW5zdGFuY2VIYW5kbGVzPXJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpLFJlYWN0TW91bnQ9cmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKSxSZWFjdFBlcmY9cmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpLFJlYWN0UHJvcFR5cGVzPXJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpLFJlYWN0UmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIiksUmVhY3RTZXJ2ZXJSZW5kZXJpbmc9cmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcIiksYXNzaWduPXJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIiksZmluZERPTU5vZGU9cmVxdWlyZShcIi4vZmluZERPTU5vZGVcIiksb25seUNoaWxkPXJlcXVpcmUoXCIuL29ubHlDaGlsZFwiKTtSZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7dmFyIGNyZWF0ZUVsZW1lbnQ9UmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQsY3JlYXRlRmFjdG9yeT1SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSxjbG9uZUVsZW1lbnQ9UmVhY3RFbGVtZW50LmNsb25lRWxlbWVudDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoY3JlYXRlRWxlbWVudD1SZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudCxjcmVhdGVGYWN0b3J5PVJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5LGNsb25lRWxlbWVudD1SZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2xvbmVFbGVtZW50KTt2YXIgcmVuZGVyPVJlYWN0UGVyZi5tZWFzdXJlKFwiUmVhY3RcIixcInJlbmRlclwiLFJlYWN0TW91bnQucmVuZGVyKSxSZWFjdD17Q2hpbGRyZW46e21hcDpSZWFjdENoaWxkcmVuLm1hcCxmb3JFYWNoOlJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxjb3VudDpSZWFjdENoaWxkcmVuLmNvdW50LG9ubHk6b25seUNoaWxkfSxDb21wb25lbnQ6UmVhY3RDb21wb25lbnQsRE9NOlJlYWN0RE9NLFByb3BUeXBlczpSZWFjdFByb3BUeXBlcyxpbml0aWFsaXplVG91Y2hFdmVudHM6ZnVuY3Rpb24oc2hvdWxkVXNlVG91Y2gpe0V2ZW50UGx1Z2luVXRpbHMudXNlVG91Y2hFdmVudHM9c2hvdWxkVXNlVG91Y2h9LGNyZWF0ZUNsYXNzOlJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsY3JlYXRlRWxlbWVudDpjcmVhdGVFbGVtZW50LGNsb25lRWxlbWVudDpjbG9uZUVsZW1lbnQsY3JlYXRlRmFjdG9yeTpjcmVhdGVGYWN0b3J5LGNyZWF0ZU1peGluOmZ1bmN0aW9uKG1peGluKXtyZXR1cm4gbWl4aW59LGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudDpSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCxjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlEOlJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRCxmaW5kRE9NTm9kZTpmaW5kRE9NTm9kZSxyZW5kZXI6cmVuZGVyLHJlbmRlclRvU3RyaW5nOlJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLHJlbmRlclRvU3RhdGljTWFya3VwOlJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RhdGljTWFya3VwLHVubW91bnRDb21wb25lbnRBdE5vZGU6UmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlLGlzVmFsaWRFbGVtZW50OlJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCx3aXRoQ29udGV4dDpSZWFjdENvbnRleHQud2l0aENvbnRleHQsX19zcHJlYWQ6YXNzaWdufTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0JiZfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0KHtDdXJyZW50T3duZXI6UmVhY3RDdXJyZW50T3duZXIsSW5zdGFuY2VIYW5kbGVzOlJlYWN0SW5zdGFuY2VIYW5kbGVzLE1vdW50OlJlYWN0TW91bnQsUmVjb25jaWxlcjpSZWFjdFJlY29uY2lsZXIsVGV4dENvbXBvbmVudDpSZWFjdERPTVRleHRDb21wb25lbnR9KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQ9cmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7aWYoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NJiZ3aW5kb3cudG9wPT09d2luZG93LnNlbGYpe25hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkNocm9tZVwiKT4tMSYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyYmY29uc29sZS5kZWJ1ZyhcIkRvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29sc1wiKTtmb3IodmFyIGV4cGVjdGVkRmVhdHVyZXM9W0FycmF5LmlzQXJyYXksQXJyYXkucHJvdG90eXBlLmV2ZXJ5LEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLEFycmF5LnByb3RvdHlwZS5pbmRleE9mLEFycmF5LnByb3RvdHlwZS5tYXAsRGF0ZS5ub3csRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsT2JqZWN0LmtleXMsU3RyaW5nLnByb3RvdHlwZS5zcGxpdCxTdHJpbmcucHJvdG90eXBlLnRyaW0sT2JqZWN0LmNyZWF0ZSxPYmplY3QuZnJlZXplXSxpPTA7aTxleHBlY3RlZEZlYXR1cmVzLmxlbmd0aDtpKyspaWYoIWV4cGVjdGVkRmVhdHVyZXNbaV0pe2NvbnNvbGUuZXJyb3IoXCJPbmUgb3IgbW9yZSBFUzUgc2hpbS9zaGFtcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxsc1wiKTticmVha319fVJlYWN0LnZlcnNpb249XCIwLjEzLjNcIixtb2R1bGUuZXhwb3J0cz1SZWFjdDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1F1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFXRkJMRmxCUlVFc1NVRkJTU3hyUWtGQmJVSXNVVUZCVVN4elFrRkRNMElzWTBGQlowSXNVVUZCVVN4dFFrRkRlRUlzWlVGQmFVSXNVVUZCVVN4dlFrRkRla0lzVjBGQllTeFJRVUZSTEdkQ1FVTnlRaXhoUVVGbExGRkJRVkVzYTBKQlEzWkNMR3RDUVVGdlFpeFJRVUZSTEhWQ1FVTTFRaXhoUVVGbExGRkJRVkVzYTBKQlEzWkNMSE5DUVVGM1FpeFJRVUZSTERKQ1FVTm9ReXhUUVVGWExGRkJRVkVzWTBGRGJrSXNjMEpCUVhkQ0xGRkJRVkVzTWtKQlEyaERMSE5DUVVGM1FpeFJRVUZSTERKQ1FVTm9ReXh4UWtGQmRVSXNVVUZCVVN3d1FrRkRMMElzVjBGQllTeFJRVUZSTEdkQ1FVTnlRaXhWUVVGWkxGRkJRVkVzWlVGRGNFSXNaVUZCYVVJc1VVRkJVU3h2UWtGRGVrSXNaMEpCUVd0Q0xGRkJRVkVzY1VKQlF6RkNMSEZDUVVGMVFpeFJRVUZSTERCQ1FVVXZRaXhQUVVGVExGRkJRVkVzYlVKQlEycENMRmxCUVdNc1VVRkJVU3hwUWtGRGRFSXNWVUZCV1N4UlFVRlJMR05CUlhoQ0xIVkNRVUZ6UWl4UlFVVjBRaXhKUVVGSkxHVkJRV2RDTEdGQlFXRXNZMEZETjBJc1kwRkJaMElzWVVGQllTeGpRVU0zUWl4aFFVRmxMR0ZCUVdFc1dVRkZOVUlzWjBKQlFXbENMRkZCUVZFc1NVRkJTU3hYUVVNdlFpeGpRVUZuUWl4elFrRkJjMElzWTBGRGRFTXNZMEZCWjBJc2MwSkJRWE5DTEdOQlEzUkRMR0ZCUVdVc2MwSkJRWE5DTEdGQlIzWkRMRWxCUVVrc1VVRkJVeXhWUVVGVkxGRkJRVkVzVVVGQlV5eFRRVUZWTEZkQlFWY3NVVUZGZWtRc1QwRkRSaXhWUVVORkxFbEJRVXNzWTBGQll5eEpRVU51UWl4UlFVRlRMR05CUVdNc1VVRkRka0lzVFVGQlR5eGpRVUZqTEUxQlEzSkNMRXRCUVUwc1YwRkZVaXhWUVVGWExHVkJRMWdzU1VGQlN5eFRRVU5NTEZWQlFWY3NaVUZEV0N4elFrRkJkVUlzVTBGQlV5eG5Ra0ZET1VJc2FVSkJRV2xDTEdWQlFXbENMR2RDUVVWd1F5eFpRVUZoTEZkQlFWY3NXVUZEZUVJc1kwRkJaU3hqUVVObUxHRkJRV01zWVVGRFpDeGpRVUZsTEdOQlEyWXNXVUZCWVN4VFFVRlRMRTlCUlhCQ0xFMUJRVThzVVVGRlZDdzBRa0ZCTmtJc1YwRkJWeXcwUWtGRGVFTXNaME5CUVdsRExGZEJRVmNzWjBOQlF6VkRMRmxCUVdFc1dVRkRZaXhQUVVGUkxFOUJRMUlzWlVGQlowSXNjVUpCUVhGQ0xHVkJRM0pETEhGQ1FVRnpRaXh4UWtGQmNVSXNjVUpCUXpORExIVkNRVUYzUWl4WFFVRlhMSFZDUVVOdVF5eGxRVUZuUWl4aFFVRmhMR1ZCUXpkQ0xGbEJRV0VzWVVGQllTeFpRVWN4UWl4VFFVRlZMRTlCYVVKYUxFbEJXRFJETEcxQ1FVRnVReXhwUTBGRE1FTXNhMEpCUVRGRExHZERRVUVyUWl4UlFVTjBReXdyUWtGQkswSXNVVUZETjBJc1lVRkJZeXhyUWtGRFpDeG5Ra0ZCYVVJc2NVSkJRMnBDTEUxQlFVOHNWMEZEVUN4WFFVRlpMR2RDUVVOYUxHTkJRV1VzZDBKQlNXWXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVlVzUTBGRGVrTXNSMEZCU1N4elFrRkJkVUlzVVVGQlVTeDVRa0ZEYmtNc1NVRkJTU3h4UWtGQmNVSXNWMEZCWVN4UFFVRlBMRTFCUVZFc1QwRkJUeXhMUVVGTkxFTkJTVFZFTEZWQlFWVXNWVUZCVlN4UlFVRlJMRlZCUVZrc1NVRkRTU3h0UWtGQmJrTXNhVU5CUTFRc1VVRkJVU3hOUVVOT0xHZEhRWGRDVGl4TFFVRkxMRWRCYkVKRUxHMUNRVVZHTEUxQlFVMHNVVUZEVGl4TlFVRk5MRlZCUVZVc1RVRkRhRUlzVFVGQlRTeFZRVUZWTEZGQlEyaENMRTFCUVUwc1ZVRkJWU3hSUVVOb1FpeE5RVUZOTEZWQlFWVXNTVUZEYUVJc1MwRkJTeXhKUVVOTUxGTkJRVk1zVlVGQlZTeExRVU51UWl4UFFVRlBMRXRCUTFBc1QwRkJUeXhWUVVGVkxFMUJRMnBDTEU5QlFVOHNWVUZCVlN4TFFVZHFRaXhQUVVGUExFOUJRMUFzVDBGQlR5eFJRVWRCTEVWQlFVa3NSVUZCUnl4RlFVRkpMR2xDUVVGcFFpeFBRVUZSTEVsQlF6TkRMRWxCUVVzc2FVSkJRV2xDTEVkQlFVa3NRMEZEZUVJc1VVRkJVU3hOUVVOT0xIZEhRVWRHTEZOQlRWSXNUVUZCVFN4UlFVRlZMRk5CUldoQ0xFOUJRVThzVVVGQlZTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wWEc0Z0tpOWNibHh1THlvZ1oyeHZZbUZzY3lCZlgxSkZRVU5VWDBSRlZsUlBUMHhUWDBkTVQwSkJURjlJVDA5TFgxOHFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQkZkbVZ1ZEZCc2RXZHBibFYwYVd4eklEMGdjbVZ4ZFdseVpTaGNJaTR2UlhabGJuUlFiSFZuYVc1VmRHbHNjMXdpS1R0Y2JuWmhjaUJTWldGamRFTm9hV3hrY21WdUlEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkRhR2xzWkhKbGJsd2lLVHRjYm5aaGNpQlNaV0ZqZEVOdmJYQnZibVZ1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFEyOXRjRzl1Wlc1MFhDSXBPMXh1ZG1GeUlGSmxZV04wUTJ4aGMzTWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRU5zWVhOelhDSXBPMXh1ZG1GeUlGSmxZV04wUTI5dWRHVjRkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUTI5dWRHVjRkRndpS1R0Y2JuWmhjaUJTWldGamRFTjFjbkpsYm5SUGQyNWxjaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUTNWeWNtVnVkRTkzYm1WeVhDSXBPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRndpS1R0Y2JuWmhjaUJTWldGamRFVnNaVzFsYm5SV1lXeHBaR0YwYjNJZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFVnNaVzFsYm5SV1lXeHBaR0YwYjNKY0lpazdYRzUyWVhJZ1VtVmhZM1JFVDAwZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFUlBUVndpS1R0Y2JuWmhjaUJTWldGamRFUlBUVlJsZUhSRGIyMXdiMjVsYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFUlBUVlJsZUhSRGIyMXdiMjVsYm5SY0lpazdYRzUyWVhJZ1VtVmhZM1JFWldaaGRXeDBTVzVxWldOMGFXOXVJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JFWldaaGRXeDBTVzVxWldOMGFXOXVYQ0lwTzF4dWRtRnlJRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSSmJuTjBZVzVqWlVoaGJtUnNaWE5jSWlrN1hHNTJZWElnVW1WaFkzUk5iM1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFRXOTFiblJjSWlrN1hHNTJZWElnVW1WaFkzUlFaWEptSUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSUVpYSm1YQ0lwTzF4dWRtRnlJRkpsWVdOMFVISnZjRlI1Y0dWeklEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUlFjbTl3Vkhsd1pYTmNJaWs3WEc1MllYSWdVbVZoWTNSU1pXTnZibU5wYkdWeUlEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUlNaV052Ym1OcGJHVnlYQ0lwTzF4dWRtRnlJRkpsWVdOMFUyVnlkbVZ5VW1WdVpHVnlhVzVuSUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRjSWlrN1hHNWNiblpoY2lCaGMzTnBaMjRnUFNCeVpYRjFhWEpsS0Z3aUxpOVBZbXBsWTNRdVlYTnphV2R1WENJcE8xeHVkbUZ5SUdacGJtUkVUMDFPYjJSbElEMGdjbVZ4ZFdseVpTaGNJaTR2Wm1sdVpFUlBUVTV2WkdWY0lpazdYRzUyWVhJZ2IyNXNlVU5vYVd4a0lEMGdjbVZ4ZFdseVpTaGNJaTR2YjI1c2VVTm9hV3hrWENJcE8xeHVYRzVTWldGamRFUmxabUYxYkhSSmJtcGxZM1JwYjI0dWFXNXFaV04wS0NrN1hHNWNiblpoY2lCamNtVmhkR1ZGYkdWdFpXNTBJRDBnVW1WaFkzUkZiR1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblE3WEc1MllYSWdZM0psWVhSbFJtRmpkRzl5ZVNBOUlGSmxZV04wUld4bGJXVnVkQzVqY21WaGRHVkdZV04wYjNKNU8xeHVkbUZ5SUdOc2IyNWxSV3hsYldWdWRDQTlJRkpsWVdOMFJXeGxiV1Z1ZEM1amJHOXVaVVZzWlcxbGJuUTdYRzVjYm1sbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdZM0psWVhSbFJXeGxiV1Z1ZENBOUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaTVqY21WaGRHVkZiR1Z0Wlc1ME8xeHVJQ0JqY21WaGRHVkdZV04wYjNKNUlEMGdVbVZoWTNSRmJHVnRaVzUwVm1Gc2FXUmhkRzl5TG1OeVpXRjBaVVpoWTNSdmNuazdYRzRnSUdOc2IyNWxSV3hsYldWdWRDQTlJRkpsWVdOMFJXeGxiV1Z1ZEZaaGJHbGtZWFJ2Y2k1amJHOXVaVVZzWlcxbGJuUTdYRzU5WEc1Y2JuWmhjaUJ5Wlc1a1pYSWdQU0JTWldGamRGQmxjbVl1YldWaGMzVnlaU2duVW1WaFkzUW5MQ0FuY21WdVpHVnlKeXdnVW1WaFkzUk5iM1Z1ZEM1eVpXNWtaWElwTzF4dVhHNTJZWElnVW1WaFkzUWdQU0I3WEc0Z0lFTm9hV3hrY21WdU9pQjdYRzRnSUNBZ2JXRndPaUJTWldGamRFTm9hV3hrY21WdUxtMWhjQ3hjYmlBZ0lDQm1iM0pGWVdOb09pQlNaV0ZqZEVOb2FXeGtjbVZ1TG1admNrVmhZMmdzWEc0Z0lDQWdZMjkxYm5RNklGSmxZV04wUTJocGJHUnlaVzR1WTI5MWJuUXNYRzRnSUNBZ2IyNXNlVG9nYjI1c2VVTm9hV3hrWEc0Z0lIMHNYRzRnSUVOdmJYQnZibVZ1ZERvZ1VtVmhZM1JEYjIxd2IyNWxiblFzWEc0Z0lFUlBUVG9nVW1WaFkzUkVUMDBzWEc0Z0lGQnliM0JVZVhCbGN6b2dVbVZoWTNSUWNtOXdWSGx3WlhNc1hHNGdJR2x1YVhScFlXeHBlbVZVYjNWamFFVjJaVzUwY3pvZ1puVnVZM1JwYjI0b2MyaHZkV3hrVlhObFZHOTFZMmdwSUh0Y2JpQWdJQ0JGZG1WdWRGQnNkV2RwYmxWMGFXeHpMblZ6WlZSdmRXTm9SWFpsYm5SeklEMGdjMmh2ZFd4a1ZYTmxWRzkxWTJnN1hHNGdJSDBzWEc0Z0lHTnlaV0YwWlVOc1lYTnpPaUJTWldGamRFTnNZWE56TG1OeVpXRjBaVU5zWVhOekxGeHVJQ0JqY21WaGRHVkZiR1Z0Wlc1ME9pQmpjbVZoZEdWRmJHVnRaVzUwTEZ4dUlDQmpiRzl1WlVWc1pXMWxiblE2SUdOc2IyNWxSV3hsYldWdWRDeGNiaUFnWTNKbFlYUmxSbUZqZEc5eWVUb2dZM0psWVhSbFJtRmpkRzl5ZVN4Y2JpQWdZM0psWVhSbFRXbDRhVzQ2SUdaMWJtTjBhVzl1S0cxcGVHbHVLU0I3WEc0Z0lDQWdMeThnUTNWeWNtVnVkR3g1SUdFZ2JtOXZjQzRnVjJsc2JDQmlaU0IxYzJWa0lIUnZJSFpoYkdsa1lYUmxJR0Z1WkNCMGNtRmpaU0J0YVhocGJuTXVYRzRnSUNBZ2NtVjBkWEp1SUcxcGVHbHVPMXh1SUNCOUxGeHVJQ0JqYjI1emRISjFZM1JCYm1SU1pXNWtaWEpEYjIxd2IyNWxiblE2SUZKbFlXTjBUVzkxYm5RdVkyOXVjM1J5ZFdOMFFXNWtVbVZ1WkdWeVEyOXRjRzl1Wlc1MExGeHVJQ0JqYjI1emRISjFZM1JCYm1SU1pXNWtaWEpEYjIxd2IyNWxiblJDZVVsRU9pQlNaV0ZqZEUxdmRXNTBMbU52Ym5OMGNuVmpkRUZ1WkZKbGJtUmxja052YlhCdmJtVnVkRUo1U1VRc1hHNGdJR1pwYm1SRVQwMU9iMlJsT2lCbWFXNWtSRTlOVG05a1pTeGNiaUFnY21WdVpHVnlPaUJ5Wlc1a1pYSXNYRzRnSUhKbGJtUmxjbFJ2VTNSeWFXNW5PaUJTWldGamRGTmxjblpsY2xKbGJtUmxjbWx1Wnk1eVpXNWtaWEpVYjFOMGNtbHVaeXhjYmlBZ2NtVnVaR1Z5Vkc5VGRHRjBhV05OWVhKcmRYQTZJRkpsWVdOMFUyVnlkbVZ5VW1WdVpHVnlhVzVuTG5KbGJtUmxjbFJ2VTNSaGRHbGpUV0Z5YTNWd0xGeHVJQ0IxYm0xdmRXNTBRMjl0Y0c5dVpXNTBRWFJPYjJSbE9pQlNaV0ZqZEUxdmRXNTBMblZ1Ylc5MWJuUkRiMjF3YjI1bGJuUkJkRTV2WkdVc1hHNGdJR2x6Vm1Gc2FXUkZiR1Z0Wlc1ME9pQlNaV0ZqZEVWc1pXMWxiblF1YVhOV1lXeHBaRVZzWlcxbGJuUXNYRzRnSUhkcGRHaERiMjUwWlhoME9pQlNaV0ZqZEVOdmJuUmxlSFF1ZDJsMGFFTnZiblJsZUhRc1hHNWNiaUFnTHk4Z1NHOXZheUJtYjNJZ1NsTllJSE53Y21WaFpDd2daRzl1SjNRZ2RYTmxJSFJvYVhNZ1ptOXlJR0Z1ZVhSb2FXNW5JR1ZzYzJVdVhHNGdJRjlmYzNCeVpXRmtPaUJoYzNOcFoyNWNibjA3WEc1Y2JpOHZJRWx1YW1WamRDQjBhR1VnY25WdWRHbHRaU0JwYm5SdklHRWdaR1YyZEc5dmJITWdaMnh2WW1Gc0lHaHZiMnNnY21WbllYSmtiR1Z6Y3lCdlppQmljbTkzYzJWeUxseHVMeThnUVd4c2IzZHpJR1p2Y2lCa1pXSjFaMmRwYm1jZ2QyaGxiaUIwYUdVZ2FHOXZheUJwY3lCcGJtcGxZM1JsWkNCdmJpQjBhR1VnY0dGblpTNWNibWxtSUNoY2JpQWdkSGx3Wlc5bUlGOWZVa1ZCUTFSZlJFVldWRTlQVEZOZlIweFBRa0ZNWDBoUFQwdGZYeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVpjYmlBZ2RIbHdaVzltSUY5ZlVrVkJRMVJmUkVWV1ZFOVBURk5mUjB4UFFrRk1YMGhQVDB0Zlh5NXBibXBsWTNRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdYMTlTUlVGRFZGOUVSVlpVVDA5TVUxOUhURTlDUVV4ZlNFOVBTMTlmTG1sdWFtVmpkQ2g3WEc0Z0lDQWdRM1Z5Y21WdWRFOTNibVZ5T2lCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2l4Y2JpQWdJQ0JKYm5OMFlXNWpaVWhoYm1Sc1pYTTZJRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6TEZ4dUlDQWdJRTF2ZFc1ME9pQlNaV0ZqZEUxdmRXNTBMRnh1SUNBZ0lGSmxZMjl1WTJsc1pYSTZJRkpsWVdOMFVtVmpiMjVqYVd4bGNpeGNiaUFnSUNCVVpYaDBRMjl0Y0c5dVpXNTBPaUJTWldGamRFUlBUVlJsZUhSRGIyMXdiMjVsYm5SY2JpQWdmU2s3WEc1OVhHNWNibWxtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ2RtRnlJRVY0WldOMWRHbHZia1Z1ZG1seWIyNXRaVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblJjSWlrN1hHNGdJR2xtSUNoRmVHVmpkWFJwYjI1RmJuWnBjbTl1YldWdWRDNWpZVzVWYzJWRVQwMGdKaVlnZDJsdVpHOTNMblJ2Y0NBOVBUMGdkMmx1Wkc5M0xuTmxiR1lwSUh0Y2JseHVJQ0FnSUM4dklFbG1JSGRsSjNKbElHbHVJRU5vY205dFpTd2diRzl2YXlCbWIzSWdkR2hsSUdSbGRuUnZiMnh6SUcxaGNtdGxjaUJoYm1RZ2NISnZkbWxrWlNCaElHUnZkMjVzYjJGa1hHNGdJQ0FnTHk4Z2JHbHVheUJwWmlCdWIzUWdhVzV6ZEdGc2JHVmtMbHh1SUNBZ0lHbG1JQ2h1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwTG1sdVpHVjRUMllvSjBOb2NtOXRaU2NwSUQ0Z0xURXBJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWDE5U1JVRkRWRjlFUlZaVVQwOU1VMTlIVEU5Q1FVeGZTRTlQUzE5ZklEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtUmxZblZuS0Z4dUlDQWdJQ0FnSUNBZ0lDZEViM2R1Ykc5aFpDQjBhR1VnVW1WaFkzUWdSR1YyVkc5dmJITWdabTl5SUdFZ1ltVjBkR1Z5SUdSbGRtVnNiM0J0Wlc1MElHVjRjR1Z5YVdWdVkyVTZJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZG9kSFJ3Y3pvdkwyWmlMbTFsTDNKbFlXTjBMV1JsZG5SdmIyeHpKMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCbGVIQmxZM1JsWkVabFlYUjFjbVZ6SUQwZ1cxeHVJQ0FnSUNBZ0x5OGdjMmhwYlhOY2JpQWdJQ0FnSUVGeWNtRjVMbWx6UVhKeVlYa3NYRzRnSUNBZ0lDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVpYWmxjbmtzWEc0Z0lDQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVabTl5UldGamFDeGNiaUFnSUNBZ0lFRnljbUY1TG5CeWIzUnZkSGx3WlM1cGJtUmxlRTltTEZ4dUlDQWdJQ0FnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbTFoY0N4Y2JpQWdJQ0FnSUVSaGRHVXVibTkzTEZ4dUlDQWdJQ0FnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTG1KcGJtUXNYRzRnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeXhjYmlBZ0lDQWdJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVjM0JzYVhRc1hHNGdJQ0FnSUNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5SeWFXMHNYRzVjYmlBZ0lDQWdJQzh2SUhOb1lXMXpYRzRnSUNBZ0lDQlBZbXBsWTNRdVkzSmxZWFJsTEZ4dUlDQWdJQ0FnVDJKcVpXTjBMbVp5WldWNlpWeHVJQ0FnSUYwN1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHVjRjR1ZqZEdWa1JtVmhkSFZ5WlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR2xtSUNnaFpYaHdaV04wWldSR1pXRjBkWEpsYzF0cFhTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ2RQYm1VZ2IzSWdiVzl5WlNCRlV6VWdjMmhwYlM5emFHRnRjeUJsZUhCbFkzUmxaQ0JpZVNCU1pXRmpkQ0JoY21VZ2JtOTBJR0YyWVdsc1lXSnNaVG9nSnlBclhHNGdJQ0FnSUNBZ0lDQWdKMmgwZEhCek9pOHZabUl1YldVdmNtVmhZM1F0ZDJGeWJtbHVaeTF3YjJ4NVptbHNiSE1uWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1U1pXRmpkQzUyWlhKemFXOXVJRDBnSnpBdU1UTXVNeWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VtVmhZM1E3WEc0aVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoXCIuL2ZpbmRET01Ob2RlXCIpO1xuXG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogQGZpbmFsXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGdldERPTU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpO1xudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEV2ZW50RW1pdHRlck1peGluXCIpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoXCIuL1ZpZXdwb3J0TWV0cmljc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIik7XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdEV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnQgcGx1Z2dhYmxlXG4gKiAgICBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW4gdGhyZWFkLlxuICpcbiAqICAtIFdlIG5vcm1hbGl6ZSBhbmQgZGUtZHVwbGljYXRlIGV2ZW50cyB0byBhY2NvdW50IGZvciBicm93c2VyIHF1aXJrcy4gVGhpc1xuICogICAgbWF5IGJlIGRvbmUgaW4gdGhlIHdvcmtlciB0aHJlYWQuXG4gKlxuICogIC0gRm9yd2FyZCB0aGVzZSBuYXRpdmUgZXZlbnRzICh3aXRoIHRoZSBhc3NvY2lhdGVkIHRvcC1sZXZlbCB0eXBlIHVzZWQgdG9cbiAqICAgIHRyYXAgaXQpIHRvIGBFdmVudFBsdWdpbkh1YmAsIHdoaWNoIGluIHR1cm4gd2lsbCBhc2sgcGx1Z2lucyBpZiB0aGV5IHdhbnRcbiAqICAgIHRvIGV4dHJhY3QgYW55IHN5bnRoZXRpYyBldmVudHMuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgd2lsbCB0aGVuIHByb2Nlc3MgZWFjaCBldmVudCBieSBhbm5vdGF0aW5nIHRoZW0gd2l0aFxuICogICAgXCJkaXNwYXRjaGVzXCIsIGEgc2VxdWVuY2Ugb2YgbGlzdGVuZXJzIGFuZCBJRHMgdGhhdCBjYXJlIGFib3V0IHRoYXQgZXZlbnQuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgdGhlbiBkaXNwYXRjaGVzIHRoZSBldmVudHMuXG4gKlxuICogT3ZlcnZpZXcgb2YgUmVhY3QgYW5kIHRoZSBldmVudCBzeXN0ZW06XG4gKlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCAgICBET00gICAgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogICAgICAgfCAgICAgICAgICAgLlxuICogICAgICAgdiAgICAgICAgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCBSZWFjdEV2ZW50IHwgICAgLlxuICogfCAgTGlzdGVuZXIgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgKy0tLS0tLS0tK3xTaW1wbGVFdmVudHxcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICB8ICAgICAgICAgfFBsdWdpbiAgICAgfFxuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgIHYgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnxFdmVudFBsdWdpbkh1YnwgICAgICAgICAgICAgICAgICAgIHwgICAgRXZlbnQgICB8XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgUHJvcGFnYXRvcnN8XG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgIHxUYXBFdmVudCAgIHwgIHwtLS0tLS0tLS0tLS18XG4gKiB8ICBFbWl0dGVyICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHw8LS0tK3xQbHVnaW4gICAgIHwgIHxvdGhlciBwbHVnaW58XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgIHV0aWxpdGllcyB8XG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnwgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLStcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgXiAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICB8ICAgICAgICB8RW50ZXIvTGVhdmV8XG4gKiAgICAgICArICAgICAgICAgICAuICAgICAgICAgICAgICAgICstLS0tLS0tK3xQbHVnaW4gICAgIHxcbiAqICstLS0tLS0tLS0tLS0tKyAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCBhcHBsaWNhdGlvbiB8ICAgLlxuICogfC0tLS0tLS0tLS0tLS18ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogKy0tLS0tLS0tLS0tLS0rICAgLlxuICogICAgICAgICAgICAgICAgICAgLlxuICogICAgUmVhY3QgQ29yZSAgICAgLiAgR2VuZXJhbCBQdXJwb3NlIEV2ZW50IFBsdWdpbiBTeXN0ZW1cbiAqL1xuXG52YXIgYWxyZWFkeUxpc3RlbmluZ1RvID0ge307XG52YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcbnZhciByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIgPSAwO1xuXG4vLyBGb3IgZXZlbnRzIGxpa2UgJ3N1Ym1pdCcgd2hpY2ggZG9uJ3QgY29uc2lzdGVudGx5IGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhXG4vLyBsb3dlciBub2RlIHRoYW4gYGRvY3VtZW50YCksIGJpbmRpbmcgYXQgYGRvY3VtZW50YCB3b3VsZCBjYXVzZSBkdXBsaWNhdGVcbi8vIGV2ZW50cyBzbyB3ZSBkb24ndCBpbmNsdWRlIHRoZW0gaGVyZVxudmFyIHRvcEV2ZW50TWFwcGluZyA9IHtcbiAgdG9wQmx1cjogJ2JsdXInLFxuICB0b3BDaGFuZ2U6ICdjaGFuZ2UnLFxuICB0b3BDbGljazogJ2NsaWNrJyxcbiAgdG9wQ29tcG9zaXRpb25FbmQ6ICdjb21wb3NpdGlvbmVuZCcsXG4gIHRvcENvbXBvc2l0aW9uU3RhcnQ6ICdjb21wb3NpdGlvbnN0YXJ0JyxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6ICdjb21wb3NpdGlvbnVwZGF0ZScsXG4gIHRvcENvbnRleHRNZW51OiAnY29udGV4dG1lbnUnLFxuICB0b3BDb3B5OiAnY29weScsXG4gIHRvcEN1dDogJ2N1dCcsXG4gIHRvcERvdWJsZUNsaWNrOiAnZGJsY2xpY2snLFxuICB0b3BEcmFnOiAnZHJhZycsXG4gIHRvcERyYWdFbmQ6ICdkcmFnZW5kJyxcbiAgdG9wRHJhZ0VudGVyOiAnZHJhZ2VudGVyJyxcbiAgdG9wRHJhZ0V4aXQ6ICdkcmFnZXhpdCcsXG4gIHRvcERyYWdMZWF2ZTogJ2RyYWdsZWF2ZScsXG4gIHRvcERyYWdPdmVyOiAnZHJhZ292ZXInLFxuICB0b3BEcmFnU3RhcnQ6ICdkcmFnc3RhcnQnLFxuICB0b3BEcm9wOiAnZHJvcCcsXG4gIHRvcEZvY3VzOiAnZm9jdXMnLFxuICB0b3BJbnB1dDogJ2lucHV0JyxcbiAgdG9wS2V5RG93bjogJ2tleWRvd24nLFxuICB0b3BLZXlQcmVzczogJ2tleXByZXNzJyxcbiAgdG9wS2V5VXA6ICdrZXl1cCcsXG4gIHRvcE1vdXNlRG93bjogJ21vdXNlZG93bicsXG4gIHRvcE1vdXNlTW92ZTogJ21vdXNlbW92ZScsXG4gIHRvcE1vdXNlT3V0OiAnbW91c2VvdXQnLFxuICB0b3BNb3VzZU92ZXI6ICdtb3VzZW92ZXInLFxuICB0b3BNb3VzZVVwOiAnbW91c2V1cCcsXG4gIHRvcFBhc3RlOiAncGFzdGUnLFxuICB0b3BTY3JvbGw6ICdzY3JvbGwnLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6ICdzZWxlY3Rpb25jaGFuZ2UnLFxuICB0b3BUZXh0SW5wdXQ6ICd0ZXh0SW5wdXQnLFxuICB0b3BUb3VjaENhbmNlbDogJ3RvdWNoY2FuY2VsJyxcbiAgdG9wVG91Y2hFbmQ6ICd0b3VjaGVuZCcsXG4gIHRvcFRvdWNoTW92ZTogJ3RvdWNobW92ZScsXG4gIHRvcFRvdWNoU3RhcnQ6ICd0b3VjaHN0YXJ0JyxcbiAgdG9wV2hlZWw6ICd3aGVlbCdcbn07XG5cbi8qKlxuICogVG8gZW5zdXJlIG5vIGNvbmZsaWN0cyB3aXRoIG90aGVyIHBvdGVudGlhbCBSZWFjdCBpbnN0YW5jZXMgb24gdGhlIHBhZ2VcbiAqL1xudmFyIHRvcExpc3RlbmVyc0lES2V5ID0gJ19yZWFjdExpc3RlbmVyc0lEJyArIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcblxuZnVuY3Rpb24gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCkge1xuICAvLyBJbiBJRTgsIGBtb3VudEF0YCBpcyBhIGhvc3Qgb2JqZWN0IGFuZCBkb2Vzbid0IGhhdmUgYGhhc093blByb3BlcnR5YFxuICAvLyBkaXJlY3RseS5cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW91bnRBdCwgdG9wTGlzdGVuZXJzSURLZXkpKSB7XG4gICAgbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV0gPSByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIrKztcbiAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG4gIH1cbiAgcmV0dXJuIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV07XG59XG5cbi8qKlxuICogYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgaXMgdXNlZCB0byBhdHRhY2ggdG9wLWxldmVsIGV2ZW50IGxpc3RlbmVycy4gRm9yXG4gKiBleGFtcGxlOlxuICpcbiAqICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKCdteUlEJywgJ29uQ2xpY2snLCBteUZ1bmN0aW9uKTtcbiAqXG4gKiBUaGlzIHdvdWxkIGFsbG9jYXRlIGEgXCJyZWdpc3RyYXRpb25cIiBvZiBgKCdvbkNsaWNrJywgbXlGdW5jdGlvbilgIG9uICdteUlEJy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IGFzc2lnbih7fSwgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiwge1xuXG4gIC8qKlxuICAgKiBJbmplY3RhYmxlIGV2ZW50IGJhY2tlbmRcbiAgICovXG4gIFJlYWN0RXZlbnRMaXN0ZW5lcjogbnVsbCxcblxuICBpbmplY3Rpb246IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gUmVhY3RFdmVudExpc3RlbmVyXG4gICAgICovXG4gICAgaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyOiBmdW5jdGlvbihSZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5zZXRIYW5kbGVUb3BMZXZlbChcbiAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmhhbmRsZVRvcExldmVsXG4gICAgICApO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciBvciBub3QgYW55IGNyZWF0ZWQgY2FsbGJhY2tzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgVHJ1ZSBpZiBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqL1xuICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICAoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciAmJiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmlzRW5hYmxlZCgpKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbihyZWdpc3RyYXRpb25OYW1lLCBjb250ZW50RG9jdW1lbnRIYW5kbGUpIHtcbiAgICB2YXIgbW91bnRBdCA9IGNvbnRlbnREb2N1bWVudEhhbmRsZTtcbiAgICB2YXIgaXNMaXN0ZW5pbmcgPSBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5cbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgIGlmICghKFxuICAgICAgICAgICAgKGlzTGlzdGVuaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpICYmIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wV2hlZWwpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLFxuICAgICAgICAgICAgICAnd2hlZWwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG4gICAgICAgICAgICAgICdtb3VzZXdoZWVsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Rlc3RzL3Njcm9sbC5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG4gICAgICAgICAgICAgICdET01Nb3VzZVNjcm9sbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wU2Nyb2xsKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLFxuICAgICAgICAgICAgICAnc2Nyb2xsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCxcbiAgICAgICAgICAgICAgJ3Njcm9sbCcsXG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuV0lORE9XX0hBTkRMRVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyB8fFxuICAgICAgICAgICAgZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXMnLCB0cnVlKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgICAgICAgICAgJ2ZvY3VzJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgICAgICAgICAgJ2JsdXInLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXNpbicpKSB7XG4gICAgICAgICAgICAvLyBJRSBoYXMgYGZvY3VzaW5gIGFuZCBgZm9jdXNvdXRgIGV2ZW50cyB3aGljaCBidWJibGUuXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDA4LzA0L2RlbGVnYXRpbmdfdGhlLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgICAgICAgICAgJ2ZvY3VzaW4nLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICAgICAgICAgICdmb2N1c291dCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIGJsdXIgYW5kIGZvY3VzIGV2ZW50IGxpc3RlbmVycyBhcmUgb25seSBhdHRhY2hlZCBvbmNlXG4gICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BCbHVyXSA9IHRydWU7XG4gICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BGb2N1c10gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRvcEV2ZW50TWFwcGluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSkge1xuICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgIGRlcGVuZGVuY3ksXG4gICAgICAgICAgICB0b3BFdmVudE1hcHBpbmdbZGVwZW5kZW5jeV0sXG4gICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBoYW5kbGVcbiAgICApO1xuICB9LFxuXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBoYW5kbGVcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW5zIHRvIHdpbmRvdyBzY3JvbGwgYW5kIHJlc2l6ZSBldmVudHMuIFdlIGNhY2hlIHNjcm9sbCB2YWx1ZXMgc28gdGhhdFxuICAgKiBhcHBsaWNhdGlvbiBjb2RlIGNhbiBhY2Nlc3MgdGhlbSB3aXRob3V0IHRyaWdnZXJpbmcgcmVmbG93cy5cbiAgICpcbiAgICogTk9URTogU2Nyb2xsIGV2ZW50cyBkbyBub3QgYnViYmxlLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy9zY3JvbGwuaHRtbFxuICAgKi9cbiAgZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlKSB7XG4gICAgICB2YXIgcmVmcmVzaCA9IFZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5tb25pdG9yU2Nyb2xsVmFsdWUocmVmcmVzaCk7XG4gICAgICBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogRXZlbnRQbHVnaW5IdWIuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpbkh1Yi5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcyxcblxuICBwdXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIsXG5cbiAgZ2V0TGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyLFxuXG4gIGRlbGV0ZUxpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5kZWxldGVMaXN0ZW5lcixcblxuICBkZWxldGVBbGxMaXN0ZW5lcnM6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUFsbExpc3RlbmVyc1xuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZFJlY29uY2lsZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZShcIi4vUmVhY3RSZWNvbmNpbGVyXCIpO1xuXG52YXIgZmxhdHRlbkNoaWxkcmVuID0gcmVxdWlyZShcIi4vZmxhdHRlbkNoaWxkcmVuXCIpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIik7XG5cbi8qKlxuICogUmVhY3RDaGlsZFJlY29uY2lsZXIgcHJvdmlkZXMgaGVscGVycyBmb3IgaW5pdGlhbGl6aW5nIG9yIHVwZGF0aW5nIGEgc2V0IG9mXG4gKiBjaGlsZHJlbi4gSXRzIG91dHB1dCBpcyBzdWl0YWJsZSBmb3IgcGFzc2luZyBpdCBvbnRvIFJlYWN0TXVsdGlDaGlsZCB3aGljaFxuICogZG9lcyBkaWZmZWQgcmVvcmRlcmluZyBhbmQgaW5zZXJ0aW9uLlxuICovXG52YXIgUmVhY3RDaGlsZFJlY29uY2lsZXIgPSB7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkTm9kZXMgTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBpbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXN0ZWRDaGlsZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBjaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzKTtcbiAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkcmVuKSB7XG4gICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbmFtZV07XG4gICAgICAgIC8vIFRoZSByZW5kZXJlZCBjaGlsZHJlbiBtdXN0IGJlIHR1cm5lZCBpbnRvIGluc3RhbmNlcyBhcyB0aGV5J3JlXG4gICAgICAgIC8vIG1vdW50ZWQuXG4gICAgICAgIHZhciBjaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG4gICAgICAgIGNoaWxkcmVuW25hbWVdID0gY2hpbGRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSByZW5kZXJlZCBjaGlsZHJlbiBhbmQgcmV0dXJucyBhIG5ldyBzZXQgb2YgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNoaWxkcmVuIFByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgc2V0IG9mIGNoaWxkcmVuLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZE5vZGVzIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgbmV3IHNldCBvZiBjaGlsZCBpbnN0YW5jZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKFxuICAgIHByZXZDaGlsZHJlbixcbiAgICBuZXh0TmVzdGVkQ2hpbGROb2RlcyxcbiAgICB0cmFuc2FjdGlvbixcbiAgICBjb250ZXh0KSB7XG4gICAgLy8gV2UgY3VycmVudGx5IGRvbid0IGhhdmUgYSB3YXkgdG8gdHJhY2sgbW92ZXMgaGVyZSBidXQgaWYgd2UgdXNlIGl0ZXJhdG9yc1xuICAgIC8vIGluc3RlYWQgb2YgZm9yLi5pbiB3ZSBjYW4gemlwIHRoZSBpdGVyYXRvcnMgYW5kIGNoZWNrIGlmIGFuIGl0ZW0gaGFzXG4gICAgLy8gbW92ZWQuXG4gICAgLy8gVE9ETzogSWYgbm90aGluZyBoYXMgY2hhbmdlZCwgcmV0dXJuIHRoZSBwcmV2Q2hpbGRyZW4gb2JqZWN0IHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gcXVpY2tseSBiYWlsb3V0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG4gICAgdmFyIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGROb2Rlcyk7XG4gICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBuYW1lO1xuICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q2hpbGQgJiYgcHJldkNoaWxkLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KFxuICAgICAgICAgIHByZXZDaGlsZCwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICAgIG5leHRDaGlsZHJlbltuYW1lXSA9IHByZXZDaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGQsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBjaGlsZCBtdXN0IGJlIGluc3RhbnRpYXRlZCBiZWZvcmUgaXQncyBtb3VudGVkLlxuICAgICAgICB2YXIgbmV4dENoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuICAgICAgICAgIG5leHRFbGVtZW50LFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gbmV4dENoaWxkSW5zdGFuY2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFVubW91bnQgY2hpbGRyZW4gdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQuXG4gICAgZm9yIChuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkcmVuW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHJlbmRlcmVkQ2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbihyZW5kZXJlZENoaWxkcmVuKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiByZW5kZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHJlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChyZW5kZXJlZENoaWxkKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkUmVjb25jaWxlcjtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZm9yRWFjaEZ1bmN0aW9uLGZvckVhY2hDb250ZXh0KXt0aGlzLmZvckVhY2hGdW5jdGlvbj1mb3JFYWNoRnVuY3Rpb24sdGhpcy5mb3JFYWNoQ29udGV4dD1mb3JFYWNoQ29udGV4dH1mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQodHJhdmVyc2VDb250ZXh0LGNoaWxkLG5hbWUsaSl7dmFyIGZvckVhY2hCb29rS2VlcGluZz10cmF2ZXJzZUNvbnRleHQ7Zm9yRWFjaEJvb2tLZWVwaW5nLmZvckVhY2hGdW5jdGlvbi5jYWxsKGZvckVhY2hCb29rS2VlcGluZy5mb3JFYWNoQ29udGV4dCxjaGlsZCxpKX1mdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sZm9yRWFjaEZ1bmMsZm9yRWFjaENvbnRleHQpe2lmKG51bGw9PWNoaWxkcmVuKXJldHVybiBjaGlsZHJlbjt2YXIgdHJhdmVyc2VDb250ZXh0PUZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsZm9yRWFjaENvbnRleHQpO3RyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sZm9yRWFjaFNpbmdsZUNoaWxkLHRyYXZlcnNlQ29udGV4dCksRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KX1mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsbWFwRnVuY3Rpb24sbWFwQ29udGV4dCl7dGhpcy5tYXBSZXN1bHQ9bWFwUmVzdWx0LHRoaXMubWFwRnVuY3Rpb249bWFwRnVuY3Rpb24sdGhpcy5tYXBDb250ZXh0PW1hcENvbnRleHR9ZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsY2hpbGQsbmFtZSxpKXt2YXIgbWFwQm9va0tlZXBpbmc9dHJhdmVyc2VDb250ZXh0LG1hcFJlc3VsdD1tYXBCb29rS2VlcGluZy5tYXBSZXN1bHQsa2V5VW5pcXVlPSFtYXBSZXN1bHQuaGFzT3duUHJvcGVydHkobmFtZSk7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhrZXlVbmlxdWUsXCJSZWFjdENoaWxkcmVuLm1hcCguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksIGAlc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5IHRoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuXCIsbmFtZSk6bnVsbCksa2V5VW5pcXVlKXt2YXIgbWFwcGVkQ2hpbGQ9bWFwQm9va0tlZXBpbmcubWFwRnVuY3Rpb24uY2FsbChtYXBCb29rS2VlcGluZy5tYXBDb250ZXh0LGNoaWxkLGkpO21hcFJlc3VsdFtuYW1lXT1tYXBwZWRDaGlsZH19ZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sZnVuYyxjb250ZXh0KXtpZihudWxsPT1jaGlsZHJlbilyZXR1cm4gY2hpbGRyZW47dmFyIG1hcFJlc3VsdD17fSx0cmF2ZXJzZUNvbnRleHQ9TWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKG1hcFJlc3VsdCxmdW5jLGNvbnRleHQpO3JldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsdHJhdmVyc2VDb250ZXh0KSxNYXBCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCksUmVhY3RGcmFnbWVudC5jcmVhdGUobWFwUmVzdWx0KX1mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSh0cmF2ZXJzZUNvbnRleHQsY2hpbGQsbmFtZSxpKXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLGNvbnRleHQpe3JldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLGZvckVhY2hTaW5nbGVDaGlsZER1bW15LG51bGwpfXZhciBQb29sZWRDbGFzcz1yZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKSxSZWFjdEZyYWdtZW50PXJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIiksdHJhdmVyc2VBbGxDaGlsZHJlbj1yZXF1aXJlKFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSx0d29Bcmd1bWVudFBvb2xlcj1Qb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcix0aHJlZUFyZ3VtZW50UG9vbGVyPVBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXI7UG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZyx0d29Bcmd1bWVudFBvb2xlciksUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKE1hcEJvb2tLZWVwaW5nLHRocmVlQXJndW1lbnRQb29sZXIpO3ZhciBSZWFjdENoaWxkcmVuPXtmb3JFYWNoOmZvckVhY2hDaGlsZHJlbixtYXA6bWFwQ2hpbGRyZW4sY291bnQ6Y291bnRDaGlsZHJlbn07bW9kdWxlLmV4cG9ydHM9UmVhY3RDaGlsZHJlbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JEYUdsc1pISmxiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlYwRXNXVUZ0UWtFc1UwRkJVeXh2UWtGQmJVSXNaMEpCUVdsQ0xHZENRVU16UXl4TFFVRkxMR2RDUVVGclFpeG5Ra0ZEZGtJc1MwRkJTeXhsUVVGcFFpeGxRVWw0UWl4UlFVRlRMRzlDUVVGdFFpeG5Ra0ZCYVVJc1RVRkJUeXhMUVVGTkxFZEJRM2hFTEVkQlFVa3NiMEpCUVhGQ0xHVkJRM3BDTEc5Q1FVRnRRaXhuUWtGQlowSXNTMEZEYWtNc2JVSkJRVzFDTEdWQlFXZENMRTFCUVU4c1IwRmhPVU1zVVVGQlV5eHBRa0ZCWjBJc1UwRkJWU3haUVVGaExHZENRVU01UXl4SFFVRm5RaXhOUVVGYUxGTkJRMFlzVFVGQlR5eFRRVWRVTEVsQlFVa3NhVUpCUTBZc2JVSkJRVzFDTEZWQlFWVXNXVUZCWVN4bFFVTTFReXh4UWtGQmIwSXNVMEZCVlN4dFFrRkJiMElzYVVKQlEyeEVMRzFDUVVGdFFpeFJRVUZSTEdsQ1FWazNRaXhSUVVGVExHZENRVUZsTEZWQlFWY3NXVUZCWVN4WlFVTTVReXhMUVVGTExGVkJRVmtzVlVGRGFrSXNTMEZCU3l4WlFVRmpMRmxCUTI1Q0xFdEJRVXNzVjBGQllTeFhRVWx3UWl4UlFVRlRMREpDUVVFd1FpeG5Ra0ZCYVVJc1RVRkJUeXhMUVVGTkxFZEJReTlFTEVkQlFVa3NaMEpCUVdsQ0xHZENRVU5xUWl4VlFVRlpMR1ZCUVdVc1ZVRkZNMElzVjBGQllTeFZRVUZWTEdWQlFXVXNTMEZYTVVNc1NVRldTU3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NWMEZET1VJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVVUZEZGtNc1ZVRkRRU3g1UzBGSFFTeE5RVU5GTEUxQlIwWXNWVUZCVnl4RFFVTmlMRWRCUVVrc1lVRkRSaXhsUVVGbExGbEJRVmtzUzBGQlN5eGxRVUZsTEZkQlFWa3NUVUZCVHl4RlFVTndSU3hYUVVGVkxFMUJRVkVzWVVGclFuUkNMRkZCUVZNc1lVRkJXU3hUUVVGVkxFdEJRVTBzVTBGRGJrTXNSMEZCWjBJc1RVRkJXaXhUUVVOR0xFMUJRVThzVTBGSFZDeEpRVUZKTEdOQlEwRXNaMEpCUVd0Q0xHVkJRV1VzVlVGQlZTeFZRVUZYTEV0QlFVMHNVVUZIYUVVc1QwRkdRU3h4UWtGQmIwSXNVMEZCVlN3d1FrRkJNa0lzYVVKQlEzcEVMR1ZCUVdVc1VVRkJVU3hwUWtGRGFFSXNZMEZCWXl4UFFVRlBMRmRCUnpsQ0xGRkJRVk1zZVVKQlFYZENMR2RDUVVGcFFpeE5RVUZQTEV0QlFVMHNSMEZETjBRc1RVRkJUeXhOUVZWVUxGRkJRVk1zWlVGQll5eFRRVUZWTEZOQlF5OUNMRTFCUVU4c2NVSkJRVzlDTEZOQlFWVXNkMEpCUVhsQ0xFMUJPVWhvUlN4SFFVRkpMR0ZCUVdNc1VVRkJVU3hwUWtGRGRFSXNZMEZCWjBJc1VVRkJVU3h0UWtGRmVFSXNiMEpCUVhOQ0xGRkJRVkVzZVVKQlF6bENMRkZCUVZVc1VVRkJVU3hoUVVWc1FpeHJRa0ZCYjBJc1dVRkJXU3hyUWtGRGFFTXNiMEpCUVhOQ0xGbEJRVmtzYlVKQlkzUkRMR0ZCUVZrc1lVRkJZU3h0UWtGQmIwSXNiVUpCTWtNM1F5eFpRVUZaTEdGQlFXRXNaVUZCWjBJc2IwSkJhVVY2UXl4SlFVRkpMR2RDUVVOR0xGRkJRVk1zWjBKQlExUXNTVUZCU3l4WlFVTk1MRTFCUVU4c1kwRkhWQ3hSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFTm9hV3hrY21WdVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdVRzl2YkdWa1EyeGhjM01nUFNCeVpYRjFhWEpsS0Z3aUxpOVFiMjlzWldSRGJHRnpjMXdpS1R0Y2JuWmhjaUJTWldGamRFWnlZV2R0Wlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkdjbUZuYldWdWRGd2lLVHRjYmx4dWRtRnlJSFJ5WVhabGNuTmxRV3hzUTJocGJHUnlaVzRnUFNCeVpYRjFhWEpsS0Z3aUxpOTBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVYQ0lwTzF4dWRtRnlJSGRoY201cGJtY2dQU0J5WlhGMWFYSmxLRndpTGk5M1lYSnVhVzVuWENJcE8xeHVYRzUyWVhJZ2RIZHZRWEpuZFcxbGJuUlFiMjlzWlhJZ1BTQlFiMjlzWldSRGJHRnpjeTUwZDI5QmNtZDFiV1Z1ZEZCdmIyeGxjanRjYm5aaGNpQjBhSEpsWlVGeVozVnRaVzUwVUc5dmJHVnlJRDBnVUc5dmJHVmtRMnhoYzNNdWRHaHlaV1ZCY21kMWJXVnVkRkJ2YjJ4bGNqdGNibHh1THlvcVhHNGdLaUJRYjI5c1pXUkRiR0Z6Y3lCeVpYQnlaWE5sYm5ScGJtY2dkR2hsSUdKdmIydHJaV1Z3YVc1bklHRnpjMjlqYVdGMFpXUWdkMmwwYUNCd1pYSm1iM0p0YVc1bklHRWdZMmhwYkdSY2JpQXFJSFJ5WVhabGNuTmhiQzRnUVd4c2IzZHpJR0YyYjJsa2FXNW5JR0pwYm1ScGJtY2dZMkZzYkdKaFkydHpMbHh1SUNwY2JpQXFJRUJqYjI1emRISjFZM1J2Y2lCR2IzSkZZV05vUW05dmEwdGxaWEJwYm1kY2JpQXFJRUJ3WVhKaGJTQjdJV1oxYm1OMGFXOXVmU0JtYjNKRllXTm9SblZ1WTNScGIyNGdSblZ1WTNScGIyNGdkRzhnY0dWeVptOXliU0IwY21GMlpYSnpZV3dnZDJsMGFDNWNiaUFxSUVCd1lYSmhiU0I3UHlwOUlHWnZja1ZoWTJoRGIyNTBaWGgwSUVOdmJuUmxlSFFnZEc4Z2NHVnlabTl5YlNCamIyNTBaWGgwSUhkcGRHZ3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlFWnZja1ZoWTJoQ2IyOXJTMlZsY0dsdVp5aG1iM0pGWVdOb1JuVnVZM1JwYjI0c0lHWnZja1ZoWTJoRGIyNTBaWGgwS1NCN1hHNGdJSFJvYVhNdVptOXlSV0ZqYUVaMWJtTjBhVzl1SUQwZ1ptOXlSV0ZqYUVaMWJtTjBhVzl1TzF4dUlDQjBhR2x6TG1admNrVmhZMmhEYjI1MFpYaDBJRDBnWm05eVJXRmphRU52Ym5SbGVIUTdYRzU5WEc1UWIyOXNaV1JEYkdGemN5NWhaR1JRYjI5c2FXNW5WRzhvUm05eVJXRmphRUp2YjJ0TFpXVndhVzVuTENCMGQyOUJjbWQxYldWdWRGQnZiMnhsY2lrN1hHNWNibVoxYm1OMGFXOXVJR1p2Y2tWaFkyaFRhVzVuYkdWRGFHbHNaQ2gwY21GMlpYSnpaVU52Ym5SbGVIUXNJR05vYVd4a0xDQnVZVzFsTENCcEtTQjdYRzRnSUhaaGNpQm1iM0pGWVdOb1FtOXZhMHRsWlhCcGJtY2dQU0IwY21GMlpYSnpaVU52Ym5SbGVIUTdYRzRnSUdadmNrVmhZMmhDYjI5clMyVmxjR2x1Wnk1bWIzSkZZV05vUm5WdVkzUnBiMjR1WTJGc2JDaGNiaUFnSUNCbWIzSkZZV05vUW05dmEwdGxaWEJwYm1jdVptOXlSV0ZqYUVOdmJuUmxlSFFzSUdOb2FXeGtMQ0JwS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJKZEdWeVlYUmxjeUIwYUhKdmRXZG9JR05vYVd4a2NtVnVJSFJvWVhRZ1lYSmxJSFI1Y0dsallXeHNlU0J6Y0dWamFXWnBaV1FnWVhNZ1lIQnliM0J6TG1Ob2FXeGtjbVZ1WUM1Y2JpQXFYRzRnS2lCVWFHVWdjSEp2ZG1sa1pXUWdabTl5UldGamFFWjFibU1vWTJocGJHUXNJR2x1WkdWNEtTQjNhV3hzSUdKbElHTmhiR3hsWkNCbWIzSWdaV0ZqYUZ4dUlDb2diR1ZoWmlCamFHbHNaQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlejhxZlNCamFHbHNaSEpsYmlCRGFHbHNaSEpsYmlCMGNtVmxJR052Ym5SaGFXNWxjaTVjYmlBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI0b0tpd2dhVzUwS1gwZ1ptOXlSV0ZqYUVaMWJtTXVYRzRnS2lCQWNHRnlZVzBnZXlwOUlHWnZja1ZoWTJoRGIyNTBaWGgwSUVOdmJuUmxlSFFnWm05eUlHWnZja1ZoWTJoRGIyNTBaWGgwTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJtYjNKRllXTm9RMmhwYkdSeVpXNG9ZMmhwYkdSeVpXNHNJR1p2Y2tWaFkyaEdkVzVqTENCbWIzSkZZV05vUTI5dWRHVjRkQ2tnZTF4dUlDQnBaaUFvWTJocGJHUnlaVzRnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmphR2xzWkhKbGJqdGNiaUFnZlZ4dVhHNGdJSFpoY2lCMGNtRjJaWEp6WlVOdmJuUmxlSFFnUFZ4dUlDQWdJRVp2Y2tWaFkyaENiMjlyUzJWbGNHbHVaeTVuWlhSUWIyOXNaV1FvWm05eVJXRmphRVoxYm1Nc0lHWnZja1ZoWTJoRGIyNTBaWGgwS1R0Y2JpQWdkSEpoZG1WeWMyVkJiR3hEYUdsc1pISmxiaWhqYUdsc1pISmxiaXdnWm05eVJXRmphRk5wYm1kc1pVTm9hV3hrTENCMGNtRjJaWEp6WlVOdmJuUmxlSFFwTzF4dUlDQkdiM0pGWVdOb1FtOXZhMHRsWlhCcGJtY3VjbVZzWldGelpTaDBjbUYyWlhKelpVTnZiblJsZUhRcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZCdmIyeGxaRU5zWVhOeklISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ1ltOXZhMnRsWlhCcGJtY2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lIQmxjbVp2Y20xcGJtY2dZU0JqYUdsc1pGeHVJQ29nYldGd2NHbHVaeTRnUVd4c2IzZHpJR0YyYjJsa2FXNW5JR0pwYm1ScGJtY2dZMkZzYkdKaFkydHpMbHh1SUNwY2JpQXFJRUJqYjI1emRISjFZM1J2Y2lCTllYQkNiMjlyUzJWbGNHbHVaMXh1SUNvZ1FIQmhjbUZ0SUhzaEtuMGdiV0Z3VW1WemRXeDBJRTlpYW1WamRDQmpiMjUwWVdsdWFXNW5JSFJvWlNCdmNtUmxjbVZrSUcxaGNDQnZaaUJ5WlhOMWJIUnpMbHh1SUNvZ1FIQmhjbUZ0SUhzaFpuVnVZM1JwYjI1OUlHMWhjRVoxYm1OMGFXOXVJRVoxYm1OMGFXOXVJSFJ2SUhCbGNtWnZjbTBnYldGd2NHbHVaeUIzYVhSb0xseHVJQ29nUUhCaGNtRnRJSHMvS24wZ2JXRndRMjl1ZEdWNGRDQkRiMjUwWlhoMElIUnZJSEJsY21admNtMGdiV0Z3Y0dsdVp5QjNhWFJvTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJOWVhCQ2IyOXJTMlZsY0dsdVp5aHRZWEJTWlhOMWJIUXNJRzFoY0VaMWJtTjBhVzl1TENCdFlYQkRiMjUwWlhoMEtTQjdYRzRnSUhSb2FYTXViV0Z3VW1WemRXeDBJRDBnYldGd1VtVnpkV3gwTzF4dUlDQjBhR2x6TG0xaGNFWjFibU4wYVc5dUlEMGdiV0Z3Um5WdVkzUnBiMjQ3WEc0Z0lIUm9hWE11YldGd1EyOXVkR1Y0ZENBOUlHMWhjRU52Ym5SbGVIUTdYRzU5WEc1UWIyOXNaV1JEYkdGemN5NWhaR1JRYjI5c2FXNW5WRzhvVFdGd1FtOXZhMHRsWlhCcGJtY3NJSFJvY21WbFFYSm5kVzFsYm5SUWIyOXNaWElwTzF4dVhHNW1kVzVqZEdsdmJpQnRZWEJUYVc1bmJHVkRhR2xzWkVsdWRHOURiMjUwWlhoMEtIUnlZWFpsY25ObFEyOXVkR1Y0ZEN3Z1kyaHBiR1FzSUc1aGJXVXNJR2twSUh0Y2JpQWdkbUZ5SUcxaGNFSnZiMnRMWldWd2FXNW5JRDBnZEhKaGRtVnljMlZEYjI1MFpYaDBPMXh1SUNCMllYSWdiV0Z3VW1WemRXeDBJRDBnYldGd1FtOXZhMHRsWlhCcGJtY3ViV0Z3VW1WemRXeDBPMXh1WEc0Z0lIWmhjaUJyWlhsVmJtbHhkV1VnUFNBaGJXRndVbVZ6ZFd4MExtaGhjMDkzYmxCeWIzQmxjblI1S0c1aGJXVXBPMXh1SUNCcFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JSGRoY201cGJtY29YRzRnSUNBZ0lDQnJaWGxWYm1seGRXVXNYRzRnSUNBZ0lDQW5VbVZoWTNSRGFHbHNaSEpsYmk1dFlYQW9MaTR1S1RvZ1JXNWpiM1Z1ZEdWeVpXUWdkSGR2SUdOb2FXeGtjbVZ1SUhkcGRHZ2dkR2hsSUhOaGJXVWdhMlY1TENBbklDdGNiaUFnSUNBZ0lDZGdKWE5nTGlCRGFHbHNaQ0JyWlhseklHMTFjM1FnWW1VZ2RXNXBjWFZsT3lCM2FHVnVJSFIzYnlCamFHbHNaSEpsYmlCemFHRnlaU0JoSUd0bGVTd2diMjVzZVNBbklDdGNiaUFnSUNBZ0lDZDBhR1VnWm1seWMzUWdZMmhwYkdRZ2QybHNiQ0JpWlNCMWMyVmtMaWNzWEc0Z0lDQWdJQ0J1WVcxbFhHNGdJQ0FnS1NBNklHNTFiR3dwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR3RsZVZWdWFYRjFaU2tnZTF4dUlDQWdJSFpoY2lCdFlYQndaV1JEYUdsc1pDQTlYRzRnSUNBZ0lDQnRZWEJDYjI5clMyVmxjR2x1Wnk1dFlYQkdkVzVqZEdsdmJpNWpZV3hzS0cxaGNFSnZiMnRMWldWd2FXNW5MbTFoY0VOdmJuUmxlSFFzSUdOb2FXeGtMQ0JwS1R0Y2JpQWdJQ0J0WVhCU1pYTjFiSFJiYm1GdFpWMGdQU0J0WVhCd1pXUkRhR2xzWkR0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFMWhjSE1nWTJocGJHUnlaVzRnZEdoaGRDQmhjbVVnZEhsd2FXTmhiR3g1SUhOd1pXTnBabWxsWkNCaGN5QmdjSEp2Y0hNdVkyaHBiR1J5Wlc1Z0xseHVJQ3BjYmlBcUlGUm9aU0J3Y205MmFXUmxaQ0J0WVhCR2RXNWpkR2x2YmloamFHbHNaQ3dnYTJWNUxDQnBibVJsZUNrZ2QybHNiQ0JpWlNCallXeHNaV1FnWm05eUlHVmhZMmhjYmlBcUlHeGxZV1lnWTJocGJHUXVYRzRnS2x4dUlDb2dWRTlFVHpvZ1ZHaHBjeUJ0WVhrZ2JHbHJaV3g1SUdKeVpXRnJJR0Z1ZVNCallXeHNjeUIwYnlCZ1VtVmhZM1JEYUdsc1pISmxiaTV0WVhCZ0lIUm9ZWFFnZDJWeVpWeHVJQ29nY0hKbGRtbHZkWE5zZVNCeVpXeDVhVzVuSUc5dUlIUm9aU0JtWVdOMElIUm9ZWFFnZDJVZ1ozVmhjbVJsWkNCaFoyRnBibk4wSUc1MWJHd2dZMmhwYkdSeVpXNHVYRzRnS2x4dUlDb2dRSEJoY21GdElIcy9LbjBnWTJocGJHUnlaVzRnUTJocGJHUnlaVzRnZEhKbFpTQmpiMjUwWVdsdVpYSXVYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1S0Nvc0lHbHVkQ2w5SUcxaGNFWjFibU4wYVc5dUxseHVJQ29nUUhCaGNtRnRJSHNxZlNCdFlYQkRiMjUwWlhoMElFTnZiblJsZUhRZ1ptOXlJRzFoY0VaMWJtTjBhVzl1TGx4dUlDb2dRSEpsZEhWeWJpQjdiMkpxWldOMGZTQlBZbXBsWTNRZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnYjNKa1pYSmxaQ0J0WVhBZ2IyWWdjbVZ6ZFd4MGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXRndRMmhwYkdSeVpXNG9ZMmhwYkdSeVpXNHNJR1oxYm1Nc0lHTnZiblJsZUhRcElIdGNiaUFnYVdZZ0tHTm9hV3hrY21WdUlEMDlJRzUxYkd3cElIdGNiaUFnSUNCeVpYUjFjbTRnWTJocGJHUnlaVzQ3WEc0Z0lIMWNibHh1SUNCMllYSWdiV0Z3VW1WemRXeDBJRDBnZTMwN1hHNGdJSFpoY2lCMGNtRjJaWEp6WlVOdmJuUmxlSFFnUFNCTllYQkNiMjlyUzJWbGNHbHVaeTVuWlhSUWIyOXNaV1FvYldGd1VtVnpkV3gwTENCbWRXNWpMQ0JqYjI1MFpYaDBLVHRjYmlBZ2RISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJpaGphR2xzWkhKbGJpd2diV0Z3VTJsdVoyeGxRMmhwYkdSSmJuUnZRMjl1ZEdWNGRDd2dkSEpoZG1WeWMyVkRiMjUwWlhoMEtUdGNiaUFnVFdGd1FtOXZhMHRsWlhCcGJtY3VjbVZzWldGelpTaDBjbUYyWlhKelpVTnZiblJsZUhRcE8xeHVJQ0J5WlhSMWNtNGdVbVZoWTNSR2NtRm5iV1Z1ZEM1amNtVmhkR1VvYldGd1VtVnpkV3gwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWm05eVJXRmphRk5wYm1kc1pVTm9hV3hrUkhWdGJYa29kSEpoZG1WeWMyVkRiMjUwWlhoMExDQmphR2xzWkN3Z2JtRnRaU3dnYVNrZ2UxeHVJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMWNibHh1THlvcVhHNGdLaUJEYjNWdWRDQjBhR1VnYm5WdFltVnlJRzltSUdOb2FXeGtjbVZ1SUhSb1lYUWdZWEpsSUhSNWNHbGpZV3hzZVNCemNHVmphV1pwWldRZ1lYTmNiaUFxSUdCd2NtOXdjeTVqYUdsc1pISmxibUF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHMvS24wZ1kyaHBiR1J5Wlc0Z1EyaHBiR1J5Wlc0Z2RISmxaU0JqYjI1MFlXbHVaWEl1WEc0Z0tpQkFjbVYwZFhKdUlIdHVkVzFpWlhKOUlGUm9aU0J1ZFcxaVpYSWdiMllnWTJocGJHUnlaVzR1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR052ZFc1MFEyaHBiR1J5Wlc0b1kyaHBiR1J5Wlc0c0lHTnZiblJsZUhRcElIdGNiaUFnY21WMGRYSnVJSFJ5WVhabGNuTmxRV3hzUTJocGJHUnlaVzRvWTJocGJHUnlaVzRzSUdadmNrVmhZMmhUYVc1bmJHVkRhR2xzWkVSMWJXMTVMQ0J1ZFd4c0tUdGNibjFjYmx4dWRtRnlJRkpsWVdOMFEyaHBiR1J5Wlc0Z1BTQjdYRzRnSUdadmNrVmhZMmc2SUdadmNrVmhZMmhEYUdsc1pISmxiaXhjYmlBZ2JXRndPaUJ0WVhCRGFHbHNaSEpsYml4Y2JpQWdZMjkxYm5RNklHTnZkVzUwUTJocGJHUnlaVzVjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZoWTNSRGFHbHNaSEpsYmp0Y2JpSmRmUT09IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3Rvcix0eXBlRGVmLGxvY2F0aW9uKXtmb3IodmFyIHByb3BOYW1lIGluIHR5cGVEZWYpdHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoXCJmdW5jdGlvblwiPT10eXBlb2YgdHlwZURlZltwcm9wTmFtZV0sXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIixDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8XCJSZWFjdENsYXNzXCIsUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLHByb3BOYW1lKTpudWxsKX1mdW5jdGlvbiB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKHByb3RvLG5hbWUpe3ZhciBzcGVjUG9saWN5PVJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk/UmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXTpudWxsO1JlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KHNwZWNQb2xpY3k9PT1TcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UsXCJSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLlwiLG5hbWUpOmludmFyaWFudChzcGVjUG9saWN5PT09U3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSkscHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChzcGVjUG9saWN5PT09U3BlY1BvbGljeS5ERUZJTkVfTUFOWXx8c3BlY1BvbGljeT09PVNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFwiUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbi5cIixuYW1lKTppbnZhcmlhbnQoc3BlY1BvbGljeT09PVNwZWNQb2xpY3kuREVGSU5FX01BTll8fHNwZWNQb2xpY3k9PT1TcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkpfWZ1bmN0aW9uIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLHNwZWMpe2lmKHNwZWMpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwiZnVuY3Rpb25cIiE9dHlwZW9mIHNwZWMsXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byB1c2UgYSBjb21wb25lbnQgY2xhc3MgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC5cIik6aW52YXJpYW50KFwiZnVuY3Rpb25cIiE9dHlwZW9mIHNwZWMpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYyksXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byB1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC5cIik6aW52YXJpYW50KCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykpO3ZhciBwcm90bz1Db25zdHJ1Y3Rvci5wcm90b3R5cGU7c3BlYy5oYXNPd25Qcm9wZXJ0eShNSVhJTlNfS0VZKSYmUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3RvcixzcGVjLm1peGlucyk7Zm9yKHZhciBuYW1lIGluIHNwZWMpaWYoc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSYmbmFtZSE9PU1JWElOU19LRVkpe3ZhciBwcm9wZXJ0eT1zcGVjW25hbWVdO2lmKHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sbmFtZSksUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKVJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3Rvcixwcm9wZXJ0eSk7ZWxzZXt2YXIgaXNSZWFjdENsYXNzTWV0aG9kPVJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSksaXNBbHJlYWR5RGVmaW5lZD1wcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKSxtYXJrZWREb250QmluZD1wcm9wZXJ0eSYmcHJvcGVydHkuX19yZWFjdERvbnRCaW5kLGlzRnVuY3Rpb249XCJmdW5jdGlvblwiPT10eXBlb2YgcHJvcGVydHksc2hvdWxkQXV0b0JpbmQ9aXNGdW5jdGlvbiYmIWlzUmVhY3RDbGFzc01ldGhvZCYmIWlzQWxyZWFkeURlZmluZWQmJiFtYXJrZWREb250QmluZDtpZihzaG91bGRBdXRvQmluZClwcm90by5fX3JlYWN0QXV0b0JpbmRNYXB8fChwcm90by5fX3JlYWN0QXV0b0JpbmRNYXA9e30pLHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcFtuYW1lXT1wcm9wZXJ0eSxwcm90b1tuYW1lXT1wcm9wZXJ0eTtlbHNlIGlmKGlzQWxyZWFkeURlZmluZWQpe3ZhciBzcGVjUG9saWN5PVJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoaXNSZWFjdENsYXNzTWV0aG9kJiYoc3BlY1BvbGljeT09PVNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEfHxzcGVjUG9saWN5PT09U3BlY1BvbGljeS5ERUZJTkVfTUFOWSksXCJSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLlwiLHNwZWNQb2xpY3ksbmFtZSk6aW52YXJpYW50KGlzUmVhY3RDbGFzc01ldGhvZCYmKHNwZWNQb2xpY3k9PT1TcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRHx8c3BlY1BvbGljeT09PVNwZWNQb2xpY3kuREVGSU5FX01BTlkpKSxzcGVjUG9saWN5PT09U3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQ/cHJvdG9bbmFtZV09Y3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ocHJvdG9bbmFtZV0scHJvcGVydHkpOnNwZWNQb2xpY3k9PT1TcGVjUG9saWN5LkRFRklORV9NQU5ZJiYocHJvdG9bbmFtZV09Y3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHByb3RvW25hbWVdLHByb3BlcnR5KSl9ZWxzZSBwcm90b1tuYW1lXT1wcm9wZXJ0eSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwcm9wZXJ0eSYmc3BlYy5kaXNwbGF5TmFtZSYmKHByb3RvW25hbWVdLmRpc3BsYXlOYW1lPXNwZWMuZGlzcGxheU5hbWUrXCJfXCIrbmFtZSl9fX19ZnVuY3Rpb24gbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3Isc3RhdGljcyl7aWYoc3RhdGljcylmb3IodmFyIG5hbWUgaW4gc3RhdGljcyl7dmFyIHByb3BlcnR5PXN0YXRpY3NbbmFtZV07aWYoc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSl7dmFyIGlzUmVzZXJ2ZWQ9bmFtZSBpbiBSRVNFUlZFRF9TUEVDX0tFWVM7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIWlzUmVzZXJ2ZWQsJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCBwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3Rvci4nLG5hbWUpOmludmFyaWFudCghaXNSZXNlcnZlZCk7dmFyIGlzSW5oZXJpdGVkPW5hbWUgaW4gQ29uc3RydWN0b3I7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIWlzSW5oZXJpdGVkLFwiUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbi5cIixuYW1lKTppbnZhcmlhbnQoIWlzSW5oZXJpdGVkKSxDb25zdHJ1Y3RvcltuYW1lXT1wcm9wZXJ0eX19fWZ1bmN0aW9uIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLHR3byl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQob25lJiZ0d28mJlwib2JqZWN0XCI9PXR5cGVvZiBvbmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0d28sXCJtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IENhbm5vdCBtZXJnZSBub24tb2JqZWN0cy5cIik6aW52YXJpYW50KG9uZSYmdHdvJiZcIm9iamVjdFwiPT10eXBlb2Ygb25lJiZcIm9iamVjdFwiPT10eXBlb2YgdHdvKTtmb3IodmFyIGtleSBpbiB0d28pdHdvLmhhc093blByb3BlcnR5KGtleSkmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCh2b2lkIDA9PT1vbmVba2V5XSxcIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvIGdldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgd2l0aCBjbGFzaGluZyBrZXlzLlwiLGtleSk6aW52YXJpYW50KHZvaWQgMD09PW9uZVtrZXldKSxvbmVba2V5XT10d29ba2V5XSk7cmV0dXJuIG9uZX1mdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsdHdvKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYT1vbmUuYXBwbHkodGhpcyxhcmd1bWVudHMpLGI9dHdvLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihudWxsPT1hKXJldHVybiBiO2lmKG51bGw9PWIpcmV0dXJuIGE7dmFyIGM9e307cmV0dXJuIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYyxhKSxtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsYiksY319ZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uZSx0d28pe3JldHVybiBmdW5jdGlvbigpe29uZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdHdvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCxtZXRob2Qpe3ZhciBib3VuZE1ldGhvZD1tZXRob2QuYmluZChjb21wb25lbnQpO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe2JvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQ9Y29tcG9uZW50LGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZD1tZXRob2QsYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzPW51bGw7dmFyIGNvbXBvbmVudE5hbWU9Y29tcG9uZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lLF9iaW5kPWJvdW5kTWV0aG9kLmJpbmQ7Ym91bmRNZXRob2QuYmluZD1mdW5jdGlvbihuZXdUaGlzKXtmb3IodmFyIGFyZ3M9W10sJF9fMD0xLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18xPiRfXzA7JF9fMCsrKWFyZ3MucHVzaChhcmd1bWVudHNbJF9fMF0pO2lmKG5ld1RoaXMhPT1jb21wb25lbnQmJm51bGwhPT1uZXdUaGlzKVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSxcImJpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZS4gU2VlICVzXCIsY29tcG9uZW50TmFtZSk6bnVsbDtlbHNlIGlmKCFhcmdzLmxlbmd0aClyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoITEsXCJiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2Ugd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXNcIixjb21wb25lbnROYW1lKTpudWxsLGJvdW5kTWV0aG9kO3ZhciByZWJvdW5kTWV0aG9kPV9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLGFyZ3VtZW50cyk7cmV0dXJuIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dD1jb21wb25lbnQscmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2Q9bWV0aG9kLHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzPWFyZ3MscmVib3VuZE1ldGhvZH19cmV0dXJuIGJvdW5kTWV0aG9kfWZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KXtmb3IodmFyIGF1dG9CaW5kS2V5IGluIGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXApaWYoY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkpe3ZhciBtZXRob2Q9Y29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcFthdXRvQmluZEtleV07Y29tcG9uZW50W2F1dG9CaW5kS2V5XT1iaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LFJlYWN0RXJyb3JVdGlscy5ndWFyZChtZXRob2QsY29tcG9uZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lK1wiLlwiK2F1dG9CaW5kS2V5KSl9fXZhciBSZWFjdENvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLFJlYWN0RXJyb3JVdGlscz1yZXF1aXJlKFwiLi9SZWFjdEVycm9yVXRpbHNcIiksUmVhY3RJbnN0YW5jZU1hcD1yZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpLFJlYWN0TGlmZUN5Y2xlPXJlcXVpcmUoXCIuL1JlYWN0TGlmZUN5Y2xlXCIpLFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM9cmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiKSxSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcz1yZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKSxSZWFjdFVwZGF0ZVF1ZXVlPXJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlUXVldWVcIiksYXNzaWduPXJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxrZXlNaXJyb3I9cmVxdWlyZShcIi4va2V5TWlycm9yXCIpLGtleU9mPXJlcXVpcmUoXCIuL2tleU9mXCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSxNSVhJTlNfS0VZPWtleU9mKHttaXhpbnM6bnVsbH0pLFNwZWNQb2xpY3k9a2V5TWlycm9yKHtERUZJTkVfT05DRTpudWxsLERFRklORV9NQU5ZOm51bGwsT1ZFUlJJREVfQkFTRTpudWxsLERFRklORV9NQU5ZX01FUkdFRDpudWxsfSksaW5qZWN0ZWRNaXhpbnM9W10sUmVhY3RDbGFzc0ludGVyZmFjZT17bWl4aW5zOlNwZWNQb2xpY3kuREVGSU5FX01BTlksc3RhdGljczpTcGVjUG9saWN5LkRFRklORV9NQU5ZLHByb3BUeXBlczpTcGVjUG9saWN5LkRFRklORV9NQU5ZLGNvbnRleHRUeXBlczpTcGVjUG9saWN5LkRFRklORV9NQU5ZLGNoaWxkQ29udGV4dFR5cGVzOlNwZWNQb2xpY3kuREVGSU5FX01BTlksZ2V0RGVmYXVsdFByb3BzOlNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELGdldEluaXRpYWxTdGF0ZTpTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxnZXRDaGlsZENvbnRleHQ6U3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQscmVuZGVyOlNwZWNQb2xpY3kuREVGSU5FX09OQ0UsY29tcG9uZW50V2lsbE1vdW50OlNwZWNQb2xpY3kuREVGSU5FX01BTlksY29tcG9uZW50RGlkTW91bnQ6U3BlY1BvbGljeS5ERUZJTkVfTUFOWSxjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOlNwZWNQb2xpY3kuREVGSU5FX01BTlksc2hvdWxkQ29tcG9uZW50VXBkYXRlOlNwZWNQb2xpY3kuREVGSU5FX09OQ0UsY29tcG9uZW50V2lsbFVwZGF0ZTpTcGVjUG9saWN5LkRFRklORV9NQU5ZLGNvbXBvbmVudERpZFVwZGF0ZTpTcGVjUG9saWN5LkRFRklORV9NQU5ZLGNvbXBvbmVudFdpbGxVbm1vdW50OlNwZWNQb2xpY3kuREVGSU5FX01BTlksdXBkYXRlQ29tcG9uZW50OlNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRX0sUkVTRVJWRURfU1BFQ19LRVlTPXtkaXNwbGF5TmFtZTpmdW5jdGlvbihDb25zdHJ1Y3RvcixkaXNwbGF5TmFtZSl7Q29uc3RydWN0b3IuZGlzcGxheU5hbWU9ZGlzcGxheU5hbWV9LG1peGluczpmdW5jdGlvbihDb25zdHJ1Y3RvcixtaXhpbnMpe2lmKG1peGlucylmb3IodmFyIGk9MDtpPG1peGlucy5sZW5ndGg7aSsrKW1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLG1peGluc1tpXSl9LGNoaWxkQ29udGV4dFR5cGVzOmZ1bmN0aW9uKENvbnN0cnVjdG9yLGNoaWxkQ29udGV4dFR5cGVzKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsY2hpbGRDb250ZXh0VHlwZXMsUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpLENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzPWFzc2lnbih7fSxDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxjaGlsZENvbnRleHRUeXBlcyl9LGNvbnRleHRUeXBlczpmdW5jdGlvbihDb25zdHJ1Y3Rvcixjb250ZXh0VHlwZXMpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3Rvcixjb250ZXh0VHlwZXMsUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0KSxDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXM9YXNzaWduKHt9LENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyxjb250ZXh0VHlwZXMpfSxnZXREZWZhdWx0UHJvcHM6ZnVuY3Rpb24oQ29uc3RydWN0b3IsZ2V0RGVmYXVsdFByb3BzKXtDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHM/Q29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzPWNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyxnZXREZWZhdWx0UHJvcHMpOkNvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcz1nZXREZWZhdWx0UHJvcHN9LHByb3BUeXBlczpmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm9wVHlwZXMpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3Rvcixwcm9wVHlwZXMsUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKSxDb25zdHJ1Y3Rvci5wcm9wVHlwZXM9YXNzaWduKHt9LENvbnN0cnVjdG9yLnByb3BUeXBlcyxwcm9wVHlwZXMpfSxzdGF0aWNzOmZ1bmN0aW9uKENvbnN0cnVjdG9yLHN0YXRpY3Mpe21peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLHN0YXRpY3MpfX0sdHlwZURlcHJlY2F0aW9uRGVzY3JpcHRvcj17ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXt2YXIgZGlzcGxheU5hbWU9dGhpcy5kaXNwbGF5TmFtZXx8dGhpcy5uYW1lfHxcIkNvbXBvbmVudFwiO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSxcIiVzLnR5cGUgaXMgZGVwcmVjYXRlZC4gVXNlICVzIGRpcmVjdGx5IHRvIGFjY2VzcyB0aGUgY2xhc3MuXCIsZGlzcGxheU5hbWUsZGlzcGxheU5hbWUpOm51bGwsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0eXBlXCIse3ZhbHVlOnRoaXN9KSx0aGlzfX0sUmVhY3RDbGFzc01peGluPXtyZXBsYWNlU3RhdGU6ZnVuY3Rpb24obmV3U3RhdGUsY2FsbGJhY2spe1JlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLG5ld1N0YXRlKSxjYWxsYmFjayYmUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2sodGhpcyxjYWxsYmFjayl9LGlzTW91bnRlZDpmdW5jdGlvbigpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBvd25lcj1SZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O251bGwhPT1vd25lciYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXCIlcyBpcyBhY2Nlc3NpbmcgaXNNb3VudGVkIGluc2lkZSBpdHMgcmVuZGVyKCkgZnVuY3Rpb24uIHJlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgcmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuXCIsb3duZXIuZ2V0TmFtZSgpfHxcIkEgY29tcG9uZW50XCIpOm51bGwsb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyPSEwKX12YXIgaW50ZXJuYWxJbnN0YW5jZT1SZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKTtyZXR1cm4gaW50ZXJuYWxJbnN0YW5jZSYmaW50ZXJuYWxJbnN0YW5jZSE9PVJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2V9LHNldFByb3BzOmZ1bmN0aW9uKHBhcnRpYWxQcm9wcyxjYWxsYmFjayl7UmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0UHJvcHModGhpcyxwYXJ0aWFsUHJvcHMpLGNhbGxiYWNrJiZSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLGNhbGxiYWNrKX0scmVwbGFjZVByb3BzOmZ1bmN0aW9uKG5ld1Byb3BzLGNhbGxiYWNrKXtSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVSZXBsYWNlUHJvcHModGhpcyxuZXdQcm9wcyksY2FsbGJhY2smJlJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsY2FsbGJhY2spfX0sUmVhY3RDbGFzc0NvbXBvbmVudD1mdW5jdGlvbigpe307YXNzaWduKFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxSZWFjdENsYXNzTWl4aW4pO3ZhciBSZWFjdENsYXNzPXtjcmVhdGVDbGFzczpmdW5jdGlvbihzcGVjKXt2YXIgQ29uc3RydWN0b3I9ZnVuY3Rpb24ocHJvcHMsY29udGV4dCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsXCJTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciBKU1ggaW5zdGVhZC4gU2VlOiBodHRwczovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnlcIik6bnVsbCksdGhpcy5fX3JlYWN0QXV0b0JpbmRNYXAmJmJpbmRBdXRvQmluZE1ldGhvZHModGhpcyksdGhpcy5wcm9wcz1wcm9wcyx0aGlzLmNvbnRleHQ9Y29udGV4dCx0aGlzLnN0YXRlPW51bGw7dmFyIGluaXRpYWxTdGF0ZT10aGlzLmdldEluaXRpYWxTdGF0ZT90aGlzLmdldEluaXRpYWxTdGF0ZSgpOm51bGw7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIGluaXRpYWxTdGF0ZSYmdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uJiYoaW5pdGlhbFN0YXRlPW51bGwpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwib2JqZWN0XCI9PXR5cGVvZiBpbml0aWFsU3RhdGUmJiFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSksXCIlcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGxcIixDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTppbnZhcmlhbnQoXCJvYmplY3RcIj09dHlwZW9mIGluaXRpYWxTdGF0ZSYmIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSksdGhpcy5zdGF0ZT1pbml0aWFsU3RhdGV9O0NvbnN0cnVjdG9yLnByb3RvdHlwZT1uZXcgUmVhY3RDbGFzc0NvbXBvbmVudCxDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3I9Q29uc3RydWN0b3IsaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsQ29uc3RydWN0b3IpKSxtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvcixzcGVjKSxDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMmJihDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHM9Q29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMmJihDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQ9e30pLENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUmJihDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkPXt9KSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcixcImNyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXCIpOmludmFyaWFudChDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyBUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuXCIsc3BlYy5kaXNwbGF5TmFtZXx8XCJBIGNvbXBvbmVudFwiKTpudWxsKTtmb3IodmFyIG1ldGhvZE5hbWUgaW4gUmVhY3RDbGFzc0ludGVyZmFjZSlDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV18fChDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV09bnVsbCk7aWYoQ29uc3RydWN0b3IudHlwZT1Db25zdHJ1Y3RvcixcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsXCJ0eXBlXCIsdHlwZURlcHJlY2F0aW9uRGVzY3JpcHRvcil9Y2F0Y2goeCl7fXJldHVybiBDb25zdHJ1Y3Rvcn0saW5qZWN0aW9uOntpbmplY3RNaXhpbjpmdW5jdGlvbihtaXhpbil7aW5qZWN0ZWRNaXhpbnMucHVzaChtaXhpbil9fX07bW9kdWxlLmV4cG9ydHM9UmVhY3RDbGFzcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JEYkdGemN5NXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCVjBFc1dVRXdXRUVzVTBGQlV5eHBRa0ZCWjBJc1dVRkJZU3hSUVVGVExGVkJRemRETEVsQlFVc3NSMEZCU1N4WlFVRlpMRk5CUTJZc1VVRkJVU3hsUVVGbExGbEJSM2hDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGRkJRMVlzYTBKQlFYUkNMRk5CUVZFc1ZVRkRaaXh2UmtGRlFTeFpRVUZaTEdGQlFXVXNZVUZETTBJc01rSkJRVEpDTEZWQlF6TkNMRlZCUTBVc1RVRkxWaXhSUVVGVExIZENRVUYxUWl4TlFVRlBMRTFCUTNKRExFZEJRVWtzV1VGQllTeHZRa0ZCYjBJc1pVRkJaU3hOUVVOc1JDeHZRa0ZCYjBJc1RVRkRjRUlzU1VGSFJTeHBRa0ZCWjBJc1pVRkJaU3hSUVVOb1F5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eGhRVUZsTEZkQlFWY3NZMEZETVVJc01rcEJSMEVzVFVGRFJTeFZRVUZWTEdGQlFXVXNWMEZCVnl4blFrRkpkRU1zVFVGQlRTeGxRVUZsTEZGQlEzUkNMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEzWkRMR0ZCUVdVc1YwRkJWeXhoUVVNeFFpeGhRVUZsTEZkQlFWY3NiVUpCUXpGQ0xHZEpRVWRCTEUxQlEwVXNWVUZCVlN4aFFVRmxMRmRCUVZjc1lVRkRlRU1zWVVGQlpTeFhRVUZYTEhGQ1FWRTVRaXhSUVVGVExITkNRVUZ4UWl4WlFVRmhMRTFCUTNwRExFZEJRVXNzUzBGQlRDeERRVWxETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM1pDTEd0Q1FVRlVMRTFCUTFBc01FZEJSVVVzVlVGQk1FSXNhMEpCUVZRc1QwRkRjRUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1YwRkRkRU1zWVVGQllTeGxRVUZsTEUxQlF6ZENMRzlIUVVWRkxGZEJRVmNzWVVGQllTeGxRVUZsTEUxQlJUTkRMRWxCUVVrc1QwRkJVU3haUVVGWkxGTkJTM0JDTEUxQlFVc3NaVUZCWlN4aFFVTjBRaXh0UWtGQmJVSXNUMEZCVHl4WlFVRmhMRXRCUVVzc1QwRkhPVU1zUzBGQlN5eEhRVUZKTEZGQlFWRXNUVUZEWml4SFFVRkxMRXRCUVVzc1pVRkJaU3hQUVVseVFpeFBRVUZUTEZkQlFXSXNRMEZMUVN4SFFVRkpMRlZCUVZjc1MwRkJTeXhMUVVkd1FpeEpRVVpCTEhWQ1FVRjFRaXhOUVVGUExFMUJSVEZDTEcxQ1FVRnRRaXhsUVVGbExFMUJRM0JETEcxQ1FVRnRRaXhOUVVGTkxGbEJRV0VzWTBGRGFrTXNRMEZMVEN4SFFVRkpMRzlDUVVOR0xHOUNRVUZ2UWl4bFFVRmxMRTFCUTJwRExHbENRVUZ0UWl4TlFVRk5MR1ZCUVdVc1RVRkRlRU1zWlVGQmFVSXNWVUZCV1N4VFFVRlRMR2RDUVVOMFF5eFhRVUZwUXl4clFrRkJZaXhWUVVOd1FpeGxRVU5HTEdGQlEwTXNjVUpCUTBFc2JVSkJRMEVzWTBGRlNDeEpRVUZKTEdWQlEwY3NUVUZCVFN4eFFrRkRWQ3hOUVVGTkxIVkNRVVZTTEUxQlFVMHNiVUpCUVcxQ0xFMUJRVkVzVTBGRGFrTXNUVUZCVFN4TlFVRlJMR0ZCUldRc1NVRkJTU3hwUWtGQmEwSXNRMEZEY0VJc1IwRkJTU3haUVVGaExHOUNRVUZ2UWl4TFFVZHdReXhuUWtGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkRka01zY1VKQlEwY3NZVUZCWlN4WFFVRlhMRzlDUVVGelFpeGhRVUZsTEZkQlFWY3NZVUZGTjBVc2JVWkJSVUVzVjBGRFFTeE5RVU5GTEZWQlFWVXNjVUpCUTFnc1lVRkJaU3hYUVVGWExHOUNRVUZ6UWl4aFFVRmxMRmRCUVZjc1kwRkxla1VzWVVGQlpTeFhRVUZYTEcxQ1FVTTFRaXhOUVVGTkxFMUJRVkVzTWtKQlFUSkNMRTFCUVUwc1RVRkJUeXhWUVVNM1F5eGhRVUZsTEZkQlFWY3NZMEZEYmtNc1RVRkJUU3hOUVVGUkxITkNRVUZ6UWl4TlFVRk5MRTFCUVU4c1pVRkhia1FzVDBGQlRTeE5RVUZSTEZOQlExWXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGVkJSMUFzYTBKQlFXSXNWMEZCTWtJc1MwRkJTeXhqUVVONlF5eE5RVUZOTEUxQlFVMHNXVUZCWXl4TFFVRkxMRmxCUVdNc1NVRkJUU3hUUVZOcVJTeFJRVUZUTERSQ1FVRXlRaXhaUVVGaExGTkJReTlETEVkQlFVc3NVVUZIVEN4SlFVRkxMRWRCUVVrc1VVRkJVU3hUUVVGVExFTkJRM2hDTEVkQlFVa3NWVUZCVnl4UlFVRlJMRXRCUTNaQ0xFbEJRVXNzVVVGQlVTeGxRVUZsTEUxQlFUVkNMRU5CU1VFc1IwRkJTU3haUVVGaExFOUJRVkVzYlVKQlEzaENMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4WFFVTjBReXhYUVVORUxEQk5RVWxCTEUxQlEwVXNWMEZCVnl4WFFVVm1MRWxCUVVrc1lVRkJZeXhQUVVGUkxGbEJRM3BDTEdkQ1FVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFhRVU4wUXl4WlFVTkVMSFZJUVVkQkxFMUJRMFVzVjBGQlZ5eGhRVU5tTEZsQlFWa3NUVUZCVVN4WFFWZDRRaXhSUVVGVExEaENRVUUyUWl4SlFVRkxMRXRCUTNoRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExFdEJRVThzUzBGQmMwSXNaMEpCUVZJc1RVRkJiVU1zWjBKQlFWSXNTMEZEYUVRc05rUkJRMFVzVlVGQlZTeExRVUZQTEV0QlFYTkNMR2RDUVVGU0xFMUJRVzFETEdkQ1FVRlNMRXRCUlRsRUxFdEJRVXNzUjBGQlNTeFBRVUZQTEV0QlExWXNTVUZCU1N4bFFVRmxMRTlCUTNCQ0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUXpGQ0xGTkJRV0lzU1VGQlNTeExRVU5LTEhsUVFVdEJMRXRCUTBVc1ZVRkJkVUlzVTBGQllpeEpRVUZKTEUxQlEyeENMRWxCUVVrc1MwRkJUeXhKUVVGSkxFdEJSMjVDTEU5QlFVOHNTMEZYVkN4UlFVRlRMRFJDUVVFeVFpeEpRVUZMTEV0QlEzWkRMRTFCUVU4c1dVRkRUQ3hIUVVGSkxFZEJRVWtzU1VGQlNTeE5RVUZOTEV0QlFVMHNWMEZEY0VJc1JVRkJTU3hKUVVGSkxFMUJRVTBzUzBGQlRTeFZRVU40UWl4SlFVRlRMRTFCUVV3c1JVRkRSaXhOUVVGUExFVkJRMFlzU1VGQlV5eE5RVUZNTEVWQlExUXNUVUZCVHl4RlFVVlVMRWxCUVVrc1MwRkhTaXhQUVVaQkxEaENRVUUyUWl4RlFVRkhMRWRCUTJoRExEWkNRVUUyUWl4RlFVRkhMRWRCUTNwQ0xFZEJXVmdzVVVGQlV5eDFRa0ZCYzBJc1NVRkJTeXhMUVVOc1F5eE5RVUZQTEZsQlEwd3NTVUZCU1N4TlFVRk5MRXRCUVUwc1YwRkRhRUlzU1VGQlNTeE5RVUZOTEV0QlFVMHNXVUZYY0VJc1VVRkJVeXh2UWtGQmJVSXNWVUZCVnl4UlFVTnlReXhIUVVGSkxHRkJRV01zVDBGQlR5eExRVUZMTEZWQlF6bENMRWxCUVVrc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWVXNRMEZEZWtNc1dVRkJXU3h2UWtGQmMwSXNWVUZEYkVNc1dVRkJXU3h0UWtGQmNVSXNUMEZEYWtNc1dVRkJXU3h6UWtGQmQwSXNTVUZEY0VNc1NVRkJTU3hsUVVGblFpeFZRVUZWTEZsQlFWa3NXVUZEZEVNc1RVRkJVU3haUVVGWkxFbEJSWGhDTEdGQlFWa3NTMEZCVHl4VFFVRlRMRk5CUVZjc1NVRkJTeXhIUVVGSkxGTkJRVkVzUzBGQlN5eEZRVUZGTEV0QlFVc3NWVUZCVlN4UFFVRlpMRXRCUVV3c1MwRkJWU3hQUVVGUkxFdEJRVXNzUzBGQlN5eFZRVUZWTEUxQlNYcElMRWxCUVVrc1ZVRkJXU3hYUVVGNVFpeFBRVUZhTEZGQlF6RkNMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZOQlEzWkRMRVZCUTBFc2MwWkJSVUVzWlVGRFJTeFRRVU5ETEV0QlFVc3NTMEZCU3l4UFFWRm1MRTFCVUVNc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVMEZEZGtNc1JVRkRRU3d5UzBGSFFTeGxRVU5GTEV0QlEwY3NWMEZGVkN4SlFVRkpMR1ZCUVdkQ0xFMUJRVTBzVFVGQlRTeFpRVUZoTEZWQlNUZERMRTlCU0VFc1pVRkJZeXh2UWtGQmMwSXNWVUZEY0VNc1kwRkJZeXh0UWtGQmNVSXNUMEZEYmtNc1kwRkJZeXh6UWtGQmQwSXNTMEZETDBJc1pVRkpXQ3hOUVVGUExHRkJVVlFzVVVGQlV5eHhRa0ZCYjBJc1YwRkRNMElzU1VGQlN5eEhRVUZKTEdWQlFXVXNWMEZCVlN4dFFrRkRhRU1zUjBGQlNTeFZRVUZWTEcxQ1FVRnRRaXhsUVVGbExHRkJRV01zUTBGRE5VUXNSMEZCU1N4UlFVRlRMRlZCUVZVc2JVSkJRVzFDTEZsQlF6RkRMRmRCUVZVc1lVRkJaU3h0UWtGRGRrSXNWVUZEUVN4blFrRkJaMElzVFVGRFpDeFBRVU5CTEZWQlFWVXNXVUZCV1N4WlFVRmpMRWxCUVUwc1pVRnNja0p3UkN4SFFVRkpMR2RDUVVGcFFpeFJRVUZSTEc5Q1FVTjZRaXhyUWtGQmIwSXNVVUZCVVN4MVFrRkROVUlzWVVGQlpTeFJRVUZSTEd0Q1FVTjJRaXhuUWtGQmEwSXNVVUZCVVN4eFFrRkRNVUlzYVVKQlFXMUNMRkZCUVZFc2MwSkJRek5DTEdWQlFXbENMRkZCUVZFc2IwSkJRM3BDTEhWQ1FVRjVRaXhSUVVGUkxEUkNRVU5xUXl3eVFrRkJOa0lzVVVGQlVTeG5RMEZEY2tNc2FVSkJRVzFDTEZGQlFWRXNjMEpCUlROQ0xFOUJRVk1zVVVGQlVTeHRRa0ZEYWtJc1ZVRkJXU3hSUVVGUkxHVkJRM0JDTEZWQlFWa3NVVUZCVVN4bFFVTndRaXhOUVVGUkxGRkJRVkVzVjBGRGFFSXNVVUZCVlN4UlFVRlJMR0ZCUld4Q0xGZEJRV0VzVDBGQlR5eFBRVUZSTEU5QlN6VkNMRmRCUVdFc1YwRkpaaXhaUVVGaExFdEJTMklzV1VGQllTeExRVWxpTEdOQlFXVXNTMEZOWml4dFFrRkJiMElzVDBGSmJFSXNhMEpCZDBKQkxIRkNRVkZHTEU5QlFWRXNWMEZCVnl4WlFWTnVRaXhSUVVGVExGZEJRVmNzV1VGUmNFSXNWVUZCVnl4WFFVRlhMRmxCVVhSQ0xHRkJRV01zVjBGQlZ5eFpRVkY2UWl4clFrRkJiVUlzVjBGQlZ5eFpRV001UWl4blFrRkJhVUlzVjBGQlZ5eHRRa0ZuUWpWQ0xHZENRVUZwUWl4WFFVRlhMRzFDUVUwMVFpeG5Ra0ZCYVVJc1YwRkJWeXh0UWtGclFqVkNMRTlCUVZFc1YwRkJWeXhaUVdGdVFpeHRRa0ZCYjBJc1YwRkJWeXhaUVZrdlFpeHJRa0ZCYlVJc1YwRkJWeXhaUVhGQ09VSXNNRUpCUVRKQ0xGZEJRVmNzV1VGelFuUkRMSE5DUVVGMVFpeFhRVUZYTEZsQmFVSnNReXh2UWtGQmNVSXNWMEZCVnl4WlFXTm9ReXh0UWtGQmIwSXNWMEZCVnl4WlFXRXZRaXh4UWtGQmMwSXNWMEZCVnl4WlFXZENha01zWjBKQlFXbENMRmRCUVZjc1pVRmhNVUlzYjBKQlEwWXNXVUZCWVN4VFFVRlRMRmxCUVdFc1lVRkRha01zV1VGQldTeFpRVUZqTEdGQlJUVkNMRTlCUVZFc1UwRkJVeXhaUVVGaExGRkJRelZDTEVkQlFVa3NUMEZEUml4SlFVRkxMRWRCUVVrc1IwRkJTU3hGUVVGSExFVkJRVWtzVDBGQlR5eFBRVUZSTEVsQlEycERMSEZDUVVGeFFpeFpRVUZoTEU5QlFVOHNTMEZKTDBNc2EwSkJRVzFDTEZOQlFWTXNXVUZCWVN4dFFrRkRia01zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRlZCUXk5Q0xHZENRVU5GTEZsQlEwRXNhMEpCUTBFc2RVSkJRWFZDTEdOQlJ6TkNMRmxCUVZrc2EwSkJRVzlDTEZWQlJUbENMRmxCUVZrc2EwSkJRMW9zYjBKQlIwb3NZVUZCWXl4VFFVRlRMRmxCUVdFc1kwRkRPVUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRlZCUXk5Q0xHZENRVU5GTEZsQlEwRXNZVUZEUVN4MVFrRkJkVUlzVTBGSE0wSXNXVUZCV1N4aFFVRmxMRlZCUlhwQ0xGbEJRVmtzWVVGRFdpeGxRVTlLTEdkQ1FVRnBRaXhUUVVGVExGbEJRV0VzYVVKQlEycERMRmxCUVZrc1owSkJRMlFzV1VGQldTeG5Ra0ZCYTBJc01rSkJRelZDTEZsQlFWa3NaMEpCUTFvc2FVSkJSMFlzV1VGQldTeG5Ra0ZCYTBJc2FVSkJSMnhETEZWQlFWY3NVMEZCVXl4WlFVRmhMRmRCUXpOQ0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VlFVTXZRaXhuUWtGRFJTeFpRVU5CTEZWQlEwRXNkVUpCUVhWQ0xFMUJSek5DTEZsQlFWa3NWVUZCV1N4VlFVVjBRaXhaUVVGWkxGVkJRMW9zV1VGSFNpeFJRVUZUTEZOQlFWTXNXVUZCWVN4VFFVTTNRaXd5UWtGQk1rSXNXVUZCWVN4WFFYRlZlRU1zTWtKQlEwWXNXVUZCV1N4RlFVTmFMRWxCUVVzc1YwRkRTQ3hIUVVGSkxHRkJRV01zUzBGQlN5eGhRVUZsTEV0QlFVc3NUVUZCVVN4WFFWVnVSQ3hQUVZSRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRk5CUTNaRExFVkJRMEVzT0VSQlEwRXNXVUZEUVN4aFFVTkZMRXRCUTBvc1QwRkJUeXhsUVVGbExFdEJRVTBzVVVGRE1VSXNUVUZCVHl4UFFVVkdMRTlCVVZBc2FVSkJUVVlzWVVGQll5eFRRVUZUTEZOQlFWVXNWVUZETDBJc2FVSkJRV2xDTEc5Q1FVRnZRaXhMUVVGTkxGVkJRM1pETEZWQlEwWXNhVUpCUVdsQ0xHZENRVUZuUWl4TFFVRk5MRmRCVlRORExGVkJRVmNzVjBGRFZDeEhRVUZKTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGVkxFTkJRM3BETEVkQlFVa3NUMEZCVVN4clFrRkJhMElzVDBGRGFFSXNVVUZCVml4UlFVTkVMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZGQlEzWkRMRTFCUVUwc2VVSkJRMDRzZDFKQlMwRXNUVUZCVFN4WFFVRmhMR1ZCUTJwQ0xFdEJRMG9zVFVGQlRTd3dRa0ZCTWtJc1IwRkhja01zUjBGQlNTeHJRa0ZCYlVJc2FVSkJRV2xDTEVsQlFVa3NTMEZETlVNc1QwRkRSU3h0UWtGRFFTeHRRa0ZCY1VJc1pVRkJaU3d5UWtGaGVFTXNVMEZCVlN4VFFVRlRMR0ZCUVdNc1ZVRkRMMElzYVVKQlFXbENMR2RDUVVGblFpeExRVUZOTEdOQlEyNURMRlZCUTBZc2FVSkJRV2xDTEdkQ1FVRm5RaXhMUVVGTkxGZEJZVE5ETEdGQlFXTXNVMEZCVXl4VFFVRlZMRlZCUXk5Q0xHbENRVUZwUWl4dlFrRkJiMElzUzBGQlRTeFZRVU4yUXl4VlFVTkdMR2xDUVVGcFFpeG5Ra0ZCWjBJc1MwRkJUU3haUVV0NlF5eHZRa0ZCYzBJc1dVRkRNVUlzVVVGRFJTeHZRa0ZCYjBJc1ZVRkRjRUlzWlVGQlpTeFZRVU5tTEdkQ1FWRkdMRWxCUVVrc1lVRlRSaXhaUVVGaExGTkJRVk1zVFVGRGNFSXNSMEZCU1N4aFFVRmpMRk5CUVZNc1RVRkJUeXhUUVVrMVFpeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1YwRkRPVUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1VVRkRka01zWlVGQlowSXNZVUZEYUVJc2VVaEJSVVVzVFVGSlJpeExRVUZMTEc5Q1FVTlFMRzlDUVVGdlFpeE5RVWQwUWl4TFFVRkxMRTFCUVZFc1RVRkRZaXhMUVVGTExGRkJRVlVzVVVGRFppeExRVUZMTEUxQlFWRXNTVUZMWWl4SlFVRkpMR05CUVdVc1MwRkJTeXhuUWtGQmEwSXNTMEZCU3l4clFrRkJiMElzU1VGREwwUXNaMEpCUVdsQ0xGRkJRVkVzU1VGQlNTeFZRVVZJTEcxQ1FVRnFRaXhsUVVOUUxFdEJRVXNzWjBKQlFXZENMR3RDUVVkMlFpeGhRVUZsTEUxQlIyeENMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEyWXNaMEpCUVdwQ0xHZENRVUU0UWl4TlFVRk5MRkZCUVZFc1kwRkRia1FzYzBSQlEwRXNXVUZCV1N4aFFVRmxMREpDUVVONlFpeFZRVUZyUXl4blFrRkJha0lzWjBKQlFUaENMRTFCUVUwc1VVRkJVU3hsUVVWcVJTeExRVUZMTEUxQlFWRXNZVUZGWml4aFFVRlpMRlZCUVZrc1IwRkJTU3h4UWtGRE5VSXNXVUZCV1N4VlFVRlZMRmxCUVdNc1dVRkZjRU1zWlVGQlpTeFJRVU5pTEhGQ1FVRnhRaXhMUVVGTExFdEJRVTBzWTBGSGJFTXNjVUpCUVhGQ0xGbEJRV0VzVFVGSE9VSXNXVUZCV1N4clFrRkRaQ3haUVVGWkxHRkJRV1VzV1VGQldTeHRRa0ZIY2tNc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZkQlN6TkNMRmxCUVZrc2EwSkJRMlFzV1VGQldTeG5Ra0ZCWjBJc2VVSkJSVEZDTEZsQlFWa3NWVUZCVlN4clFrRkRlRUlzV1VGQldTeFZRVUZWTEdkQ1FVRm5RaXd3UWtGSmVrTXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNXVUZCV1N4VlFVRlZMRTlCUTNSQ0xESkZRVU5GTEZWQlFWVXNXVUZCV1N4VlFVRlZMRkZCUldoRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4WFFVTTVRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VFFVTjBReXhaUVVGWkxGVkJRVlVzYzBKQlEzWkNMRGhMUVVsQkxFdEJRVXNzWVVGQlpTeGxRVU5zUWl4TFFVbE9MRXRCUVVzc1IwRkJTU3hqUVVGakxIRkNRVU5vUWl4WlFVRlpMRlZCUVZVc1kwRkRla0lzV1VGQldTeFZRVUZWTEZsQlFXTXNTMEZOZUVNc1NVRkVRU3haUVVGWkxFdEJRVThzV1VGRFppeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkRMMElzU1VGRFJTeFBRVUZQTEdWQlFXVXNXVUZCWVN4UFFVRlJMREpDUVVNelF5eE5RVUZQTEVsQlMxZ3NUVUZCVHl4alFVZFVMRmRCUTBVc1dVRkJZU3hUUVVGVExFOUJRM0JDTEdWQlFXVXNTMEZCU3l4VFFVMHhRaXhSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFTnNZWE56WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1VtVmhZM1JEYjIxd2IyNWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVOdmJYQnZibVZ1ZEZ3aUtUdGNiblpoY2lCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlYQ0lwTzF4dWRtRnlJRkpsWVdOMFJXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJXeGxiV1Z1ZEZ3aUtUdGNiblpoY2lCU1pXRmpkRVZ5Y205eVZYUnBiSE1nUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVWeWNtOXlWWFJwYkhOY0lpazdYRzUyWVhJZ1VtVmhZM1JKYm5OMFlXNWpaVTFoY0NBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFNXNXpkR0Z1WTJWTllYQmNJaWs3WEc1MllYSWdVbVZoWTNSTWFXWmxRM2xqYkdVZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFeHBabVZEZVdOc1pWd2lLVHRjYm5aaGNpQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjV6SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1YzF3aUtUdGNiblpoY2lCU1pXRmpkRkJ5YjNCVWVYQmxURzlqWVhScGIyNU9ZVzFsY3lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Yms1aGJXVnpYQ0lwTzF4dWRtRnlJRkpsWVdOMFZYQmtZWFJsVVhWbGRXVWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRlZ3WkdGMFpWRjFaWFZsWENJcE8xeHVYRzUyWVhJZ1lYTnphV2R1SUQwZ2NtVnhkV2x5WlNoY0lpNHZUMkpxWldOMExtRnpjMmxuYmx3aUtUdGNiblpoY2lCcGJuWmhjbWxoYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm5aaGNtbGhiblJjSWlrN1hHNTJZWElnYTJWNVRXbHljbTl5SUQwZ2NtVnhkV2x5WlNoY0lpNHZhMlY1VFdseWNtOXlYQ0lwTzF4dWRtRnlJR3RsZVU5bUlEMGdjbVZ4ZFdseVpTaGNJaTR2YTJWNVQyWmNJaWs3WEc1MllYSWdkMkZ5Ym1sdVp5QTlJSEpsY1hWcGNtVW9YQ0l1TDNkaGNtNXBibWRjSWlrN1hHNWNiblpoY2lCTlNWaEpUbE5mUzBWWklEMGdhMlY1VDJZb2UyMXBlR2x1Y3pvZ2JuVnNiSDBwTzF4dVhHNHZLaXBjYmlBcUlGQnZiR2xqYVdWeklIUm9ZWFFnWkdWelkzSnBZbVVnYldWMGFHOWtjeUJwYmlCZ1VtVmhZM1JEYkdGemMwbHVkR1Z5Wm1GalpXQXVYRzRnS2k5Y2JuWmhjaUJUY0dWalVHOXNhV041SUQwZ2EyVjVUV2x5Y205eUtIdGNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pYTmxJRzFsZEdodlpITWdiV0Y1SUdKbElHUmxabWx1WldRZ2IyNXNlU0J2Ym1ObElHSjVJSFJvWlNCamJHRnpjeUJ6Y0dWamFXWnBZMkYwYVc5dUlHOXlJRzFwZUdsdUxseHVJQ0FnS2k5Y2JpQWdSRVZHU1U1RlgwOU9RMFU2SUc1MWJHd3NYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVnpaU0J0WlhSb2IyUnpJRzFoZVNCaVpTQmtaV1pwYm1Wa0lHSjVJR0p2ZEdnZ2RHaGxJR05zWVhOeklITndaV05wWm1sallYUnBiMjRnWVc1a0lHMXBlR2x1Y3k1Y2JpQWdJQ29nVTNWaWMyVnhkV1Z1ZENCa1pXWnBibWwwYVc5dWN5QjNhV3hzSUdKbElHTm9ZV2x1WldRdUlGUm9aWE5sSUcxbGRHaHZaSE1nYlhWemRDQnlaWFIxY200Z2RtOXBaQzVjYmlBZ0lDb3ZYRzRnSUVSRlJrbE9SVjlOUVU1Wk9pQnVkV3hzTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsYzJVZ2JXVjBhRzlrY3lCaGNtVWdiM1psY25KcFpHbHVaeUIwYUdVZ1ltRnpaU0JqYkdGemN5NWNiaUFnSUNvdlhHNGdJRTlXUlZKU1NVUkZYMEpCVTBVNklHNTFiR3dzWEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1Z6WlNCdFpYUm9iMlJ6SUdGeVpTQnphVzFwYkdGeUlIUnZJRVJGUmtsT1JWOU5RVTVaTENCbGVHTmxjSFFnZDJVZ1lYTnpkVzFsSUhSb1pYa2djbVYwZFhKdVhHNGdJQ0FxSUc5aWFtVmpkSE11SUZkbElIUnllU0IwYnlCdFpYSm5aU0IwYUdVZ2EyVjVjeUJ2WmlCMGFHVWdjbVYwZFhKdUlIWmhiSFZsY3lCdlppQmhiR3dnZEdobElHMXBlR1ZrSUdsdVhHNGdJQ0FxSUdaMWJtTjBhVzl1Y3k0Z1NXWWdkR2hsY21VZ2FYTWdZU0JyWlhrZ1kyOXVabXhwWTNRZ2QyVWdkR2h5YjNjdVhHNGdJQ0FxTDF4dUlDQkVSVVpKVGtWZlRVRk9XVjlOUlZKSFJVUTZJRzUxYkd4Y2JuMHBPMXh1WEc1Y2JuWmhjaUJwYm1wbFkzUmxaRTFwZUdsdWN5QTlJRnRkTzF4dVhHNHZLaXBjYmlBcUlFTnZiWEJ2YzJsMFpTQmpiMjF3YjI1bGJuUnpJR0Z5WlNCb2FXZG9aWEl0YkdWMlpXd2dZMjl0Y0c5dVpXNTBjeUIwYUdGMElHTnZiWEJ2YzJVZ2IzUm9aWElnWTI5dGNHOXphWFJsWEc0Z0tpQnZjaUJ1WVhScGRtVWdZMjl0Y0c5dVpXNTBjeTVjYmlBcVhHNGdLaUJVYnlCamNtVmhkR1VnWVNCdVpYY2dkSGx3WlNCdlppQmdVbVZoWTNSRGJHRnpjMkFzSUhCaGMzTWdZU0J6Y0dWamFXWnBZMkYwYVc5dUlHOW1YRzRnS2lCNWIzVnlJRzVsZHlCamJHRnpjeUIwYnlCZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNOZ0xpQlVhR1VnYjI1c2VTQnlaWEYxYVhKbGJXVnVkQ0J2WmlCNWIzVnlJR05zWVhOelhHNGdLaUJ6Y0dWamFXWnBZMkYwYVc5dUlHbHpJSFJvWVhRZ2VXOTFJR2x0Y0d4bGJXVnVkQ0JoSUdCeVpXNWtaWEpnSUcxbGRHaHZaQzVjYmlBcVhHNGdLaUFnSUhaaGNpQk5lVU52YlhCdmJtVnVkQ0E5SUZKbFlXTjBMbU55WldGMFpVTnNZWE56S0h0Y2JpQXFJQ0FnSUNCeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ29nSUNBZ0lDQWdjbVYwZFhKdUlEeGthWFkrU0dWc2JHOGdWMjl5YkdROEwyUnBkajQ3WEc0Z0tpQWdJQ0FnZlZ4dUlDb2dJQ0I5S1R0Y2JpQXFYRzRnS2lCVWFHVWdZMnhoYzNNZ2MzQmxZMmxtYVdOaGRHbHZiaUJ6ZFhCd2IzSjBjeUJoSUhOd1pXTnBabWxqSUhCeWIzUnZZMjlzSUc5bUlHMWxkR2h2WkhNZ2RHaGhkQ0JvWVhabFhHNGdLaUJ6Y0dWamFXRnNJRzFsWVc1cGJtY2dLR1V1Wnk0Z1lISmxibVJsY21BcExpQlRaV1VnWUZKbFlXTjBRMnhoYzNOSmJuUmxjbVpoWTJWZ0lHWnZjbHh1SUNvZ2JXOXlaU0IwYUdVZ1kyOXRjSEpsYUdWdWMybDJaU0J3Y205MGIyTnZiQzRnUVc1NUlHOTBhR1Z5SUhCeWIzQmxjblJwWlhNZ1lXNWtJRzFsZEdodlpITWdhVzRnZEdobFhHNGdLaUJqYkdGemN5QnpjR1ZqYVdacFkyRjBhVzl1SUhkcGJHd2dZWFpoYVd4aFlteGxJRzl1SUhSb1pTQndjbTkwYjNSNWNHVXVYRzRnS2x4dUlDb2dRR2x1ZEdWeVptRmpaU0JTWldGamRFTnNZWE56U1c1MFpYSm1ZV05sWEc0Z0tpQkFhVzUwWlhKdVlXeGNiaUFxTDF4dWRtRnlJRkpsWVdOMFEyeGhjM05KYm5SbGNtWmhZMlVnUFNCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGdUlHRnljbUY1SUc5bUlFMXBlR2x1SUc5aWFtVmpkSE1nZEc4Z2FXNWpiSFZrWlNCM2FHVnVJR1JsWm1sdWFXNW5JSGx2ZFhJZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBZEhsd1pTQjdZWEp5WVhsOVhHNGdJQ0FxSUVCdmNIUnBiMjVoYkZ4dUlDQWdLaTljYmlBZ2JXbDRhVzV6T2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJiaUJ2WW1wbFkzUWdZMjl1ZEdGcGJtbHVaeUJ3Y205d1pYSjBhV1Z6SUdGdVpDQnRaWFJvYjJSeklIUm9ZWFFnYzJodmRXeGtJR0psSUdSbFptbHVaV1FnYjI1Y2JpQWdJQ29nZEdobElHTnZiWEJ2Ym1WdWRDZHpJR052Ym5OMGNuVmpkRzl5SUdsdWMzUmxZV1FnYjJZZ2FYUnpJSEJ5YjNSdmRIbHdaU0FvYzNSaGRHbGpJRzFsZEdodlpITXBMbHh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3YjJKcVpXTjBmVnh1SUNBZ0tpQkFiM0IwYVc5dVlXeGNiaUFnSUNvdlhHNGdJSE4wWVhScFkzTTZJRk53WldOUWIyeHBZM2t1UkVWR1NVNUZYMDFCVGxrc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbFptbHVhWFJwYjI0Z2IyWWdjSEp2Y0NCMGVYQmxjeUJtYjNJZ2RHaHBjeUJqYjIxd2IyNWxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQjBlWEJsSUh0dlltcGxZM1I5WEc0Z0lDQXFJRUJ2Y0hScGIyNWhiRnh1SUNBZ0tpOWNiaUFnY0hKdmNGUjVjR1Z6T2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaV1pwYm1sMGFXOXVJRzltSUdOdmJuUmxlSFFnZEhsd1pYTWdabTl5SUhSb2FYTWdZMjl0Y0c5dVpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3YjJKcVpXTjBmVnh1SUNBZ0tpQkFiM0IwYVc5dVlXeGNiaUFnSUNvdlhHNGdJR052Ym5SbGVIUlVlWEJsY3pvZ1UzQmxZMUJ2YkdsamVTNUVSVVpKVGtWZlRVRk9XU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1ZtYVc1cGRHbHZiaUJ2WmlCamIyNTBaWGgwSUhSNWNHVnpJSFJvYVhNZ1kyOXRjRzl1Wlc1MElITmxkSE1nWm05eUlHbDBjeUJqYUdsc1pISmxiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTI5aWFtVmpkSDFjYmlBZ0lDb2dRRzl3ZEdsdmJtRnNYRzRnSUNBcUwxeHVJQ0JqYUdsc1pFTnZiblJsZUhSVWVYQmxjem9nVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVFVGT1dTeGNibHh1SUNBdkx5QTlQVDA5SUVSbFptbHVhWFJwYjI0Z2JXVjBhRzlrY3lBOVBUMDlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVkbTlyWldRZ2QyaGxiaUIwYUdVZ1kyOXRjRzl1Wlc1MElHbHpJRzF2ZFc1MFpXUXVJRlpoYkhWbGN5QnBiaUIwYUdVZ2JXRndjR2x1WnlCM2FXeHNJR0psSUhObGRDQnZibHh1SUNBZ0tpQmdkR2hwY3k1d2NtOXdjMkFnYVdZZ2RHaGhkQ0J3Y205d0lHbHpJRzV2ZENCemNHVmphV1pwWldRZ0tHa3VaUzRnZFhOcGJtY2dZVzRnWUdsdVlDQmphR1ZqYXlrdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2JXVjBhRzlrSUdseklHbHVkbTlyWldRZ1ltVm1iM0psSUdCblpYUkpibWwwYVdGc1UzUmhkR1ZnSUdGdVpDQjBhR1Z5WldadmNtVWdZMkZ1Ym05MElISmxiSGxjYmlBZ0lDb2diMjRnWUhSb2FYTXVjM1JoZEdWZ0lHOXlJSFZ6WlNCZ2RHaHBjeTV6WlhSVGRHRjBaV0F1WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgxY2JpQWdJQ29nUUc5d2RHbHZibUZzWEc0Z0lDQXFMMXh1SUNCblpYUkVaV1poZFd4MFVISnZjSE02SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsbGZUVVZTUjBWRUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJuWnZhMlZrSUc5dVkyVWdZbVZtYjNKbElIUm9aU0JqYjIxd2IyNWxiblFnYVhNZ2JXOTFiblJsWkM0Z1ZHaGxJSEpsZEhWeWJpQjJZV3gxWlNCM2FXeHNJR0psSUhWelpXUmNiaUFnSUNvZ1lYTWdkR2hsSUdsdWFYUnBZV3dnZG1Gc2RXVWdiMllnWUhSb2FYTXVjM1JoZEdWZ0xseHVJQ0FnS2x4dUlDQWdLaUFnSUdkbGRFbHVhWFJwWVd4VGRHRjBaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FxSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnS2lBZ0lDQWdJQ0JwYzA5dU9pQm1ZV3h6WlN4Y2JpQWdJQ29nSUNBZ0lDQWdabTl2UW1GNk9pQnVaWGNnUW1GNlJtOXZLQ2xjYmlBZ0lDb2dJQ0FnSUgxY2JpQWdJQ29nSUNCOVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMjlpYW1WamRIMWNiaUFnSUNvZ1FHOXdkR2x2Ym1Gc1hHNGdJQ0FxTDF4dUlDQm5aWFJKYm1sMGFXRnNVM1JoZEdVNklGTndaV05RYjJ4cFkza3VSRVZHU1U1RlgwMUJUbGxmVFVWU1IwVkVMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdHZZbXBsWTNSOVhHNGdJQ0FxSUVCdmNIUnBiMjVoYkZ4dUlDQWdLaTljYmlBZ1oyVjBRMmhwYkdSRGIyNTBaWGgwT2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpYMDFGVWtkRlJDeGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYTmxjeUJ3Y205d2N5Qm1jbTl0SUdCMGFHbHpMbkJ5YjNCellDQmhibVFnYzNSaGRHVWdabkp2YlNCZ2RHaHBjeTV6ZEdGMFpXQWdkRzhnY21WdVpHVnlJSFJvWlZ4dUlDQWdLaUJ6ZEhKMVkzUjFjbVVnYjJZZ2RHaGxJR052YlhCdmJtVnVkQzVjYmlBZ0lDcGNiaUFnSUNvZ1RtOGdaM1ZoY21GdWRHVmxjeUJoY21VZ2JXRmtaU0JoWW05MWRDQjNhR1Z1SUc5eUlHaHZkeUJ2Wm5SbGJpQjBhR2x6SUcxbGRHaHZaQ0JwY3lCcGJuWnZhMlZrTENCemIxeHVJQ0FnS2lCcGRDQnRkWE4wSUc1dmRDQm9ZWFpsSUhOcFpHVWdaV1ptWldOMGN5NWNiaUFnSUNwY2JpQWdJQ29nSUNCeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnS2lBZ0lDQWdkbUZ5SUc1aGJXVWdQU0IwYUdsekxuQnliM0J6TG01aGJXVTdYRzRnSUNBcUlDQWdJQ0J5WlhSMWNtNGdQR1JwZGo1SVpXeHNieXdnZTI1aGJXVjlJVHd2WkdsMlBqdGNiaUFnSUNvZ0lDQjlYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFKbFlXTjBRMjl0Y0c5dVpXNTBmVnh1SUNBZ0tpQkFibTl6YVdSbFpXWm1aV04wYzF4dUlDQWdLaUJBY21WeGRXbHlaV1JjYmlBZ0lDb3ZYRzRnSUhKbGJtUmxjam9nVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVDA1RFJTeGNibHh1WEc1Y2JpQWdMeThnUFQwOVBTQkVaV3hsWjJGMFpTQnRaWFJvYjJSeklEMDlQVDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzUyYjJ0bFpDQjNhR1Z1SUhSb1pTQmpiMjF3YjI1bGJuUWdhWE1nYVc1cGRHbGhiR3g1SUdOeVpXRjBaV1FnWVc1a0lHRmliM1YwSUhSdklHSmxJRzF2ZFc1MFpXUXVYRzRnSUNBcUlGUm9hWE1nYldGNUlHaGhkbVVnYzJsa1pTQmxabVpsWTNSekxDQmlkWFFnWVc1NUlHVjRkR1Z5Ym1Gc0lITjFZbk5qY21sd2RHbHZibk1nYjNJZ1pHRjBZU0JqY21WaGRHVmtYRzRnSUNBcUlHSjVJSFJvYVhNZ2JXVjBhRzlrSUcxMWMzUWdZbVVnWTJ4bFlXNWxaQ0IxY0NCcGJpQmdZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblJnTGx4dUlDQWdLbHh1SUNBZ0tpQkFiM0IwYVc5dVlXeGNiaUFnSUNvdlhHNGdJR052YlhCdmJtVnVkRmRwYkd4TmIzVnVkRG9nVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVFVGT1dTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNTJiMnRsWkNCM2FHVnVJSFJvWlNCamIyMXdiMjVsYm5RZ2FHRnpJR0psWlc0Z2JXOTFiblJsWkNCaGJtUWdhR0Z6SUdFZ1JFOU5JSEpsY0hKbGMyVnVkR0YwYVc5dUxseHVJQ0FnS2lCSWIzZGxkbVZ5TENCMGFHVnlaU0JwY3lCdWJ5Qm5kV0Z5WVc1MFpXVWdkR2hoZENCMGFHVWdSRTlOSUc1dlpHVWdhWE1nYVc0Z2RHaGxJR1J2WTNWdFpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCVmMyVWdkR2hwY3lCaGN5QmhiaUJ2Y0hCdmNuUjFibWwwZVNCMGJ5QnZjR1Z5WVhSbElHOXVJSFJvWlNCRVQwMGdkMmhsYmlCMGFHVWdZMjl0Y0c5dVpXNTBJR2hoYzF4dUlDQWdLaUJpWldWdUlHMXZkVzUwWldRZ0tHbHVhWFJwWVd4cGVtVmtJR0Z1WkNCeVpXNWtaWEpsWkNrZ1ptOXlJSFJvWlNCbWFYSnpkQ0IwYVcxbExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFJQVFVWc1pXMWxiblI5SUhKdmIzUk9iMlJsSUVSUFRTQmxiR1Z0Wlc1MElISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2lCQWIzQjBhVzl1WVd4Y2JpQWdJQ292WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1ME9pQlRjR1ZqVUc5c2FXTjVMa1JGUmtsT1JWOU5RVTVaTEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm5admEyVmtJR0psWm05eVpTQjBhR1VnWTI5dGNHOXVaVzUwSUhKbFkyVnBkbVZ6SUc1bGR5QndjbTl3Y3k1Y2JpQWdJQ3BjYmlBZ0lDb2dWWE5sSUhSb2FYTWdZWE1nWVc0Z2IzQndiM0owZFc1cGRIa2dkRzhnY21WaFkzUWdkRzhnWVNCd2NtOXdJSFJ5WVc1emFYUnBiMjRnWW5rZ2RYQmtZWFJwYm1jZ2RHaGxYRzRnSUNBcUlITjBZWFJsSUhWemFXNW5JR0IwYUdsekxuTmxkRk4wWVhSbFlDNGdRM1Z5Y21WdWRDQndjbTl3Y3lCaGNtVWdZV05qWlhOelpXUWdkbWxoSUdCMGFHbHpMbkJ5YjNCellDNWNiaUFnSUNwY2JpQWdJQ29nSUNCamIyMXdiMjVsYm5SWGFXeHNVbVZqWldsMlpWQnliM0J6T2lCbWRXNWpkR2x2YmlodVpYaDBVSEp2Y0hNc0lHNWxlSFJEYjI1MFpYaDBLU0I3WEc0Z0lDQXFJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDb2dJQ0FnSUNBZ2JHbHJaWE5KYm1OeVpXRnphVzVuT2lCdVpYaDBVSEp2Y0hNdWJHbHJaVU52ZFc1MElENGdkR2hwY3k1d2NtOXdjeTVzYVd0bFEyOTFiblJjYmlBZ0lDb2dJQ0FnSUgwcE8xeHVJQ0FnS2lBZ0lIMWNiaUFnSUNwY2JpQWdJQ29nVGs5VVJUb2dWR2hsY21VZ2FYTWdibThnWlhGMWFYWmhiR1Z1ZENCZ1kyOXRjRzl1Wlc1MFYybHNiRkpsWTJWcGRtVlRkR0YwWldBdUlFRnVJR2x1WTI5dGFXNW5JSEJ5YjNCY2JpQWdJQ29nZEhKaGJuTnBkR2x2YmlCdFlYa2dZMkYxYzJVZ1lTQnpkR0YwWlNCamFHRnVaMlVzSUdKMWRDQjBhR1VnYjNCd2IzTnBkR1VnYVhNZ2JtOTBJSFJ5ZFdVdUlFbG1JSGx2ZFZ4dUlDQWdLaUJ1WldWa0lHbDBMQ0I1YjNVZ1lYSmxJSEJ5YjJKaFlteDVJR3h2YjJ0cGJtY2dabTl5SUdCamIyMXdiMjVsYm5SWGFXeHNWWEJrWVhSbFlDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRzVsZUhSUWNtOXdjMXh1SUNBZ0tpQkFiM0IwYVc5dVlXeGNiaUFnSUNvdlhHNGdJR052YlhCdmJtVnVkRmRwYkd4U1pXTmxhWFpsVUhKdmNITTZJRk53WldOUWIyeHBZM2t1UkVWR1NVNUZYMDFCVGxrc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRtOXJaV1FnZDJocGJHVWdaR1ZqYVdScGJtY2dhV1lnZEdobElHTnZiWEJ2Ym1WdWRDQnphRzkxYkdRZ1ltVWdkWEJrWVhSbFpDQmhjeUJoSUhKbGMzVnNkQ0J2Wmx4dUlDQWdLaUJ5WldObGFYWnBibWNnYm1WM0lIQnliM0J6TENCemRHRjBaU0JoYm1RdmIzSWdZMjl1ZEdWNGRDNWNiaUFnSUNwY2JpQWdJQ29nVlhObElIUm9hWE1nWVhNZ1lXNGdiM0J3YjNKMGRXNXBkSGtnZEc4Z1lISmxkSFZ5YmlCbVlXeHpaV0FnZDJobGJpQjViM1VuY21VZ1kyVnlkR0ZwYmlCMGFHRjBJSFJvWlZ4dUlDQWdLaUIwY21GdWMybDBhVzl1SUhSdklIUm9aU0J1WlhjZ2NISnZjSE12YzNSaGRHVXZZMjl1ZEdWNGRDQjNhV3hzSUc1dmRDQnlaWEYxYVhKbElHRWdZMjl0Y0c5dVpXNTBYRzRnSUNBcUlIVndaR0YwWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dJQ0J6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdVNklHWjFibU4wYVc5dUtHNWxlSFJRY205d2N5d2dibVY0ZEZOMFlYUmxMQ0J1WlhoMFEyOXVkR1Y0ZENrZ2UxeHVJQ0FnS2lBZ0lDQWdjbVYwZFhKdUlDRmxjWFZoYkNodVpYaDBVSEp2Y0hNc0lIUm9hWE11Y0hKdmNITXBJSHg4WEc0Z0lDQXFJQ0FnSUNBZ0lDRmxjWFZoYkNodVpYaDBVM1JoZEdVc0lIUm9hWE11YzNSaGRHVXBJSHg4WEc0Z0lDQXFJQ0FnSUNBZ0lDRmxjWFZoYkNodVpYaDBRMjl1ZEdWNGRDd2dkR2hwY3k1amIyNTBaWGgwS1R0Y2JpQWdJQ29nSUNCOVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnVaWGgwVUhKdmNITmNiaUFnSUNvZ1FIQmhjbUZ0SUhzL2IySnFaV04wZlNCdVpYaDBVM1JoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHMvYjJKcVpXTjBmU0J1WlhoMFEyOXVkR1Y0ZEZ4dUlDQWdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFJvWlNCamIyMXdiMjVsYm5RZ2MyaHZkV3hrSUhWd1pHRjBaUzVjYmlBZ0lDb2dRRzl3ZEdsdmJtRnNYRzRnSUNBcUwxeHVJQ0J6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdVNklGTndaV05RYjJ4cFkza3VSRVZHU1U1RlgwOU9RMFVzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1ZG05clpXUWdkMmhsYmlCMGFHVWdZMjl0Y0c5dVpXNTBJR2x6SUdGaWIzVjBJSFJ2SUhWd1pHRjBaU0JrZFdVZ2RHOGdZU0IwY21GdWMybDBhVzl1SUdaeWIyMWNiaUFnSUNvZ1lIUm9hWE11Y0hKdmNITmdMQ0JnZEdocGN5NXpkR0YwWldBZ1lXNWtJR0IwYUdsekxtTnZiblJsZUhSZ0lIUnZJR0J1WlhoMFVISnZjSE5nTENCZ2JtVjRkRk4wWVhSbFlGeHVJQ0FnS2lCaGJtUWdZRzVsZUhSRGIyNTBaWGgwWUM1Y2JpQWdJQ3BjYmlBZ0lDb2dWWE5sSUhSb2FYTWdZWE1nWVc0Z2IzQndiM0owZFc1cGRIa2dkRzhnY0dWeVptOXliU0J3Y21Wd1lYSmhkR2x2YmlCaVpXWnZjbVVnWVc0Z2RYQmtZWFJsSUc5alkzVnljeTVjYmlBZ0lDcGNiaUFnSUNvZ1RrOVVSVG9nV1c5MUlDb3FZMkZ1Ym05MEtpb2dkWE5sSUdCMGFHbHpMbk5sZEZOMFlYUmxLQ2xnSUdsdUlIUm9hWE1nYldWMGFHOWtMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYm1WNGRGQnliM0J6WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMjlpYW1WamRIMGdibVY0ZEZOMFlYUmxYRzRnSUNBcUlFQndZWEpoYlNCN1AyOWlhbVZqZEgwZ2JtVjRkRU52Ym5SbGVIUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1ZlNCMGNtRnVjMkZqZEdsdmJseHVJQ0FnS2lCQWIzQjBhVzl1WVd4Y2JpQWdJQ292WEc0Z0lHTnZiWEJ2Ym1WdWRGZHBiR3hWY0dSaGRHVTZJRk53WldOUWIyeHBZM2t1UkVWR1NVNUZYMDFCVGxrc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWRtOXJaV1FnZDJobGJpQjBhR1VnWTI5dGNHOXVaVzUwSjNNZ1JFOU5JSEpsY0hKbGMyVnVkR0YwYVc5dUlHaGhjeUJpWldWdUlIVndaR0YwWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRlZ6WlNCMGFHbHpJR0Z6SUdGdUlHOXdjRzl5ZEhWdWFYUjVJSFJ2SUc5d1pYSmhkR1VnYjI0Z2RHaGxJRVJQVFNCM2FHVnVJSFJvWlNCamIyMXdiMjVsYm5RZ2FHRnpYRzRnSUNBcUlHSmxaVzRnZFhCa1lYUmxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeVpYWlFjbTl3YzF4dUlDQWdLaUJBY0dGeVlXMGdlejl2WW1wbFkzUjlJSEJ5WlhaVGRHRjBaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2V6OXZZbXBsWTNSOUlIQnlaWFpEYjI1MFpYaDBYRzRnSUNBcUlFQndZWEpoYlNCN1JFOU5SV3hsYldWdWRIMGdjbTl2ZEU1dlpHVWdSRTlOSUdWc1pXMWxiblFnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0JqYjIxd2IyNWxiblF1WEc0Z0lDQXFJRUJ2Y0hScGIyNWhiRnh1SUNBZ0tpOWNiaUFnWTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsT2lCVGNHVmpVRzlzYVdONUxrUkZSa2xPUlY5TlFVNVpMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpiblp2YTJWa0lIZG9aVzRnZEdobElHTnZiWEJ2Ym1WdWRDQnBjeUJoWW05MWRDQjBieUJpWlNCeVpXMXZkbVZrSUdaeWIyMGdhWFJ6SUhCaGNtVnVkQ0JoYm1RZ2FHRjJaVnh1SUNBZ0tpQnBkSE1nUkU5TklISmxjSEpsYzJWdWRHRjBhVzl1SUdSbGMzUnliM2xsWkM1Y2JpQWdJQ3BjYmlBZ0lDb2dWWE5sSUhSb2FYTWdZWE1nWVc0Z2IzQndiM0owZFc1cGRIa2dkRzhnWkdWaGJHeHZZMkYwWlNCaGJua2daWGgwWlhKdVlXd2djbVZ6YjNWeVkyVnpMbHh1SUNBZ0tseHVJQ0FnS2lCT1QxUkZPaUJVYUdWeVpTQnBjeUJ1YnlCZ1kyOXRjRzl1Wlc1MFJHbGtWVzV0YjNWdWRHQWdjMmx1WTJVZ2VXOTFjaUJqYjIxd2IyNWxiblFnZDJsc2JDQm9ZWFpsSUdKbFpXNWNiaUFnSUNvZ1pHVnpkSEp2ZVdWa0lHSjVJSFJvWVhRZ2NHOXBiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQnZjSFJwYjI1aGJGeHVJQ0FnS2k5Y2JpQWdZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblE2SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsa3NYRzVjYmx4dVhHNGdJQzh2SUQwOVBUMGdRV1IyWVc1alpXUWdiV1YwYUc5a2N5QTlQVDA5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ3WkdGMFpYTWdkR2hsSUdOdmJYQnZibVZ1ZENkeklHTjFjbkpsYm5Sc2VTQnRiM1Z1ZEdWa0lFUlBUU0J5WlhCeVpYTmxiblJoZEdsdmJpNWNiaUFnSUNwY2JpQWdJQ29nUW5rZ1pHVm1ZWFZzZEN3Z2RHaHBjeUJwYlhCc1pXMWxiblJ6SUZKbFlXTjBKM01nY21WdVpHVnlhVzVuSUdGdVpDQnlaV052Ym1OcGJHbGhkR2x2YmlCaGJHZHZjbWwwYUcwdVhHNGdJQ0FxSUZOdmNHaHBjM1JwWTJGMFpXUWdZMnhwWlc1MGN5QnRZWGtnZDJsemFDQjBieUJ2ZG1WeWNtbGtaU0IwYUdsekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNTlJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpQkFiM1psY25KcFpHRmliR1ZjYmlBZ0lDb3ZYRzRnSUhWd1pHRjBaVU52YlhCdmJtVnVkRG9nVTNCbFkxQnZiR2xqZVM1UFZrVlNVa2xFUlY5Q1FWTkZYRzVjYm4wN1hHNWNiaThxS2x4dUlDb2dUV0Z3Y0dsdVp5Qm1jbTl0SUdOc1lYTnpJSE53WldOcFptbGpZWFJwYjI0Z2EyVjVjeUIwYnlCemNHVmphV0ZzSUhCeWIyTmxjM05wYm1jZ1puVnVZM1JwYjI1ekxseHVJQ3BjYmlBcUlFRnNkR2h2ZFdkb0lIUm9aWE5sSUdGeVpTQmtaV05zWVhKbFpDQnNhV3RsSUdsdWMzUmhibU5sSUhCeWIzQmxjblJwWlhNZ2FXNGdkR2hsSUhOd1pXTnBabWxqWVhScGIyNWNiaUFxSUhkb1pXNGdaR1ZtYVc1cGJtY2dZMnhoYzNObGN5QjFjMmx1WnlCZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNOZ0xDQjBhR1Y1SUdGeVpTQmhZM1IxWVd4c2VTQnpkR0YwYVdOY2JpQXFJR0Z1WkNCaGNtVWdZV05qWlhOemFXSnNaU0J2YmlCMGFHVWdZMjl1YzNSeWRXTjBiM0lnYVc1emRHVmhaQ0J2WmlCMGFHVWdjSEp2ZEc5MGVYQmxMaUJFWlhOd2FYUmxYRzRnS2lCaVpXbHVaeUJ6ZEdGMGFXTXNJSFJvWlhrZ2JYVnpkQ0JpWlNCa1pXWnBibVZrSUc5MWRITnBaR1VnYjJZZ2RHaGxJRndpYzNSaGRHbGpjMXdpSUd0bGVTQjFibVJsY2x4dUlDb2dkMmhwWTJnZ1lXeHNJRzkwYUdWeUlITjBZWFJwWXlCdFpYUm9iMlJ6SUdGeVpTQmtaV1pwYm1Wa0xseHVJQ292WEc1MllYSWdVa1ZUUlZKV1JVUmZVMUJGUTE5TFJWbFRJRDBnZTF4dUlDQmthWE53YkdGNVRtRnRaVG9nWm5WdVkzUnBiMjRvUTI5dWMzUnlkV04wYjNJc0lHUnBjM0JzWVhsT1lXMWxLU0I3WEc0Z0lDQWdRMjl1YzNSeWRXTjBiM0l1WkdsemNHeGhlVTVoYldVZ1BTQmthWE53YkdGNVRtRnRaVHRjYmlBZ2ZTeGNiaUFnYldsNGFXNXpPaUJtZFc1amRHbHZiaWhEYjI1emRISjFZM1J2Y2l3Z2JXbDRhVzV6S1NCN1hHNGdJQ0FnYVdZZ0tHMXBlR2x1Y3lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnRhWGhwYm5NdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYldsNFUzQmxZMGx1ZEc5RGIyMXdiMjVsYm5Rb1EyOXVjM1J5ZFdOMGIzSXNJRzFwZUdsdWMxdHBYU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0JqYUdsc1pFTnZiblJsZUhSVWVYQmxjem9nWm5WdVkzUnBiMjRvUTI5dWMzUnlkV04wYjNJc0lHTm9hV3hrUTI5dWRHVjRkRlI1Y0dWektTQjdYRzRnSUNBZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUNBZ2RtRnNhV1JoZEdWVWVYQmxSR1ZtS0Z4dUlDQWdJQ0FnSUNCRGIyNXpkSEoxWTNSdmNpeGNiaUFnSUNBZ0lDQWdZMmhwYkdSRGIyNTBaWGgwVkhsd1pYTXNYRzRnSUNBZ0lDQWdJRkpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Ym5NdVkyaHBiR1JEYjI1MFpYaDBYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnSUNCRGIyNXpkSEoxWTNSdmNpNWphR2xzWkVOdmJuUmxlSFJVZVhCbGN5QTlJR0Z6YzJsbmJpaGNiaUFnSUNBZ0lIdDlMRnh1SUNBZ0lDQWdRMjl1YzNSeWRXTjBiM0l1WTJocGJHUkRiMjUwWlhoMFZIbHdaWE1zWEc0Z0lDQWdJQ0JqYUdsc1pFTnZiblJsZUhSVWVYQmxjMXh1SUNBZ0lDazdYRzRnSUgwc1hHNGdJR052Ym5SbGVIUlVlWEJsY3pvZ1puVnVZM1JwYjI0b1EyOXVjM1J5ZFdOMGIzSXNJR052Ym5SbGVIUlVlWEJsY3lrZ2UxeHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUhaaGJHbGtZWFJsVkhsd1pVUmxaaWhjYmlBZ0lDQWdJQ0FnUTI5dWMzUnlkV04wYjNJc1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhSVWVYQmxjeXhjYmlBZ0lDQWdJQ0FnVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dWN5NWpiMjUwWlhoMFhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0JEYjI1emRISjFZM1J2Y2k1amIyNTBaWGgwVkhsd1pYTWdQU0JoYzNOcFoyNG9YRzRnSUNBZ0lDQjdmU3hjYmlBZ0lDQWdJRU52Ym5OMGNuVmpkRzl5TG1OdmJuUmxlSFJVZVhCbGN5eGNiaUFnSUNBZ0lHTnZiblJsZUhSVWVYQmxjMXh1SUNBZ0lDazdYRzRnSUgwc1hHNGdJQzhxS2x4dUlDQWdLaUJUY0dWamFXRnNJR05oYzJVZ1oyVjBSR1ZtWVhWc2RGQnliM0J6SUhkb2FXTm9JSE5vYjNWc1pDQnRiM1psSUdsdWRHOGdjM1JoZEdsamN5QmlkWFFnY21WeGRXbHlaWE5jYmlBZ0lDb2dZWFYwYjIxaGRHbGpJRzFsY21kcGJtY3VYRzRnSUNBcUwxeHVJQ0JuWlhSRVpXWmhkV3gwVUhKdmNITTZJR1oxYm1OMGFXOXVLRU52Ym5OMGNuVmpkRzl5TENCblpYUkVaV1poZFd4MFVISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb1EyOXVjM1J5ZFdOMGIzSXVaMlYwUkdWbVlYVnNkRkJ5YjNCektTQjdYRzRnSUNBZ0lDQkRiMjV6ZEhKMVkzUnZjaTVuWlhSRVpXWmhkV3gwVUhKdmNITWdQU0JqY21WaGRHVk5aWEpuWldSU1pYTjFiSFJHZFc1amRHbHZiaWhjYmlBZ0lDQWdJQ0FnUTI5dWMzUnlkV04wYjNJdVoyVjBSR1ZtWVhWc2RGQnliM0J6TEZ4dUlDQWdJQ0FnSUNCblpYUkVaV1poZFd4MFVISnZjSE5jYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lFTnZibk4wY25WamRHOXlMbWRsZEVSbFptRjFiSFJRY205d2N5QTlJR2RsZEVSbFptRjFiSFJRY205d2N6dGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lIQnliM0JVZVhCbGN6b2dablZ1WTNScGIyNG9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzQlVlWEJsY3lrZ2UxeHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUhaaGJHbGtZWFJsVkhsd1pVUmxaaWhjYmlBZ0lDQWdJQ0FnUTI5dWMzUnlkV04wYjNJc1hHNGdJQ0FnSUNBZ0lIQnliM0JVZVhCbGN5eGNiaUFnSUNBZ0lDQWdVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1Y3k1d2NtOXdYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnSUNCRGIyNXpkSEoxWTNSdmNpNXdjbTl3Vkhsd1pYTWdQU0JoYzNOcFoyNG9YRzRnSUNBZ0lDQjdmU3hjYmlBZ0lDQWdJRU52Ym5OMGNuVmpkRzl5TG5CeWIzQlVlWEJsY3l4Y2JpQWdJQ0FnSUhCeWIzQlVlWEJsYzF4dUlDQWdJQ2s3WEc0Z0lIMHNYRzRnSUhOMFlYUnBZM002SUdaMWJtTjBhVzl1S0VOdmJuTjBjblZqZEc5eUxDQnpkR0YwYVdOektTQjdYRzRnSUNBZ2JXbDRVM1JoZEdsalUzQmxZMGx1ZEc5RGIyMXdiMjVsYm5Rb1EyOXVjM1J5ZFdOMGIzSXNJSE4wWVhScFkzTXBPMXh1SUNCOVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCMllXeHBaR0YwWlZSNWNHVkVaV1lvUTI5dWMzUnlkV04wYjNJc0lIUjVjR1ZFWldZc0lHeHZZMkYwYVc5dUtTQjdYRzRnSUdadmNpQW9kbUZ5SUhCeWIzQk9ZVzFsSUdsdUlIUjVjR1ZFWldZcElIdGNiaUFnSUNCcFppQW9kSGx3WlVSbFppNW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdUbUZ0WlNrcElIdGNiaUFnSUNBZ0lDOHZJSFZ6WlNCaElIZGhjbTVwYm1jZ2FXNXpkR1ZoWkNCdlppQmhiaUJwYm5aaGNtbGhiblFnYzI4Z1kyOXRjRzl1Wlc1MGMxeHVJQ0FnSUNBZ0x5OGdaRzl1SjNRZ2MyaHZkeUIxY0NCcGJpQndjbTlrSUdKMWRDQnViM1FnYVc0Z1gxOUVSVlpmWDF4dUlDQWdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JSGRoY201cGJtY29YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQjBlWEJsUkdWbVczQnliM0JPWVcxbFhTQTlQVDBnSjJaMWJtTjBhVzl1Snl4Y2JpQWdJQ0FnSUNBZ0p5VnpPaUFsY3lCMGVYQmxJR0FsYzJBZ2FYTWdhVzUyWVd4cFpEc2dhWFFnYlhWemRDQmlaU0JoSUdaMWJtTjBhVzl1TENCMWMzVmhiR3g1SUdaeWIyMGdKeUFyWEc0Z0lDQWdJQ0FnSUNkU1pXRmpkQzVRY205d1ZIbHdaWE11Snl4Y2JpQWdJQ0FnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z0oxSmxZV04wUTJ4aGMzTW5MRnh1SUNBZ0lDQWdJQ0JTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1T1lXMWxjMXRzYjJOaGRHbHZibDBzWEc0Z0lDQWdJQ0FnSUhCeWIzQk9ZVzFsWEc0Z0lDQWdJQ0FwSURvZ2JuVnNiQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsVFdWMGFHOWtUM1psY25KcFpHVW9jSEp2ZEc4c0lHNWhiV1VwSUh0Y2JpQWdkbUZ5SUhOd1pXTlFiMnhwWTNrZ1BTQlNaV0ZqZEVOc1lYTnpTVzUwWlhKbVlXTmxMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwSUQ5Y2JpQWdJQ0JTWldGamRFTnNZWE56U1c1MFpYSm1ZV05sVzI1aGJXVmRJRHBjYmlBZ0lDQnVkV3hzTzF4dVhHNGdJQzh2SUVScGMyRnNiRzkzSUc5MlpYSnlhV1JwYm1jZ2IyWWdZbUZ6WlNCamJHRnpjeUJ0WlhSb2IyUnpJSFZ1YkdWemN5QmxlSEJzYVdOcGRHeDVJR0ZzYkc5M1pXUXVYRzRnSUdsbUlDaFNaV0ZqZEVOc1lYTnpUV2w0YVc0dWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ2MzQmxZMUJ2YkdsamVTQTlQVDBnVTNCbFkxQnZiR2xqZVM1UFZrVlNVa2xFUlY5Q1FWTkZMRnh1SUNBZ0lDQWdKMUpsWVdOMFEyeGhjM05KYm5SbGNtWmhZMlU2SUZsdmRTQmhjbVVnWVhSMFpXMXdkR2x1WnlCMGJ5QnZkbVZ5Y21sa1pTQW5JQ3RjYmlBZ0lDQWdJQ2RnSlhOZ0lHWnliMjBnZVc5MWNpQmpiR0Z6Y3lCemNHVmphV1pwWTJGMGFXOXVMaUJGYm5OMWNtVWdkR2hoZENCNWIzVnlJRzFsZEdodlpDQnVZVzFsY3lBbklDdGNiaUFnSUNBZ0lDZGtieUJ1YjNRZ2IzWmxjbXhoY0NCM2FYUm9JRkpsWVdOMElHMWxkR2h2WkhNdUp5eGNiaUFnSUNBZ0lHNWhiV1ZjYmlBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0hOd1pXTlFiMnhwWTNrZ1BUMDlJRk53WldOUWIyeHBZM2t1VDFaRlVsSkpSRVZmUWtGVFJTa3BPMXh1SUNCOVhHNWNiaUFnTHk4Z1JHbHpZV3hzYjNjZ1pHVm1hVzVwYm1jZ2JXVjBhRzlrY3lCdGIzSmxJSFJvWVc0Z2IyNWpaU0IxYm14bGMzTWdaWGh3YkdsamFYUnNlU0JoYkd4dmQyVmtMbHh1SUNCcFppQW9jSEp2ZEc4dWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ2MzQmxZMUJ2YkdsamVTQTlQVDBnVTNCbFkxQnZiR2xqZVM1RVJVWkpUa1ZmVFVGT1dTQjhmRnh1SUNBZ0lDQWdjM0JsWTFCdmJHbGplU0E5UFQwZ1UzQmxZMUJ2YkdsamVTNUVSVVpKVGtWZlRVRk9XVjlOUlZKSFJVUXNYRzRnSUNBZ0lDQW5VbVZoWTNSRGJHRnpjMGx1ZEdWeVptRmpaVG9nV1c5MUlHRnlaU0JoZEhSbGJYQjBhVzVuSUhSdklHUmxabWx1WlNBbklDdGNiaUFnSUNBZ0lDZGdKWE5nSUc5dUlIbHZkWElnWTI5dGNHOXVaVzUwSUcxdmNtVWdkR2hoYmlCdmJtTmxMaUJVYUdseklHTnZibVpzYVdOMElHMWhlU0JpWlNCa2RXVWdKeUFyWEc0Z0lDQWdJQ0FuZEc4Z1lTQnRhWGhwYmk0bkxGeHVJQ0FnSUNBZ2JtRnRaVnh1SUNBZ0lDa2dPaUJwYm5aaGNtbGhiblFvYzNCbFkxQnZiR2xqZVNBOVBUMGdVM0JsWTFCdmJHbGplUzVFUlVaSlRrVmZUVUZPV1NCOGZGeHVJQ0FnSUhOd1pXTlFiMnhwWTNrZ1BUMDlJRk53WldOUWIyeHBZM2t1UkVWR1NVNUZYMDFCVGxsZlRVVlNSMFZFS1NrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQk5hWGhwYmlCb1pXeHdaWElnZDJocFkyZ2dhR0Z1Wkd4bGN5QndiMnhwWTNrZ2RtRnNhV1JoZEdsdmJpQmhibVFnY21WelpYSjJaV1JjYmlBcUlITndaV05wWm1sallYUnBiMjRnYTJWNWN5QjNhR1Z1SUdKMWFXeGthVzVuSUZKbFlXTjBJR05zWVhOemMyVnpMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnRhWGhUY0dWalNXNTBiME52YlhCdmJtVnVkQ2hEYjI1emRISjFZM1J2Y2l3Z2MzQmxZeWtnZTF4dUlDQnBaaUFvSVhOd1pXTXBJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUhSNWNHVnZaaUJ6Y0dWaklDRTlQU0FuWm5WdVkzUnBiMjRuTEZ4dUlDQWdJQ2RTWldGamRFTnNZWE56T2lCWmIzVmNYQ2R5WlNCaGRIUmxiWEIwYVc1bklIUnZJQ2NnSzF4dUlDQWdJQ2QxYzJVZ1lTQmpiMjF3YjI1bGJuUWdZMnhoYzNNZ1lYTWdZU0J0YVhocGJpNGdTVzV6ZEdWaFpDd2dhblZ6ZENCMWMyVWdZU0J5WldkMWJHRnlJRzlpYW1WamRDNG5YRzRnSUNrZ09pQnBiblpoY21saGJuUW9kSGx3Wlc5bUlITndaV01nSVQwOUlDZG1kVzVqZEdsdmJpY3BLVHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FoVW1WaFkzUkZiR1Z0Wlc1MExtbHpWbUZzYVdSRmJHVnRaVzUwS0hOd1pXTXBMRnh1SUNBZ0lDZFNaV0ZqZEVOc1lYTnpPaUJaYjNWY1hDZHlaU0JoZEhSbGJYQjBhVzVuSUhSdklDY2dLMXh1SUNBZ0lDZDFjMlVnWVNCamIyMXdiMjVsYm5RZ1lYTWdZU0J0YVhocGJpNGdTVzV6ZEdWaFpDd2dhblZ6ZENCMWMyVWdZU0J5WldkMWJHRnlJRzlpYW1WamRDNG5YRzRnSUNrZ09pQnBiblpoY21saGJuUW9JVkpsWVdOMFJXeGxiV1Z1ZEM1cGMxWmhiR2xrUld4bGJXVnVkQ2h6Y0dWaktTa3BPMXh1WEc0Z0lIWmhjaUJ3Y205MGJ5QTlJRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlR0Y2JseHVJQ0F2THlCQ2VTQm9ZVzVrYkdsdVp5QnRhWGhwYm5NZ1ltVm1iM0psSUdGdWVTQnZkR2hsY2lCd2NtOXdaWEowYVdWekxDQjNaU0JsYm5OMWNtVWdkR2hsSUhOaGJXVmNiaUFnTHk4Z1kyaGhhVzVwYm1jZ2IzSmtaWElnYVhNZ1lYQndiR2xsWkNCMGJ5QnRaWFJvYjJSeklIZHBkR2dnUkVWR1NVNUZYMDFCVGxrZ2NHOXNhV041TENCM2FHVjBhR1Z5WEc0Z0lDOHZJRzFwZUdsdWN5QmhjbVVnYkdsemRHVmtJR0psWm05eVpTQnZjaUJoWm5SbGNpQjBhR1Z6WlNCdFpYUm9iMlJ6SUdsdUlIUm9aU0J6Y0dWakxseHVJQ0JwWmlBb2MzQmxZeTVvWVhOUGQyNVFjbTl3WlhKMGVTaE5TVmhKVGxOZlMwVlpLU2tnZTF4dUlDQWdJRkpGVTBWU1ZrVkVYMU5RUlVOZlMwVlpVeTV0YVhocGJuTW9RMjl1YzNSeWRXTjBiM0lzSUhOd1pXTXViV2w0YVc1ektUdGNiaUFnZlZ4dVhHNGdJR1p2Y2lBb2RtRnlJRzVoYldVZ2FXNGdjM0JsWXlrZ2UxeHVJQ0FnSUdsbUlDZ2hjM0JsWXk1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTa2dlMXh1SUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzVoYldVZ1BUMDlJRTFKV0VsT1UxOUxSVmtwSUh0Y2JpQWdJQ0FnSUM4dklGZGxJR2hoZG1VZ1lXeHlaV0ZrZVNCb1lXNWtiR1ZrSUcxcGVHbHVjeUJwYmlCaElITndaV05wWVd3Z1kyRnpaU0JoWW05MlpWeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlIQnliM0JsY25SNUlEMGdjM0JsWTF0dVlXMWxYVHRjYmlBZ0lDQjJZV3hwWkdGMFpVMWxkR2h2WkU5MlpYSnlhV1JsS0hCeWIzUnZMQ0J1WVcxbEtUdGNibHh1SUNBZ0lHbG1JQ2hTUlZORlVsWkZSRjlUVUVWRFgwdEZXVk11YUdGelQzZHVVSEp2Y0dWeWRIa29ibUZ0WlNrcElIdGNiaUFnSUNBZ0lGSkZVMFZTVmtWRVgxTlFSVU5mUzBWWlUxdHVZVzFsWFNoRGIyNXpkSEoxWTNSdmNpd2djSEp2Y0dWeWRIa3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QlRaWFIxY0NCdFpYUm9iMlJ6SUc5dUlIQnliM1J2ZEhsd1pUcGNiaUFnSUNBZ0lDOHZJRlJvWlNCbWIyeHNiM2RwYm1jZ2JXVnRZbVZ5SUcxbGRHaHZaSE1nYzJodmRXeGtJRzV2ZENCaVpTQmhkWFJ2YldGMGFXTmhiR3g1SUdKdmRXNWtPbHh1SUNBZ0lDQWdMeThnTVM0Z1JYaHdaV04wWldRZ1VtVmhZM1JEYkdGemN5QnRaWFJvYjJSeklDaHBiaUIwYUdVZ1hDSnBiblJsY21aaFkyVmNJaWt1WEc0Z0lDQWdJQ0F2THlBeUxpQlBkbVZ5Y21sa1pHVnVJRzFsZEdodlpITWdLSFJvWVhRZ2QyVnlaU0J0YVhobFpDQnBiaWt1WEc0Z0lDQWdJQ0IyWVhJZ2FYTlNaV0ZqZEVOc1lYTnpUV1YwYUc5a0lEMWNiaUFnSUNBZ0lDQWdVbVZoWTNSRGJHRnpjMGx1ZEdWeVptRmpaUzVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1R0Y2JpQWdJQ0FnSUhaaGNpQnBjMEZzY21WaFpIbEVaV1pwYm1Wa0lEMGdjSEp2ZEc4dWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTazdYRzRnSUNBZ0lDQjJZWElnYldGeWEyVmtSRzl1ZEVKcGJtUWdQU0J3Y205d1pYSjBlU0FtSmlCd2NtOXdaWEowZVM1ZlgzSmxZV04wUkc5dWRFSnBibVE3WEc0Z0lDQWdJQ0IyWVhJZ2FYTkdkVzVqZEdsdmJpQTlJSFI1Y0dWdlppQndjbTl3WlhKMGVTQTlQVDBnSjJaMWJtTjBhVzl1Snp0Y2JpQWdJQ0FnSUhaaGNpQnphRzkxYkdSQmRYUnZRbWx1WkNBOVhHNGdJQ0FnSUNBZ0lHbHpSblZ1WTNScGIyNGdKaVpjYmlBZ0lDQWdJQ0FnSVdselVtVmhZM1JEYkdGemMwMWxkR2h2WkNBbUpseHVJQ0FnSUNBZ0lDQWhhWE5CYkhKbFlXUjVSR1ZtYVc1bFpDQW1KbHh1SUNBZ0lDQWdJQ0FoYldGeWEyVmtSRzl1ZEVKcGJtUTdYRzVjYmlBZ0lDQWdJR2xtSUNoemFHOTFiR1JCZFhSdlFtbHVaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWEJ5YjNSdkxsOWZjbVZoWTNSQmRYUnZRbWx1WkUxaGNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhCeWIzUnZMbDlmY21WaFkzUkJkWFJ2UW1sdVpFMWhjQ0E5SUh0OU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEJ5YjNSdkxsOWZjbVZoWTNSQmRYUnZRbWx1WkUxaGNGdHVZVzFsWFNBOUlIQnliM0JsY25SNU8xeHVJQ0FnSUNBZ0lDQndjbTkwYjF0dVlXMWxYU0E5SUhCeWIzQmxjblI1TzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpRV3h5WldGa2VVUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2MzQmxZMUJ2YkdsamVTQTlJRkpsWVdOMFEyeGhjM05KYm5SbGNtWmhZMlZiYm1GdFpWMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVhR1Z6WlNCallYTmxjeUJ6YUc5MWJHUWdZV3h5WldGa2VTQmlaU0JqWVhWbmFIUWdZbmtnZG1Gc2FXUmhkR1ZOWlhSb2IyUlBkbVZ5Y21sa1pWeHVJQ0FnSUNBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCcGMxSmxZV04wUTJ4aGMzTk5aWFJvYjJRZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jM0JsWTFCdmJHbGplU0E5UFQwZ1UzQmxZMUJ2YkdsamVTNUVSVVpKVGtWZlRVRk9XVjlOUlZKSFJVUWdmSHdnYzNCbFkxQnZiR2xqZVNBOVBUMGdVM0JsWTFCdmJHbGplUzVFUlVaSlRrVmZUVUZPV1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VbVZoWTNSRGJHRnpjem9nVlc1bGVIQmxZM1JsWkNCemNHVmpJSEJ2YkdsamVTQWxjeUJtYjNJZ2EyVjVJQ1Z6SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNkb1pXNGdiV2w0YVc1bklHbHVJR052YlhCdmJtVnVkQ0J6Y0dWamN5NG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzQmxZMUJ2YkdsamVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVmNiaUFnSUNBZ0lDQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtHbHpVbVZoWTNSRGJHRnpjMDFsZEdodlpDQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9jM0JsWTFCdmJHbGplU0E5UFQwZ1UzQmxZMUJ2YkdsamVTNUVSVVpKVGtWZlRVRk9XVjlOUlZKSFJVUWdmSHdnYzNCbFkxQnZiR2xqZVNBOVBUMGdVM0JsWTFCdmJHbGplUzVFUlVaSlRrVmZUVUZPV1NsY2JpQWdJQ0FnSUNBZ0lDQXBLU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJHYjNJZ2JXVjBhRzlrY3lCM2FHbGphQ0JoY21VZ1pHVm1hVzVsWkNCdGIzSmxJSFJvWVc0Z2IyNWpaU3dnWTJGc2JDQjBhR1VnWlhocGMzUnBibWRjYmlBZ0lDQWdJQ0FnSUNBdkx5QnRaWFJvYjJSeklHSmxabTl5WlNCallXeHNhVzVuSUhSb1pTQnVaWGNnY0hKdmNHVnlkSGtzSUcxbGNtZHBibWNnYVdZZ1lYQndjbTl3Y21saGRHVXVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tITndaV05RYjJ4cFkza2dQVDA5SUZOd1pXTlFiMnhwWTNrdVJFVkdTVTVGWDAxQlRsbGZUVVZTUjBWRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOTBiMXR1WVcxbFhTQTlJR055WldGMFpVMWxjbWRsWkZKbGMzVnNkRVoxYm1OMGFXOXVLSEJ5YjNSdlcyNWhiV1ZkTENCd2NtOXdaWEowZVNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6Y0dWalVHOXNhV041SUQwOVBTQlRjR1ZqVUc5c2FXTjVMa1JGUmtsT1JWOU5RVTVaS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205MGIxdHVZVzFsWFNBOUlHTnlaV0YwWlVOb1lXbHVaV1JHZFc1amRHbHZiaWh3Y205MGIxdHVZVzFsWFN3Z2NISnZjR1Z5ZEhrcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCd2NtOTBiMXR1WVcxbFhTQTlJSEJ5YjNCbGNuUjVPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVGa1pDQjJaWEppYjNObElHUnBjM0JzWVhsT1lXMWxJSFJ2SUhSb1pTQm1kVzVqZEdsdmJpd2dkMmhwWTJnZ2FHVnNjSE1nZDJobGJpQnNiMjlyYVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGRDQndjbTltYVd4cGJtY2dkRzl2YkhNdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhCeWIzQmxjblI1SUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUhOd1pXTXVaR2x6Y0d4aGVVNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmRHOWJibUZ0WlYwdVpHbHpjR3hoZVU1aGJXVWdQU0J6Y0dWakxtUnBjM0JzWVhsT1lXMWxJQ3NnSjE4bklDc2dibUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdiV2w0VTNSaGRHbGpVM0JsWTBsdWRHOURiMjF3YjI1bGJuUW9RMjl1YzNSeWRXTjBiM0lzSUhOMFlYUnBZM01wSUh0Y2JpQWdhV1lnS0NGemRHRjBhV056S1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNGdJR1p2Y2lBb2RtRnlJRzVoYldVZ2FXNGdjM1JoZEdsamN5a2dlMXh1SUNBZ0lIWmhjaUJ3Y205d1pYSjBlU0E5SUhOMFlYUnBZM05iYm1GdFpWMDdYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMGFXTnpMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwS1NCN1hHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2FYTlNaWE5sY25abFpDQTlJRzVoYldVZ2FXNGdVa1ZUUlZKV1JVUmZVMUJGUTE5TFJWbFRPMXh1SUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnSUNBaGFYTlNaWE5sY25abFpDeGNiaUFnSUNBZ0lDZFNaV0ZqZEVOc1lYTnpPaUJaYjNVZ1lYSmxJR0YwZEdWdGNIUnBibWNnZEc4Z1pHVm1hVzVsSUdFZ2NtVnpaWEoyWldRZ0p5QXJYRzRnSUNBZ0lDQW5jSEp2Y0dWeWRIa3NJR0FsYzJBc0lIUm9ZWFFnYzJodmRXeGtibHhjSjNRZ1ltVWdiMjRnZEdobElGd2ljM1JoZEdsamMxd2lJR3RsZVM0Z1JHVm1hVzVsSUdsMElDY2dLMXh1SUNBZ0lDQWdKMkZ6SUdGdUlHbHVjM1JoYm1ObElIQnliM0JsY25SNUlHbHVjM1JsWVdRN0lHbDBJSGRwYkd3Z2MzUnBiR3dnWW1VZ1lXTmpaWE56YVdKc1pTQnZiaUIwYUdVZ0p5QXJYRzRnSUNBZ0lDQW5ZMjl1YzNSeWRXTjBiM0l1Snl4Y2JpQWdJQ0FnSUc1aGJXVmNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLQ0ZwYzFKbGMyVnlkbVZrS1NrN1hHNWNiaUFnSUNCMllYSWdhWE5KYm1obGNtbDBaV1FnUFNCdVlXMWxJR2x1SUVOdmJuTjBjblZqZEc5eU8xeHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0FoYVhOSmJtaGxjbWwwWldRc1hHNGdJQ0FnSUNBblVtVmhZM1JEYkdGemN6b2dXVzkxSUdGeVpTQmhkSFJsYlhCMGFXNW5JSFJ2SUdSbFptbHVaU0FuSUN0Y2JpQWdJQ0FnSUNkZ0pYTmdJRzl1SUhsdmRYSWdZMjl0Y0c5dVpXNTBJRzF2Y21VZ2RHaGhiaUJ2Ym1ObExpQlVhR2x6SUdOdmJtWnNhV04wSUcxaGVTQmlaU0FuSUN0Y2JpQWdJQ0FnSUNka2RXVWdkRzhnWVNCdGFYaHBiaTRuTEZ4dUlDQWdJQ0FnYm1GdFpWeHVJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9JV2x6U1c1b1pYSnBkR1ZrS1NrN1hHNGdJQ0FnUTI5dWMzUnlkV04wYjNKYmJtRnRaVjBnUFNCd2NtOXdaWEowZVR0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFMWxjbWRsSUhSM2J5QnZZbXBsWTNSekxDQmlkWFFnZEdoeWIzY2dhV1lnWW05MGFDQmpiMjUwWVdsdUlIUm9aU0J6WVcxbElHdGxlUzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdiMjVsSUZSb1pTQm1hWEp6ZENCdlltcGxZM1FzSUhkb2FXTm9JR2x6SUcxMWRHRjBaV1F1WEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2RIZHZJRlJvWlNCelpXTnZibVFnYjJKcVpXTjBYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUc5dVpTQmhablJsY2lCcGRDQm9ZWE1nWW1WbGJpQnRkWFJoZEdWa0lIUnZJR052Ym5SaGFXNGdaWFpsY25sMGFHbHVaeUJwYmlCMGQyOHVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWxjbWRsU1c1MGIxZHBkR2hPYjBSMWNHeHBZMkYwWlV0bGVYTW9iMjVsTENCMGQyOHBJSHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0J2Ym1VZ0ppWWdkSGR2SUNZbUlIUjVjR1Z2WmlCdmJtVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCMGQyOGdQVDA5SUNkdlltcGxZM1FuTEZ4dUlDQWdJQ2R0WlhKblpVbHVkRzlYYVhSb1RtOUVkWEJzYVdOaGRHVkxaWGx6S0NrNklFTmhibTV2ZENCdFpYSm5aU0J1YjI0dGIySnFaV04wY3k0blhHNGdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2IyNWxJQ1ltSUhSM2J5QW1KaUIwZVhCbGIyWWdiMjVsSUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdkSGR2SUQwOVBTQW5iMkpxWldOMEp5a3BPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCMGQyOHBJSHRjYmlBZ0lDQnBaaUFvZEhkdkxtaGhjMDkzYmxCeWIzQmxjblI1S0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQWdJRzl1WlZ0clpYbGRJRDA5UFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lDZHRaWEpuWlVsdWRHOVhhWFJvVG05RWRYQnNhV05oZEdWTFpYbHpLQ2s2SUNjZ0sxeHVJQ0FnSUNBZ0lDQW5WSEpwWldRZ2RHOGdiV1Z5WjJVZ2RIZHZJRzlpYW1WamRITWdkMmwwYUNCMGFHVWdjMkZ0WlNCclpYazZJR0FsYzJBdUlGUm9hWE1nWTI5dVpteHBZM1FnSnlBclhHNGdJQ0FnSUNBZ0lDZHRZWGtnWW1VZ1pIVmxJSFJ2SUdFZ2JXbDRhVzQ3SUdsdUlIQmhjblJwWTNWc1lYSXNJSFJvYVhNZ2JXRjVJR0psSUdOaGRYTmxaQ0JpZVNCMGQyOGdKeUFyWEc0Z0lDQWdJQ0FnSUNkblpYUkpibWwwYVdGc1UzUmhkR1VvS1NCdmNpQm5aWFJFWldaaGRXeDBVSEp2Y0hNb0tTQnRaWFJvYjJSeklISmxkSFZ5Ym1sdVp5QnZZbXBsWTNSeklDY2dLMXh1SUNBZ0lDQWdJQ0FuZDJsMGFDQmpiR0Z6YUdsdVp5QnJaWGx6TGljc1hHNGdJQ0FnSUNBZ0lHdGxlVnh1SUNBZ0lDQWdLU0E2SUdsdWRtRnlhV0Z1ZENodmJtVmJhMlY1WFNBOVBUMGdkVzVrWldacGJtVmtLU2s3WEc0Z0lDQWdJQ0J2Ym1WYmEyVjVYU0E5SUhSM2IxdHJaWGxkTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiMjVsTzF4dWZWeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0JtZFc1amRHbHZiaUIwYUdGMElHbHVkbTlyWlhNZ2RIZHZJR1oxYm1OMGFXOXVjeUJoYm1RZ2JXVnlaMlZ6SUhSb1pXbHlJSEpsZEhWeWJpQjJZV3gxWlhNdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2IyNWxJRVoxYm1OMGFXOXVJSFJ2SUdsdWRtOXJaU0JtYVhKemRDNWNiaUFxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUhSM2J5QkdkVzVqZEdsdmJpQjBieUJwYm5admEyVWdjMlZqYjI1a0xseHVJQ29nUUhKbGRIVnliaUI3Wm5WdVkzUnBiMjU5SUVaMWJtTjBhVzl1SUhSb1lYUWdhVzUyYjJ0bGN5QjBhR1VnZEhkdklHRnlaM1Z0Wlc1MElHWjFibU4wYVc5dWN5NWNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpOWNibVoxYm1OMGFXOXVJR055WldGMFpVMWxjbWRsWkZKbGMzVnNkRVoxYm1OMGFXOXVLRzl1WlN3Z2RIZHZLU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCdFpYSm5aV1JTWlhOMWJIUW9LU0I3WEc0Z0lDQWdkbUZ5SUdFZ1BTQnZibVV1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCMllYSWdZaUE5SUhSM2J5NWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJR2xtSUNoaElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lpQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1lUdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHTWdQU0I3ZlR0Y2JpQWdJQ0J0WlhKblpVbHVkRzlYYVhSb1RtOUVkWEJzYVdOaGRHVkxaWGx6S0dNc0lHRXBPMXh1SUNBZ0lHMWxjbWRsU1c1MGIxZHBkR2hPYjBSMWNHeHBZMkYwWlV0bGVYTW9ZeXdnWWlrN1hHNGdJQ0FnY21WMGRYSnVJR003WEc0Z0lIMDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHWjFibU4wYVc5dUlIUm9ZWFFnYVc1MmIydGxjeUIwZDI4Z1puVnVZM1JwYjI1eklHRnVaQ0JwWjI1dmNtVnpJSFJvWldseUlISmxkSFZ5YmlCMllXeGxjeTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0J2Ym1VZ1JuVnVZM1JwYjI0Z2RHOGdhVzUyYjJ0bElHWnBjbk4wTGx4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdkSGR2SUVaMWJtTjBhVzl1SUhSdklHbHVkbTlyWlNCelpXTnZibVF1WEc0Z0tpQkFjbVYwZFhKdUlIdG1kVzVqZEdsdmJuMGdSblZ1WTNScGIyNGdkR2hoZENCcGJuWnZhMlZ6SUhSb1pTQjBkMjhnWVhKbmRXMWxiblFnWm5WdVkzUnBiMjV6TGx4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUTJoaGFXNWxaRVoxYm1OMGFXOXVLRzl1WlN3Z2RIZHZLU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCamFHRnBibVZrUm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnYjI1bExtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdkSGR2TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUgwN1hHNTlYRzVjYmk4cUtseHVJQ29nUW1sdVpITWdZU0J0WlhSb2IyUWdkRzhnZEdobElHTnZiWEJ2Ym1WdWRDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1kyOXRjRzl1Wlc1MElFTnZiWEJ2Ym1WdWRDQjNhRzl6WlNCdFpYUm9iMlFnYVhNZ1oyOXBibWNnZEc4Z1ltVWdZbTkxYm1RdVhHNGdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0J0WlhSb2IyUWdUV1YwYUc5a0lIUnZJR0psSUdKdmRXNWtMbHh1SUNvZ1FISmxkSFZ5YmlCN1puVnVZM1JwYjI1OUlGUm9aU0JpYjNWdVpDQnRaWFJvYjJRdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKcGJtUkJkWFJ2UW1sdVpFMWxkR2h2WkNoamIyMXdiMjVsYm5Rc0lHMWxkR2h2WkNrZ2UxeHVJQ0IyWVhJZ1ltOTFibVJOWlhSb2IyUWdQU0J0WlhSb2IyUXVZbWx1WkNoamIyMXdiMjVsYm5RcE8xeHVJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdZbTkxYm1STlpYUm9iMlF1WDE5eVpXRmpkRUp2ZFc1a1EyOXVkR1Y0ZENBOUlHTnZiWEJ2Ym1WdWREdGNiaUFnSUNCaWIzVnVaRTFsZEdodlpDNWZYM0psWVdOMFFtOTFibVJOWlhSb2IyUWdQU0J0WlhSb2IyUTdYRzRnSUNBZ1ltOTFibVJOWlhSb2IyUXVYMTl5WldGamRFSnZkVzVrUVhKbmRXMWxiblJ6SUQwZ2JuVnNiRHRjYmlBZ0lDQjJZWElnWTI5dGNHOXVaVzUwVG1GdFpTQTlJR052YlhCdmJtVnVkQzVqYjI1emRISjFZM1J2Y2k1a2FYTndiR0Y1VG1GdFpUdGNiaUFnSUNCMllYSWdYMkpwYm1RZ1BTQmliM1Z1WkUxbGRHaHZaQzVpYVc1a08xeHVJQ0FnSUM4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUdKc2IyTnJMWE5qYjNCbFpDMTJZWElzSUc1dkxYVnVaR1ZtSUNvdlhHNGdJQ0FnWW05MWJtUk5aWFJvYjJRdVltbHVaQ0E5SUdaMWJtTjBhVzl1S0c1bGQxUm9hWE1nS1NCN1ptOXlJQ2gyWVhJZ1lYSm5jejFiWFN3a1gxOHdQVEVzSkY5Zk1UMWhjbWQxYldWdWRITXViR1Z1WjNSb095UmZYekE4SkY5Zk1Uc2tYMTh3S3lzcElHRnlaM011Y0hWemFDaGhjbWQxYldWdWRITmJKRjlmTUYwcE8xeHVJQ0FnSUNBZ0x5OGdWWE5sY2lCcGN5QjBjbmxwYm1jZ2RHOGdZbWx1WkNncElHRnVJR0YxZEc5aWIzVnVaQ0J0WlhSb2IyUTdJSGRsSUdWbVptVmpkR2wyWld4NUlIZHBiR3hjYmlBZ0lDQWdJQzh2SUdsbmJtOXlaU0IwYUdVZ2RtRnNkV1VnYjJZZ1hDSjBhR2x6WENJZ2RHaGhkQ0IwYUdVZ2RYTmxjaUJwY3lCMGNubHBibWNnZEc4Z2RYTmxMQ0J6YjF4dUlDQWdJQ0FnTHk4Z2JHVjBKM01nZDJGeWJpNWNiaUFnSUNBZ0lHbG1JQ2h1WlhkVWFHbHpJQ0U5UFNCamIyMXdiMjVsYm5RZ0ppWWdibVYzVkdocGN5QWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FuWW1sdVpDZ3BPaUJTWldGamRDQmpiMjF3YjI1bGJuUWdiV1YwYUc5a2N5QnRZWGtnYjI1c2VTQmlaU0JpYjNWdVpDQjBieUIwYUdVZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSjJOdmJYQnZibVZ1ZENCcGJuTjBZVzVqWlM0Z1UyVmxJQ1Z6Snl4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjF3YjI1bGJuUk9ZVzFsWEc0Z0lDQWdJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lXRnlaM011YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNkaWFXNWtLQ2s2SUZsdmRTQmhjbVVnWW1sdVpHbHVaeUJoSUdOdmJYQnZibVZ1ZENCdFpYUm9iMlFnZEc4Z2RHaGxJR052YlhCdmJtVnVkQzRnSnlBclhHNGdJQ0FnSUNBZ0lDQWdKMUpsWVdOMElHUnZaWE1nZEdocGN5Qm1iM0lnZVc5MUlHRjFkRzl0WVhScFkyRnNiSGtnYVc0Z1lTQm9hV2RvTFhCbGNtWnZjbTFoYm1ObElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNkM1lYa3NJSE52SUhsdmRTQmpZVzRnYzJGbVpXeDVJSEpsYlc5MlpTQjBhR2x6SUdOaGJHd3VJRk5sWlNBbGN5Y3NYRzRnSUNBZ0lDQWdJQ0FnWTI5dGNHOXVaVzUwVG1GdFpWeHVJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmliM1Z1WkUxbGRHaHZaRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFpoY2lCeVpXSnZkVzVrVFdWMGFHOWtJRDBnWDJKcGJtUXVZWEJ3Ykhrb1ltOTFibVJOWlhSb2IyUXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0J5WldKdmRXNWtUV1YwYUc5a0xsOWZjbVZoWTNSQ2IzVnVaRU52Ym5SbGVIUWdQU0JqYjIxd2IyNWxiblE3WEc0Z0lDQWdJQ0J5WldKdmRXNWtUV1YwYUc5a0xsOWZjbVZoWTNSQ2IzVnVaRTFsZEdodlpDQTlJRzFsZEdodlpEdGNiaUFnSUNBZ0lISmxZbTkxYm1STlpYUm9iMlF1WDE5eVpXRmpkRUp2ZFc1a1FYSm5kVzFsYm5SeklEMGdZWEpuY3p0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ5WldKdmRXNWtUV1YwYUc5a08xeHVJQ0FnSUNBZ0x5b2daWE5zYVc1MExXVnVZV0pzWlNBcUwxeHVJQ0FnSUgwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKdmRXNWtUV1YwYUc5a08xeHVmVnh1WEc0dktpcGNiaUFxSUVKcGJtUnpJR0ZzYkNCaGRYUnZMV0p2ZFc1a0lHMWxkR2h2WkhNZ2FXNGdZU0JqYjIxd2IyNWxiblF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR052YlhCdmJtVnVkQ0JEYjIxd2IyNWxiblFnZDJodmMyVWdiV1YwYUc5a0lHbHpJR2R2YVc1bklIUnZJR0psSUdKdmRXNWtMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlhVzVrUVhWMGIwSnBibVJOWlhSb2IyUnpLR052YlhCdmJtVnVkQ2tnZTF4dUlDQm1iM0lnS0haaGNpQmhkWFJ2UW1sdVpFdGxlU0JwYmlCamIyMXdiMjVsYm5RdVgxOXlaV0ZqZEVGMWRHOUNhVzVrVFdGd0tTQjdYRzRnSUNBZ2FXWWdLR052YlhCdmJtVnVkQzVmWDNKbFlXTjBRWFYwYjBKcGJtUk5ZWEF1YUdGelQzZHVVSEp2Y0dWeWRIa29ZWFYwYjBKcGJtUkxaWGtwS1NCN1hHNGdJQ0FnSUNCMllYSWdiV1YwYUc5a0lEMGdZMjl0Y0c5dVpXNTBMbDlmY21WaFkzUkJkWFJ2UW1sdVpFMWhjRnRoZFhSdlFtbHVaRXRsZVYwN1hHNGdJQ0FnSUNCamIyMXdiMjVsYm5SYllYVjBiMEpwYm1STFpYbGRJRDBnWW1sdVpFRjFkRzlDYVc1a1RXVjBhRzlrS0Z4dUlDQWdJQ0FnSUNCamIyMXdiMjVsYm5Rc1hHNGdJQ0FnSUNBZ0lGSmxZV04wUlhKeWIzSlZkR2xzY3k1bmRXRnlaQ2hjYmlBZ0lDQWdJQ0FnSUNCdFpYUm9iMlFzWEc0Z0lDQWdJQ0FnSUNBZ1kyOXRjRzl1Wlc1MExtTnZibk4wY25WamRHOXlMbVJwYzNCc1lYbE9ZVzFsSUNzZ0p5NG5JQ3NnWVhWMGIwSnBibVJMWlhsY2JpQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVkbUZ5SUhSNWNHVkVaWEJ5WldOaGRHbHZia1JsYzJOeWFYQjBiM0lnUFNCN1hHNGdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFpoY2lCa2FYTndiR0Y1VG1GdFpTQTlJSFJvYVhNdVpHbHpjR3hoZVU1aGJXVWdmSHdnZEdocGN5NXVZVzFsSUh4OElDZERiMjF3YjI1bGJuUW5PMXh1SUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQW5KWE11ZEhsd1pTQnBjeUJrWlhCeVpXTmhkR1ZrTGlCVmMyVWdKWE1nWkdseVpXTjBiSGtnZEc4Z1lXTmpaWE56SUhSb1pTQmpiR0Z6Y3k0bkxGeHVJQ0FnSUNBZ1pHbHpjR3hoZVU1aGJXVXNYRzRnSUNBZ0lDQmthWE53YkdGNVRtRnRaVnh1SUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR2hwY3l3Z0ozUjVjR1VuTENCN1hHNGdJQ0FnSUNCMllXeDFaVG9nZEdocGMxeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJRUZrWkNCdGIzSmxJSFJ2SUhSb1pTQlNaV0ZqZEVOc1lYTnpJR0poYzJVZ1kyeGhjM011SUZSb1pYTmxJR0Z5WlNCaGJHd2diR1ZuWVdONUlHWmxZWFIxY21WeklHRnVaRnh1SUNvZ2RHaGxjbVZtYjNKbElHNXZkQ0JoYkhKbFlXUjVJSEJoY25RZ2IyWWdkR2hsSUcxdlpHVnliaUJTWldGamRFTnZiWEJ2Ym1WdWRDNWNiaUFxTDF4dWRtRnlJRkpsWVdOMFEyeGhjM05OYVhocGJpQTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWRTlFVHpvZ1ZHaHBjeUIzYVd4c0lHSmxJR1JsY0hKbFkyRjBaV1FnWW1WallYVnpaU0J6ZEdGMFpTQnphRzkxYkdRZ1lXeDNZWGx6SUd0bFpYQWdZU0JqYjI1emFYTjBaVzUwWEc0Z0lDQXFJSFI1Y0dVZ2MybG5ibUYwZFhKbElHRnVaQ0IwYUdVZ2IyNXNlU0IxYzJVZ1kyRnpaU0JtYjNJZ2RHaHBjeXdnYVhNZ2RHOGdZWFp2YVdRZ2RHaGhkQzVjYmlBZ0lDb3ZYRzRnSUhKbGNHeGhZMlZUZEdGMFpUb2dablZ1WTNScGIyNG9ibVYzVTNSaGRHVXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTNWxibkYxWlhWbFVtVndiR0ZqWlZOMFlYUmxLSFJvYVhNc0lHNWxkMU4wWVhSbEtUdGNiaUFnSUNCcFppQW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJRkpsWVdOMFZYQmtZWFJsVVhWbGRXVXVaVzV4ZFdWMVpVTmhiR3hpWVdOcktIUm9hWE1zSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTm9aV05yY3lCM2FHVjBhR1Z5SUc5eUlHNXZkQ0IwYUdseklHTnZiWEJ2YzJsMFpTQmpiMjF3YjI1bGJuUWdhWE1nYlc5MWJuUmxaQzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQnRiM1Z1ZEdWa0xDQm1ZV3h6WlNCdmRHaGxjbmRwYzJVdVhHNGdJQ0FxSUVCd2NtOTBaV04wWldSY2JpQWdJQ29nUUdacGJtRnNYRzRnSUNBcUwxeHVJQ0JwYzAxdmRXNTBaV1E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUhaaGNpQnZkMjVsY2lBOUlGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUxtTjFjbkpsYm5RN1hHNGdJQ0FnSUNCcFppQW9iM2R1WlhJZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lIZGhjbTVwYm1jb1hHNGdJQ0FnSUNBZ0lDQWdiM2R1WlhJdVgzZGhjbTVsWkVGaWIzVjBVbVZtYzBsdVVtVnVaR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDY2xjeUJwY3lCaFkyTmxjM05wYm1jZ2FYTk5iM1Z1ZEdWa0lHbHVjMmxrWlNCcGRITWdjbVZ1WkdWeUtDa2dablZ1WTNScGIyNHVJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZHlaVzVrWlhJb0tTQnphRzkxYkdRZ1ltVWdZU0J3ZFhKbElHWjFibU4wYVc5dUlHOW1JSEJ5YjNCeklHRnVaQ0J6ZEdGMFpTNGdTWFFnYzJodmRXeGtJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZHVaWFpsY2lCaFkyTmxjM01nYzI5dFpYUm9hVzVuSUhSb1lYUWdjbVZ4ZFdseVpYTWdjM1JoYkdVZ1pHRjBZU0JtY205dElIUm9aU0J3Y21WMmFXOTFjeUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5jbVZ1WkdWeUxDQnpkV05vSUdGeklISmxabk11SUUxdmRtVWdkR2hwY3lCc2IyZHBZeUIwYnlCamIyMXdiMjVsYm5SRWFXUk5iM1Z1ZENCaGJtUWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0oyTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTQnBibk4wWldGa0xpY3NYRzRnSUNBZ0lDQWdJQ0FnYjNkdVpYSXVaMlYwVG1GdFpTZ3BJSHg4SUNkQklHTnZiWEJ2Ym1WdWRDZGNiaUFnSUNBZ0lDQWdLU0E2SUc1MWJHd3BPMXh1SUNBZ0lDQWdJQ0J2ZDI1bGNpNWZkMkZ5Ym1Wa1FXSnZkWFJTWldaelNXNVNaVzVrWlhJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYVc1MFpYSnVZV3hKYm5OMFlXNWpaU0E5SUZKbFlXTjBTVzV6ZEdGdVkyVk5ZWEF1WjJWMEtIUm9hWE1wTzF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQnBiblJsY201aGJFbHVjM1JoYm1ObElDWW1YRzRnSUNBZ0lDQnBiblJsY201aGJFbHVjM1JoYm1ObElDRTlQU0JTWldGamRFeHBabVZEZVdOc1pTNWpkWEp5Wlc1MGJIbE5iM1Z1ZEdsdVowbHVjM1JoYm1ObFhHNGdJQ0FnS1R0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCaElITjFZbk5sZENCdlppQjBhR1VnY0hKdmNITXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J3WVhKMGFXRnNVSEp2Y0hNZ1UzVmljMlYwSUc5bUlIUm9aU0J1WlhoMElIQnliM0J6TGx4dUlDQWdLaUJBY0dGeVlXMGdlejltZFc1amRHbHZibjBnWTJGc2JHSmhZMnNnUTJGc2JHVmtJR0ZtZEdWeUlIQnliM0J6SUdGeVpTQjFjR1JoZEdWa0xseHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb2dRSEIxWW14cFkxeHVJQ0FnS2lCQVpHVndjbVZqWVhSbFpGeHVJQ0FnS2k5Y2JpQWdjMlYwVUhKdmNITTZJR1oxYm1OMGFXOXVLSEJoY25ScFlXeFFjbTl3Y3l3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNCU1pXRmpkRlZ3WkdGMFpWRjFaWFZsTG1WdWNYVmxkV1ZUWlhSUWNtOXdjeWgwYUdsekxDQndZWEowYVdGc1VISnZjSE1wTzF4dUlDQWdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ1VtVmhZM1JWY0dSaGRHVlJkV1YxWlM1bGJuRjFaWFZsUTJGc2JHSmhZMnNvZEdocGN5d2dZMkZzYkdKaFkyc3BPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1Wd2JHRmpaU0JoYkd3Z2RHaGxJSEJ5YjNCekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdibVYzVUhKdmNITWdVM1ZpYzJWMElHOW1JSFJvWlNCdVpYaDBJSEJ5YjNCekxseHVJQ0FnS2lCQWNHRnlZVzBnZXo5bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJzZ1EyRnNiR1ZrSUdGbWRHVnlJSEJ5YjNCeklHRnlaU0IxY0dSaGRHVmtMbHh1SUNBZ0tpQkFabWx1WVd4Y2JpQWdJQ29nUUhCMVlteHBZMXh1SUNBZ0tpQkFaR1Z3Y21WallYUmxaRnh1SUNBZ0tpOWNiaUFnY21Wd2JHRmpaVkJ5YjNCek9pQm1kVzVqZEdsdmJpaHVaWGRRY205d2N5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbExtVnVjWFZsZFdWU1pYQnNZV05sVUhKdmNITW9kR2hwY3l3Z2JtVjNVSEp2Y0hNcE8xeHVJQ0FnSUdsbUlDaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTNWxibkYxWlhWbFEyRnNiR0poWTJzb2RHaHBjeXdnWTJGc2JHSmhZMnNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJRkpsWVdOMFEyeGhjM05EYjIxd2IyNWxiblFnUFNCbWRXNWpkR2x2YmlncElIdDlPMXh1WVhOemFXZHVLRnh1SUNCU1pXRmpkRU5zWVhOelEyOXRjRzl1Wlc1MExuQnliM1J2ZEhsd1pTeGNiaUFnVW1WaFkzUkRiMjF3YjI1bGJuUXVjSEp2ZEc5MGVYQmxMRnh1SUNCU1pXRmpkRU5zWVhOelRXbDRhVzVjYmlrN1hHNWNiaThxS2x4dUlDb2dUVzlrZFd4bElHWnZjaUJqY21WaGRHbHVaeUJqYjIxd2IzTnBkR1VnWTI5dGNHOXVaVzUwY3k1Y2JpQXFYRzRnS2lCQVkyeGhjM01nVW1WaFkzUkRiR0Z6YzF4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JEYkdGemN5QTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJR052YlhCdmMybDBaU0JqYjIxd2IyNWxiblFnWTJ4aGMzTWdaMmwyWlc0Z1lTQmpiR0Z6Y3lCemNHVmphV1pwWTJGMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYzNCbFl5QkRiR0Z6Y3lCemNHVmphV1pwWTJGMGFXOXVJQ2gzYUdsamFDQnRkWE4wSUdSbFptbHVaU0JnY21WdVpHVnlZQ2t1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMloxYm1OMGFXOXVmU0JEYjIxd2IyNWxiblFnWTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI0dVhHNGdJQ0FxSUVCd2RXSnNhV05jYmlBZ0lDb3ZYRzRnSUdOeVpXRjBaVU5zWVhOek9pQm1kVzVqZEdsdmJpaHpjR1ZqS1NCN1hHNGdJQ0FnZG1GeUlFTnZibk4wY25WamRHOXlJRDBnWm5WdVkzUnBiMjRvY0hKdmNITXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQzh2SUZSb2FYTWdZMjl1YzNSeWRXTjBiM0lnYVhNZ2IzWmxjbkpwWkdSbGJpQmllU0J0YjJOcmN5NGdWR2hsSUdGeVozVnRaVzUwSUdseklIVnpaV1JjYmlBZ0lDQWdJQzh2SUdKNUlHMXZZMnR6SUhSdklHRnpjMlZ5ZENCdmJpQjNhR0YwSUdkbGRITWdiVzkxYm5SbFpDNWNibHh1SUNBZ0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0IwYUdseklHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lzWEc0Z0lDQWdJQ0FnSUNBZ0oxTnZiV1YwYUdsdVp5QnBjeUJqWVd4c2FXNW5JR0VnVW1WaFkzUWdZMjl0Y0c5dVpXNTBJR1JwY21WamRHeDVMaUJWYzJVZ1lTQm1ZV04wYjNKNUlHOXlJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZEtVMWdnYVc1emRHVmhaQzRnVTJWbE9pQm9kSFJ3Y3pvdkwyWmlMbTFsTDNKbFlXTjBMV3hsWjJGamVXWmhZM1J2Y25rblhHNGdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVjJseVpTQjFjQ0JoZFhSdkxXSnBibVJwYm1kY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5ZmNtVmhZM1JCZFhSdlFtbHVaRTFoY0NrZ2UxeHVJQ0FnSUNBZ0lDQmlhVzVrUVhWMGIwSnBibVJOWlhSb2IyUnpLSFJvYVhNcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TG5CeWIzQnpJRDBnY0hKdmNITTdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFFnUFNCamIyNTBaWGgwTzF4dUlDQWdJQ0FnZEdocGN5NXpkR0YwWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUM4dklGSmxZV04wUTJ4aGMzTmxjeUJrYjJWemJpZDBJR2hoZG1VZ1kyOXVjM1J5ZFdOMGIzSnpMaUJKYm5OMFpXRmtMQ0IwYUdWNUlIVnpaU0IwYUdWY2JpQWdJQ0FnSUM4dklHZGxkRWx1YVhScFlXeFRkR0YwWlNCaGJtUWdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJRzFsZEdodlpITWdabTl5SUdsdWFYUnBZV3hwZW1GMGFXOXVMbHh1WEc0Z0lDQWdJQ0IyWVhJZ2FXNXBkR2xoYkZOMFlYUmxJRDBnZEdocGN5NW5aWFJKYm1sMGFXRnNVM1JoZEdVZ1B5QjBhR2x6TG1kbGRFbHVhWFJwWVd4VGRHRjBaU2dwSURvZ2JuVnNiRHRjYmlBZ0lDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdZV3hzYjNjZ1lYVjBieTF0YjJOcmN5QjBieUJ3Y205alpXVmtJR0Z6SUdsbUlIUm9aWGtuY21VZ2NtVjBkWEp1YVc1bklHNTFiR3d1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXNXBkR2xoYkZOMFlYUmxJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuWlhSSmJtbDBhV0ZzVTNSaGRHVXVYMmx6VFc5amEwWjFibU4wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJwY3lCd2NtOWlZV0pzZVNCaVlXUWdjSEpoWTNScFkyVXVJRU52Ym5OcFpHVnlJSGRoY201cGJtY2dhR1Z5WlNCaGJtUmNiaUFnSUNBZ0lDQWdJQ0F2THlCa1pYQnlaV05oZEdsdVp5QjBhR2x6SUdOdmJuWmxibWxsYm1ObExseHVJQ0FnSUNBZ0lDQWdJR2x1YVhScFlXeFRkR0YwWlNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJwYm1sMGFXRnNVM1JoZEdVZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUNGQmNuSmhlUzVwYzBGeWNtRjVLR2x1YVhScFlXeFRkR0YwWlNrc1hHNGdJQ0FnSUNBZ0lDY2xjeTVuWlhSSmJtbDBhV0ZzVTNSaGRHVW9LVG9nYlhWemRDQnlaWFIxY200Z1lXNGdiMkpxWldOMElHOXlJRzUxYkd3bkxGeHVJQ0FnSUNBZ0lDQkRiMjV6ZEhKMVkzUnZjaTVrYVhOd2JHRjVUbUZ0WlNCOGZDQW5VbVZoWTNSRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5RblhHNGdJQ0FnSUNBcElEb2dhVzUyWVhKcFlXNTBLSFI1Y0dWdlppQnBibWwwYVdGc1UzUmhkR1VnUFQwOUlDZHZZbXBsWTNRbklDWW1JQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHbHVhWFJwWVd4VGRHRjBaU2twS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTQTlJR2x1YVhScFlXeFRkR0YwWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlNBOUlHNWxkeUJTWldGamRFTnNZWE56UTI5dGNHOXVaVzUwS0NrN1hHNGdJQ0FnUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlJRDBnUTI5dWMzUnlkV04wYjNJN1hHNWNiaUFnSUNCcGJtcGxZM1JsWkUxcGVHbHVjeTVtYjNKRllXTm9LRnh1SUNBZ0lDQWdiV2w0VTNCbFkwbHVkRzlEYjIxd2IyNWxiblF1WW1sdVpDaHVkV3hzTENCRGIyNXpkSEoxWTNSdmNpbGNiaUFnSUNBcE8xeHVYRzRnSUNBZ2JXbDRVM0JsWTBsdWRHOURiMjF3YjI1bGJuUW9RMjl1YzNSeWRXTjBiM0lzSUhOd1pXTXBPMXh1WEc0Z0lDQWdMeThnU1c1cGRHbGhiR2w2WlNCMGFHVWdaR1ZtWVhWc2RGQnliM0J6SUhCeWIzQmxjblI1SUdGbWRHVnlJR0ZzYkNCdGFYaHBibk1nYUdGMlpTQmlaV1Z1SUcxbGNtZGxaRnh1SUNBZ0lHbG1JQ2hEYjI1emRISjFZM1J2Y2k1blpYUkVaV1poZFd4MFVISnZjSE1wSUh0Y2JpQWdJQ0FnSUVOdmJuTjBjblZqZEc5eUxtUmxabUYxYkhSUWNtOXdjeUE5SUVOdmJuTjBjblZqZEc5eUxtZGxkRVJsWm1GMWJIUlFjbTl3Y3lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ1lTQjBZV2NnZEc4Z2FXNWthV05oZEdVZ2RHaGhkQ0IwYUdVZ2RYTmxJRzltSUhSb1pYTmxJRzFsZEdodlpDQnVZVzFsY3lCcGN5QnZheXhjYmlBZ0lDQWdJQzh2SUhOcGJtTmxJR2wwSjNNZ2RYTmxaQ0IzYVhSb0lHTnlaV0YwWlVOc1lYTnpMaUJKWmlCcGRDZHpJRzV2ZEN3Z2RHaGxiaUJwZENkeklHeHBhMlZzZVNCaFhHNGdJQ0FnSUNBdkx5QnRhWE4wWVd0bElITnZJSGRsSjJ4c0lIZGhjbTRnZVc5MUlIUnZJSFZ6WlNCMGFHVWdjM1JoZEdsaklIQnliM0JsY25SNUxDQndjbTl3WlhKMGVWeHVJQ0FnSUNBZ0x5OGdhVzVwZEdsaGJHbDZaWElnYjNJZ1kyOXVjM1J5ZFdOMGIzSWdjbVZ6Y0dWamRHbDJaV3g1TGx4dUlDQWdJQ0FnYVdZZ0tFTnZibk4wY25WamRHOXlMbWRsZEVSbFptRjFiSFJRY205d2N5a2dlMXh1SUNBZ0lDQWdJQ0JEYjI1emRISjFZM1J2Y2k1blpYUkVaV1poZFd4MFVISnZjSE11YVhOU1pXRmpkRU5zWVhOelFYQndjbTkyWldRZ1BTQjdmVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXVaMlYwU1c1cGRHbGhiRk4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlM1blpYUkpibWwwYVdGc1UzUmhkR1V1YVhOU1pXRmpkRU5zWVhOelFYQndjbTkyWldRZ1BTQjdmVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxMbkpsYm1SbGNpeGNiaUFnSUNBZ0lDZGpjbVZoZEdWRGJHRnpjeWd1TGk0cE9pQkRiR0Z6Y3lCemNHVmphV1pwWTJGMGFXOXVJRzExYzNRZ2FXMXdiR1Z0Wlc1MElHRWdZSEpsYm1SbGNtQWdiV1YwYUc5a0xpZGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlM1eVpXNWtaWElwS1R0Y2JseHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdJQ0FoUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExtTnZiWEJ2Ym1WdWRGTm9iM1ZzWkZWd1pHRjBaU3hjYmlBZ0lDQWdJQ0FnSnlWeklHaGhjeUJoSUcxbGRHaHZaQ0JqWVd4c1pXUWdKeUFyWEc0Z0lDQWdJQ0FnSUNkamIyMXdiMjVsYm5SVGFHOTFiR1JWY0dSaGRHVW9LUzRnUkdsa0lIbHZkU0J0WldGdUlITm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaU2dwUHlBbklDdGNiaUFnSUNBZ0lDQWdKMVJvWlNCdVlXMWxJR2x6SUhCb2NtRnpaV1FnWVhNZ1lTQnhkV1Z6ZEdsdmJpQmlaV05oZFhObElIUm9aU0JtZFc1amRHbHZiaUJwY3lBbklDdGNiaUFnSUNBZ0lDQWdKMlY0Y0dWamRHVmtJSFJ2SUhKbGRIVnliaUJoSUhaaGJIVmxMaWNzWEc0Z0lDQWdJQ0FnSUhOd1pXTXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z0owRWdZMjl0Y0c5dVpXNTBKMXh1SUNBZ0lDQWdLU0E2SUc1MWJHd3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkpsWkhWalpTQjBhVzFsSUhOd1pXNTBJR1J2YVc1bklHeHZiMnQxY0hNZ1lua2djMlYwZEdsdVp5QjBhR1Z6WlNCdmJpQjBhR1VnY0hKdmRHOTBlWEJsTGx4dUlDQWdJR1p2Y2lBb2RtRnlJRzFsZEdodlpFNWhiV1VnYVc0Z1VtVmhZM1JEYkdGemMwbHVkR1Z5Wm1GalpTa2dlMXh1SUNBZ0lDQWdhV1lnS0NGRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVmJiV1YwYUc5a1RtRnRaVjBwSUh0Y2JpQWdJQ0FnSUNBZ1EyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxXMjFsZEdodlpFNWhiV1ZkSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJNWldkaFkza2dhRzl2YTF4dUlDQWdJRU52Ym5OMGNuVmpkRzl5TG5SNWNHVWdQU0JEYjI1emRISjFZM1J2Y2p0Y2JpQWdJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvUTI5dWMzUnlkV04wYjNJc0lDZDBlWEJsSnl3Z2RIbHdaVVJsY0hKbFkyRjBhVzl1UkdWelkzSnBjSFJ2Y2lrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNoNEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsRklIZHBiR3dnWm1GcGJDQnZiaUJrWldacGJtVlFjbTl3WlhKMGVTQW9aWE0xTFhOb2FXMHZjMmhoYlNCMGIyOHBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUVOdmJuTjBjblZqZEc5eU8xeHVJQ0I5TEZ4dVhHNGdJR2x1YW1WamRHbHZiam9nZTF4dUlDQWdJR2x1YW1WamRFMXBlR2x1T2lCbWRXNWpkR2x2YmlodGFYaHBiaWtnZTF4dUlDQWdJQ0FnYVc1cVpXTjBaV1JOYVhocGJuTXVjSFZ6YUNodGFYaHBiaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VtVmhZM1JEYkdGemN6dGNiaUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBSZWFjdENvbXBvbmVudChwcm9wcyxjb250ZXh0KXt0aGlzLnByb3BzPXByb3BzLHRoaXMuY29udGV4dD1jb250ZXh0fXZhciBSZWFjdFVwZGF0ZVF1ZXVlPXJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlUXVldWVcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIik7aWYoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKHBhcnRpYWxTdGF0ZSxjYWxsYmFjayl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoXCJvYmplY3RcIj09dHlwZW9mIHBhcnRpYWxTdGF0ZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgcGFydGlhbFN0YXRlfHxudWxsPT1wYXJ0aWFsU3RhdGUsXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik6aW52YXJpYW50KFwib2JqZWN0XCI9PXR5cGVvZiBwYXJ0aWFsU3RhdGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHBhcnRpYWxTdGF0ZXx8bnVsbD09cGFydGlhbFN0YXRlKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKG51bGwhPXBhcnRpYWxTdGF0ZSxcInNldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyBpbnN0ZWFkLCB1c2UgZm9yY2VVcGRhdGUoKS5cIik6bnVsbCksUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0U3RhdGUodGhpcyxwYXJ0aWFsU3RhdGUpLGNhbGxiYWNrJiZSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLGNhbGxiYWNrKX0sUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGNhbGxiYWNrKXtSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKSxjYWxsYmFjayYmUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2sodGhpcyxjYWxsYmFjayl9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBkZXByZWNhdGVkQVBJcz17Z2V0RE9NTm9kZTpbXCJnZXRET01Ob2RlXCIsXCJVc2UgUmVhY3QuZmluZERPTU5vZGUoY29tcG9uZW50KSBpbnN0ZWFkLlwiXSxpc01vdW50ZWQ6W1wiaXNNb3VudGVkXCIsXCJJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiBjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy5cIl0scmVwbGFjZVByb3BzOltcInJlcGxhY2VQcm9wc1wiLFwiSW5zdGVhZCwgY2FsbCBSZWFjdC5yZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC5cIl0scmVwbGFjZVN0YXRlOltcInJlcGxhY2VTdGF0ZVwiLFwiUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS5cIl0sc2V0UHJvcHM6W1wic2V0UHJvcHNcIixcIkluc3RlYWQsIGNhbGwgUmVhY3QucmVuZGVyIGFnYWluIGF0IHRoZSB0b3AgbGV2ZWwuXCJdfSxkZWZpbmVEZXByZWNhdGlvbldhcm5pbmc9ZnVuY3Rpb24obWV0aG9kTmFtZSxpbmZvKXt0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxtZXRob2ROYW1lLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoITEsXCIlcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlc1wiLGluZm9bMF0saW5mb1sxXSk6bnVsbCl9fSl9Y2F0Y2goeCl7fX07Zm9yKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSYmZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSxkZXByZWNhdGVkQVBJc1tmbk5hbWVdKX1tb2R1bGUuZXhwb3J0cz1SZWFjdENvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JEYjIxd2IyNWxiblF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFWZEJMRmxCVlVFc1UwRkJVeXhuUWtGQlpTeE5RVUZQTEZOQlF6ZENMRXRCUVVzc1RVRkJVU3hOUVVOaUxFdEJRVXNzVVVGQlZTeFJRVlpxUWl4SFFVRkpMR3RDUVVGdFFpeFJRVUZSTEhOQ1FVVXpRaXhWUVVGWkxGRkJRVkVzWlVGRGNFSXNVVUZCVlN4UlFVRlJMRmxCYjBaMFFpeEpRV3BFUVN4bFFVRmxMRlZCUVZVc1UwRkJWeXhUUVVGVExHRkJRV01zVlVGRGVFUXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRFppeG5Ra0ZCYWtJc1pVRkRhVUlzYTBKQlFXcENMR1ZCUTFNc1RVRkJhRUlzWVVGRFFTeDVTRUZGUlN4VlFVRnJReXhuUWtGQmFrSXNaVUZEUnl4clFrRkJha0lzWlVGRFV5eE5RVUZvUWl4alFVTkpMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFhRVU01UWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFJRVU4yUWl4TlFVRm9RaXhoUVVOQkxEUkdRVVZGTEUxQlJVNHNhVUpCUVdsQ0xHZENRVUZuUWl4TFFVRk5MR05CUTI1RExGVkJRMFlzYVVKQlFXbENMR2RDUVVGblFpeExRVUZOTEZkQmEwSXpReXhsUVVGbExGVkJRVlVzV1VGQll5eFRRVUZUTEZWQlF6bERMR2xDUVVGcFFpeHRRa0ZCYlVJc1RVRkRhRU1zVlVGRFJpeHBRa0ZCYVVJc1owSkJRV2RDTEV0QlFVMHNWMEZUZGtNc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWVXNRMEZEZWtNc1IwRkJTU3hwUWtGRFJpeFpRVU5GTEdGQlEwRXNOa05CUlVZc1YwRkRSU3haUVVOQkxITklRVWRHTEdOQlEwVXNaVUZEUVN4elJFRkZSaXhqUVVORkxHVkJRMEVzYlVkQlIwWXNWVUZEUlN4WFFVTkJMSFZFUVVkQkxIbENRVUV5UWl4VFFVRlRMRmRCUVZrc1RVRkRiRVFzU1VGRFJTeFBRVUZQTEdWQlFXVXNaVUZCWlN4VlFVRlhMRmxCUXpsRExFbEJRVXNzVjBGUFNDeFpRVTVETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGTkJRM1pETEVWQlEwRXNPRVJCUTBFc1MwRkJTeXhIUVVOTUxFdEJRVXNzU1VGRFNDeFRRVWxTTEUxQlFVOHNTMEZKV0N4TFFVRkxMRWRCUVVrc1ZVRkJWU3huUWtGRFlpeGxRVUZsTEdWQlFXVXNVMEZEYUVNc2VVSkJRWGxDTEU5QlFWRXNaVUZCWlN4VFFVdDBSQ3hQUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFTnZiWEJ2Ym1WdWRGeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFZYQmtZWFJsVVhWbGRXVWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRlZ3WkdGMFpWRjFaWFZsWENJcE8xeHVYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVkbUZ5SUhkaGNtNXBibWNnUFNCeVpYRjFhWEpsS0Z3aUxpOTNZWEp1YVc1blhDSXBPMXh1WEc0dktpcGNiaUFxSUVKaGMyVWdZMnhoYzNNZ2FHVnNjR1Z5Y3lCbWIzSWdkR2hsSUhWd1pHRjBhVzVuSUhOMFlYUmxJRzltSUdFZ1kyOXRjRzl1Wlc1MExseHVJQ292WEc1bWRXNWpkR2x2YmlCU1pXRmpkRU52YlhCdmJtVnVkQ2h3Y205d2N5d2dZMjl1ZEdWNGRDa2dlMXh1SUNCMGFHbHpMbkJ5YjNCeklEMGdjSEp2Y0hNN1hHNGdJSFJvYVhNdVkyOXVkR1Y0ZENBOUlHTnZiblJsZUhRN1hHNTlYRzVjYmk4cUtseHVJQ29nVTJWMGN5QmhJSE4xWW5ObGRDQnZaaUIwYUdVZ2MzUmhkR1V1SUVGc2QyRjVjeUIxYzJVZ2RHaHBjeUIwYnlCdGRYUmhkR1ZjYmlBcUlITjBZWFJsTGlCWmIzVWdjMmh2ZFd4a0lIUnlaV0YwSUdCMGFHbHpMbk4wWVhSbFlDQmhjeUJwYlcxMWRHRmliR1V1WEc0Z0tseHVJQ29nVkdobGNtVWdhWE1nYm04Z1ozVmhjbUZ1ZEdWbElIUm9ZWFFnWUhSb2FYTXVjM1JoZEdWZ0lIZHBiR3dnWW1VZ2FXMXRaV1JwWVhSbGJIa2dkWEJrWVhSbFpDd2djMjljYmlBcUlHRmpZMlZ6YzJsdVp5QmdkR2hwY3k1emRHRjBaV0FnWVdaMFpYSWdZMkZzYkdsdVp5QjBhR2x6SUcxbGRHaHZaQ0J0WVhrZ2NtVjBkWEp1SUhSb1pTQnZiR1FnZG1Gc2RXVXVYRzRnS2x4dUlDb2dWR2hsY21VZ2FYTWdibThnWjNWaGNtRnVkR1ZsSUhSb1lYUWdZMkZzYkhNZ2RHOGdZSE5sZEZOMFlYUmxZQ0IzYVd4c0lISjFiaUJ6ZVc1amFISnZibTkxYzJ4NUxGeHVJQ29nWVhNZ2RHaGxlU0J0WVhrZ1pYWmxiblIxWVd4c2VTQmlaU0JpWVhSamFHVmtJSFJ2WjJWMGFHVnlMaUFnV1c5MUlHTmhiaUJ3Y205MmFXUmxJR0Z1SUc5d2RHbHZibUZzWEc0Z0tpQmpZV3hzWW1GamF5QjBhR0YwSUhkcGJHd2dZbVVnWlhobFkzVjBaV1FnZDJobGJpQjBhR1VnWTJGc2JDQjBieUJ6WlhSVGRHRjBaU0JwY3lCaFkzUjFZV3hzZVZ4dUlDb2dZMjl0Y0d4bGRHVmtMbHh1SUNwY2JpQXFJRmRvWlc0Z1lTQm1kVzVqZEdsdmJpQnBjeUJ3Y205MmFXUmxaQ0IwYnlCelpYUlRkR0YwWlN3Z2FYUWdkMmxzYkNCaVpTQmpZV3hzWldRZ1lYUWdjMjl0WlNCd2IybHVkQ0JwYmx4dUlDb2dkR2hsSUdaMWRIVnlaU0FvYm05MElITjVibU5vY205dWIzVnpiSGtwTGlCSmRDQjNhV3hzSUdKbElHTmhiR3hsWkNCM2FYUm9JSFJvWlNCMWNDQjBieUJrWVhSbFhHNGdLaUJqYjIxd2IyNWxiblFnWVhKbmRXMWxiblJ6SUNoemRHRjBaU3dnY0hKdmNITXNJR052Ym5SbGVIUXBMaUJVYUdWelpTQjJZV3gxWlhNZ1kyRnVJR0psSUdScFptWmxjbVZ1ZEZ4dUlDb2dabkp2YlNCMGFHbHpMaW9nWW1WallYVnpaU0I1YjNWeUlHWjFibU4wYVc5dUlHMWhlU0JpWlNCallXeHNaV1FnWVdaMFpYSWdjbVZqWldsMlpWQnliM0J6SUdKMWRDQmlaV1p2Y21WY2JpQXFJSE5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlN3Z1lXNWtJSFJvYVhNZ2JtVjNJSE4wWVhSbExDQndjbTl3Y3l3Z1lXNWtJR052Ym5SbGVIUWdkMmxzYkNCdWIzUWdlV1YwSUdKbFhHNGdLaUJoYzNOcFoyNWxaQ0IwYnlCMGFHbHpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZHWjFibU4wYVc5dWZTQndZWEowYVdGc1UzUmhkR1VnVG1WNGRDQndZWEowYVdGc0lITjBZWFJsSUc5eUlHWjFibU4wYVc5dUlIUnZYRzRnS2lBZ0lDQWdJQ0FnY0hKdlpIVmpaU0J1WlhoMElIQmhjblJwWVd3Z2MzUmhkR1VnZEc4Z1ltVWdiV1Z5WjJWa0lIZHBkR2dnWTNWeWNtVnVkQ0J6ZEdGMFpTNWNiaUFxSUVCd1lYSmhiU0I3UDJaMWJtTjBhVzl1ZlNCallXeHNZbUZqYXlCRFlXeHNaV1FnWVdaMFpYSWdjM1JoZEdVZ2FYTWdkWEJrWVhSbFpDNWNiaUFxSUVCbWFXNWhiRnh1SUNvZ1FIQnliM1JsWTNSbFpGeHVJQ292WEc1U1pXRmpkRU52YlhCdmJtVnVkQzV3Y205MGIzUjVjR1V1YzJWMFUzUmhkR1VnUFNCbWRXNWpkR2x2Ymlod1lYSjBhV0ZzVTNSaGRHVXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnZEhsd1pXOW1JSEJoY25ScFlXeFRkR0YwWlNBOVBUMGdKMjlpYW1WamRDY2dmSHhjYmlBZ0lDQjBlWEJsYjJZZ2NHRnlkR2xoYkZOMFlYUmxJRDA5UFNBblpuVnVZM1JwYjI0bklIeDhYRzRnSUNBZ2NHRnlkR2xoYkZOMFlYUmxJRDA5SUc1MWJHd3NYRzRnSUNBZ0ozTmxkRk4wWVhSbEtDNHVMaWs2SUhSaGEyVnpJR0Z1SUc5aWFtVmpkQ0J2WmlCemRHRjBaU0IyWVhKcFlXSnNaWE1nZEc4Z2RYQmtZWFJsSUc5eUlHRWdKeUFyWEc0Z0lDQWdKMloxYm1OMGFXOXVJSGRvYVdOb0lISmxkSFZ5Ym5NZ1lXNGdiMkpxWldOMElHOW1JSE4wWVhSbElIWmhjbWxoWW14bGN5NG5YRzRnSUNrZ09pQnBiblpoY21saGJuUW9kSGx3Wlc5bUlIQmhjblJwWVd4VGRHRjBaU0E5UFQwZ0oyOWlhbVZqZENjZ2ZIeGNiaUFnZEhsd1pXOW1JSEJoY25ScFlXeFRkR0YwWlNBOVBUMGdKMloxYm1OMGFXOXVKeUI4ZkZ4dUlDQndZWEowYVdGc1UzUmhkR1VnUFQwZ2JuVnNiQ2twTzF4dUlDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUhkaGNtNXBibWNvWEc0Z0lDQWdJQ0J3WVhKMGFXRnNVM1JoZEdVZ0lUMGdiblZzYkN4Y2JpQWdJQ0FnSUNkelpYUlRkR0YwWlNndUxpNHBPaUJaYjNVZ2NHRnpjMlZrSUdGdUlIVnVaR1ZtYVc1bFpDQnZjaUJ1ZFd4c0lITjBZWFJsSUc5aWFtVmpkRHNnSnlBclhHNGdJQ0FnSUNBbmFXNXpkR1ZoWkN3Z2RYTmxJR1p2Y21ObFZYQmtZWFJsS0NrdUoxeHVJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JpQWdmVnh1SUNCU1pXRmpkRlZ3WkdGMFpWRjFaWFZsTG1WdWNYVmxkV1ZUWlhSVGRHRjBaU2gwYUdsekxDQndZWEowYVdGc1UzUmhkR1VwTzF4dUlDQnBaaUFvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JTWldGamRGVndaR0YwWlZGMVpYVmxMbVZ1Y1hWbGRXVkRZV3hzWW1GamF5aDBhR2x6TENCallXeHNZbUZqYXlrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dSbTl5WTJWeklHRnVJSFZ3WkdGMFpTNGdWR2hwY3lCemFHOTFiR1FnYjI1c2VTQmlaU0JwYm5admEyVmtJSGRvWlc0Z2FYUWdhWE1nYTI1dmQyNGdkMmwwYUZ4dUlDb2dZMlZ5ZEdGcGJuUjVJSFJvWVhRZ2QyVWdZWEpsSUNvcWJtOTBLaW9nYVc0Z1lTQkVUMDBnZEhKaGJuTmhZM1JwYjI0dVhHNGdLbHh1SUNvZ1dXOTFJRzFoZVNCM1lXNTBJSFJ2SUdOaGJHd2dkR2hwY3lCM2FHVnVJSGx2ZFNCcmJtOTNJSFJvWVhRZ2MyOXRaU0JrWldWd1pYSWdZWE53WldOMElHOW1JSFJvWlZ4dUlDb2dZMjl0Y0c5dVpXNTBKM01nYzNSaGRHVWdhR0Z6SUdOb1lXNW5aV1FnWW5WMElHQnpaWFJUZEdGMFpXQWdkMkZ6SUc1dmRDQmpZV3hzWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUIzYVd4c0lHNXZkQ0JwYm5admEyVWdZSE5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWldBc0lHSjFkQ0JwZENCM2FXeHNJR2x1ZG05clpWeHVJQ29nWUdOdmJYQnZibVZ1ZEZkcGJHeFZjR1JoZEdWZ0lHRnVaQ0JnWTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsWUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZXo5bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJzZ1EyRnNiR1ZrSUdGbWRHVnlJSFZ3WkdGMFpTQnBjeUJqYjIxd2JHVjBaUzVjYmlBcUlFQm1hVzVoYkZ4dUlDb2dRSEJ5YjNSbFkzUmxaRnh1SUNvdlhHNVNaV0ZqZEVOdmJYQnZibVZ1ZEM1d2NtOTBiM1I1Y0dVdVptOXlZMlZWY0dSaGRHVWdQU0JtZFc1amRHbHZiaWhqWVd4c1ltRmpheWtnZTF4dUlDQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbExtVnVjWFZsZFdWR2IzSmpaVlZ3WkdGMFpTaDBhR2x6S1R0Y2JpQWdhV1lnS0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnVW1WaFkzUlZjR1JoZEdWUmRXVjFaUzVsYm5GMVpYVmxRMkZzYkdKaFkyc29kR2hwY3l3Z1kyRnNiR0poWTJzcE8xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJRVJsY0hKbFkyRjBaV1FnUVZCSmN5NGdWR2hsYzJVZ1FWQkpjeUIxYzJWa0lIUnZJR1Y0YVhOMElHOXVJR05zWVhOemFXTWdVbVZoWTNRZ1kyeGhjM05sY3lCaWRYUWdjMmx1WTJWY2JpQXFJSGRsSUhkdmRXeGtJR3hwYTJVZ2RHOGdaR1Z3Y21WallYUmxJSFJvWlcwc0lIZGxKM0psSUc1dmRDQm5iMmx1WnlCMGJ5QnRiM1psSUhSb1pXMGdiM1psY2lCMGJ5QjBhR2x6WEc0Z0tpQnRiMlJsY200Z1ltRnpaU0JqYkdGemN5NGdTVzV6ZEdWaFpDd2dkMlVnWkdWbWFXNWxJR0VnWjJWMGRHVnlJSFJvWVhRZ2QyRnlibk1nYVdZZ2FYUW5jeUJoWTJObGMzTmxaQzVjYmlBcUwxeHVhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNCMllYSWdaR1Z3Y21WallYUmxaRUZRU1hNZ1BTQjdYRzRnSUNBZ1oyVjBSRTlOVG05a1pUb2dXMXh1SUNBZ0lDQWdKMmRsZEVSUFRVNXZaR1VuTEZ4dUlDQWdJQ0FnSjFWelpTQlNaV0ZqZEM1bWFXNWtSRTlOVG05a1pTaGpiMjF3YjI1bGJuUXBJR2x1YzNSbFlXUXVKMXh1SUNBZ0lGMHNYRzRnSUNBZ2FYTk5iM1Z1ZEdWa09pQmJYRzRnSUNBZ0lDQW5hWE5OYjNWdWRHVmtKeXhjYmlBZ0lDQWdJQ2RKYm5OMFpXRmtMQ0J0WVd0bElITjFjbVVnZEc4Z1kyeGxZVzRnZFhBZ2MzVmljMk55YVhCMGFXOXVjeUJoYm1RZ2NHVnVaR2x1WnlCeVpYRjFaWE4wY3lCcGJpQW5JQ3RjYmlBZ0lDQWdJQ2RqYjIxd2IyNWxiblJYYVd4c1ZXNXRiM1Z1ZENCMGJ5QndjbVYyWlc1MElHMWxiVzl5ZVNCc1pXRnJjeTRuWEc0Z0lDQWdYU3hjYmlBZ0lDQnlaWEJzWVdObFVISnZjSE02SUZ0Y2JpQWdJQ0FnSUNkeVpYQnNZV05sVUhKdmNITW5MRnh1SUNBZ0lDQWdKMGx1YzNSbFlXUXNJR05oYkd3Z1VtVmhZM1F1Y21WdVpHVnlJR0ZuWVdsdUlHRjBJSFJvWlNCMGIzQWdiR1YyWld3dUoxeHVJQ0FnSUYwc1hHNGdJQ0FnY21Wd2JHRmpaVk4wWVhSbE9pQmJYRzRnSUNBZ0lDQW5jbVZ3YkdGalpWTjBZWFJsSnl4Y2JpQWdJQ0FnSUNkU1pXWmhZM1J2Y2lCNWIzVnlJR052WkdVZ2RHOGdkWE5sSUhObGRGTjBZWFJsSUdsdWMzUmxZV1FnS0hObFpTQW5JQ3RjYmlBZ0lDQWdJQ2RvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Wm1GalpXSnZiMnN2Y21WaFkzUXZhWE56ZFdWekx6TXlNellwTGlkY2JpQWdJQ0JkTEZ4dUlDQWdJSE5sZEZCeWIzQnpPaUJiWEc0Z0lDQWdJQ0FuYzJWMFVISnZjSE1uTEZ4dUlDQWdJQ0FnSjBsdWMzUmxZV1FzSUdOaGJHd2dVbVZoWTNRdWNtVnVaR1Z5SUdGbllXbHVJR0YwSUhSb1pTQjBiM0FnYkdWMlpXd3VKMXh1SUNBZ0lGMWNiaUFnZlR0Y2JpQWdkbUZ5SUdSbFptbHVaVVJsY0hKbFkyRjBhVzl1VjJGeWJtbHVaeUE5SUdaMWJtTjBhVzl1S0cxbGRHaHZaRTVoYldVc0lHbHVabThwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRkpsWVdOMFEyOXRjRzl1Wlc1MExuQnliM1J2ZEhsd1pTd2diV1YwYUc5a1RtRnRaU3dnZTF4dUlDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuSlhNb0xpNHVLU0JwY3lCa1pYQnlaV05oZEdWa0lHbHVJSEJzWVdsdUlFcGhkbUZUWTNKcGNIUWdVbVZoWTNRZ1kyeGhjM05sY3k0Z0pYTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNW1iMXN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Wm05Yk1WMWNiaUFnSUNBZ0lDQWdJQ0FwSURvZ2JuVnNiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb2VDa2dlMXh1SUNBZ0lDQWdMeThnU1VVZ2QybHNiQ0JtWVdsc0lHOXVJR1JsWm1sdVpWQnliM0JsY25SNUlDaGxjelV0YzJocGJTOXphR0Z0SUhSdmJ5bGNiaUFnSUNCOVhHNGdJSDA3WEc0Z0lHWnZjaUFvZG1GeUlHWnVUbUZ0WlNCcGJpQmtaWEJ5WldOaGRHVmtRVkJKY3lrZ2UxeHVJQ0FnSUdsbUlDaGtaWEJ5WldOaGRHVmtRVkJKY3k1b1lYTlBkMjVRY205d1pYSjBlU2htYms1aGJXVXBLU0I3WEc0Z0lDQWdJQ0JrWldacGJtVkVaWEJ5WldOaGRHbHZibGRoY201cGJtY29abTVPWVcxbExDQmtaWEJ5WldOaGRHVmtRVkJKYzF0bWJrNWhiV1ZkS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRU52YlhCdmJtVnVkRHRjYmlKZGZRPT0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG5cbi8qKlxuICogQWJzdHJhY3RzIGF3YXkgYWxsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlY29uY2lsZXIgdGhhdCByZXF1aXJlcyBrbm93bGVkZ2Ugb2ZcbiAqIHRoZSBicm93c2VyIGNvbnRleHQuIFRPRE86IFRoZXNlIGNhbGxlcnMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgdG8gYXZvaWQgdGhlXG4gKiBuZWVkIGZvciB0aGlzIGluamVjdGlvbi5cbiAqL1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuXG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6XG4gICAgUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzLFxuXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6XG4gICAgUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlELFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcnRpY3VsYXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgdGhhdCBzb21lIHJlc291cmNlcyBiZSBjbGVhbmVkIHVwLFxuICAgKiBzcGVjaWZ5IHRoaXMgaW4gdGhlIGluamVjdGVkIE1peGluLiBJbiB0aGUgRE9NLCB3ZSB3b3VsZCBsaWtlbHkgd2FudCB0b1xuICAgKiBwdXJnZSBhbnkgY2FjaGVkIG5vZGUgSUQgbG9va3Vwcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24ocm9vdE5vZGVJRCkge1xuICAgIFJlYWN0TW91bnQucHVyZ2VJRChyb290Tm9kZUlEKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLGluamVjdGVkPSExLFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQ9e3VubW91bnRJREZyb21FbnZpcm9ubWVudDpudWxsLHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6bnVsbCxwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOm51bGwsaW5qZWN0aW9uOntpbmplY3RFbnZpcm9ubWVudDpmdW5jdGlvbihlbnZpcm9ubWVudCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoIWluamVjdGVkLFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuXCIpOmludmFyaWFudCghaW5qZWN0ZWQpLFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50PWVudmlyb25tZW50LnVubW91bnRJREZyb21FbnZpcm9ubWVudCxSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ9ZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCxSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM9ZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyxpbmplY3RlZD0hMH19fTttb2R1bGUuZXhwb3J0cz1SZWFjdENvbXBvbmVudEVudmlyb25tZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkRiMjF3YjI1bGJuUkZiblpwY205dWJXVnVkQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlYwRXNXVUZGUVN4SlFVRkpMRmRCUVZrc1VVRkJVU3hsUVVWd1FpeFZRVUZYTEVWQlJWZ3NNa0pCVDBZc2VVSkJRVEJDTEV0QlRURkNMREJDUVVFeVFpeExRVTB6UWl4MVFrRkJkMElzUzBGRmVFSXNWMEZEUlN4clFrRkJiVUlzVTBGQlV5eGhRVU42UWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFhRVU4wUXl4VFFVTkVMSGxGUVVORkxGZEJRVmNzVlVGRFppd3dRa0ZCTUVJc2VVSkJRM2hDTEZsQlFWa3NlVUpCUTJRc01FSkJRVEJDTERCQ1FVTjRRaXhaUVVGWkxEQkNRVU5rTERCQ1FVRXdRaXgxUWtGRGVFSXNXVUZCV1N4MVFrRkRaQ3hWUVVGWExFbEJUV3BDTEZGQlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TkMweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBRMjl0Y0c5dVpXNTBSVzUyYVhKdmJtMWxiblJjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCcGJuWmhjbWxoYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm5aaGNtbGhiblJjSWlrN1hHNWNiblpoY2lCcGJtcGxZM1JsWkNBOUlHWmhiSE5sTzF4dVhHNTJZWElnVW1WaFkzUkRiMjF3YjI1bGJuUkZiblpwY205dWJXVnVkQ0E5SUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVDNCMGFXOXVZV3hzZVNCcGJtcGxZM1JoWW14bElHVnVkbWx5YjI1dFpXNTBJR1JsY0dWdVpHVnVkQ0JqYkdWaGJuVndJR2h2YjJzdUlDaHpaWEoyWlhJZ2RuTXVYRzRnSUNBcUlHSnliM2R6WlhJZ1pYUmpLUzRnUlhoaGJYQnNaVG9nUVNCaWNtOTNjMlZ5SUhONWMzUmxiU0JqWVdOb1pYTWdSRTlOSUc1dlpHVnpJR0poYzJWa0lHOXVJR052YlhCdmJtVnVkRnh1SUNBZ0tpQkpSQ0JoYm1RZ2JYVnpkQ0J5WlcxdmRtVWdkR2hoZENCallXTm9aU0JsYm5SeWVTQjNhR1Z1SUhSb2FYTWdhVzV6ZEdGdVkyVWdhWE1nZFc1dGIzVnVkR1ZrTGx4dUlDQWdLaTljYmlBZ2RXNXRiM1Z1ZEVsRVJuSnZiVVZ1ZG1seWIyNXRaVzUwT2lCdWRXeHNMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlBjSFJwYjI1aGJHeDVJR2x1YW1WamRHRmliR1VnYUc5dmF5Qm1iM0lnYzNkaGNIQnBibWNnYjNWMElHMXZkVzUwSUdsdFlXZGxjeUJwYmlCMGFHVWdiV2xrWkd4bElHOW1YRzRnSUNBcUlIUm9aU0IwY21WbExseHVJQ0FnS2k5Y2JpQWdjbVZ3YkdGalpVNXZaR1ZYYVhSb1RXRnlhM1Z3UW5sSlJEb2diblZzYkN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVDNCMGFXOXVZV3hzZVNCcGJtcGxZM1JoWW14bElHaHZiMnNnWm05eUlIQnliMk5sYzNOcGJtY2dZU0J4ZFdWMVpTQnZaaUJqYUdsc1pDQjFjR1JoZEdWekxpQlhhV3hzWEc0Z0lDQXFJR3hoZEdWeUlHMXZkbVVnYVc1MGJ5Qk5kV3gwYVVOb2FXeGtRMjl0Y0c5dVpXNTBjeTVjYmlBZ0lDb3ZYRzRnSUhCeWIyTmxjM05EYUdsc1pISmxibFZ3WkdGMFpYTTZJRzUxYkd3c1hHNWNiaUFnYVc1cVpXTjBhVzl1T2lCN1hHNGdJQ0FnYVc1cVpXTjBSVzUyYVhKdmJtMWxiblE2SUdaMWJtTjBhVzl1S0dWdWRtbHliMjV0Wlc1MEtTQjdYRzRnSUNBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ0lDQWhhVzVxWldOMFpXUXNYRzRnSUNBZ0lDQWdJQ2RTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWREb2dhVzVxWldOMFJXNTJhWEp2Ym0xbGJuUW9LU0JqWVc0Z2IyNXNlU0JpWlNCallXeHNaV1FnYjI1alpTNG5YRzRnSUNBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0NGcGJtcGxZM1JsWkNrcE8xeHVJQ0FnSUNBZ1VtVmhZM1JEYjIxd2IyNWxiblJGYm5acGNtOXViV1Z1ZEM1MWJtMXZkVzUwU1VSR2NtOXRSVzUyYVhKdmJtMWxiblFnUFZ4dUlDQWdJQ0FnSUNCbGJuWnBjbTl1YldWdWRDNTFibTF2ZFc1MFNVUkdjbTl0Ulc1MmFYSnZibTFsYm5RN1hHNGdJQ0FnSUNCU1pXRmpkRU52YlhCdmJtVnVkRVZ1ZG1seWIyNXRaVzUwTG5KbGNHeGhZMlZPYjJSbFYybDBhRTFoY210MWNFSjVTVVFnUFZ4dUlDQWdJQ0FnSUNCbGJuWnBjbTl1YldWdWRDNXlaWEJzWVdObFRtOWtaVmRwZEdoTllYSnJkWEJDZVVsRU8xeHVJQ0FnSUNBZ1VtVmhZM1JEYjIxd2IyNWxiblJGYm5acGNtOXViV1Z1ZEM1d2NtOWpaWE56UTJocGJHUnlaVzVWY0dSaGRHVnpJRDFjYmlBZ0lDQWdJQ0FnWlc1MmFYSnZibTFsYm5RdWNISnZZMlZ6YzBOb2FXeGtjbVZ1VlhCa1lYUmxjenRjYmlBZ0lDQWdJR2x1YW1WamRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRFTnZiWEJ2Ym1WdWRFVnVkbWx5YjI1dFpXNTBPMXh1SWwxOSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KXt2YXIgb3duZXI9Y29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXJ8fG51bGw7aWYob3duZXIpe3ZhciBuYW1lPW93bmVyLmdldE5hbWUoKTtpZihuYW1lKXJldHVyblwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIituYW1lK1wiYC5cIn1yZXR1cm5cIlwifXZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50PXJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIiksUmVhY3RDb250ZXh0PXJlcXVpcmUoXCIuL1JlYWN0Q29udGV4dFwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLFJlYWN0RWxlbWVudFZhbGlkYXRvcj1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3JcIiksUmVhY3RJbnN0YW5jZU1hcD1yZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpLFJlYWN0TGlmZUN5Y2xlPXJlcXVpcmUoXCIuL1JlYWN0TGlmZUN5Y2xlXCIpLFJlYWN0TmF0aXZlQ29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpLFJlYWN0UGVyZj1yZXF1aXJlKFwiLi9SZWFjdFBlcmZcIiksUmVhY3RQcm9wVHlwZUxvY2F0aW9ucz1yZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCIpLFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzPXJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpLFJlYWN0UmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIiksUmVhY3RVcGRhdGVzPXJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKSxhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSxlbXB0eU9iamVjdD1yZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50PXJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSxuZXh0TW91bnRJRD0xLFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW49e2NvbnN0cnVjdDpmdW5jdGlvbihlbGVtZW50KXt0aGlzLl9jdXJyZW50RWxlbWVudD1lbGVtZW50LHRoaXMuX3Jvb3ROb2RlSUQ9bnVsbCx0aGlzLl9pbnN0YW5jZT1udWxsLHRoaXMuX3BlbmRpbmdFbGVtZW50PW51bGwsdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU9bnVsbCx0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlPSExLHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZT0hMSx0aGlzLl9yZW5kZXJlZENvbXBvbmVudD1udWxsLHRoaXMuX2NvbnRleHQ9bnVsbCx0aGlzLl9tb3VudE9yZGVyPTAsdGhpcy5faXNUb3BMZXZlbD0hMSx0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzPW51bGx9LG1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKHJvb3RJRCx0cmFuc2FjdGlvbixjb250ZXh0KXt0aGlzLl9jb250ZXh0PWNvbnRleHQsdGhpcy5fbW91bnRPcmRlcj1uZXh0TW91bnRJRCsrLHRoaXMuX3Jvb3ROb2RlSUQ9cm9vdElEO3ZhciBwdWJsaWNQcm9wcz10aGlzLl9wcm9jZXNzUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpLHB1YmxpY0NvbnRleHQ9dGhpcy5fcHJvY2Vzc0NvbnRleHQodGhpcy5fY3VycmVudEVsZW1lbnQuX2NvbnRleHQpLENvbXBvbmVudD1SZWFjdE5hdGl2ZUNvbXBvbmVudC5nZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQpLGluc3Q9bmV3IENvbXBvbmVudChwdWJsaWNQcm9wcyxwdWJsaWNDb250ZXh0KTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKG51bGwhPWluc3QucmVuZGVyLFwiJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgIGluIHlvdXIgY29tcG9uZW50IG9yIHlvdSBtYXkgaGF2ZSBhY2NpZGVudGFsbHkgdHJpZWQgdG8gcmVuZGVyIGFuIGVsZW1lbnQgd2hvc2UgdHlwZSBpcyBhIGZ1bmN0aW9uIHRoYXQgaXNuJ3QgYSBSZWFjdCBjb21wb25lbnQuXCIsQ29tcG9uZW50LmRpc3BsYXlOYW1lfHxDb21wb25lbnQubmFtZXx8XCJDb21wb25lbnRcIik6bnVsbCksaW5zdC5wcm9wcz1wdWJsaWNQcm9wcyxpbnN0LmNvbnRleHQ9cHVibGljQ29udGV4dCxpbnN0LnJlZnM9ZW1wdHlPYmplY3QsdGhpcy5faW5zdGFuY2U9aW5zdCxSZWFjdEluc3RhbmNlTWFwLnNldChpbnN0LHRoaXMpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnRoaXMuX3dhcm5JZkNvbnRleHRzRGlmZmVyKHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0LGNvbnRleHQpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoIWluc3QuZ2V0SW5pdGlhbFN0YXRlfHxpbnN0LmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcImdldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiBUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuIERpZCB5b3UgbWVhbiB0byBkZWZpbmUgYSBzdGF0ZSBwcm9wZXJ0eSBpbnN0ZWFkP1wiLHRoaXMuZ2V0TmFtZSgpfHxcImEgY29tcG9uZW50XCIpOm51bGwsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCFpbnN0LmdldERlZmF1bHRQcm9wc3x8aW5zdC5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsXCJnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLlwiLHRoaXMuZ2V0TmFtZSgpfHxcImEgY29tcG9uZW50XCIpOm51bGwsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCFpbnN0LnByb3BUeXBlcyxcInByb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBwcm9wVHlwZXMgaW5zdGVhZC5cIix0aGlzLmdldE5hbWUoKXx8XCJhIGNvbXBvbmVudFwiKTpudWxsLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghaW5zdC5jb250ZXh0VHlwZXMsXCJjb250ZXh0VHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuXCIsdGhpcy5nZXROYW1lKCl8fFwiYSBjb21wb25lbnRcIik6bnVsbCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoXCJmdW5jdGlvblwiIT10eXBlb2YgaW5zdC5jb21wb25lbnRTaG91bGRVcGRhdGUsXCIlcyBoYXMgYSBtZXRob2QgY2FsbGVkIGNvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/IFRoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS5cIix0aGlzLmdldE5hbWUoKXx8XCJBIGNvbXBvbmVudFwiKTpudWxsKTt2YXIgaW5pdGlhbFN0YXRlPWluc3Quc3RhdGU7dm9pZCAwPT09aW5pdGlhbFN0YXRlJiYoaW5zdC5zdGF0ZT1pbml0aWFsU3RhdGU9bnVsbCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoXCJvYmplY3RcIj09dHlwZW9mIGluaXRpYWxTdGF0ZSYmIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSxcIiVzLnN0YXRlOiBtdXN0IGJlIHNldCB0byBhbiBvYmplY3Qgb3IgbnVsbFwiLHRoaXMuZ2V0TmFtZSgpfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpOmludmFyaWFudChcIm9iamVjdFwiPT10eXBlb2YgaW5pdGlhbFN0YXRlJiYhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSx0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZT1udWxsLHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGU9ITEsdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlPSExO3ZhciBjaGlsZENvbnRleHQscmVuZGVyZWRFbGVtZW50LHByZXZpb3VzbHlNb3VudGluZz1SZWFjdExpZmVDeWNsZS5jdXJyZW50bHlNb3VudGluZ0luc3RhbmNlO1JlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2U9dGhpczt0cnl7aW5zdC5jb21wb25lbnRXaWxsTW91bnQmJihpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpLHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlJiYoaW5zdC5zdGF0ZT10aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKGluc3QucHJvcHMsaW5zdC5jb250ZXh0KSkpLGNoaWxkQ29udGV4dD10aGlzLl9nZXRWYWxpZGF0ZWRDaGlsZENvbnRleHQoY29udGV4dCkscmVuZGVyZWRFbGVtZW50PXRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudChjaGlsZENvbnRleHQpfWZpbmFsbHl7UmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZT1wcmV2aW91c2x5TW91bnRpbmd9dGhpcy5fcmVuZGVyZWRDb21wb25lbnQ9dGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChyZW5kZXJlZEVsZW1lbnQsdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSk7dmFyIG1hcmt1cD1SZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQscm9vdElELHRyYW5zYWN0aW9uLHRoaXMuX21lcmdlQ2hpbGRDb250ZXh0KGNvbnRleHQsY2hpbGRDb250ZXh0KSk7cmV0dXJuIGluc3QuY29tcG9uZW50RGlkTW91bnQmJnRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5zdC5jb21wb25lbnREaWRNb3VudCxpbnN0KSxtYXJrdXB9LHVubW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oKXt2YXIgaW5zdD10aGlzLl9pbnN0YW5jZTtpZihpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KXt2YXIgcHJldmlvdXNseVVubW91bnRpbmc9UmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlO1JlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZT10aGlzO3RyeXtpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCl9ZmluYWxseXtSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2U9cHJldmlvdXNseVVubW91bnRpbmd9fVJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KSx0aGlzLl9yZW5kZXJlZENvbXBvbmVudD1udWxsLHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlPW51bGwsdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZT0hMSx0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGU9ITEsdGhpcy5fcGVuZGluZ0NhbGxiYWNrcz1udWxsLHRoaXMuX3BlbmRpbmdFbGVtZW50PW51bGwsdGhpcy5fY29udGV4dD1udWxsLHRoaXMuX3Jvb3ROb2RlSUQ9bnVsbCxSZWFjdEluc3RhbmNlTWFwLnJlbW92ZShpbnN0KX0sX3NldFByb3BzSW50ZXJuYWw6ZnVuY3Rpb24ocGFydGlhbFByb3BzLGNhbGxiYWNrKXt2YXIgZWxlbWVudD10aGlzLl9wZW5kaW5nRWxlbWVudHx8dGhpcy5fY3VycmVudEVsZW1lbnQ7dGhpcy5fcGVuZGluZ0VsZW1lbnQ9UmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKGVsZW1lbnQsYXNzaWduKHt9LGVsZW1lbnQucHJvcHMscGFydGlhbFByb3BzKSksUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUodGhpcyxjYWxsYmFjayl9LF9tYXNrQ29udGV4dDpmdW5jdGlvbihjb250ZXh0KXt2YXIgbWFza2VkQ29udGV4dD1udWxsO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlKXJldHVybiBlbXB0eU9iamVjdDt2YXIgY29udGV4dFR5cGVzPXRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUuY29udGV4dFR5cGVzO2lmKCFjb250ZXh0VHlwZXMpcmV0dXJuIGVtcHR5T2JqZWN0O21hc2tlZENvbnRleHQ9e307Zm9yKHZhciBjb250ZXh0TmFtZSBpbiBjb250ZXh0VHlwZXMpbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV09Y29udGV4dFtjb250ZXh0TmFtZV07cmV0dXJuIG1hc2tlZENvbnRleHR9LF9wcm9jZXNzQ29udGV4dDpmdW5jdGlvbihjb250ZXh0KXt2YXIgbWFza2VkQ29udGV4dD10aGlzLl9tYXNrQ29udGV4dChjb250ZXh0KTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgQ29tcG9uZW50PVJlYWN0TmF0aXZlQ29tcG9uZW50LmdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudCk7Q29tcG9uZW50LmNvbnRleHRUeXBlcyYmdGhpcy5fY2hlY2tQcm9wVHlwZXMoQ29tcG9uZW50LmNvbnRleHRUeXBlcyxtYXNrZWRDb250ZXh0LFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dCl9cmV0dXJuIG1hc2tlZENvbnRleHR9LF9nZXRWYWxpZGF0ZWRDaGlsZENvbnRleHQ6ZnVuY3Rpb24oY3VycmVudENvbnRleHQpe3ZhciBpbnN0PXRoaXMuX2luc3RhbmNlLGNoaWxkQ29udGV4dD1pbnN0LmdldENoaWxkQ29udGV4dCYmaW5zdC5nZXRDaGlsZENvbnRleHQoKTtpZihjaGlsZENvbnRleHQpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwib2JqZWN0XCI9PXR5cGVvZiBpbnN0LmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFwiJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byB1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuXCIsdGhpcy5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik6aW52YXJpYW50KFwib2JqZWN0XCI9PXR5cGVvZiBpbnN0LmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ0aGlzLl9jaGVja1Byb3BUeXBlcyhpbnN0LmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLGNoaWxkQ29udGV4dCxSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dCk7Zm9yKHZhciBuYW1lIGluIGNoaWxkQ29udGV4dClcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChuYW1lIGluIGluc3QuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsJyVzLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXCIlc1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicsdGhpcy5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIixuYW1lKTppbnZhcmlhbnQobmFtZSBpbiBpbnN0LmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzKTtyZXR1cm4gY2hpbGRDb250ZXh0fXJldHVybiBudWxsfSxfbWVyZ2VDaGlsZENvbnRleHQ6ZnVuY3Rpb24oY3VycmVudENvbnRleHQsY2hpbGRDb250ZXh0KXtyZXR1cm4gY2hpbGRDb250ZXh0P2Fzc2lnbih7fSxjdXJyZW50Q29udGV4dCxjaGlsZENvbnRleHQpOmN1cnJlbnRDb250ZXh0fSxfcHJvY2Vzc1Byb3BzOmZ1bmN0aW9uKG5ld1Byb3BzKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgQ29tcG9uZW50PVJlYWN0TmF0aXZlQ29tcG9uZW50LmdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudCk7Q29tcG9uZW50LnByb3BUeXBlcyYmdGhpcy5fY2hlY2tQcm9wVHlwZXMoQ29tcG9uZW50LnByb3BUeXBlcyxuZXdQcm9wcyxSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApfXJldHVybiBuZXdQcm9wc30sX2NoZWNrUHJvcFR5cGVzOmZ1bmN0aW9uKHByb3BUeXBlcyxwcm9wcyxsb2NhdGlvbil7dmFyIGNvbXBvbmVudE5hbWU9dGhpcy5nZXROYW1lKCk7Zm9yKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpaWYocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSl7dmFyIGVycm9yO3RyeXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChcImZ1bmN0aW9uXCI9PXR5cGVvZiBwcm9wVHlwZXNbcHJvcE5hbWVdLFwiJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSBSZWFjdC5Qcm9wVHlwZXMuXCIsY29tcG9uZW50TmFtZXx8XCJSZWFjdCBjbGFzc1wiLFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSxwcm9wTmFtZSk6aW52YXJpYW50KFwiZnVuY3Rpb25cIj09dHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0pLGVycm9yPXByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMscHJvcE5hbWUsY29tcG9uZW50TmFtZSxsb2NhdGlvbil9Y2F0Y2goZXgpe2Vycm9yPWV4fWlmKGVycm9yIGluc3RhbmNlb2YgRXJyb3Ipe3ZhciBhZGRlbmR1bT1nZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0odGhpcyk7bG9jYXRpb249PT1SZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3A/XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwiRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJXMlc1wiLGVycm9yLm1lc3NhZ2UsYWRkZW5kdW0pOm51bGw6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwiRmFpbGVkIENvbnRleHQgVHlwZXM6ICVzJXNcIixlcnJvci5tZXNzYWdlLGFkZGVuZHVtKTpudWxsfX19LHJlY2VpdmVDb21wb25lbnQ6ZnVuY3Rpb24obmV4dEVsZW1lbnQsdHJhbnNhY3Rpb24sbmV4dENvbnRleHQpe3ZhciBwcmV2RWxlbWVudD10aGlzLl9jdXJyZW50RWxlbWVudCxwcmV2Q29udGV4dD10aGlzLl9jb250ZXh0O3RoaXMuX3BlbmRpbmdFbGVtZW50PW51bGwsdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24scHJldkVsZW1lbnQsbmV4dEVsZW1lbnQscHJldkNvbnRleHQsbmV4dENvbnRleHQpfSxwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6ZnVuY3Rpb24odHJhbnNhY3Rpb24pe251bGwhPXRoaXMuX3BlbmRpbmdFbGVtZW50JiZSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudCh0aGlzLHRoaXMuX3BlbmRpbmdFbGVtZW50fHx0aGlzLl9jdXJyZW50RWxlbWVudCx0cmFuc2FjdGlvbix0aGlzLl9jb250ZXh0KSwobnVsbCE9PXRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlfHx0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyh0aGlzLl9jdXJyZW50RWxlbWVudCksdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sdGhpcy5fY3VycmVudEVsZW1lbnQsdGhpcy5fY3VycmVudEVsZW1lbnQsdGhpcy5fY29udGV4dCx0aGlzLl9jb250ZXh0KSl9LF93YXJuSWZDb250ZXh0c0RpZmZlcjpmdW5jdGlvbihvd25lckJhc2VkQ29udGV4dCxwYXJlbnRCYXNlZENvbnRleHQpe293bmVyQmFzZWRDb250ZXh0PXRoaXMuX21hc2tDb250ZXh0KG93bmVyQmFzZWRDb250ZXh0KSxwYXJlbnRCYXNlZENvbnRleHQ9dGhpcy5fbWFza0NvbnRleHQocGFyZW50QmFzZWRDb250ZXh0KTtmb3IodmFyIHBhcmVudEtleXM9T2JqZWN0LmtleXMocGFyZW50QmFzZWRDb250ZXh0KS5zb3J0KCksZGlzcGxheU5hbWU9dGhpcy5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIixpPTA7aTxwYXJlbnRLZXlzLmxlbmd0aDtpKyspe3ZhciBrZXk9cGFyZW50S2V5c1tpXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcob3duZXJCYXNlZENvbnRleHRba2V5XT09PXBhcmVudEJhc2VkQ29udGV4dFtrZXldLFwib3duZXItYmFzZWQgYW5kIHBhcmVudC1iYXNlZCBjb250ZXh0cyBkaWZmZXIgKHZhbHVlczogYCVzYCB2cyBgJXNgKSBmb3Iga2V5ICglcykgd2hpbGUgbW91bnRpbmcgJXMgKHNlZTogaHR0cDovL2ZiLm1lL3JlYWN0LWNvbnRleHQtYnktcGFyZW50KVwiLG93bmVyQmFzZWRDb250ZXh0W2tleV0scGFyZW50QmFzZWRDb250ZXh0W2tleV0sa2V5LGRpc3BsYXlOYW1lKTpudWxsfX0sdXBkYXRlQ29tcG9uZW50OmZ1bmN0aW9uKHRyYW5zYWN0aW9uLHByZXZQYXJlbnRFbGVtZW50LG5leHRQYXJlbnRFbGVtZW50LHByZXZVbm1hc2tlZENvbnRleHQsbmV4dFVubWFza2VkQ29udGV4dCl7dmFyIGluc3Q9dGhpcy5faW5zdGFuY2UsbmV4dENvbnRleHQ9aW5zdC5jb250ZXh0LG5leHRQcm9wcz1pbnN0LnByb3BzO3ByZXZQYXJlbnRFbGVtZW50IT09bmV4dFBhcmVudEVsZW1lbnQmJihuZXh0Q29udGV4dD10aGlzLl9wcm9jZXNzQ29udGV4dChuZXh0UGFyZW50RWxlbWVudC5fY29udGV4dCksbmV4dFByb3BzPXRoaXMuX3Byb2Nlc3NQcm9wcyhuZXh0UGFyZW50RWxlbWVudC5wcm9wcyksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbnVsbCE9bmV4dFVubWFza2VkQ29udGV4dCYmdGhpcy5fd2FybklmQ29udGV4dHNEaWZmZXIobmV4dFBhcmVudEVsZW1lbnQuX2NvbnRleHQsbmV4dFVubWFza2VkQ29udGV4dCksaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLG5leHRDb250ZXh0KSk7dmFyIG5leHRTdGF0ZT10aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKG5leHRQcm9wcyxuZXh0Q29udGV4dCksc2hvdWxkVXBkYXRlPXRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZXx8IWluc3Quc2hvdWxkQ29tcG9uZW50VXBkYXRlfHxpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsbmV4dFN0YXRlLG5leHRDb250ZXh0KTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzaG91bGRVcGRhdGUsXCIlcy5zaG91bGRDb21wb25lbnRVcGRhdGUoKTogUmV0dXJuZWQgdW5kZWZpbmVkIGluc3RlYWQgb2YgYSBib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuXCIsdGhpcy5nZXROYW1lKCl8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik6bnVsbCksc2hvdWxkVXBkYXRlPyh0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGU9ITEsdGhpcy5fcGVyZm9ybUNvbXBvbmVudFVwZGF0ZShuZXh0UGFyZW50RWxlbWVudCxuZXh0UHJvcHMsbmV4dFN0YXRlLG5leHRDb250ZXh0LHRyYW5zYWN0aW9uLG5leHRVbm1hc2tlZENvbnRleHQpKToodGhpcy5fY3VycmVudEVsZW1lbnQ9bmV4dFBhcmVudEVsZW1lbnQsdGhpcy5fY29udGV4dD1uZXh0VW5tYXNrZWRDb250ZXh0LGluc3QucHJvcHM9bmV4dFByb3BzLGluc3Quc3RhdGU9bmV4dFN0YXRlLGluc3QuY29udGV4dD1uZXh0Q29udGV4dCl9LF9wcm9jZXNzUGVuZGluZ1N0YXRlOmZ1bmN0aW9uKHByb3BzLGNvbnRleHQpe3ZhciBpbnN0PXRoaXMuX2luc3RhbmNlLHF1ZXVlPXRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlLHJlcGxhY2U9dGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZTtpZih0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlPSExLHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlPW51bGwsIXF1ZXVlKXJldHVybiBpbnN0LnN0YXRlO2lmKHJlcGxhY2UmJjE9PT1xdWV1ZS5sZW5ndGgpcmV0dXJuIHF1ZXVlWzBdO2Zvcih2YXIgbmV4dFN0YXRlPWFzc2lnbih7fSxyZXBsYWNlP3F1ZXVlWzBdOmluc3Quc3RhdGUpLGk9cmVwbGFjZT8xOjA7aTxxdWV1ZS5sZW5ndGg7aSsrKXt2YXIgcGFydGlhbD1xdWV1ZVtpXTthc3NpZ24obmV4dFN0YXRlLFwiZnVuY3Rpb25cIj09dHlwZW9mIHBhcnRpYWw/cGFydGlhbC5jYWxsKGluc3QsbmV4dFN0YXRlLHByb3BzLGNvbnRleHQpOnBhcnRpYWwpfXJldHVybiBuZXh0U3RhdGV9LF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOmZ1bmN0aW9uKG5leHRFbGVtZW50LG5leHRQcm9wcyxuZXh0U3RhdGUsbmV4dENvbnRleHQsdHJhbnNhY3Rpb24sdW5tYXNrZWRDb250ZXh0KXt2YXIgaW5zdD10aGlzLl9pbnN0YW5jZSxwcmV2UHJvcHM9aW5zdC5wcm9wcyxwcmV2U3RhdGU9aW5zdC5zdGF0ZSxwcmV2Q29udGV4dD1pbnN0LmNvbnRleHQ7aW5zdC5jb21wb25lbnRXaWxsVXBkYXRlJiZpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLG5leHRTdGF0ZSxuZXh0Q29udGV4dCksdGhpcy5fY3VycmVudEVsZW1lbnQ9bmV4dEVsZW1lbnQsdGhpcy5fY29udGV4dD11bm1hc2tlZENvbnRleHQsaW5zdC5wcm9wcz1uZXh0UHJvcHMsaW5zdC5zdGF0ZT1uZXh0U3RhdGUsaW5zdC5jb250ZXh0PW5leHRDb250ZXh0LHRoaXMuX3VwZGF0ZVJlbmRlcmVkQ29tcG9uZW50KHRyYW5zYWN0aW9uLHVubWFza2VkQ29udGV4dCksaW5zdC5jb21wb25lbnREaWRVcGRhdGUmJnRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5zdC5jb21wb25lbnREaWRVcGRhdGUuYmluZChpbnN0LHByZXZQcm9wcyxwcmV2U3RhdGUscHJldkNvbnRleHQpLGluc3QpfSxfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6ZnVuY3Rpb24odHJhbnNhY3Rpb24sY29udGV4dCl7dmFyIHByZXZDb21wb25lbnRJbnN0YW5jZT10aGlzLl9yZW5kZXJlZENvbXBvbmVudCxwcmV2UmVuZGVyZWRFbGVtZW50PXByZXZDb21wb25lbnRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQsY2hpbGRDb250ZXh0PXRoaXMuX2dldFZhbGlkYXRlZENoaWxkQ29udGV4dCgpLG5leHRSZW5kZXJlZEVsZW1lbnQ9dGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KGNoaWxkQ29udGV4dCk7aWYoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCxuZXh0UmVuZGVyZWRFbGVtZW50KSlSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChwcmV2Q29tcG9uZW50SW5zdGFuY2UsbmV4dFJlbmRlcmVkRWxlbWVudCx0cmFuc2FjdGlvbix0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LGNoaWxkQ29udGV4dCkpO2Vsc2V7dmFyIHRoaXNJRD10aGlzLl9yb290Tm9kZUlELHByZXZDb21wb25lbnRJRD1wcmV2Q29tcG9uZW50SW5zdGFuY2UuX3Jvb3ROb2RlSUQ7UmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNvbXBvbmVudEluc3RhbmNlKSx0aGlzLl9yZW5kZXJlZENvbXBvbmVudD10aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRSZW5kZXJlZEVsZW1lbnQsdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSk7dmFyIG5leHRNYXJrdXA9UmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LHRoaXNJRCx0cmFuc2FjdGlvbix0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LGNoaWxkQ29udGV4dCkpO3RoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQocHJldkNvbXBvbmVudElELG5leHRNYXJrdXApfX0sX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6ZnVuY3Rpb24ocHJldkNvbXBvbmVudElELG5leHRNYXJrdXApe1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRChwcmV2Q29tcG9uZW50SUQsbmV4dE1hcmt1cCl9LF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQ6ZnVuY3Rpb24oKXt2YXIgaW5zdD10aGlzLl9pbnN0YW5jZSxyZW5kZXJlZENvbXBvbmVudD1pbnN0LnJlbmRlcigpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCI9PXR5cGVvZiByZW5kZXJlZENvbXBvbmVudCYmaW5zdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uJiYocmVuZGVyZWRDb21wb25lbnQ9bnVsbCkscmVuZGVyZWRDb21wb25lbnR9LF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQ6ZnVuY3Rpb24oY2hpbGRDb250ZXh0KXt2YXIgcmVuZGVyZWRDb21wb25lbnQscHJldmlvdXNDb250ZXh0PVJlYWN0Q29udGV4dC5jdXJyZW50O1JlYWN0Q29udGV4dC5jdXJyZW50PXRoaXMuX21lcmdlQ2hpbGRDb250ZXh0KHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0LGNoaWxkQ29udGV4dCksUmVhY3RDdXJyZW50T3duZXIuY3VycmVudD10aGlzO3RyeXtyZW5kZXJlZENvbXBvbmVudD10aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQoKX1maW5hbGx5e1JlYWN0Q29udGV4dC5jdXJyZW50PXByZXZpb3VzQ29udGV4dCxSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50PW51bGx9cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQobnVsbD09PXJlbmRlcmVkQ29tcG9uZW50fHxyZW5kZXJlZENvbXBvbmVudD09PSExfHxSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpLFwiJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3RDb21wb25lbnQgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlIHJldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC5cIix0aGlzLmdldE5hbWUoKXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTppbnZhcmlhbnQobnVsbD09PXJlbmRlcmVkQ29tcG9uZW50fHxyZW5kZXJlZENvbXBvbmVudD09PSExfHxSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpKSxyZW5kZXJlZENvbXBvbmVudH0sYXR0YWNoUmVmOmZ1bmN0aW9uKHJlZixjb21wb25lbnQpe3ZhciBpbnN0PXRoaXMuZ2V0UHVibGljSW5zdGFuY2UoKSxyZWZzPWluc3QucmVmcz09PWVtcHR5T2JqZWN0P2luc3QucmVmcz17fTppbnN0LnJlZnM7cmVmc1tyZWZdPWNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpfSxkZXRhY2hSZWY6ZnVuY3Rpb24ocmVmKXt2YXIgcmVmcz10aGlzLmdldFB1YmxpY0luc3RhbmNlKCkucmVmcztkZWxldGUgcmVmc1tyZWZdfSxnZXROYW1lOmZ1bmN0aW9uKCl7dmFyIHR5cGU9dGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSxjb25zdHJ1Y3Rvcj10aGlzLl9pbnN0YW5jZSYmdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7cmV0dXJuIHR5cGUuZGlzcGxheU5hbWV8fGNvbnN0cnVjdG9yJiZjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8dHlwZS5uYW1lfHxjb25zdHJ1Y3RvciYmY29uc3RydWN0b3IubmFtZXx8bnVsbH0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faW5zdGFuY2V9LF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50Om51bGx9O1JlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluLFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIix7bW91bnRDb21wb25lbnQ6XCJtb3VudENvbXBvbmVudFwiLHVwZGF0ZUNvbXBvbmVudDpcInVwZGF0ZUNvbXBvbmVudFwiLF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQ6XCJfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50XCJ9KTt2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQ9e01peGluOlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW59O21vZHVsZS5leHBvcnRzPVJlYWN0Q29tcG9zaXRlQ29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVZkQkxGbEJjMEpCTEZOQlFWTXNOa0pCUVRSQ0xGZEJRMjVETEVkQlFVa3NUMEZCVVN4VlFVRlZMR2RDUVVGblFpeFJRVUZWTEVsQlEyaEVMRWxCUVVrc1RVRkJUeXhEUVVOVUxFZEJRVWtzVFVGQlR5eE5RVUZOTEZOQlEycENMRWxCUVVrc1MwRkRSaXhOUVVGUExHZERRVUZyUXl4TFFVRlBMRXRCUjNCRUxFMUJRVThzUjBFMVFsUXNSMEZCU1N3eVFrRkJORUlzVVVGQlVTd3JRa0ZEY0VNc1lVRkJaU3hSUVVGUkxHdENRVU4yUWl4clFrRkJiMElzVVVGQlVTeDFRa0ZETlVJc1lVRkJaU3hSUVVGUkxHdENRVU4yUWl4elFrRkJkMElzVVVGQlVTd3lRa0ZEYUVNc2FVSkJRVzFDTEZGQlFWRXNjMEpCUXpOQ0xHVkJRV2xDTEZGQlFWRXNiMEpCUTNwQ0xIRkNRVUYxUWl4UlFVRlJMREJDUVVNdlFpeFZRVUZaTEZGQlFWRXNaVUZEY0VJc2RVSkJRWGxDTEZGQlFWRXNORUpCUTJwRExESkNRVUUyUWl4UlFVRlJMR2REUVVOeVF5eG5Ra0ZCYTBJc1VVRkJVU3h4UWtGRE1VSXNZVUZCWlN4UlFVRlJMR3RDUVVWMlFpeFBRVUZUTEZGQlFWRXNiVUpCUTJwQ0xGbEJRV01zVVVGQlVTeHBRa0ZEZEVJc1ZVRkJXU3hSUVVGUkxHVkJRM0JDTERKQ1FVRTJRaXhSUVVGUkxHZERRVU55UXl4UlFVRlZMRkZCUVZFc1lVRTRRMnhDTEZsQlFXTXNSVUZMWkN3NFFrRlRSaXhWUVVGWExGTkJRVk1zVTBGRGJFSXNTMEZCU3l4blFrRkJhMElzVVVGRGRrSXNTMEZCU3l4WlFVRmpMRXRCUTI1Q0xFdEJRVXNzVlVGQldTeExRVWRxUWl4TFFVRkxMR2RDUVVGclFpeExRVU4yUWl4TFFVRkxMRzFDUVVGeFFpeExRVU14UWl4TFFVRkxMSE5DUVVGMVFpeEZRVU0xUWl4TFFVRkxMSEZDUVVGelFpeEZRVVV6UWl4TFFVRkxMRzFDUVVGeFFpeExRVVV4UWl4TFFVRkxMRk5CUVZjc1MwRkRhRUlzUzBGQlN5eFpRVUZqTEVWQlEyNUNMRXRCUVVzc1lVRkJZeXhGUVVkdVFpeExRVUZMTEd0Q1FVRnZRaXhOUVZrelFpeGxRVUZuUWl4VFFVRlRMRTlCUVZFc1dVRkJZU3hUUVVNMVF5eExRVUZMTEZOQlFWY3NVVUZEYUVJc1MwRkJTeXhaUVVGakxHTkJRMjVDTEV0QlFVc3NXVUZCWXl4TlFVVnVRaXhKUVVGSkxHRkJRV01zUzBGQlN5eGpRVUZqTEV0QlFVc3NaMEpCUVdkQ0xFOUJRM1JFTEdOQlFXZENMRXRCUVVzc1owSkJRV2RDTEV0QlFVc3NaMEpCUVdkQ0xGVkJSVEZFTEZWQlFWa3NjVUpCUVhGQ0xEUkNRVU51UXl4TFFVRkxMR2xDUVVsSUxFdEJRVThzUjBGQlNTeFhRVUZWTEZsQlFXRXNZMEZGYkVNc1owSkJRV2xDTEZGQlFWRXNTVUZCU1N4WFFVYzVRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4UlFVTjRRaXhOUVVGbUxFdEJRVXNzVDBGRFRDeHRVRUZKUVN4VlFVRlZMR0ZCUVdVc1ZVRkJWU3hOUVVGUkxHRkJRM3BETEUxQlMwNHNTMEZCU3l4TlFVRlJMRmxCUTJJc1MwRkJTeXhSUVVGVkxHTkJRMllzUzBGQlN5eExRVUZQTEZsQlJWb3NTMEZCU3l4VlFVRlpMRXRCUjJwQ0xHbENRVUZwUWl4SlFVRkpMRXRCUVUwc1RVRkZka0lzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRlZCUXk5Q0xFdEJRVXNzYzBKQlFYTkNMRXRCUVVzc1owSkJRV2RDTEZOQlFWVXNVMEZIZUVRc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZkQlNUbENMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZOQlEzUkRMRXRCUVVzc2FVSkJRMDRzUzBGQlN5eG5Ra0ZCWjBJc2NVSkJRM0pDTEc5TVFVZEJMRXRCUVVzc1YwRkJZU3hsUVVOb1FpeExRVU5JTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGTkJRM1JETEV0QlFVc3NhVUpCUTA0c1MwRkJTeXhuUWtGQlowSXNjVUpCUTNKQ0xIbE1RVWRCTEV0QlFVc3NWMEZCWVN4bFFVTm9RaXhMUVVOSUxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRk5CUTNSRExFdEJRVXNzVlVGRFRpd3dSMEZGUVN4TFFVRkxMRmRCUVdFc1pVRkRhRUlzUzBGRFNDeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhUUVVOMFF5eExRVUZMTEdGQlEwNHNaMGhCUlVFc1MwRkJTeXhYUVVGaExHVkJRMmhDTEV0QlEwZ3NaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVVVGRFJDeHJRa0ZCTDBJc1RVRkJTeXh6UWtGRFdpdzRTMEZKUXl4TFFVRkxMRmRCUVdFc1pVRkRha0lzUzBGSFRpeEpRVUZKTEdOQlFXVXNTMEZCU3l4TFFVTklMRlZCUVdwQ0xHVkJRMFlzUzBGQlN5eE5RVUZSTEdGQlFXVXNUVUZGTjBJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEWml4blFrRkJha0lzWjBKQlFUaENMRTFCUVUwc1VVRkJVU3hqUVVOdVJDdzJRMEZEUVN4TFFVRkxMRmRCUVdFc01rSkJRMmhDTEZWQlFXdERMR2RDUVVGcVFpeG5Ra0ZCT0VJc1RVRkJUU3hSUVVGUkxHVkJSV3BGTEV0QlFVc3NiVUpCUVhGQ0xFdEJRekZDTEV0QlFVc3NjMEpCUVhWQ0xFVkJRelZDTEV0QlFVc3NjVUpCUVhOQ0xFTkJSVE5DTEVsQlFVa3NZMEZEUVN4blFrRkZRU3h0UWtGQmNVSXNaVUZCWlN4NVFrRkRlRU1zWjBKQlFXVXNNRUpCUVRSQ0xFbEJRek5ETEV0QlEwMHNTMEZCU3l4eFFrRkRVQ3hMUVVGTExIRkNRVWRFTEV0QlFVc3NjVUpCUTFBc1MwRkJTeXhOUVVGUkxFdEJRVXNzY1VKQlFYRkNMRXRCUVVzc1RVRkJUeXhMUVVGTExGZEJTVFZFTEdGQlFXVXNTMEZCU3l3d1FrRkJNRUlzVTBGRE9VTXNaMEpCUVd0Q0xFdEJRVXNzTUVKQlFUQkNMR05CUTJwRUxGRkJRMEVzWlVGQlpTd3dRa0ZCTkVJc2JVSkJSemRETEV0QlFVc3NiVUpCUVhGQ0xFdEJRVXNzTWtKQlF6ZENMR2RDUVVOQkxFdEJRVXNzWjBKQlFXZENMRXRCUjNaQ0xFbEJRVWtzVVVGQlV5eG5Ra0ZCWjBJc1pVRkRNMElzUzBGQlN5eHRRa0ZEVEN4UFFVTkJMRmxCUTBFc1MwRkJTeXh0UWtGQmJVSXNVVUZCVXl4alFVMXVReXhQUVVwSkxFMUJRVXNzYlVKQlExQXNXVUZCV1N4eFFrRkJjVUlzVVVGQlVTeExRVUZMTEd0Q1FVRnRRaXhOUVVjMVJDeFJRVk5VTEdsQ1FVRnJRaXhYUVVOb1FpeEhRVUZKTEUxQlFVOHNTMEZCU3l4VFFVVm9RaXhKUVVGSkxFdEJRVXNzY1VKQlFYTkNMRU5CUXpkQ0xFZEJRVWtzYzBKQlFYVkNMR1ZCUVdVc01rSkJRekZETEdkQ1FVRmxMRFJDUVVFNFFpeEpRVU0zUXl4TFFVTkZMRXRCUVVzc2RVSkJRMHdzVVVGRFFTeGxRVUZsTERSQ1FVRTRRaXh6UWtGSmFrUXNaMEpCUVdkQ0xHbENRVUZwUWl4TFFVRkxMRzlDUVVOMFF5eExRVUZMTEcxQ1FVRnhRaXhMUVVjeFFpeExRVUZMTEcxQ1FVRnhRaXhMUVVNeFFpeExRVUZMTEhOQ1FVRjFRaXhGUVVNMVFpeExRVUZMTEhGQ1FVRnpRaXhGUVVNelFpeExRVUZMTEd0Q1FVRnZRaXhMUVVONlFpeExRVUZMTEdkQ1FVRnJRaXhMUVVsMlFpeExRVUZMTEZOQlFWY3NTMEZEYUVJc1MwRkJTeXhaUVVGakxFdEJTMjVDTEdsQ1FVRnBRaXhQUVVGUExFOUJhVUl4UWl4clFrRkJiVUlzVTBGQlV5eGhRVUZqTEZWQlIzaERMRWRCUVVrc1UwRkJWU3hMUVVGTExHbENRVUZ0UWl4TFFVRkxMR1ZCUXpORExFMUJRVXNzWjBKQlFXdENMR0ZCUVdFc2NVSkJRMnhETEZGQlEwRXNWVUZCVnl4UlFVRlJMRTFCUVU4c1pVRkZOVUlzWVVGQllTeGpRVUZqTEV0QlFVMHNWMEZYYmtNc1lVRkJZeXhUUVVGVExGTkJRM0pDTEVkQlFVa3NaVUZCWjBJc1NVRkhjRUlzU1VGQmVVTXNaMEpCUVRsQ0xFMUJRVXNzWjBKQlFXZENMRXRCUXpsQ0xFMUJRVThzV1VGRlZDeEpRVUZKTEdOQlFXVXNTMEZCU3l4blFrRkJaMElzUzBGQlN5eFpRVU0zUXl4TFFVRkxMR0ZCUTBnc1RVRkJUeXhaUVVWVUxHbENRVU5CTEV0QlFVc3NSMEZCU1N4bFFVRmxMR05CUTNSQ0xHTkJRV01zWVVGQlpTeFJRVUZSTEZsQlJYWkRMRTlCUVU4c1owSkJWMVFzWjBKQlFXbENMRk5CUVZNc1UwRkRlRUlzUjBGQlNTeGxRVUZuUWl4TFFVRkxMR0ZCUVdFc1VVRkRkRU1zU1VGQlNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWU3hEUVVONlF5eEhRVUZKTEZkQlFWa3NjVUpCUVhGQ0xEUkNRVU51UXl4TFFVRkxMR2RDUVVWSUxGZEJRVlVzWTBGRFdpeExRVUZMTEdkQ1FVTklMRlZCUVZVc1lVRkRWaXhqUVVOQkxIVkNRVUYxUWl4VFFVazNRaXhOUVVGUExHZENRVkZVTERCQ1FVRXlRaXhUUVVGVExHZENRVU5zUXl4SFFVRkpMRTFCUVU4c1MwRkJTeXhWUVVOYUxHRkJRV1VzUzBGQlN5eHBRa0ZCYlVJc1MwRkJTeXhwUWtGRGFFUXNTVUZCU1N4aFFVRmpMRU5CUTJZc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEVHl4blFrRkJka01zVFVGQlN5eFpRVUZaTEd0Q1FVTjRRaXcyUmtGRlFTeExRVUZMTEZkQlFXRXNNa0pCUTJoQ0xGVkJRWGRFTEdkQ1FVRjJReXhOUVVGTExGbEJRVmtzYlVKQlEyeERMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFZRVU12UWl4TFFVRkxMR2RDUVVOSUxFdEJRVXNzV1VGQldTeHJRa0ZEYWtJc1lVRkRRU3gxUWtGQmRVSXNZVUZITTBJc1MwRkJTeXhIUVVGSkxGRkJRVkVzWTBGRFpDeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eFBRVUZSTEUxQlFVc3NXVUZCV1N4clFrRkRla0lzYzBWQlEwRXNTMEZCU3l4WFFVRmhMREJDUVVOc1FpeE5RVU5GTEZWQlFWVXNUMEZCVVN4TlFVRkxMRmxCUVZrc2EwSkJSWHBETEU5QlFVOHNZMEZGVkN4TlFVRlBMRTlCUjFRc2JVSkJRVzlDTEZOQlFWTXNaVUZCWjBJc1kwRkRNME1zVFVGQlNTeGpRVU5MTEZWQlFWY3NaVUZCWjBJc1kwRkZOMElzWjBKQldWUXNZMEZCWlN4VFFVRlRMRlZCUTNSQ0xFZEJRVWtzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZVc1EwRkRla01zUjBGQlNTeFhRVUZaTEhGQ1FVRnhRaXcwUWtGRGJrTXNTMEZCU3l4blFrRkZTQ3hYUVVGVkxGZEJRMW9zUzBGQlN5eG5Ra0ZEU0N4VlFVRlZMRlZCUTFZc1UwRkRRU3gxUWtGQmRVSXNUVUZKTjBJc1RVRkJUeXhYUVZkVUxHZENRVUZwUWl4VFFVRlRMRlZCUVZjc1RVRkJUeXhWUVVjeFF5eEhRVUZKTEdWQlFXZENMRXRCUVVzc1UwRkRla0lzUzBGQlN5eEhRVUZKTEZsQlFWa3NWMEZEYmtJc1IwRkJTU3hWUVVGVkxHVkJRV1VzVlVGQlZ5eERRVU4wUXl4SFFVRkpMRTFCUTBvc1MwRkhSeXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTlNMR3RDUVVGNFFpeFhRVUZWTEZWQlEycENMRzlHUVVWQkxHVkJRV2xDTEdOQlEycENMREpDUVVFeVFpeFZRVU16UWl4VlFVTkZMRlZCUVhsRExHdENRVUY0UWl4WFFVRlZMRmRCUXk5Q0xFMUJRVkVzVlVGQlZTeFZRVUZWTEUxQlFVOHNVMEZCVlN4alFVRmxMRlZCUXpWRUxFMUJRVThzU1VGRFVDeE5RVUZSTEVkQlJWWXNSMEZCU1N4blFrRkJhVUlzVDBGQlR5eERRVWt4UWl4SFFVRkpMRlZCUVZjc05FSkJRVFJDTEV0QlJYWkRMRmxCUVdFc2RVSkJRWFZDTEV0QlJYSkRMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZOQlEzWkRMRVZCUTBFc2EwTkJRMEVzVFVGQlRTeFJRVU5PTEZWQlEwVXNTMEZGU0N4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFRRVU4yUXl4RlFVTkJMRFpDUVVOQkxFMUJRVTBzVVVGRFRpeFZRVU5GTEZGQlQyUXNhVUpCUVd0Q0xGTkJRVk1zV1VGQllTeFpRVUZoTEdGQlEyNUVMRWRCUVVrc1lVRkJZeXhMUVVGTExHZENRVU51UWl4WlFVRmpMRXRCUVVzc1VVRkZka0lzVFVGQlN5eG5Ra0ZCYTBJc1MwRkZka0lzUzBGQlN5eG5Ra0ZEU0N4WlFVTkJMRmxCUTBFc1dVRkRRU3haUVVOQkxHTkJWMG9zZVVKQlFUQkNMRk5CUVZNc1lVRkRUQ3hOUVVGNFFpeExRVUZMTEdsQ1FVTlFMR2RDUVVGblFpeHBRa0ZEWkN4TFFVTkJMRXRCUVVzc2FVSkJRVzFDTEV0QlFVc3NaMEpCUXpkQ0xGbEJRMEVzUzBGQlN5eFhRVWwxUWl4UFFVRTFRaXhMUVVGTExHOUNRVUVyUWl4TFFVRkxMSFZDUVVOMlF5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1ZVRkRMMElzYzBKQlFYTkNMRFJDUVVOd1FpeExRVUZMTEdsQ1FVbFVMRXRCUVVzc1owSkJRMGdzV1VGRFFTeExRVUZMTEdkQ1FVTk1MRXRCUVVzc1owSkJRMHdzUzBGQlN5eFRRVU5NTEV0QlFVc3NXVUZUVml4elFrRkJkVUlzVTBGQlV5eHJRa0ZCYlVJc2IwSkJRMnhFTEd0Q1FVRnZRaXhMUVVGTExHRkJRV0VzYlVKQlEzUkRMRzFDUVVGeFFpeExRVUZMTEdGQlFXRXNiVUpCUjNaRExFdEJRVXNzUjBGR1JDeFpRVUZoTEU5QlFVOHNTMEZCU3l4dlFrRkJiMElzVDBGRE4wTXNXVUZCWXl4TFFVRkxMRmRCUVdFc01FSkJRek5DTEVWQlFVa3NSVUZCUnl4RlFVRkpMRmRCUVZjc1QwRkJVU3hKUVVGTExFTkJRekZETEVkQlFVa3NTMEZCVFN4WFFVRlhMRVZCUTNCQ0xHZENRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhSUVVOMlF5eHJRa0ZCYTBJc1QwRkJVeXh0UWtGQmJVSXNTMEZET1VNc2FVcEJSMEVzYTBKQlFXdENMRXRCUTJ4Q0xHMUNRVUZ0UWl4TFFVTnVRaXhKUVVOQkxHRkJRMFVzVDBGdFFsSXNaMEpCUVdsQ0xGTkJRMllzV1VGRFFTeHJRa0ZEUVN4clFrRkRRU3h2UWtGRFFTeHhRa0ZGUVN4SFFVRkpMRTFCUVU4c1MwRkJTeXhWUVVWYUxGbEJRV01zUzBGQlN5eFJRVU51UWl4VlFVRlpMRXRCUVVzc1MwRkhha0lzY1VKQlFYTkNMRzlDUVVONFFpeFpRVUZqTEV0QlFVc3NaMEpCUVdkQ0xHdENRVUZyUWl4VlFVTnlSQ3hWUVVGWkxFdEJRVXNzWTBGQll5eHJRa0ZCYTBJc1QwRkZOME1zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRlZCUTBvc1RVRkJka0lzY1VKQlEwWXNTMEZCU3l4elFrRkRTQ3hyUWtGQmEwSXNVMEZEYkVJc2NVSkJVMFlzUzBGQlN5d3lRa0ZEVUN4TFFVRkxMREJDUVVFd1FpeFZRVUZYTEdGQlNUbERMRWxCUVVrc1YwRkJXU3hMUVVGTExIRkNRVUZ4UWl4VlFVRlhMR0ZCUldwRUxHRkJRMFlzUzBGQlN5eHpRa0ZEU2l4TFFVRkxMSFZDUVVOT0xFdEJRVXNzYzBKQlFYTkNMRlZCUVZjc1ZVRkJWeXhaUVVVdlF5eG5Ra0ZCYVVJc1VVRkJVU3hKUVVGSkxGZEJRemxDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGRkJRMllzYlVKQlFXcENMR05CUTFBc1owaEJSVUVzUzBGQlN5eFhRVUZoTERKQ1FVTm9RaXhOUVVkR0xHTkJRMFlzUzBGQlN5eHhRa0ZCYzBJc1JVRkZNMElzUzBGQlN5eDNRa0ZEU0N4clFrRkRRU3hWUVVOQkxGVkJRMEVzV1VGRFFTeFpRVU5CTEhWQ1FVdEdMRXRCUVVzc1owSkJRV3RDTEd0Q1FVTjJRaXhMUVVGTExGTkJRVmNzYjBKQlEyaENMRXRCUVVzc1RVRkJVU3hWUVVOaUxFdEJRVXNzVFVGQlVTeFZRVU5pTEV0QlFVc3NVVUZCVlN4alFVbHVRaXh4UWtGQmMwSXNVMEZCVXl4TlFVRlBMRk5CUTNCRExFZEJRVWtzVFVGQlR5eExRVUZMTEZWQlExb3NUVUZCVVN4TFFVRkxMRzFDUVVOaUxGRkJRVlVzUzBGQlN5eHZRa0ZKYmtJc1NVRklRU3hMUVVGTExITkNRVUYxUWl4RlFVTTFRaXhMUVVGTExHMUNRVUZ4UWl4TlFVVnlRaXhOUVVOSUxFMUJRVThzVFVGQlN5eExRVWRrTEVsQlFVa3NVMEZCTkVJc1NVRkJha0lzVFVGQlRTeFBRVU51UWl4TlFVRlBMRTlCUVUwc1JVRkpaaXhMUVVGTExFZEJSRVFzVjBGQldTeFZRVUZYTEZGQlFWVXNUVUZCVFN4SFFVRkxMRXRCUVVzc1QwRkROVU1zUlVGQlNTeFJRVUZWTEVWQlFVa3NSVUZCUnl4RlFVRkpMRTFCUVUwc1QwRkJVU3hKUVVGTExFTkJRMjVFTEVkQlFVa3NVMEZCVlN4TlFVRk5MRVZCUTNCQ0xGRkJRMFVzVlVGRGJVSXNhMEpCUVZvc1UwRkRUQ3hSUVVGUkxFdEJRVXNzUzBGQlRTeFZRVUZYTEUxQlFVOHNVMEZEY2tNc1UwRkpUaXhOUVVGUExGbEJaVlFzZDBKQlFYbENMRk5CUTNaQ0xGbEJRMEVzVlVGRFFTeFZRVU5CTEZsQlEwRXNXVUZEUVN4cFFrRkZRU3hIUVVGSkxFMUJRVThzUzBGQlN5eFZRVVZhTEZWQlFWa3NTMEZCU3l4TlFVTnFRaXhWUVVGWkxFdEJRVXNzVFVGRGFrSXNXVUZCWXl4TFFVRkxMRTlCUlc1Q0xFMUJRVXNzY1VKQlExQXNTMEZCU3l4dlFrRkJiMElzVlVGQlZ5eFZRVUZYTEdGQlIycEVMRXRCUVVzc1owSkJRV3RDTEZsQlEzWkNMRXRCUVVzc1UwRkJWeXhuUWtGRGFFSXNTMEZCU3l4TlFVRlJMRlZCUTJJc1MwRkJTeXhOUVVGUkxGVkJRMklzUzBGQlN5eFJRVUZWTEZsQlJXWXNTMEZCU3l4NVFrRkJlVUlzV1VGQllTeHBRa0ZGZGtNc1MwRkJTeXh2UWtGRFVDeFpRVUZaTEhGQ1FVRnhRaXhSUVVNdlFpeExRVUZMTEcxQ1FVRnRRaXhMUVVGTExFdEJRVTBzVlVGQlZ5eFZRVUZYTEdGQlEzcEVMRTlCVjA0c2VVSkJRVEJDTEZOQlFWTXNXVUZCWVN4VFFVTTVReXhIUVVGSkxIVkNRVUYzUWl4TFFVRkxMRzFDUVVNM1FpeHZRa0ZCYzBJc2MwSkJRWE5DTEdkQ1FVTTFReXhoUVVGbExFdEJRVXNzTkVKQlEzQkNMRzlDUVVGelFpeExRVUZMTERCQ1FVRXdRaXhoUVVONlJDeEpRVUZKTERKQ1FVRXlRaXh2UWtGQmNVSXNjVUpCUTJ4RUxHZENRVUZuUWl4cFFrRkRaQ3h6UWtGRFFTeHZRa0ZEUVN4WlFVTkJMRXRCUVVzc2JVSkJRVzFDTEZGQlFWTXNiVUpCUlRsQ0xFTkJSVXdzUjBGQlNTeFJRVUZUTEV0QlFVc3NXVUZEWkN4blFrRkJhMElzYzBKQlFYTkNMRmRCUXpWRExHbENRVUZuUWl4cFFrRkJhVUlzZFVKQlJXcERMRXRCUVVzc2JVSkJRWEZDTEV0QlFVc3NNa0pCUXpkQ0xHOUNRVU5CTEV0QlFVc3NaMEpCUVdkQ0xFdEJSWFpDTEVsQlFVa3NXVUZCWVN4blFrRkJaMElzWlVGREwwSXNTMEZCU3l4dFFrRkRUQ3hQUVVOQkxGbEJRMEVzUzBGQlN5eHRRa0ZCYlVJc1VVRkJVeXhqUVVWdVF5eE5RVUZMTERKQ1FVRXlRaXhuUWtGQmFVSXNZMEZQY2tRc01rSkJRVFJDTEZOQlFWTXNaMEpCUVdsQ0xGbEJRM0JFTERCQ1FVRXdRaXd3UWtGRGVFSXNaMEpCUTBFc1lVRlBTaXdyUTBGQlowUXNWMEZET1VNc1IwRkJTU3hOUVVGUExFdEJRVXNzVlVGRFdpeHJRa0ZCYjBJc1MwRkJTeXhSUVZjM1FpeFBRVlpKTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hWUVVWRkxHMUNRVUYwUWl4dlFrRkRVQ3hMUVVGTExFOUJRVThzYTBKQlIyUXNhMEpCUVc5Q0xFMUJTV3BDTEcxQ1FVMVVMREJDUVVFeVFpeFRRVUZUTEdOQlEyeERMRWRCUVVrc2JVSkJRMEVzWjBKQlFXdENMR0ZCUVdFc1QwRkRia01zWTBGQllTeFJRVUZWTEV0QlFVc3NiVUpCUXpGQ0xFdEJRVXNzWjBKQlFXZENMRk5CUTNKQ0xHTkJSVVlzYTBKQlFXdENMRkZCUVZVc1NVRkROVUlzUzBGRFJTeHJRa0ZEUlN4TFFVRkxMR2xFUVVOUUxGRkJRMEVzWVVGQllTeFJRVUZWTEdkQ1FVTjJRaXhyUWtGQmEwSXNVVUZCVlN4TFFWazVRaXhOUVZaRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUldwQ0xFOUJRWFJDTEcxQ1FVRTRRaXh4UWtGQmMwSXNSMEZEY0VRc1lVRkJZU3hsUVVGbExHMUNRVU0xUWl4blNVRkZRU3hMUVVGTExGZEJRV0VzTWtKQlEyaENMRlZCUTJ0Q0xFOUJRWFJDTEcxQ1FVRTRRaXh4UWtGQmMwSXNSMEZEY0VRc1lVRkJZU3hsUVVGbExHOUNRVU55UWl4dFFrRlhWQ3hWUVVGWExGTkJRVk1zU1VGQlN5eFhRVU4yUWl4SFFVRkpMRTFCUVU4c1MwRkJTeXh2UWtGRFdpeExRVUZQTEV0QlFVc3NUMEZCVXl4WlFVRmxMRXRCUVVzc1VVRkJZU3hMUVVGTExFbEJReTlFTEUxQlFVc3NTMEZCVHl4VlFVRlZMSEZDUVZWNFFpeFZRVUZYTEZOQlFWTXNTMEZEYkVJc1IwRkJTU3hOUVVGUExFdEJRVXNzYjBKQlFXOUNMRmRCUXpkQ0xFMUJRVXNzVFVGVFpDeFJRVUZUTEZkQlExQXNSMEZCU1N4TlFVRlBMRXRCUVVzc1owSkJRV2RDTEV0QlF6VkNMRmxCUVdNc1MwRkJTeXhYUVVGaExFdEJRVXNzVlVGQlZTeFhRVU51UkN4UFFVTkZMRTFCUVVzc1lVRkJaMElzWVVGQlpTeFpRVUZaTEdGQlEyaEVMRXRCUVVzc1RVRkJVeXhoUVVGbExGbEJRVmtzVFVGRGVrTXNUVUZaU2l4clFrRkJiVUlzVjBGRGFrSXNUVUZCVHl4TlFVRkxMRmRCU1dRc01rSkJRVFJDTEV0QlNUbENMRmRCUVZVc1pVRkRVaXcyUWtGRFFTd3lRa0ZGUlN4bFFVRm5RaXhwUWtGRGFFSXNaMEpCUVdsQ0xHdENRVU5xUWl3d1FrRkJNa0lzTmtKQlNTOUNMRWxCUVVrc01FSkJSVVlzVFVGQlR5dzJRa0ZKVkN4UlFVRlBMRkZCUVZVaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCU1pXRmpkRU52YlhCdmMybDBaVU52YlhCdmJtVnVkRnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBRMjl0Y0c5dVpXNTBSVzUyYVhKdmJtMWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVOdmJYQnZibVZ1ZEVWdWRtbHliMjV0Wlc1MFhDSXBPMXh1ZG1GeUlGSmxZV04wUTI5dWRHVjRkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUTI5dWRHVjRkRndpS1R0Y2JuWmhjaUJTWldGamRFTjFjbkpsYm5SUGQyNWxjaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUTNWeWNtVnVkRTkzYm1WeVhDSXBPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRndpS1R0Y2JuWmhjaUJTWldGamRFVnNaVzFsYm5SV1lXeHBaR0YwYjNJZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFVnNaVzFsYm5SV1lXeHBaR0YwYjNKY0lpazdYRzUyWVhJZ1VtVmhZM1JKYm5OMFlXNWpaVTFoY0NBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFNXNXpkR0Z1WTJWTllYQmNJaWs3WEc1MllYSWdVbVZoWTNSTWFXWmxRM2xqYkdVZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFeHBabVZEZVdOc1pWd2lLVHRjYm5aaGNpQlNaV0ZqZEU1aGRHbDJaVU52YlhCdmJtVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wVG1GMGFYWmxRMjl0Y0c5dVpXNTBYQ0lwTzF4dWRtRnlJRkpsWVdOMFVHVnlaaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wVUdWeVpsd2lLVHRjYm5aaGNpQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjV6SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSUWNtOXdWSGx3WlV4dlkyRjBhVzl1YzF3aUtUdGNiblpoY2lCU1pXRmpkRkJ5YjNCVWVYQmxURzlqWVhScGIyNU9ZVzFsY3lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Yms1aGJXVnpYQ0lwTzF4dWRtRnlJRkpsWVdOMFVtVmpiMjVqYVd4bGNpQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBVbVZqYjI1amFXeGxjbHdpS1R0Y2JuWmhjaUJTWldGamRGVndaR0YwWlhNZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRGVndaR0YwWlhOY0lpazdYRzVjYm5aaGNpQmhjM05wWjI0Z1BTQnlaWEYxYVhKbEtGd2lMaTlQWW1wbFkzUXVZWE56YVdkdVhDSXBPMXh1ZG1GeUlHVnRjSFI1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2hjSWk0dlpXMXdkSGxQWW1wbFkzUmNJaWs3WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmFXNTJZWEpwWVc1MFhDSXBPMXh1ZG1GeUlITm9iM1ZzWkZWd1pHRjBaVkpsWVdOMFEyOXRjRzl1Wlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YzJodmRXeGtWWEJrWVhSbFVtVmhZM1JEYjIxd2IyNWxiblJjSWlrN1hHNTJZWElnZDJGeWJtbHVaeUE5SUhKbGNYVnBjbVVvWENJdUwzZGhjbTVwYm1kY0lpazdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFUmxZMnhoY21GMGFXOXVSWEp5YjNKQlpHUmxibVIxYlNoamIyMXdiMjVsYm5RcElIdGNiaUFnZG1GeUlHOTNibVZ5SUQwZ1kyOXRjRzl1Wlc1MExsOWpkWEp5Wlc1MFJXeGxiV1Z1ZEM1ZmIzZHVaWElnZkh3Z2JuVnNiRHRjYmlBZ2FXWWdLRzkzYm1WeUtTQjdYRzRnSUNBZ2RtRnlJRzVoYldVZ1BTQnZkMjVsY2k1blpYUk9ZVzFsS0NrN1hHNGdJQ0FnYVdZZ0tHNWhiV1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuSUVOb1pXTnJJSFJvWlNCeVpXNWtaWElnYldWMGFHOWtJRzltSUdBbklDc2dibUZ0WlNBcklDZGdMaWM3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQW5KenRjYm4xY2JseHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdWR2hsSUV4cFptVXRRM2xqYkdVZ2IyWWdZU0JEYjIxd2IzTnBkR1VnUTI5dGNHOXVaVzUwSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDcGNiaUFxSUMwZ1kyOXVjM1J5ZFdOMGIzSTZJRWx1YVhScFlXeHBlbUYwYVc5dUlHOW1JSE4wWVhSbExpQlVhR1VnYVc1emRHRnVZMlVnYVhNZ2JtOTNJSEpsZEdGcGJtVmtMbHh1SUNvZ0lDQXRJR052YlhCdmJtVnVkRmRwYkd4TmIzVnVkRnh1SUNvZ0lDQXRJSEpsYm1SbGNseHVJQ29nSUNBdElGdGphR2xzWkhKbGJpZHpJR052Ym5OMGNuVmpkRzl5YzExY2JpQXFJQ0FnSUNBdElGdGphR2xzWkhKbGJpZHpJR052YlhCdmJtVnVkRmRwYkd4TmIzVnVkQ0JoYm1RZ2NtVnVaR1Z5WFZ4dUlDb2dJQ0FnSUMwZ1cyTm9hV3hrY21WdUozTWdZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUmRYRzRnS2lBZ0lDQWdMU0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkRnh1SUNwY2JpQXFJQ0FnSUNBZ0lGVndaR0YwWlNCUWFHRnpaWE02WEc0Z0tpQWdJQ0FnSUNBdElHTnZiWEJ2Ym1WdWRGZHBiR3hTWldObGFYWmxVSEp2Y0hNZ0tHOXViSGtnWTJGc2JHVmtJR2xtSUhCaGNtVnVkQ0IxY0dSaGRHVmtLVnh1SUNvZ0lDQWdJQ0FnTFNCemFHOTFiR1JEYjIxd2IyNWxiblJWY0dSaGRHVmNiaUFxSUNBZ0lDQWdJQ0FnTFNCamIyMXdiMjVsYm5SWGFXeHNWWEJrWVhSbFhHNGdLaUFnSUNBZ0lDQWdJQ0FnTFNCeVpXNWtaWEpjYmlBcUlDQWdJQ0FnSUNBZ0lDQXRJRnRqYUdsc1pISmxiaWR6SUdOdmJuTjBjblZqZEc5eWN5QnZjaUJ5WldObGFYWmxJSEJ5YjNCeklIQm9ZWE5sYzExY2JpQXFJQ0FnSUNBZ0lDQWdMU0JqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1ZjYmlBcVhHNGdLaUFnSUNBZ0xTQmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkRnh1SUNvZ0lDQWdJQzBnVzJOb2FXeGtjbVZ1SjNNZ1kyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUmRYRzRnS2lBZ0lDMGdXMk5vYVd4a2NtVnVJR1JsYzNSeWIzbGxaRjFjYmlBcUlDMGdLR1JsYzNSeWIzbGxaQ2s2SUZSb1pTQnBibk4wWVc1alpTQnBjeUJ1YjNjZ1lteGhibXNzSUhKbGJHVmhjMlZrSUdKNUlGSmxZV04wSUdGdVpDQnlaV0ZrZVNCbWIzSWdSME11WEc0Z0tseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVhHNHZLaXBjYmlBcUlFRnVJR2x1WTNKbGJXVnVkR2x1WnlCSlJDQmhjM05wWjI1bFpDQjBieUJsWVdOb0lHTnZiWEJ2Ym1WdWRDQjNhR1Z1SUdsMElHbHpJRzF2ZFc1MFpXUXVJRlJvYVhNZ2FYTmNiaUFxSUhWelpXUWdkRzhnWlc1bWIzSmpaU0IwYUdVZ2IzSmtaWElnYVc0Z2QyaHBZMmdnWUZKbFlXTjBWWEJrWVhSbGMyQWdkWEJrWVhSbGN5QmthWEowZVNCamIyMXdiMjVsYm5SekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm5aaGNpQnVaWGgwVFc5MWJuUkpSQ0E5SURFN1hHNWNiaThxS2x4dUlDb2dRR3hsYm1SeklIdFNaV0ZqZEVOdmJYQnZjMmwwWlVOdmJYQnZibVZ1ZEM1d2NtOTBiM1I1Y0dWOVhHNGdLaTljYm5aaGNpQlNaV0ZqZEVOdmJYQnZjMmwwWlVOdmJYQnZibVZ1ZEUxcGVHbHVJRDBnZTF4dVhHNGdJQzhxS2x4dUlDQWdLaUJDWVhObElHTnZibk4wY25WamRHOXlJR1p2Y2lCaGJHd2dZMjl0Y0c5emFYUmxJR052YlhCdmJtVnVkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJR1ZzWlcxbGJuUmNiaUFnSUNvZ1FHWnBibUZzWEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnWTI5dWMzUnlkV04wT2lCbWRXNWpkR2x2YmlobGJHVnRaVzUwS1NCN1hHNGdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0FnSUhSb2FYTXVYM0p2YjNST2IyUmxTVVFnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDJsdWMzUmhibU5sSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQzh2SUZObFpTQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbFhHNGdJQ0FnZEdocGN5NWZjR1Z1WkdsdVowVnNaVzFsYm5RZ1BTQnVkV3hzTzF4dUlDQWdJSFJvYVhNdVgzQmxibVJwYm1kVGRHRjBaVkYxWlhWbElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOXdaVzVrYVc1blVtVndiR0ZqWlZOMFlYUmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmY0dWdVpHbHVaMFp2Y21ObFZYQmtZWFJsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0IwYUdsekxsOXlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDQTlJRzUxYkd3N1hHNWNiaUFnSUNCMGFHbHpMbDlqYjI1MFpYaDBJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDl0YjNWdWRFOXlaR1Z5SUQwZ01EdGNiaUFnSUNCMGFHbHpMbDlwYzFSdmNFeGxkbVZzSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0F2THlCVFpXVWdVbVZoWTNSVmNHUmhkR1Z6SUdGdVpDQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbExseHVJQ0FnSUhSb2FYTXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTWdQU0J1ZFd4c08xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm1sMGFXRnNhWHBsY3lCMGFHVWdZMjl0Y0c5dVpXNTBMQ0J5Wlc1a1pYSnpJRzFoY210MWNDd2dZVzVrSUhKbFoybHpkR1Z5Y3lCbGRtVnVkQ0JzYVhOMFpXNWxjbk11WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeWIyOTBTVVFnUkU5TklFbEVJRzltSUhSb1pTQnliMjkwSUc1dlpHVXVYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JTWldOdmJtTnBiR1ZVY21GdWMyRmpkR2x2Ym54U1pXRmpkRk5sY25abGNsSmxibVJsY21sdVoxUnlZVzV6WVdOMGFXOXVmU0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaUJBY21WMGRYSnVJSHMvYzNSeWFXNW5mU0JTWlc1a1pYSmxaQ0J0WVhKcmRYQWdkRzhnWW1VZ2FXNXpaWEowWldRZ2FXNTBieUIwYUdVZ1JFOU5MbHh1SUNBZ0tpQkFabWx1WVd4Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCdGIzVnVkRU52YlhCdmJtVnVkRG9nWm5WdVkzUnBiMjRvY205dmRFbEVMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhSb2FYTXVYMk52Ym5SbGVIUWdQU0JqYjI1MFpYaDBPMXh1SUNBZ0lIUm9hWE11WDIxdmRXNTBUM0prWlhJZ1BTQnVaWGgwVFc5MWJuUkpSQ3NyTzF4dUlDQWdJSFJvYVhNdVgzSnZiM1JPYjJSbFNVUWdQU0J5YjI5MFNVUTdYRzVjYmlBZ0lDQjJZWElnY0hWaWJHbGpVSEp2Y0hNZ1BTQjBhR2x6TGw5d2NtOWpaWE56VUhKdmNITW9kR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1Y0hKdmNITXBPMXh1SUNBZ0lIWmhjaUJ3ZFdKc2FXTkRiMjUwWlhoMElEMGdkR2hwY3k1ZmNISnZZMlZ6YzBOdmJuUmxlSFFvZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RdVgyTnZiblJsZUhRcE8xeHVYRzRnSUNBZ2RtRnlJRU52YlhCdmJtVnVkQ0E5SUZKbFlXTjBUbUYwYVhabFEyOXRjRzl1Wlc1MExtZGxkRU52YlhCdmJtVnVkRU5zWVhOelJtOXlSV3hsYldWdWRDaGNiaUFnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJGYkdWdFpXNTBYRzRnSUNBZ0tUdGNibHh1SUNBZ0lDOHZJRWx1YVhScFlXeHBlbVVnZEdobElIQjFZbXhwWXlCamJHRnpjMXh1SUNBZ0lIWmhjaUJwYm5OMElEMGdibVYzSUVOdmJYQnZibVZ1ZENod2RXSnNhV05RY205d2N5d2djSFZpYkdsalEyOXVkR1Y0ZENrN1hHNWNiaUFnSUNCcFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJQ0FnSUNBdkx5QlVhR2x6SUhkcGJHd2dkR2h5YjNjZ2JHRjBaWElnYVc0Z1gzSmxibVJsY2xaaGJHbGtZWFJsWkVOdmJYQnZibVZ1ZEN3Z1luVjBJR0ZrWkNCaGJpQmxZWEpzZVZ4dUlDQWdJQ0FnTHk4Z2QyRnlibWx1WnlCdWIzY2dkRzhnYUdWc2NDQmtaV0oxWjJkcGJtZGNiaUFnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNCcGJuTjBMbkpsYm1SbGNpQWhQU0J1ZFd4c0xGeHVJQ0FnSUNBZ0lDQW5KWE1vTGk0dUtUb2dUbThnWUhKbGJtUmxjbUFnYldWMGFHOWtJR1p2ZFc1a0lHOXVJSFJvWlNCeVpYUjFjbTVsWkNCamIyMXdiMjVsYm5RZ0p5QXJYRzRnSUNBZ0lDQWdJQ2RwYm5OMFlXNWpaVG9nZVc5MUlHMWhlU0JvWVhabElHWnZjbWR2ZEhSbGJpQjBieUJrWldacGJtVWdZSEpsYm1SbGNtQWdhVzRnZVc5MWNpQW5JQ3RjYmlBZ0lDQWdJQ0FnSjJOdmJYQnZibVZ1ZENCdmNpQjViM1VnYldGNUlHaGhkbVVnWVdOamFXUmxiblJoYkd4NUlIUnlhV1ZrSUhSdklISmxibVJsY2lCaGJpQmxiR1Z0Wlc1MElDY2dLMXh1SUNBZ0lDQWdJQ0FuZDJodmMyVWdkSGx3WlNCcGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2FYTnVYRnduZENCaElGSmxZV04wSUdOdmJYQnZibVZ1ZEM0bkxGeHVJQ0FnSUNBZ0lDQkRiMjF3YjI1bGJuUXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z1EyOXRjRzl1Wlc1MExtNWhiV1VnZkh3Z0owTnZiWEJ2Ym1WdWRDZGNiaUFnSUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlVhR1Z6WlNCemFHOTFiR1FnWW1VZ2MyVjBJSFZ3SUdsdUlIUm9aU0JqYjI1emRISjFZM1J2Y2l3Z1luVjBJR0Z6SUdFZ1kyOXVkbVZ1YVdWdVkyVWdabTl5WEc0Z0lDQWdMeThnYzJsdGNHeGxjaUJqYkdGemN5QmhZbk4wY21GamRHbHZibk1zSUhkbElITmxkQ0IwYUdWdElIVndJR0ZtZEdWeUlIUm9aU0JtWVdOMExseHVJQ0FnSUdsdWMzUXVjSEp2Y0hNZ1BTQndkV0pzYVdOUWNtOXdjenRjYmlBZ0lDQnBibk4wTG1OdmJuUmxlSFFnUFNCd2RXSnNhV05EYjI1MFpYaDBPMXh1SUNBZ0lHbHVjM1F1Y21WbWN5QTlJR1Z0Y0hSNVQySnFaV04wTzF4dVhHNGdJQ0FnZEdocGN5NWZhVzV6ZEdGdVkyVWdQU0JwYm5OME8xeHVYRzRnSUNBZ0x5OGdVM1J2Y21VZ1lTQnlaV1psY21WdVkyVWdabkp2YlNCMGFHVWdhVzV6ZEdGdVkyVWdZbUZqYXlCMGJ5QjBhR1VnYVc1MFpYSnVZV3dnY21Wd2NtVnpaVzUwWVhScGIyNWNiaUFnSUNCU1pXRmpkRWx1YzNSaGJtTmxUV0Z3TG5ObGRDaHBibk4wTENCMGFHbHpLVHRjYmx4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzZGhjbTVKWmtOdmJuUmxlSFJ6UkdsbVptVnlLSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwTGw5amIyNTBaWGgwTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdJQ0F2THlCVGFXNWpaU0J3YkdGcGJpQktVeUJqYkdGemMyVnpJR0Z5WlNCa1pXWnBibVZrSUhkcGRHaHZkWFFnWVc1NUlITndaV05wWVd3Z2FXNXBkR2xoYkdsNllYUnBiMjVjYmlBZ0lDQWdJQzh2SUd4dloybGpMQ0IzWlNCallXNGdibTkwSUdOaGRHTm9JR052YlcxdmJpQmxjbkp2Y25NZ1pXRnliSGt1SUZSb1pYSmxabTl5WlN3Z2QyVWdhR0YyWlNCMGIxeHVJQ0FnSUNBZ0x5OGdZMkYwWTJnZ2RHaGxiU0JvWlhKbExDQmhkQ0JwYm1sMGFXRnNhWHBoZEdsdmJpQjBhVzFsTENCcGJuTjBaV0ZrTGx4dUlDQWdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JSGRoY201cGJtY29YRzRnSUNBZ0lDQWdJQ0ZwYm5OMExtZGxkRWx1YVhScFlXeFRkR0YwWlNCOGZGeHVJQ0FnSUNBZ0lDQnBibk4wTG1kbGRFbHVhWFJwWVd4VGRHRjBaUzVwYzFKbFlXTjBRMnhoYzNOQmNIQnliM1psWkN4Y2JpQWdJQ0FnSUNBZ0oyZGxkRWx1YVhScFlXeFRkR0YwWlNCM1lYTWdaR1ZtYVc1bFpDQnZiaUFsY3l3Z1lTQndiR0ZwYmlCS1lYWmhVMk55YVhCMElHTnNZWE56TGlBbklDdGNiaUFnSUNBZ0lDQWdKMVJvYVhNZ2FYTWdiMjVzZVNCemRYQndiM0owWldRZ1ptOXlJR05zWVhOelpYTWdZM0psWVhSbFpDQjFjMmx1WnlCU1pXRmpkQzVqY21WaGRHVkRiR0Z6Y3k0Z0p5QXJYRzRnSUNBZ0lDQWdJQ2RFYVdRZ2VXOTFJRzFsWVc0Z2RHOGdaR1ZtYVc1bElHRWdjM1JoZEdVZ2NISnZjR1Z5ZEhrZ2FXNXpkR1ZoWkQ4bkxGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRFNWhiV1VvS1NCOGZDQW5ZU0JqYjIxd2IyNWxiblFuWEc0Z0lDQWdJQ0FwSURvZ2JuVnNiQ2s3WEc0Z0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJV2x1YzNRdVoyVjBSR1ZtWVhWc2RGQnliM0J6SUh4OFhHNGdJQ0FnSUNBZ0lHbHVjM1F1WjJWMFJHVm1ZWFZzZEZCeWIzQnpMbWx6VW1WaFkzUkRiR0Z6YzBGd2NISnZkbVZrTEZ4dUlDQWdJQ0FnSUNBbloyVjBSR1ZtWVhWc2RGQnliM0J6SUhkaGN5QmtaV1pwYm1Wa0lHOXVJQ1Z6TENCaElIQnNZV2x1SUVwaGRtRlRZM0pwY0hRZ1kyeGhjM011SUNjZ0sxeHVJQ0FnSUNBZ0lDQW5WR2hwY3lCcGN5QnZibXg1SUhOMWNIQnZjblJsWkNCbWIzSWdZMnhoYzNObGN5QmpjbVZoZEdWa0lIVnphVzVuSUZKbFlXTjBMbU55WldGMFpVTnNZWE56TGlBbklDdGNiaUFnSUNBZ0lDQWdKMVZ6WlNCaElITjBZWFJwWXlCd2NtOXdaWEowZVNCMGJ5QmtaV1pwYm1VZ1pHVm1ZWFZzZEZCeWIzQnpJR2x1YzNSbFlXUXVKeXhjYmlBZ0lDQWdJQ0FnZEdocGN5NW5aWFJPWVcxbEtDa2dmSHdnSjJFZ1kyOXRjRzl1Wlc1MEoxeHVJQ0FnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0FnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUhkaGNtNXBibWNvWEc0Z0lDQWdJQ0FnSUNGcGJuTjBMbkJ5YjNCVWVYQmxjeXhjYmlBZ0lDQWdJQ0FnSjNCeWIzQlVlWEJsY3lCM1lYTWdaR1ZtYVc1bFpDQmhjeUJoYmlCcGJuTjBZVzVqWlNCd2NtOXdaWEowZVNCdmJpQWxjeTRnVlhObElHRWdjM1JoZEdsaklDY2dLMXh1SUNBZ0lDQWdJQ0FuY0hKdmNHVnlkSGtnZEc4Z1pHVm1hVzVsSUhCeWIzQlVlWEJsY3lCcGJuTjBaV0ZrTGljc1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJWMFRtRnRaU2dwSUh4OElDZGhJR052YlhCdmJtVnVkQ2RjYmlBZ0lDQWdJQ2tnT2lCdWRXeHNLVHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQWhhVzV6ZEM1amIyNTBaWGgwVkhsd1pYTXNYRzRnSUNBZ0lDQWdJQ2RqYjI1MFpYaDBWSGx3WlhNZ2QyRnpJR1JsWm1sdVpXUWdZWE1nWVc0Z2FXNXpkR0Z1WTJVZ2NISnZjR1Z5ZEhrZ2IyNGdKWE11SUZWelpTQmhJQ2NnSzF4dUlDQWdJQ0FnSUNBbmMzUmhkR2xqSUhCeWIzQmxjblI1SUhSdklHUmxabWx1WlNCamIyNTBaWGgwVkhsd1pYTWdhVzV6ZEdWaFpDNG5MRnh1SUNBZ0lDQWdJQ0IwYUdsekxtZGxkRTVoYldVb0tTQjhmQ0FuWVNCamIyMXdiMjVsYm5RblhHNGdJQ0FnSUNBcElEb2diblZzYkNrN1hHNGdJQ0FnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnZDJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0FnZEhsd1pXOW1JR2x1YzNRdVkyOXRjRzl1Wlc1MFUyaHZkV3hrVlhCa1lYUmxJQ0U5UFNBblpuVnVZM1JwYjI0bkxGeHVJQ0FnSUNBZ0lDQW5KWE1nYUdGeklHRWdiV1YwYUc5a0lHTmhiR3hsWkNBbklDdGNiaUFnSUNBZ0lDQWdKMk52YlhCdmJtVnVkRk5vYjNWc1pGVndaR0YwWlNncExpQkVhV1FnZVc5MUlHMWxZVzRnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbEtDay9JQ2NnSzF4dUlDQWdJQ0FnSUNBblZHaGxJRzVoYldVZ2FYTWdjR2h5WVhObFpDQmhjeUJoSUhGMVpYTjBhVzl1SUdKbFkyRjFjMlVnZEdobElHWjFibU4wYVc5dUlHbHpJQ2NnSzF4dUlDQWdJQ0FnSUNBblpYaHdaV04wWldRZ2RHOGdjbVYwZFhKdUlHRWdkbUZzZFdVdUp5eGNiaUFnSUNBZ0lDQWdLSFJvYVhNdVoyVjBUbUZ0WlNncElIeDhJQ2RCSUdOdmJYQnZibVZ1ZENjcFhHNGdJQ0FnSUNBcElEb2diblZzYkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHbHVhWFJwWVd4VGRHRjBaU0E5SUdsdWMzUXVjM1JoZEdVN1hHNGdJQ0FnYVdZZ0tHbHVhWFJwWVd4VGRHRjBaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnBibk4wTG5OMFlYUmxJRDBnYVc1cGRHbGhiRk4wWVhSbElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lIUjVjR1Z2WmlCcGJtbDBhV0ZzVTNSaGRHVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlDRkJjbkpoZVM1cGMwRnljbUY1S0dsdWFYUnBZV3hUZEdGMFpTa3NYRzRnSUNBZ0lDQW5KWE11YzNSaGRHVTZJRzExYzNRZ1ltVWdjMlYwSUhSdklHRnVJRzlpYW1WamRDQnZjaUJ1ZFd4c0p5eGNiaUFnSUNBZ0lIUm9hWE11WjJWMFRtRnRaU2dwSUh4OElDZFNaV0ZqZEVOdmJYQnZjMmwwWlVOdmJYQnZibVZ1ZENkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtIUjVjR1Z2WmlCcGJtbDBhV0ZzVTNSaGRHVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlDRkJjbkpoZVM1cGMwRnljbUY1S0dsdWFYUnBZV3hUZEdGMFpTa3BLVHRjYmx4dUlDQWdJSFJvYVhNdVgzQmxibVJwYm1kVGRHRjBaVkYxWlhWbElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOXdaVzVrYVc1blVtVndiR0ZqWlZOMFlYUmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmY0dWdVpHbHVaMFp2Y21ObFZYQmtZWFJsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0IyWVhJZ1kyaHBiR1JEYjI1MFpYaDBPMXh1SUNBZ0lIWmhjaUJ5Wlc1a1pYSmxaRVZzWlcxbGJuUTdYRzVjYmlBZ0lDQjJZWElnY0hKbGRtbHZkWE5zZVUxdmRXNTBhVzVuSUQwZ1VtVmhZM1JNYVdabFEzbGpiR1V1WTNWeWNtVnVkR3g1VFc5MWJuUnBibWRKYm5OMFlXNWpaVHRjYmlBZ0lDQlNaV0ZqZEV4cFptVkRlV05zWlM1amRYSnlaVzUwYkhsTmIzVnVkR2x1WjBsdWMzUmhibU5sSUQwZ2RHaHBjenRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnYVdZZ0tHbHVjM1F1WTI5dGNHOXVaVzUwVjJsc2JFMXZkVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbHVjM1F1WTI5dGNHOXVaVzUwVjJsc2JFMXZkVzUwS0NrN1hHNGdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z2JXOTFiblJwYm1jc0lHTmhiR3h6SUhSdklHQnpaWFJUZEdGMFpXQWdZbmtnWUdOdmJYQnZibVZ1ZEZkcGJHeE5iM1Z1ZEdBZ2QybHNiQ0J6WlhSY2JpQWdJQ0FnSUNBZ0x5OGdZSFJvYVhNdVgzQmxibVJwYm1kVGRHRjBaVkYxWlhWbFlDQjNhWFJvYjNWMElIUnlhV2RuWlhKcGJtY2dZU0J5WlMxeVpXNWtaWEl1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5d1pXNWthVzVuVTNSaGRHVlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1YzNRdWMzUmhkR1VnUFNCMGFHbHpMbDl3Y205alpYTnpVR1Z1WkdsdVoxTjBZWFJsS0dsdWMzUXVjSEp2Y0hNc0lHbHVjM1F1WTI5dWRHVjRkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1kyaHBiR1JEYjI1MFpYaDBJRDBnZEdocGN5NWZaMlYwVm1Gc2FXUmhkR1ZrUTJocGJHUkRiMjUwWlhoMEtHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ2NtVnVaR1Z5WldSRmJHVnRaVzUwSUQwZ2RHaHBjeTVmY21WdVpHVnlWbUZzYVdSaGRHVmtRMjl0Y0c5dVpXNTBLR05vYVd4a1EyOXVkR1Y0ZENrN1hHNGdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUZKbFlXTjBUR2xtWlVONVkyeGxMbU4xY25KbGJuUnNlVTF2ZFc1MGFXNW5TVzV6ZEdGdVkyVWdQU0J3Y21WMmFXOTFjMng1VFc5MWJuUnBibWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZmNtVnVaR1Z5WldSRGIyMXdiMjVsYm5RZ1BTQjBhR2x6TGw5cGJuTjBZVzUwYVdGMFpWSmxZV04wUTI5dGNHOXVaVzUwS0Z4dUlDQWdJQ0FnY21WdVpHVnlaV1JGYkdWdFpXNTBMRnh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1ZEhsd1pTQXZMeUJVYUdVZ2QzSmhjSEJwYm1jZ2RIbHdaVnh1SUNBZ0lDazdYRzVjYmlBZ0lDQjJZWElnYldGeWEzVndJRDBnVW1WaFkzUlNaV052Ym1OcGJHVnlMbTF2ZFc1MFEyOXRjRzl1Wlc1MEtGeHVJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlaV1JEYjIxd2IyNWxiblFzWEc0Z0lDQWdJQ0J5YjI5MFNVUXNYRzRnSUNBZ0lDQjBjbUZ1YzJGamRHbHZiaXhjYmlBZ0lDQWdJSFJvYVhNdVgyMWxjbWRsUTJocGJHUkRiMjUwWlhoMEtHTnZiblJsZUhRc0lHTm9hV3hrUTI5dWRHVjRkQ2xjYmlBZ0lDQXBPMXh1SUNBZ0lHbG1JQ2hwYm5OMExtTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MEtTQjdYRzRnSUNBZ0lDQjBjbUZ1YzJGamRHbHZiaTVuWlhSU1pXRmpkRTF2ZFc1MFVtVmhaSGtvS1M1bGJuRjFaWFZsS0dsdWMzUXVZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUXNJR2x1YzNRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ0WVhKcmRYQTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGJHVmhjMlZ6SUdGdWVTQnlaWE52ZFhKalpYTWdZV3hzYjJOaGRHVmtJR0o1SUdCdGIzVnVkRU52YlhCdmJtVnVkR0F1WEc0Z0lDQXFYRzRnSUNBcUlFQm1hVzVoYkZ4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUhWdWJXOTFiblJEYjIxd2IyNWxiblE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQnBibk4wSUQwZ2RHaHBjeTVmYVc1emRHRnVZMlU3WEc1Y2JpQWdJQ0JwWmlBb2FXNXpkQzVqYjIxd2IyNWxiblJYYVd4c1ZXNXRiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEJ5WlhacGIzVnpiSGxWYm0xdmRXNTBhVzVuSUQwZ1VtVmhZM1JNYVdabFEzbGpiR1V1WTNWeWNtVnVkR3g1Vlc1dGIzVnVkR2x1WjBsdWMzUmhibU5sTzF4dUlDQWdJQ0FnVW1WaFkzUk1hV1psUTNsamJHVXVZM1Z5Y21WdWRHeDVWVzV0YjNWdWRHbHVaMGx1YzNSaGJtTmxJRDBnZEdocGN6dGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdsdWMzUXVZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblFvS1R0Y2JpQWdJQ0FnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lGSmxZV04wVEdsbVpVTjVZMnhsTG1OMWNuSmxiblJzZVZWdWJXOTFiblJwYm1kSmJuTjBZVzVqWlNBOUlIQnlaWFpwYjNWemJIbFZibTF2ZFc1MGFXNW5PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lGSmxZV04wVW1WamIyNWphV3hsY2k1MWJtMXZkVzUwUTI5dGNHOXVaVzUwS0hSb2FYTXVYM0psYm1SbGNtVmtRMjl0Y0c5dVpXNTBLVHRjYmlBZ0lDQjBhR2x6TGw5eVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENBOUlHNTFiR3c3WEc1Y2JpQWdJQ0F2THlCU1pYTmxkQ0J3Wlc1a2FXNW5JR1pwWld4a2MxeHVJQ0FnSUhSb2FYTXVYM0JsYm1ScGJtZFRkR0YwWlZGMVpYVmxJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDl3Wlc1a2FXNW5VbVZ3YkdGalpWTjBZWFJsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdkR2hwY3k1ZmNHVnVaR2x1WjBadmNtTmxWWEJrWVhSbElEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NWZjR1Z1WkdsdVowTmhiR3hpWVdOcmN5QTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWZjR1Z1WkdsdVowVnNaVzFsYm5RZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnTHk4Z1ZHaGxjMlVnWm1sbGJHUnpJR1J2SUc1dmRDQnlaV0ZzYkhrZ2JtVmxaQ0IwYnlCaVpTQnlaWE5sZENCemFXNWpaU0IwYUdseklHOWlhbVZqZENCcGN5QnViMXh1SUNBZ0lDOHZJR3h2Ym1kbGNpQmhZMk5sYzNOcFlteGxMbHh1SUNBZ0lIUm9hWE11WDJOdmJuUmxlSFFnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDNKdmIzUk9iMlJsU1VRZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnTHk4Z1JHVnNaWFJsSUhSb1pTQnlaV1psY21WdVkyVWdabkp2YlNCMGFHVWdhVzV6ZEdGdVkyVWdkRzhnZEdocGN5QnBiblJsY201aGJDQnlaWEJ5WlhObGJuUmhkR2x2Ymx4dUlDQWdJQzh2SUhkb2FXTm9JR0ZzYkc5M0lIUm9aU0JwYm5SbGNtNWhiSE1nZEc4Z1ltVWdjSEp2Y0dWeWJIa2dZMnhsWVc1bFpDQjFjQ0JsZG1WdUlHbG1JSFJvWlNCMWMyVnlYRzRnSUNBZ0x5OGdiR1ZoYTNNZ1lTQnlaV1psY21WdVkyVWdkRzhnZEdobElIQjFZbXhwWXlCcGJuTjBZVzVqWlM1Y2JpQWdJQ0JTWldGamRFbHVjM1JoYm1ObFRXRndMbkpsYlc5MlpTaHBibk4wS1R0Y2JseHVJQ0FnSUM4dklGTnZiV1VnWlhocGMzUnBibWNnWTI5dGNHOXVaVzUwY3lCeVpXeDVJRzl1SUdsdWMzUXVjSEp2Y0hNZ1pYWmxiaUJoWm5SbGNpQjBhR1Y1SjNabElHSmxaVzVjYmlBZ0lDQXZMeUJrWlhOMGNtOTVaV1FnS0dsdUlHVjJaVzUwSUdoaGJtUnNaWEp6S1M1Y2JpQWdJQ0F2THlCVVQwUlBPaUJwYm5OMExuQnliM0J6SUQwZ2JuVnNiRHRjYmlBZ0lDQXZMeUJVVDBSUE9pQnBibk4wTG5OMFlYUmxJRDBnYm5Wc2JEdGNiaUFnSUNBdkx5QlVUMFJQT2lCcGJuTjBMbU52Ym5SbGVIUWdQU0J1ZFd4c08xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWTJobFpIVnNaU0JoSUhCaGNuUnBZV3dnZFhCa1lYUmxJSFJ2SUhSb1pTQndjbTl3Y3k0Z1QyNXNlU0IxYzJWa0lHWnZjaUJwYm5SbGNtNWhiQ0IwWlhOMGFXNW5MbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnY0dGeWRHbGhiRkJ5YjNCeklGTjFZbk5sZENCdlppQjBhR1VnYm1WNGRDQndjbTl3Y3k1Y2JpQWdJQ29nUUhCaGNtRnRJSHMvWm5WdVkzUnBiMjU5SUdOaGJHeGlZV05ySUVOaGJHeGxaQ0JoWm5SbGNpQndjbTl3Y3lCaGNtVWdkWEJrWVhSbFpDNWNiaUFnSUNvZ1FHWnBibUZzWEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnWDNObGRGQnliM0J6U1c1MFpYSnVZV3c2SUdaMWJtTjBhVzl1S0hCaGNuUnBZV3hRY205d2N5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQXZMeUJVYUdseklHbHpJR0VnWkdWdmNIUnBiV2w2WldRZ2NHRjBhQzRnVjJVZ2IzQjBhVzFwZW1VZ1ptOXlJR0ZzZDJGNWN5Qm9ZWFpwYm1jZ1lXNGdaV3hsYldWdWRDNWNiaUFnSUNBdkx5QlVhR2x6SUdOeVpXRjBaWE1nWVc0Z1pYaDBjbUVnYVc1MFpYSnVZV3dnWld4bGJXVnVkQzVjYmlBZ0lDQjJZWElnWld4bGJXVnVkQ0E5SUhSb2FYTXVYM0JsYm1ScGJtZEZiR1Z0Wlc1MElIeDhJSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwTzF4dUlDQWdJSFJvYVhNdVgzQmxibVJwYm1kRmJHVnRaVzUwSUQwZ1VtVmhZM1JGYkdWdFpXNTBMbU5zYjI1bFFXNWtVbVZ3YkdGalpWQnliM0J6S0Z4dUlDQWdJQ0FnWld4bGJXVnVkQ3hjYmlBZ0lDQWdJR0Z6YzJsbmJpaDdmU3dnWld4bGJXVnVkQzV3Y205d2N5d2djR0Z5ZEdsaGJGQnliM0J6S1Z4dUlDQWdJQ2s3WEc0Z0lDQWdVbVZoWTNSVmNHUmhkR1Z6TG1WdWNYVmxkV1ZWY0dSaGRHVW9kR2hwY3l3Z1kyRnNiR0poWTJzcE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYVd4MFpYSnpJSFJvWlNCamIyNTBaWGgwSUc5aWFtVmpkQ0IwYnlCdmJteDVJR052Ym5SaGFXNGdhMlY1Y3lCemNHVmphV1pwWldRZ2FXNWNiaUFnSUNvZ1lHTnZiblJsZUhSVWVYQmxjMkJjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdOdmJuUmxlSFJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdQMjlpYW1WamRIMWNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lGOXRZWE5yUTI5dWRHVjRkRG9nWm5WdVkzUnBiMjRvWTI5dWRHVjRkQ2tnZTF4dUlDQWdJSFpoY2lCdFlYTnJaV1JEYjI1MFpYaDBJRDBnYm5Wc2JEdGNiaUFnSUNBdkx5QlVhR2x6SUhKbFlXeHNlU0J6YUc5MWJHUWdZbVVnWjJWMGRHbHVaeUIwYUdVZ1kyOXRjRzl1Wlc1MElHTnNZWE56SUdadmNpQjBhR1VnWld4bGJXVnVkQ3hjYmlBZ0lDQXZMeUJpZFhRZ2QyVWdhMjV2ZHlCMGFHRjBJSGRsSjNKbElHNXZkQ0JuYjJsdVp5QjBieUJ1WldWa0lHbDBJR1p2Y2lCaWRXbHNkQzFwYm5NdVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNTBlWEJsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHVnRjSFI1VDJKcVpXTjBPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdZMjl1ZEdWNGRGUjVjR1Z6SUQwZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUXVkSGx3WlM1amIyNTBaWGgwVkhsd1pYTTdYRzRnSUNBZ2FXWWdLQ0ZqYjI1MFpYaDBWSGx3WlhNcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbGJYQjBlVTlpYW1WamREdGNiaUFnSUNCOVhHNGdJQ0FnYldGemEyVmtRMjl1ZEdWNGRDQTlJSHQ5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR052Ym5SbGVIUk9ZVzFsSUdsdUlHTnZiblJsZUhSVWVYQmxjeWtnZTF4dUlDQWdJQ0FnYldGemEyVmtRMjl1ZEdWNGRGdGpiMjUwWlhoMFRtRnRaVjBnUFNCamIyNTBaWGgwVzJOdmJuUmxlSFJPWVcxbFhUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzFoYzJ0bFpFTnZiblJsZUhRN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVpwYkhSbGNuTWdkR2hsSUdOdmJuUmxlSFFnYjJKcVpXTjBJSFJ2SUc5dWJIa2dZMjl1ZEdGcGJpQnJaWGx6SUhOd1pXTnBabWxsWkNCcGJseHVJQ0FnS2lCZ1kyOXVkR1Y0ZEZSNWNHVnpZQ3dnWVc1a0lHRnpjMlZ5ZEhNZ2RHaGhkQ0IwYUdWNUlHRnlaU0IyWVd4cFpDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR052Ym5SbGVIUmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AyOWlhbVZqZEgxY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5d2NtOWpaWE56UTI5dWRHVjRkRG9nWm5WdVkzUnBiMjRvWTI5dWRHVjRkQ2tnZTF4dUlDQWdJSFpoY2lCdFlYTnJaV1JEYjI1MFpYaDBJRDBnZEdocGN5NWZiV0Z6YTBOdmJuUmxlSFFvWTI5dWRHVjRkQ2s3WEc0Z0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdkbUZ5SUVOdmJYQnZibVZ1ZENBOUlGSmxZV04wVG1GMGFYWmxRMjl0Y0c5dVpXNTBMbWRsZEVOdmJYQnZibVZ1ZEVOc1lYTnpSbTl5Uld4bGJXVnVkQ2hjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5SY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCcFppQW9RMjl0Y0c5dVpXNTBMbU52Ym5SbGVIUlVlWEJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amFHVmphMUJ5YjNCVWVYQmxjeWhjYmlBZ0lDQWdJQ0FnSUNCRGIyMXdiMjVsYm5RdVkyOXVkR1Y0ZEZSNWNHVnpMRnh1SUNBZ0lDQWdJQ0FnSUcxaGMydGxaRU52Ym5SbGVIUXNYRzRnSUNBZ0lDQWdJQ0FnVW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dWN5NWpiMjUwWlhoMFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ0WVhOclpXUkRiMjUwWlhoME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdZM1Z5Y21WdWRFTnZiblJsZUhSY2JpQWdJQ29nUUhKbGRIVnliaUI3YjJKcVpXTjBmVnh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMmRsZEZaaGJHbGtZWFJsWkVOb2FXeGtRMjl1ZEdWNGREb2dablZ1WTNScGIyNG9ZM1Z5Y21WdWRFTnZiblJsZUhRcElIdGNiaUFnSUNCMllYSWdhVzV6ZENBOUlIUm9hWE11WDJsdWMzUmhibU5sTzF4dUlDQWdJSFpoY2lCamFHbHNaRU52Ym5SbGVIUWdQU0JwYm5OMExtZGxkRU5vYVd4a1EyOXVkR1Y0ZENBbUppQnBibk4wTG1kbGRFTm9hV3hrUTI5dWRHVjRkQ2dwTzF4dUlDQWdJR2xtSUNoamFHbHNaRU52Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQnBibk4wTG1OdmJuTjBjblZqZEc5eUxtTm9hV3hrUTI5dWRHVjRkRlI1Y0dWeklEMDlQU0FuYjJKcVpXTjBKeXhjYmlBZ0lDQWdJQ0FnSnlWekxtZGxkRU5vYVd4a1EyOXVkR1Y0ZENncE9pQmphR2xzWkVOdmJuUmxlSFJVZVhCbGN5QnRkWE4wSUdKbElHUmxabWx1WldRZ2FXNGdiM0prWlhJZ2RHOGdKeUFyWEc0Z0lDQWdJQ0FnSUNkMWMyVWdaMlYwUTJocGJHUkRiMjUwWlhoMEtDa3VKeXhjYmlBZ0lDQWdJQ0FnZEdocGN5NW5aWFJPWVcxbEtDa2dmSHdnSjFKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBKMXh1SUNBZ0lDQWdLU0E2SUdsdWRtRnlhV0Z1ZENoMGVYQmxiMllnYVc1emRDNWpiMjV6ZEhKMVkzUnZjaTVqYUdsc1pFTnZiblJsZUhSVWVYQmxjeUE5UFQwZ0oyOWlhbVZqZENjcEtUdGNiaUFnSUNBZ0lHbG1JQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyaGxZMnRRY205d1ZIbHdaWE1vWEc0Z0lDQWdJQ0FnSUNBZ2FXNXpkQzVqYjI1emRISjFZM1J2Y2k1amFHbHNaRU52Ym5SbGVIUlVlWEJsY3l4Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkVOdmJuUmxlSFFzWEc0Z0lDQWdJQ0FnSUNBZ1VtVmhZM1JRY205d1ZIbHdaVXh2WTJGMGFXOXVjeTVqYUdsc1pFTnZiblJsZUhSY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHNWhiV1VnYVc0Z1kyaHBiR1JEYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0FnSUNBZ2JtRnRaU0JwYmlCcGJuTjBMbU52Ym5OMGNuVmpkRzl5TG1Ob2FXeGtRMjl1ZEdWNGRGUjVjR1Z6TEZ4dUlDQWdJQ0FnSUNBZ0lDY2xjeTVuWlhSRGFHbHNaRU52Ym5SbGVIUW9LVG9nYTJWNUlGd2lKWE5jSWlCcGN5QnViM1FnWkdWbWFXNWxaQ0JwYmlCamFHbHNaRU52Ym5SbGVIUlVlWEJsY3k0bkxGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyVjBUbUZ0WlNncElIeDhJQ2RTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRDY3NYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpWeHVJQ0FnSUNBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0c1aGJXVWdhVzRnYVc1emRDNWpiMjV6ZEhKMVkzUnZjaTVqYUdsc1pFTnZiblJsZUhSVWVYQmxjeWtwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJR05vYVd4a1EyOXVkR1Y0ZER0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMHNYRzVjYmlBZ1gyMWxjbWRsUTJocGJHUkRiMjUwWlhoME9pQm1kVzVqZEdsdmJpaGpkWEp5Wlc1MFEyOXVkR1Y0ZEN3Z1kyaHBiR1JEYjI1MFpYaDBLU0I3WEc0Z0lDQWdhV1lnS0dOb2FXeGtRMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnpjMmxuYmloN2ZTd2dZM1Z5Y21WdWRFTnZiblJsZUhRc0lHTm9hV3hrUTI5dWRHVjRkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwUTI5dWRHVjRkRHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1VISnZZMlZ6YzJWeklIQnliM0J6SUdKNUlITmxkSFJwYm1jZ1pHVm1ZWFZzZENCMllXeDFaWE1nWm05eUlIVnVjM0JsWTJsbWFXVmtJSEJ5YjNCeklHRnVaRnh1SUNBZ0tpQmhjM05sY25ScGJtY2dkR2hoZENCMGFHVWdjSEp2Y0hNZ1lYSmxJSFpoYkdsa0xpQkViMlZ6SUc1dmRDQnRkWFJoZEdVZ2FYUnpJR0Z5WjNWdFpXNTBPeUJ5WlhSMWNtNXpYRzRnSUNBcUlHRWdibVYzSUhCeWIzQnpJRzlpYW1WamRDQjNhWFJvSUdSbFptRjFiSFJ6SUcxbGNtZGxaQ0JwYmk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHNWxkMUJ5YjNCelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTI5aWFtVmpkSDFjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJRjl3Y205alpYTnpVSEp2Y0hNNklHWjFibU4wYVc5dUtHNWxkMUJ5YjNCektTQjdYRzRnSUNBZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUNBZ2RtRnlJRU52YlhCdmJtVnVkQ0E5SUZKbFlXTjBUbUYwYVhabFEyOXRjRzl1Wlc1MExtZGxkRU52YlhCdmJtVnVkRU5zWVhOelJtOXlSV3hsYldWdWRDaGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblJjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0JwWmlBb1EyOXRjRzl1Wlc1MExuQnliM0JVZVhCbGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWphR1ZqYTFCeWIzQlVlWEJsY3loY2JpQWdJQ0FnSUNBZ0lDQkRiMjF3YjI1bGJuUXVjSEp2Y0ZSNWNHVnpMRnh1SUNBZ0lDQWdJQ0FnSUc1bGQxQnliM0J6TEZ4dUlDQWdJQ0FnSUNBZ0lGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZibk11Y0hKdmNGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm1WM1VISnZjSE03WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRnpjMlZ5ZENCMGFHRjBJSFJvWlNCd2NtOXdjeUJoY21VZ2RtRnNhV1JjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzQlVlWEJsY3lCTllYQWdiMllnY0hKdmNDQnVZVzFsSUhSdklHRWdVbVZoWTNSUWNtOXdWSGx3WlZ4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdjSEp2Y0hOY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3h2WTJGMGFXOXVJR1V1Wnk0Z1hDSndjbTl3WENJc0lGd2lZMjl1ZEdWNGRGd2lMQ0JjSW1Ob2FXeGtJR052Ym5SbGVIUmNJbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYMk5vWldOclVISnZjRlI1Y0dWek9pQm1kVzVqZEdsdmJpaHdjbTl3Vkhsd1pYTXNJSEJ5YjNCekxDQnNiMk5oZEdsdmJpa2dlMXh1SUNBZ0lDOHZJRlJQUkU4NklGTjBiM0FnZG1Gc2FXUmhkR2x1WnlCd2NtOXdJSFI1Y0dWeklHaGxjbVVnWVc1a0lHOXViSGtnZFhObElIUm9aU0JsYkdWdFpXNTBYRzRnSUNBZ0x5OGdkbUZzYVdSaGRHbHZiaTVjYmlBZ0lDQjJZWElnWTI5dGNHOXVaVzUwVG1GdFpTQTlJSFJvYVhNdVoyVjBUbUZ0WlNncE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQk9ZVzFsSUdsdUlIQnliM0JVZVhCbGN5a2dlMXh1SUNBZ0lDQWdhV1lnS0hCeWIzQlVlWEJsY3k1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1RtRnRaU2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdhVzUwWlc1MGFXOXVZV3hzZVNCaGJpQnBiblpoY21saGJuUWdkR2hoZENCblpYUnpJR05oZFdkb2RDNGdTWFFuY3lCMGFHVWdjMkZ0WlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR0psYUdGMmFXOXlJR0Z6SUhkcGRHaHZkWFFnZEdocGN5QnpkR0YwWlcxbGJuUWdaWGhqWlhCMElIZHBkR2dnWVNCaVpYUjBaWElnYldWemMyRm5aUzVjYmlBZ0lDQWdJQ0FnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlIQnliM0JVZVhCbGMxdHdjbTl3VG1GdFpWMGdQVDA5SUNkbWRXNWpkR2x2Ymljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuSlhNNklDVnpJSFI1Y0dVZ1lDVnpZQ0JwY3lCcGJuWmhiR2xrT3lCcGRDQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNHNJSFZ6ZFdGc2JIa2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5abkp2YlNCU1pXRmpkQzVRY205d1ZIbHdaWE11Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YlhCdmJtVnVkRTVoYldVZ2ZId2dKMUpsWVdOMElHTnNZWE56Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRkpsWVdOMFVISnZjRlI1Y0dWTWIyTmhkR2x2Yms1aGJXVnpXMnh2WTJGMGFXOXVYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JPWVcxbFhHNGdJQ0FnSUNBZ0lDQWdLU0E2SUdsdWRtRnlhV0Z1ZENoMGVYQmxiMllnY0hKdmNGUjVjR1Z6VzNCeWIzQk9ZVzFsWFNBOVBUMGdKMloxYm1OMGFXOXVKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2NISnZjRlI1Y0dWelczQnliM0JPWVcxbFhTaHdjbTl3Y3l3Z2NISnZjRTVoYldVc0lHTnZiWEJ2Ym1WdWRFNWhiV1VzSUd4dlkyRjBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUdWNE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUJwYm5OMFlXNWpaVzltSUVWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdWMlVnYldGNUlIZGhiblFnZEc4Z1pYaDBaVzVrSUhSb2FYTWdiRzluYVdNZ1ptOXlJSE5wYldsc1lYSWdaWEp5YjNKeklHbHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1VtVmhZM1F1Y21WdVpHVnlJR05oYkd4ekxDQnpieUJKSjIwZ1lXSnpkSEpoWTNScGJtY2dhWFFnWVhkaGVTQnBiblJ2WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZU0JtZFc1amRHbHZiaUIwYnlCdGFXNXBiV2w2WlNCeVpXWmhZM1J2Y21sdVp5QnBiaUIwYUdVZ1puVjBkWEpsWEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR0ZrWkdWdVpIVnRJRDBnWjJWMFJHVmpiR0Z5WVhScGIyNUZjbkp2Y2tGa1pHVnVaSFZ0S0hSb2FYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR3h2WTJGMGFXOXVJRDA5UFNCU1pXRmpkRkJ5YjNCVWVYQmxURzlqWVhScGIyNXpMbkJ5YjNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGQnlaV1poWTJVZ1oybDJaWE1nZFhNZ2MyOXRaWFJvYVc1bklIUnZJR0pzWVdOcmJHbHpkQ0JwYmlCM1lYSnVhVzVuSUcxdlpIVnNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUhkaGNtNXBibWNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBblJtRnBiR1ZrSUVOdmJYQnZjMmwwWlNCd2NtOXdWSGx3WlRvZ0pYTWxjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUxtMWxjM05oWjJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGa1pHVnVaSFZ0WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0owWmhhV3hsWkNCRGIyNTBaWGgwSUZSNWNHVnpPaUFsY3lWekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0l1YldWemMyRm5aU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrWlc1a2RXMWNiaUFnSUNBZ0lDQWdJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnY21WalpXbDJaVU52YlhCdmJtVnVkRG9nWm5WdVkzUnBiMjRvYm1WNGRFVnNaVzFsYm5Rc0lIUnlZVzV6WVdOMGFXOXVMQ0J1WlhoMFEyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhaaGNpQndjbVYyUld4bGJXVnVkQ0E5SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1ME8xeHVJQ0FnSUhaaGNpQndjbVYyUTI5dWRHVjRkQ0E5SUhSb2FYTXVYMk52Ym5SbGVIUTdYRzVjYmlBZ0lDQjBhR2x6TGw5d1pXNWthVzVuUld4bGJXVnVkQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQjBhR2x6TG5Wd1pHRjBaVU52YlhCdmJtVnVkQ2hjYmlBZ0lDQWdJSFJ5WVc1ellXTjBhVzl1TEZ4dUlDQWdJQ0FnY0hKbGRrVnNaVzFsYm5Rc1hHNGdJQ0FnSUNCdVpYaDBSV3hsYldWdWRDeGNiaUFnSUNBZ0lIQnlaWFpEYjI1MFpYaDBMRnh1SUNBZ0lDQWdibVY0ZEVOdmJuUmxlSFJjYmlBZ0lDQXBPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSlppQmhibmtnYjJZZ1lGOXdaVzVrYVc1blJXeGxiV1Z1ZEdBc0lHQmZjR1Z1WkdsdVoxTjBZWFJsVVhWbGRXVmdMQ0J2Y2lCZ1gzQmxibVJwYm1kR2IzSmpaVlZ3WkdGMFpXQmNiaUFnSUNvZ2FYTWdjMlYwTENCMWNHUmhkR1VnZEdobElHTnZiWEJ2Ym1WdWRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRGSmxZMjl1WTJsc1pWUnlZVzV6WVdOMGFXOXVmU0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUhCbGNtWnZjbTFWY0dSaGRHVkpaazVsWTJWemMyRnllVG9nWm5WdVkzUnBiMjRvZEhKaGJuTmhZM1JwYjI0cElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmNHVnVaR2x1WjBWc1pXMWxiblFnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnVW1WaFkzUlNaV052Ym1OcGJHVnlMbkpsWTJWcGRtVkRiMjF3YjI1bGJuUW9YRzRnSUNBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCbGJtUnBibWRGYkdWdFpXNTBJSHg4SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExGeHVJQ0FnSUNBZ0lDQjBjbUZ1YzJGamRHbHZiaXhjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjl1ZEdWNGRGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZmNHVnVaR2x1WjFOMFlYUmxVWFZsZFdVZ0lUMDlJRzUxYkd3Z2ZId2dkR2hwY3k1ZmNHVnVaR2x1WjBadmNtTmxWWEJrWVhSbEtTQjdYRzRnSUNBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQWdJRkpsWVdOMFJXeGxiV1Z1ZEZaaGJHbGtZWFJ2Y2k1amFHVmphMEZ1WkZkaGNtNUdiM0pOZFhSaGRHVmtVSEp2Y0hNb1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkRiMjF3YjI1bGJuUW9YRzRnSUNBZ0lDQWdJSFJ5WVc1ellXTjBhVzl1TEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDeGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblFzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym5SbGVIUXNYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnZiblJsZUhSY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiMjF3WVhKbElIUjNieUJqYjI1MFpYaDBjeXdnZDJGeWJtbHVaeUJwWmlCMGFHVjVJR0Z5WlNCa2FXWm1aWEpsYm5SY2JpQWdJQ29nVkU5RVR6b2dVbVZ0YjNabElIUm9hWE1nWTJobFkyc2dkMmhsYmlCdmQyNWxjaTFqYjI1MFpYaDBJR2x6SUhKbGJXOTJaV1JjYmlBZ0lDb3ZYRzRnSUNCZmQyRnlia2xtUTI5dWRHVjRkSE5FYVdabVpYSTZJR1oxYm1OMGFXOXVLRzkzYm1WeVFtRnpaV1JEYjI1MFpYaDBMQ0J3WVhKbGJuUkNZWE5sWkVOdmJuUmxlSFFwSUh0Y2JpQWdJQ0J2ZDI1bGNrSmhjMlZrUTI5dWRHVjRkQ0E5SUhSb2FYTXVYMjFoYzJ0RGIyNTBaWGgwS0c5M2JtVnlRbUZ6WldSRGIyNTBaWGgwS1R0Y2JpQWdJQ0J3WVhKbGJuUkNZWE5sWkVOdmJuUmxlSFFnUFNCMGFHbHpMbDl0WVhOclEyOXVkR1Y0ZENod1lYSmxiblJDWVhObFpFTnZiblJsZUhRcE8xeHVJQ0FnSUhaaGNpQndZWEpsYm5STFpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2NHRnlaVzUwUW1GelpXUkRiMjUwWlhoMEtTNXpiM0owS0NrN1hHNGdJQ0FnZG1GeUlHUnBjM0JzWVhsT1lXMWxJRDBnZEdocGN5NW5aWFJPWVcxbEtDa2dmSHdnSjFKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBKenRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEJoY21WdWRFdGxlWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJyWlhrZ1BTQndZWEpsYm5STFpYbHpXMmxkTzF4dUlDQWdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JSGRoY201cGJtY29YRzRnSUNBZ0lDQWdJRzkzYm1WeVFtRnpaV1JEYjI1MFpYaDBXMnRsZVYwZ1BUMDlJSEJoY21WdWRFSmhjMlZrUTI5dWRHVjRkRnRyWlhsZExGeHVJQ0FnSUNBZ0lDQW5iM2R1WlhJdFltRnpaV1FnWVc1a0lIQmhjbVZ1ZEMxaVlYTmxaQ0JqYjI1MFpYaDBjeUJrYVdabVpYSWdKeUFnSzF4dUlDQWdJQ0FnSUNBbktIWmhiSFZsY3pvZ1lDVnpZQ0IyY3lCZ0pYTmdLU0JtYjNJZ2EyVjVJQ2dsY3lrZ2QyaHBiR1VnYlc5MWJuUnBibWNnSlhNZ0p5QXJYRzRnSUNBZ0lDQWdJQ2NvYzJWbE9pQm9kSFJ3T2k4dlptSXViV1V2Y21WaFkzUXRZMjl1ZEdWNGRDMWllUzF3WVhKbGJuUXBKeXhjYmlBZ0lDQWdJQ0FnYjNkdVpYSkNZWE5sWkVOdmJuUmxlSFJiYTJWNVhTeGNiaUFnSUNBZ0lDQWdjR0Z5Wlc1MFFtRnpaV1JEYjI1MFpYaDBXMnRsZVYwc1hHNGdJQ0FnSUNBZ0lHdGxlU3hjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlVTVoYldWY2JpQWdJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQmxjbVp2Y20wZ1lXNGdkWEJrWVhSbElIUnZJR0VnYlc5MWJuUmxaQ0JqYjIxd2IyNWxiblF1SUZSb1pTQmpiMjF3YjI1bGJuUlhhV3hzVW1WalpXbDJaVkJ5YjNCeklHRnVaRnh1SUNBZ0tpQnphRzkxYkdSRGIyMXdiMjVsYm5SVmNHUmhkR1VnYldWMGFHOWtjeUJoY21VZ1kyRnNiR1ZrTENCMGFHVnVJQ2hoYzNOMWJXbHVaeUIwYUdVZ2RYQmtZWFJsSUdsemJpZDBYRzRnSUNBcUlITnJhWEJ3WldRcElIUm9aU0J5WlcxaGFXNXBibWNnZFhCa1lYUmxJR3hwWm1WamVXTnNaU0J0WlhSb2IyUnpJR0Z5WlNCallXeHNaV1FnWVc1a0lIUm9aU0JFVDAxY2JpQWdJQ29nY21Wd2NtVnpaVzUwWVhScGIyNGdhWE1nZFhCa1lYUmxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1Fua2daR1ZtWVhWc2RDd2dkR2hwY3lCcGJYQnNaVzFsYm5SeklGSmxZV04wSjNNZ2NtVnVaR1Z5YVc1bklHRnVaQ0J5WldOdmJtTnBiR2xoZEdsdmJpQmhiR2R2Y21sMGFHMHVYRzRnSUNBcUlGTnZjR2hwYzNScFkyRjBaV1FnWTJ4cFpXNTBjeUJ0WVhrZ2QybHphQ0IwYnlCdmRtVnljbWxrWlNCMGFHbHpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZTQndjbVYyVUdGeVpXNTBSV3hsYldWdWRGeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBSV3hsYldWdWRIMGdibVY0ZEZCaGNtVnVkRVZzWlcxbGJuUmNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxSUVCdmRtVnljbWxrWVdKc1pWeHVJQ0FnS2k5Y2JpQWdkWEJrWVhSbFEyOXRjRzl1Wlc1ME9pQm1kVzVqZEdsdmJpaGNiaUFnSUNCMGNtRnVjMkZqZEdsdmJpeGNiaUFnSUNCd2NtVjJVR0Z5Wlc1MFJXeGxiV1Z1ZEN4Y2JpQWdJQ0J1WlhoMFVHRnlaVzUwUld4bGJXVnVkQ3hjYmlBZ0lDQndjbVYyVlc1dFlYTnJaV1JEYjI1MFpYaDBMRnh1SUNBZ0lHNWxlSFJWYm0xaGMydGxaRU52Ym5SbGVIUmNiaUFnS1NCN1hHNGdJQ0FnZG1GeUlHbHVjM1FnUFNCMGFHbHpMbDlwYm5OMFlXNWpaVHRjYmx4dUlDQWdJSFpoY2lCdVpYaDBRMjl1ZEdWNGRDQTlJR2x1YzNRdVkyOXVkR1Y0ZER0Y2JpQWdJQ0IyWVhJZ2JtVjRkRkJ5YjNCeklEMGdhVzV6ZEM1d2NtOXdjenRjYmx4dUlDQWdJQzh2SUVScGMzUnBibWQxYVhOb0lHSmxkSGRsWlc0Z1lTQndjbTl3Y3lCMWNHUmhkR1VnZG1WeWMzVnpJR0VnYzJsdGNHeGxJSE4wWVhSbElIVndaR0YwWlZ4dUlDQWdJR2xtSUNod2NtVjJVR0Z5Wlc1MFJXeGxiV1Z1ZENBaFBUMGdibVY0ZEZCaGNtVnVkRVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJRzVsZUhSRGIyNTBaWGgwSUQwZ2RHaHBjeTVmY0hKdlkyVnpjME52Ym5SbGVIUW9ibVY0ZEZCaGNtVnVkRVZzWlcxbGJuUXVYMk52Ym5SbGVIUXBPMXh1SUNBZ0lDQWdibVY0ZEZCeWIzQnpJRDBnZEdocGN5NWZjSEp2WTJWemMxQnliM0J6S0c1bGVIUlFZWEpsYm5SRmJHVnRaVzUwTG5CeWIzQnpLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ibVY0ZEZWdWJXRnphMlZrUTI5dWRHVjRkQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJGeWJrbG1RMjl1ZEdWNGRITkVhV1ptWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFVHRnlaVzUwUld4bGJXVnVkQzVmWTI5dWRHVjRkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJWYm0xaGMydGxaRU52Ym5SbGVIUmNiaUFnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRUZ1SUhWd1pHRjBaU0JvWlhKbElIZHBiR3dnYzJOb1pXUjFiR1VnWVc0Z2RYQmtZWFJsSUdKMWRDQnBiVzFsWkdsaGRHVnNlU0J6WlhSY2JpQWdJQ0FnSUM4dklGOXdaVzVrYVc1blUzUmhkR1ZSZFdWMVpTQjNhR2xqYUNCM2FXeHNJR1Z1YzNWeVpTQjBhR0YwSUdGdWVTQnpkR0YwWlNCMWNHUmhkR1Z6SUdkbGRITmNiaUFnSUNBZ0lDOHZJR2x0YldWa2FXRjBaV3g1SUhKbFkyOXVZMmxzWldRZ2FXNXpkR1ZoWkNCdlppQjNZV2wwYVc1bklHWnZjaUIwYUdVZ2JtVjRkQ0JpWVhSamFDNWNibHh1SUNBZ0lDQWdhV1lnS0dsdWMzUXVZMjl0Y0c5dVpXNTBWMmxzYkZKbFkyVnBkbVZRY205d2N5a2dlMXh1SUNBZ0lDQWdJQ0JwYm5OMExtTnZiWEJ2Ym1WdWRGZHBiR3hTWldObGFYWmxVSEp2Y0hNb2JtVjRkRkJ5YjNCekxDQnVaWGgwUTI5dWRHVjRkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUc1bGVIUlRkR0YwWlNBOUlIUm9hWE11WDNCeWIyTmxjM05RWlc1a2FXNW5VM1JoZEdVb2JtVjRkRkJ5YjNCekxDQnVaWGgwUTI5dWRHVjRkQ2s3WEc1Y2JpQWdJQ0IyWVhJZ2MyaHZkV3hrVlhCa1lYUmxJRDFjYmlBZ0lDQWdJSFJvYVhNdVgzQmxibVJwYm1kR2IzSmpaVlZ3WkdGMFpTQjhmRnh1SUNBZ0lDQWdJV2x1YzNRdWMyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxJSHg4WEc0Z0lDQWdJQ0JwYm5OMExuTm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaU2h1WlhoMFVISnZjSE1zSUc1bGVIUlRkR0YwWlN3Z2JtVjRkRU52Ym5SbGVIUXBPMXh1WEc0Z0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lIZGhjbTVwYm1jb1hHNGdJQ0FnSUNBZ0lIUjVjR1Z2WmlCemFHOTFiR1JWY0dSaGRHVWdJVDA5SUNkMWJtUmxabWx1WldRbkxGeHVJQ0FnSUNBZ0lDQW5KWE11YzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbEtDazZJRkpsZEhWeWJtVmtJSFZ1WkdWbWFXNWxaQ0JwYm5OMFpXRmtJRzltSUdFZ0p5QXJYRzRnSUNBZ0lDQWdJQ2RpYjI5c1pXRnVJSFpoYkhWbExpQk5ZV3RsSUhOMWNtVWdkRzhnY21WMGRYSnVJSFJ5ZFdVZ2IzSWdabUZzYzJVdUp5eGNiaUFnSUNBZ0lDQWdkR2hwY3k1blpYUk9ZVzFsS0NrZ2ZId2dKMUpsWVdOMFEyOXRjRzl6YVhSbFEyOXRjRzl1Wlc1MEoxeHVJQ0FnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHphRzkxYkdSVmNHUmhkR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0JsYm1ScGJtZEdiM0pqWlZWd1pHRjBaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdMeThnVjJsc2JDQnpaWFFnWUhSb2FYTXVjSEp2Y0hOZ0xDQmdkR2hwY3k1emRHRjBaV0FnWVc1a0lHQjBhR2x6TG1OdmJuUmxlSFJnTGx4dUlDQWdJQ0FnZEdocGN5NWZjR1Z5Wm05eWJVTnZiWEJ2Ym1WdWRGVndaR0YwWlNoY2JpQWdJQ0FnSUNBZ2JtVjRkRkJoY21WdWRFVnNaVzFsYm5Rc1hHNGdJQ0FnSUNBZ0lHNWxlSFJRY205d2N5eGNiaUFnSUNBZ0lDQWdibVY0ZEZOMFlYUmxMRnh1SUNBZ0lDQWdJQ0J1WlhoMFEyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ2RISmhibk5oWTNScGIyNHNYRzRnSUNBZ0lDQWdJRzVsZUhSVmJtMWhjMnRsWkVOdmJuUmxlSFJjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZJRWxtSUdsMEozTWdaR1YwWlhKdGFXNWxaQ0IwYUdGMElHRWdZMjl0Y0c5dVpXNTBJSE5vYjNWc1pDQnViM1FnZFhCa1lYUmxMQ0IzWlNCemRHbHNiQ0IzWVc1MFhHNGdJQ0FnSUNBdkx5QjBieUJ6WlhRZ2NISnZjSE1nWVc1a0lITjBZWFJsSUdKMWRDQjNaU0J6YUc5eWRHTjFkQ0IwYUdVZ2NtVnpkQ0J2WmlCMGFHVWdkWEJrWVhSbExseHVJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUWdQU0J1WlhoMFVHRnlaVzUwUld4bGJXVnVkRHRjYmlBZ0lDQWdJSFJvYVhNdVgyTnZiblJsZUhRZ1BTQnVaWGgwVlc1dFlYTnJaV1JEYjI1MFpYaDBPMXh1SUNBZ0lDQWdhVzV6ZEM1d2NtOXdjeUE5SUc1bGVIUlFjbTl3Y3p0Y2JpQWdJQ0FnSUdsdWMzUXVjM1JoZEdVZ1BTQnVaWGgwVTNSaGRHVTdYRzRnSUNBZ0lDQnBibk4wTG1OdmJuUmxlSFFnUFNCdVpYaDBRMjl1ZEdWNGREdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdYM0J5YjJObGMzTlFaVzVrYVc1blUzUmhkR1U2SUdaMWJtTjBhVzl1S0hCeWIzQnpMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUdsdWMzUWdQU0IwYUdsekxsOXBibk4wWVc1alpUdGNiaUFnSUNCMllYSWdjWFZsZFdVZ1BTQjBhR2x6TGw5d1pXNWthVzVuVTNSaGRHVlJkV1YxWlR0Y2JpQWdJQ0IyWVhJZ2NtVndiR0ZqWlNBOUlIUm9hWE11WDNCbGJtUnBibWRTWlhCc1lXTmxVM1JoZEdVN1hHNGdJQ0FnZEdocGN5NWZjR1Z1WkdsdVoxSmxjR3hoWTJWVGRHRjBaU0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNCbGJtUnBibWRUZEdGMFpWRjFaWFZsSUQwZ2JuVnNiRHRjYmx4dUlDQWdJR2xtSUNnaGNYVmxkV1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJwYm5OMExuTjBZWFJsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoeVpYQnNZV05sSUNZbUlIRjFaWFZsTG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIRjFaWFZsV3pCZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnVaWGgwVTNSaGRHVWdQU0JoYzNOcFoyNG9lMzBzSUhKbGNHeGhZMlVnUHlCeGRXVjFaVnN3WFNBNklHbHVjM1F1YzNSaGRHVXBPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0J5WlhCc1lXTmxJRDhnTVNBNklEQTdJR2tnUENCeGRXVjFaUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEJoY25ScFlXd2dQU0J4ZFdWMVpWdHBYVHRjYmlBZ0lDQWdJR0Z6YzJsbmJpaGNiaUFnSUNBZ0lDQWdibVY0ZEZOMFlYUmxMRnh1SUNBZ0lDQWdJQ0IwZVhCbGIyWWdjR0Z5ZEdsaGJDQTlQVDBnSjJaMWJtTjBhVzl1SnlBL1hHNGdJQ0FnSUNBZ0lDQWdjR0Z5ZEdsaGJDNWpZV3hzS0dsdWMzUXNJRzVsZUhSVGRHRjBaU3dnY0hKdmNITXNJR052Ym5SbGVIUXBJRHBjYmlBZ0lDQWdJQ0FnSUNCd1lYSjBhV0ZzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGgwVTNSaGRHVTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxbGNtZGxjeUJ1WlhjZ2NISnZjSE1nWVc1a0lITjBZWFJsTENCdWIzUnBabWxsY3lCa1pXeGxaMkYwWlNCdFpYUm9iMlJ6SUc5bUlIVndaR0YwWlNCaGJtUmNiaUFnSUNvZ2NHVnlabTl5YlhNZ2RYQmtZWFJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUld4bGJXVnVkSDBnYm1WNGRFVnNaVzFsYm5RZ1RtVjRkQ0JsYkdWdFpXNTBYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdVpYaDBVSEp2Y0hNZ1RtVjRkQ0J3ZFdKc2FXTWdiMkpxWldOMElIUnZJSE5sZENCaGN5QndjbTl3WlhKMGFXVnpMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V6OXZZbXBsWTNSOUlHNWxlSFJUZEdGMFpTQk9aWGgwSUc5aWFtVmpkQ0IwYnlCelpYUWdZWE1nYzNSaGRHVXVYRzRnSUNBcUlFQndZWEpoYlNCN1AyOWlhbVZqZEgwZ2JtVjRkRU52Ym5SbGVIUWdUbVY0ZENCd2RXSnNhV01nYjJKcVpXTjBJSFJ2SUhObGRDQmhjeUJqYjI1MFpYaDBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI1OUlIUnlZVzV6WVdOMGFXOXVYRzRnSUNBcUlFQndZWEpoYlNCN1AyOWlhbVZqZEgwZ2RXNXRZWE5yWldSRGIyNTBaWGgwWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JmY0dWeVptOXliVU52YlhCdmJtVnVkRlZ3WkdGMFpUb2dablZ1WTNScGIyNG9YRzRnSUNBZ2JtVjRkRVZzWlcxbGJuUXNYRzRnSUNBZ2JtVjRkRkJ5YjNCekxGeHVJQ0FnSUc1bGVIUlRkR0YwWlN4Y2JpQWdJQ0J1WlhoMFEyOXVkR1Y0ZEN4Y2JpQWdJQ0IwY21GdWMyRmpkR2x2Yml4Y2JpQWdJQ0IxYm0xaGMydGxaRU52Ym5SbGVIUmNiaUFnS1NCN1hHNGdJQ0FnZG1GeUlHbHVjM1FnUFNCMGFHbHpMbDlwYm5OMFlXNWpaVHRjYmx4dUlDQWdJSFpoY2lCd2NtVjJVSEp2Y0hNZ1BTQnBibk4wTG5CeWIzQnpPMXh1SUNBZ0lIWmhjaUJ3Y21WMlUzUmhkR1VnUFNCcGJuTjBMbk4wWVhSbE8xeHVJQ0FnSUhaaGNpQndjbVYyUTI5dWRHVjRkQ0E5SUdsdWMzUXVZMjl1ZEdWNGREdGNibHh1SUNBZ0lHbG1JQ2hwYm5OMExtTnZiWEJ2Ym1WdWRGZHBiR3hWY0dSaGRHVXBJSHRjYmlBZ0lDQWdJR2x1YzNRdVkyOXRjRzl1Wlc1MFYybHNiRlZ3WkdGMFpTaHVaWGgwVUhKdmNITXNJRzVsZUhSVGRHRjBaU3dnYm1WNGRFTnZiblJsZUhRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MElEMGdibVY0ZEVWc1pXMWxiblE3WEc0Z0lDQWdkR2hwY3k1ZlkyOXVkR1Y0ZENBOUlIVnViV0Z6YTJWa1EyOXVkR1Y0ZER0Y2JpQWdJQ0JwYm5OMExuQnliM0J6SUQwZ2JtVjRkRkJ5YjNCek8xeHVJQ0FnSUdsdWMzUXVjM1JoZEdVZ1BTQnVaWGgwVTNSaGRHVTdYRzRnSUNBZ2FXNXpkQzVqYjI1MFpYaDBJRDBnYm1WNGRFTnZiblJsZUhRN1hHNWNiaUFnSUNCMGFHbHpMbDkxY0dSaGRHVlNaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDaDBjbUZ1YzJGamRHbHZiaXdnZFc1dFlYTnJaV1JEYjI1MFpYaDBLVHRjYmx4dUlDQWdJR2xtSUNocGJuTjBMbU52YlhCdmJtVnVkRVJwWkZWd1pHRjBaU2tnZTF4dUlDQWdJQ0FnZEhKaGJuTmhZM1JwYjI0dVoyVjBVbVZoWTNSTmIzVnVkRkpsWVdSNUtDa3VaVzV4ZFdWMVpTaGNiaUFnSUNBZ0lDQWdhVzV6ZEM1amIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVdVltbHVaQ2hwYm5OMExDQndjbVYyVUhKdmNITXNJSEJ5WlhaVGRHRjBaU3dnY0hKbGRrTnZiblJsZUhRcExGeHVJQ0FnSUNBZ0lDQnBibk4wWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyRnNiQ0IwYUdVZ1kyOXRjRzl1Wlc1MEozTWdZSEpsYm1SbGNtQWdiV1YwYUc5a0lHRnVaQ0IxY0dSaGRHVWdkR2hsSUVSUFRTQmhZMk52Y21ScGJtZHNlUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1ZlNCMGNtRnVjMkZqZEdsdmJseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lGOTFjR1JoZEdWU1pXNWtaWEpsWkVOdmJYQnZibVZ1ZERvZ1puVnVZM1JwYjI0b2RISmhibk5oWTNScGIyNHNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnY0hKbGRrTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElEMGdkR2hwY3k1ZmNtVnVaR1Z5WldSRGIyMXdiMjVsYm5RN1hHNGdJQ0FnZG1GeUlIQnlaWFpTWlc1a1pYSmxaRVZzWlcxbGJuUWdQU0J3Y21WMlEyOXRjRzl1Wlc1MFNXNXpkR0Z1WTJVdVgyTjFjbkpsYm5SRmJHVnRaVzUwTzF4dUlDQWdJSFpoY2lCamFHbHNaRU52Ym5SbGVIUWdQU0IwYUdsekxsOW5aWFJXWVd4cFpHRjBaV1JEYUdsc1pFTnZiblJsZUhRb0tUdGNiaUFnSUNCMllYSWdibVY0ZEZKbGJtUmxjbVZrUld4bGJXVnVkQ0E5SUhSb2FYTXVYM0psYm1SbGNsWmhiR2xrWVhSbFpFTnZiWEJ2Ym1WdWRDaGphR2xzWkVOdmJuUmxlSFFwTzF4dUlDQWdJR2xtSUNoemFHOTFiR1JWY0dSaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZENod2NtVjJVbVZ1WkdWeVpXUkZiR1Z0Wlc1MExDQnVaWGgwVW1WdVpHVnlaV1JGYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnVW1WaFkzUlNaV052Ym1OcGJHVnlMbkpsWTJWcGRtVkRiMjF3YjI1bGJuUW9YRzRnSUNBZ0lDQWdJSEJ5WlhaRGIyMXdiMjVsYm5SSmJuTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ2JtVjRkRkpsYm1SbGNtVmtSV3hsYldWdWRDeGNiaUFnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjRzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFsY21kbFEyaHBiR1JEYjI1MFpYaDBLR052Ym5SbGVIUXNJR05vYVd4a1EyOXVkR1Y0ZENsY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUZSb1pYTmxJSFIzYnlCSlJITWdZWEpsSUdGamRIVmhiR3g1SUhSb1pTQnpZVzFsSVNCQ2RYUWdibTkwYUdsdVp5QnphRzkxYkdRZ2NtVnNlU0J2YmlCMGFHRjBMbHh1SUNBZ0lDQWdkbUZ5SUhSb2FYTkpSQ0E5SUhSb2FYTXVYM0p2YjNST2IyUmxTVVE3WEc0Z0lDQWdJQ0IyWVhJZ2NISmxka052YlhCdmJtVnVkRWxFSUQwZ2NISmxka052YlhCdmJtVnVkRWx1YzNSaGJtTmxMbDl5YjI5MFRtOWtaVWxFTzF4dUlDQWdJQ0FnVW1WaFkzUlNaV052Ym1OcGJHVnlMblZ1Ylc5MWJuUkRiMjF3YjI1bGJuUW9jSEpsZGtOdmJYQnZibVZ1ZEVsdWMzUmhibU5sS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlaV1JEYjIxd2IyNWxiblFnUFNCMGFHbHpMbDlwYm5OMFlXNTBhV0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBLRnh1SUNBZ0lDQWdJQ0J1WlhoMFVtVnVaR1Z5WldSRmJHVnRaVzUwTEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNTBlWEJsWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZG1GeUlHNWxlSFJOWVhKcmRYQWdQU0JTWldGamRGSmxZMjl1WTJsc1pYSXViVzkxYm5SRGIyMXdiMjVsYm5Rb1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJtUmxjbVZrUTI5dGNHOXVaVzUwTEZ4dUlDQWdJQ0FnSUNCMGFHbHpTVVFzWEc0Z0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dUxGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dFpYSm5aVU5vYVd4a1EyOXVkR1Y0ZENoamIyNTBaWGgwTENCamFHbHNaRU52Ym5SbGVIUXBYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdkR2hwY3k1ZmNtVndiR0ZqWlU1dlpHVlhhWFJvVFdGeWEzVndRbmxKUkNod2NtVjJRMjl0Y0c5dVpXNTBTVVFzSUc1bGVIUk5ZWEpyZFhBcE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRSEJ5YjNSbFkzUmxaRnh1SUNBZ0tpOWNiaUFnWDNKbGNHeGhZMlZPYjJSbFYybDBhRTFoY210MWNFSjVTVVE2SUdaMWJtTjBhVzl1S0hCeVpYWkRiMjF3YjI1bGJuUkpSQ3dnYm1WNGRFMWhjbXQxY0NrZ2UxeHVJQ0FnSUZKbFlXTjBRMjl0Y0c5dVpXNTBSVzUyYVhKdmJtMWxiblF1Y21Wd2JHRmpaVTV2WkdWWGFYUm9UV0Z5YTNWd1FubEpSQ2hjYmlBZ0lDQWdJSEJ5WlhaRGIyMXdiMjVsYm5SSlJDeGNiaUFnSUNBZ0lHNWxlSFJOWVhKcmRYQmNiaUFnSUNBcE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0lDQXFMMXh1SUNCZmNtVnVaR1Z5Vm1Gc2FXUmhkR1ZrUTI5dGNHOXVaVzUwVjJsMGFHOTFkRTkzYm1WeVQzSkRiMjUwWlhoME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnYVc1emRDQTlJSFJvYVhNdVgybHVjM1JoYm1ObE8xeHVJQ0FnSUhaaGNpQnlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDQTlJR2x1YzNRdWNtVnVaR1Z5S0NrN1hHNGdJQ0FnYVdZZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaWtnZTF4dUlDQWdJQ0FnTHk4Z1YyVWdZV3hzYjNjZ1lYVjBieTF0YjJOcmN5QjBieUJ3Y205alpXVmtJR0Z6SUdsbUlIUm9aWGtuY21VZ2NtVjBkWEp1YVc1bklHNTFiR3d1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhKbGJtUmxjbVZrUTI5dGNHOXVaVzUwSUQwOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4dUlDQWdJQ0FnSUNBZ0lHbHVjM1F1Y21WdVpHVnlMbDlwYzAxdlkydEdkVzVqZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0F2THlCVWFHbHpJR2x6SUhCeWIySmhZbXg1SUdKaFpDQndjbUZqZEdsalpTNGdRMjl1YzJsa1pYSWdkMkZ5Ym1sdVp5Qm9aWEpsSUdGdVpGeHVJQ0FnSUNBZ0lDQXZMeUJrWlhCeVpXTmhkR2x1WnlCMGFHbHpJR052Ym5abGJtbGxibU5sTGx4dUlDQWdJQ0FnSUNCeVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlISmxibVJsY21Wa1EyOXRjRzl1Wlc1ME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDNKbGJtUmxjbFpoYkdsa1lYUmxaRU52YlhCdmJtVnVkRG9nWm5WdVkzUnBiMjRvWTJocGJHUkRiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJSEpsYm1SbGNtVmtRMjl0Y0c5dVpXNTBPMXh1SUNBZ0lIWmhjaUJ3Y21WMmFXOTFjME52Ym5SbGVIUWdQU0JTWldGamRFTnZiblJsZUhRdVkzVnljbVZ1ZER0Y2JpQWdJQ0JTWldGamRFTnZiblJsZUhRdVkzVnljbVZ1ZENBOUlIUm9hWE11WDIxbGNtZGxRMmhwYkdSRGIyNTBaWGgwS0Z4dUlDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RdVgyTnZiblJsZUhRc1hHNGdJQ0FnSUNCamFHbHNaRU52Ym5SbGVIUmNiaUFnSUNBcE8xeHVJQ0FnSUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5TG1OMWNuSmxiblFnUFNCMGFHbHpPMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5Wlc1a1pYSmxaRU52YlhCdmJtVnVkQ0E5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psYm1SbGNsWmhiR2xrWVhSbFpFTnZiWEJ2Ym1WdWRGZHBkR2h2ZFhSUGQyNWxjazl5UTI5dWRHVjRkQ2dwTzF4dUlDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0JTWldGamRFTnZiblJsZUhRdVkzVnljbVZ1ZENBOUlIQnlaWFpwYjNWelEyOXVkR1Y0ZER0Y2JpQWdJQ0FnSUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5TG1OMWNuSmxiblFnUFNCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nUVc0Z1lHbHpWbUZzYVdST2IyUmxZQ0JtZFc1amRHbHZiaUIzYjNWc1pDQndjbTlpWVdKc2VTQmlaU0J0YjNKbElHRndjSEp2Y0hKcFlYUmxYRzRnSUNBZ0lDQnlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDQTlQVDBnYm5Wc2JDQjhmQ0J5Wlc1a1pYSmxaRU52YlhCdmJtVnVkQ0E5UFQwZ1ptRnNjMlVnZkh4Y2JpQWdJQ0FnSUZKbFlXTjBSV3hsYldWdWRDNXBjMVpoYkdsa1JXeGxiV1Z1ZENoeVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENrc1hHNGdJQ0FnSUNBbkpYTXVjbVZ1WkdWeUtDazZJRUVnZG1Gc2FXUWdVbVZoWTNSRGIyMXdiMjVsYm5RZ2JYVnpkQ0JpWlNCeVpYUjFjbTVsWkM0Z1dXOTFJRzFoZVNCb1lYWmxJQ2NnSzF4dUlDQWdJQ0FnSUNBbmNtVjBkWEp1WldRZ2RXNWtaV1pwYm1Wa0xDQmhiaUJoY25KaGVTQnZjaUJ6YjIxbElHOTBhR1Z5SUdsdWRtRnNhV1FnYjJKcVpXTjBMaWNzWEc0Z0lDQWdJQ0IwYUdsekxtZGxkRTVoYldVb0tTQjhmQ0FuVW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUW5YRzRnSUNBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2d2THlCVVQwUlBPaUJCYmlCZ2FYTldZV3hwWkU1dlpHVmdJR1oxYm1OMGFXOXVJSGR2ZFd4a0lIQnliMkpoWW14NUlHSmxJRzF2Y21VZ1lYQndjbTl3Y21saGRHVmNiaUFnSUNCeVpXNWtaWEpsWkVOdmJYQnZibVZ1ZENBOVBUMGdiblZzYkNCOGZDQnlaVzVrWlhKbFpFTnZiWEJ2Ym1WdWRDQTlQVDBnWm1Gc2MyVWdmSHhjYmlBZ0lDQlNaV0ZqZEVWc1pXMWxiblF1YVhOV1lXeHBaRVZzWlcxbGJuUW9jbVZ1WkdWeVpXUkRiMjF3YjI1bGJuUXBLU2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxibVJsY21Wa1EyOXRjRzl1Wlc1ME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJNWVhwcGJIa2dZV3hzYjJOaGRHVnpJSFJvWlNCeVpXWnpJRzlpYW1WamRDQmhibVFnYzNSdmNtVnpJR0JqYjIxd2IyNWxiblJnSUdGeklHQnlaV1pnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NtVm1JRkpsWm1WeVpXNWpaU0J1WVcxbExseHVJQ0FnS2lCQWNHRnlZVzBnZTJOdmJYQnZibVZ1ZEgwZ1kyOXRjRzl1Wlc1MElFTnZiWEJ2Ym1WdWRDQjBieUJ6ZEc5eVpTQmhjeUJnY21WbVlDNWNiaUFnSUNvZ1FHWnBibUZzWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JoZEhSaFkyaFNaV1k2SUdaMWJtTjBhVzl1S0hKbFppd2dZMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdkbUZ5SUdsdWMzUWdQU0IwYUdsekxtZGxkRkIxWW14cFkwbHVjM1JoYm1ObEtDazdYRzRnSUNBZ2RtRnlJSEpsWm5NZ1BTQnBibk4wTG5KbFpuTWdQVDA5SUdWdGNIUjVUMkpxWldOMElEOGdLR2x1YzNRdWNtVm1jeUE5SUh0OUtTQTZJR2x1YzNRdWNtVm1jenRjYmlBZ0lDQnlaV1p6VzNKbFpsMGdQU0JqYjIxd2IyNWxiblF1WjJWMFVIVmliR2xqU1c1emRHRnVZMlVvS1R0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR1YwWVdOb1pYTWdZU0J5WldabGNtVnVZMlVnYm1GdFpTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsWmlCT1lXMWxJSFJ2SUdSbGNtVm1aWEpsYm1ObExseHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJR1JsZEdGamFGSmxaam9nWm5WdVkzUnBiMjRvY21WbUtTQjdYRzRnSUNBZ2RtRnlJSEpsWm5NZ1BTQjBhR2x6TG1kbGRGQjFZbXhwWTBsdWMzUmhibU5sS0NrdWNtVm1jenRjYmlBZ0lDQmtaV3hsZEdVZ2NtVm1jMXR5WldaZE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1lTQjBaWGgwSUdSbGMyTnlhWEIwYVc5dUlHOW1JSFJvWlNCamIyMXdiMjVsYm5RZ2RHaGhkQ0JqWVc0Z1ltVWdkWE5sWkNCMGJ5QnBaR1Z1ZEdsbWVTQnBkRnh1SUNBZ0tpQnBiaUJsY25KdmNpQnRaWE56WVdkbGN5NWNiaUFnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNCVWFHVWdibUZ0WlNCdmNpQnVkV3hzTGx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdkbGRFNWhiV1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQjBlWEJsSUQwZ2RHaHBjeTVmWTNWeWNtVnVkRVZzWlcxbGJuUXVkSGx3WlR0Y2JpQWdJQ0IyWVhJZ1kyOXVjM1J5ZFdOMGIzSWdQU0IwYUdsekxsOXBibk4wWVc1alpTQW1KaUIwYUdsekxsOXBibk4wWVc1alpTNWpiMjV6ZEhKMVkzUnZjanRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ2RIbHdaUzVrYVhOd2JHRjVUbUZ0WlNCOGZDQW9ZMjl1YzNSeWRXTjBiM0lnSmlZZ1kyOXVjM1J5ZFdOMGIzSXVaR2x6Y0d4aGVVNWhiV1VwSUh4OFhHNGdJQ0FnSUNCMGVYQmxMbTVoYldVZ2ZId2dLR052Ym5OMGNuVmpkRzl5SUNZbUlHTnZibk4wY25WamRHOXlMbTVoYldVcElIeDhYRzRnSUNBZ0lDQnVkV3hzWEc0Z0lDQWdLVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBJSFJvWlNCd2RXSnNhV05zZVNCaFkyTmxjM05wWW14bElISmxjSEpsYzJWdWRHRjBhVzl1SUc5bUlIUm9hWE1nWTI5dGNHOXVaVzUwSUMwZ2FTNWxMaUIzYUdGMFhHNGdJQ0FxSUdseklHVjRjRzl6WldRZ1lua2djbVZtY3lCaGJtUWdjbVYwZFhKdVpXUWdZbmtnVW1WaFkzUXVjbVZ1WkdWeUxpQkRZVzRnWW1VZ2JuVnNiQ0JtYjNJZ2MzUmhkR1ZzWlhOelhHNGdJQ0FxSUdOdmJYQnZibVZ1ZEhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZTQjBhR1VnY0hWaWJHbGpJR052YlhCdmJtVnVkQ0JwYm5OMFlXNWpaUzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JuWlhSUWRXSnNhV05KYm5OMFlXNWpaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHVjM1JoYm1ObE8xeHVJQ0I5TEZ4dVhHNGdJQzh2SUZOMGRXSmNiaUFnWDJsdWMzUmhiblJwWVhSbFVtVmhZM1JEYjIxd2IyNWxiblE2SUc1MWJHeGNibHh1ZlR0Y2JseHVVbVZoWTNSUVpYSm1MbTFsWVhOMWNtVk5aWFJvYjJSektGeHVJQ0JTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRFMXBlR2x1TEZ4dUlDQW5VbVZoWTNSRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5RbkxGeHVJQ0I3WEc0Z0lDQWdiVzkxYm5SRGIyMXdiMjVsYm5RNklDZHRiM1Z1ZEVOdmJYQnZibVZ1ZENjc1hHNGdJQ0FnZFhCa1lYUmxRMjl0Y0c5dVpXNTBPaUFuZFhCa1lYUmxRMjl0Y0c5dVpXNTBKeXhjYmlBZ0lDQmZjbVZ1WkdWeVZtRnNhV1JoZEdWa1EyOXRjRzl1Wlc1ME9pQW5YM0psYm1SbGNsWmhiR2xrWVhSbFpFTnZiWEJ2Ym1WdWRDZGNiaUFnZlZ4dUtUdGNibHh1ZG1GeUlGSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwSUQwZ2UxeHVYRzRnSUUxcGVHbHVPaUJTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRFMXBlR2x1WEc1Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUTdYRzRpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjt2YXIgYXNzaWduPXJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIiksZW1wdHlPYmplY3Q9cmVxdWlyZShcIi4vZW1wdHlPYmplY3RcIiksd2FybmluZz1yZXF1aXJlKFwiLi93YXJuaW5nXCIpLGRpZFdhcm49ITEsUmVhY3RDb250ZXh0PXtjdXJyZW50OmVtcHR5T2JqZWN0LHdpdGhDb250ZXh0OmZ1bmN0aW9uKG5ld0NvbnRleHQsc2NvcGVkQ2FsbGJhY2spe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoZGlkV2FybixcIndpdGhDb250ZXh0IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiBVc2UgYSB3cmFwcGVyIGNvbXBvbmVudCB3aXRoIGdldENoaWxkQ29udGV4dCBpbnN0ZWFkLlwiKTpudWxsLGRpZFdhcm49ITApO3ZhciByZXN1bHQscHJldmlvdXNDb250ZXh0PVJlYWN0Q29udGV4dC5jdXJyZW50O1JlYWN0Q29udGV4dC5jdXJyZW50PWFzc2lnbih7fSxwcmV2aW91c0NvbnRleHQsbmV3Q29udGV4dCk7dHJ5e3Jlc3VsdD1zY29wZWRDYWxsYmFjaygpfWZpbmFsbHl7UmVhY3RDb250ZXh0LmN1cnJlbnQ9cHJldmlvdXNDb250ZXh0fXJldHVybiByZXN1bHR9fTttb2R1bGUuZXhwb3J0cz1SZWFjdENvbnRleHQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRGIyNTBaWGgwTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRlhRU3haUVVWQkxFbEJRVWtzVVVGQlV5eFJRVUZSTEcxQ1FVTnFRaXhaUVVGakxGRkJRVkVzYVVKQlEzUkNMRkZCUVZVc1VVRkJVU3hoUVVWc1FpeFRRVUZWTEVWQlVWWXNZMEZOUml4UlFVRlRMRmxCYTBKVUxGbEJRV0VzVTBGQlV5eFhRVUZaTEdkQ1FVTTFRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NWMEZET1VJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVVUZEZGtNc1VVRkRRU3cwU0VGRlJTeExRVVZLTEZOQlFWVXNSVUZIV2l4SlFVRkpMRkZCUTBFc1owSkJRV3RDTEdGQlFXRXNUMEZEYmtNc1kwRkJZU3hSUVVGVkxGVkJRVmNzWjBKQlFXbENMRmRCUTI1RUxFdEJRMFVzVDBGQlV5eHBRa0ZEVkN4UlFVTkJMR0ZCUVdFc1VVRkJWU3huUWtGRmVrSXNUVUZCVHl4VFFVdFlMRkZCUVU4c1VVRkJWU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFEyOXVkR1Y0ZEZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb1hDSXVMMDlpYW1WamRDNWhjM05wWjI1Y0lpazdYRzUyWVhJZ1pXMXdkSGxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLRndpTGk5bGJYQjBlVTlpYW1WamRGd2lLVHRjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTaGNJaTR2ZDJGeWJtbHVaMXdpS1R0Y2JseHVkbUZ5SUdScFpGZGhjbTRnUFNCbVlXeHpaVHRjYmx4dUx5b3FYRzRnS2lCTFpXVndjeUIwY21GamF5QnZaaUIwYUdVZ1kzVnljbVZ1ZENCamIyNTBaWGgwTGx4dUlDcGNiaUFxSUZSb1pTQmpiMjUwWlhoMElHbHpJR0YxZEc5dFlYUnBZMkZzYkhrZ2NHRnpjMlZrSUdSdmQyNGdkR2hsSUdOdmJYQnZibVZ1ZENCdmQyNWxjbk5vYVhBZ2FHbGxjbUZ5WTJoNVhHNGdLaUJoYm1RZ2FYTWdZV05qWlhOemFXSnNaU0IyYVdFZ1lIUm9hWE11WTI5dWRHVjRkR0FnYjI0Z1VtVmhZM1JEYjIxd2IzTnBkR1ZEYjIxd2IyNWxiblJ6TGx4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JEYjI1MFpYaDBJRDBnZTF4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb2dRSFI1Y0dVZ2UyOWlhbVZqZEgxY2JpQWdJQ292WEc0Z0lHTjFjbkpsYm5RNklHVnRjSFI1VDJKcVpXTjBMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVaVzF3YjNKaGNtbHNlU0JsZUhSbGJtUnpJSFJvWlNCamRYSnlaVzUwSUdOdmJuUmxlSFFnZDJocGJHVWdaWGhsWTNWMGFXNW5JSE5qYjNCbFpFTmhiR3hpWVdOckxseHVJQ0FnS2x4dUlDQWdLaUJCSUhSNWNHbGpZV3dnZFhObElHTmhjMlVnYldsbmFIUWdiRzl2YXlCc2FXdGxYRzRnSUNBcVhHNGdJQ0FxSUNCeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnS2lBZ0lDQjJZWElnWTJocGJHUnlaVzRnUFNCU1pXRmpkRU52Ym5SbGVIUXVkMmwwYUVOdmJuUmxlSFFvZTJadmJ6b2dKMlp2YnlkOUxDQW9LU0E5UGlBb1hHNGdJQ0FxWEc0Z0lDQXFJQ0FnSUNrcE8xeHVJQ0FnS2lBZ0lDQnlaWFIxY200Z1BHUnBkajU3WTJocGJHUnlaVzU5UEM5a2FYWStPMXh1SUNBZ0tpQWdmVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYm1WM1EyOXVkR1Y0ZENCT1pYY2dZMjl1ZEdWNGRDQjBieUJ0WlhKblpTQnBiblJ2SUhSb1pTQmxlR2x6ZEdsdVp5QmpiMjUwWlhoMFhHNGdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUhOamIzQmxaRU5oYkd4aVlXTnJJRU5oYkd4aVlXTnJJSFJ2SUhKMWJpQjNhWFJvSUhSb1pTQnVaWGNnWTI5dWRHVjRkRnh1SUNBZ0tpQkFjbVYwZFhKdUlIdFNaV0ZqZEVOdmJYQnZibVZ1ZEh4aGNuSmhlVHhTWldGamRFTnZiWEJ2Ym1WdWRENTlYRzRnSUNBcUwxeHVJQ0IzYVhSb1EyOXVkR1Y0ZERvZ1puVnVZM1JwYjI0b2JtVjNRMjl1ZEdWNGRDd2djMk52Y0dWa1EyRnNiR0poWTJzcElIdGNiaUFnSUNCcFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJQ0FnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnZDJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0FnWkdsa1YyRnliaXhjYmlBZ0lDQWdJQ0FnSjNkcGRHaERiMjUwWlhoMElHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lIZHBiR3dnWW1VZ2NtVnRiM1psWkNCcGJpQmhJR1oxZEhWeVpTQjJaWEp6YVc5dUxpQW5JQ3RjYmlBZ0lDQWdJQ0FnSjFWelpTQmhJSGR5WVhCd1pYSWdZMjl0Y0c5dVpXNTBJSGRwZEdnZ1oyVjBRMmhwYkdSRGIyNTBaWGgwSUdsdWMzUmxZV1F1SjF4dUlDQWdJQ0FnS1NBNklHNTFiR3dwTzF4dVhHNGdJQ0FnSUNCa2FXUlhZWEp1SUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnY21WemRXeDBPMXh1SUNBZ0lIWmhjaUJ3Y21WMmFXOTFjME52Ym5SbGVIUWdQU0JTWldGamRFTnZiblJsZUhRdVkzVnljbVZ1ZER0Y2JpQWdJQ0JTWldGamRFTnZiblJsZUhRdVkzVnljbVZ1ZENBOUlHRnpjMmxuYmloN2ZTd2djSEpsZG1sdmRYTkRiMjUwWlhoMExDQnVaWGREYjI1MFpYaDBLVHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnY21WemRXeDBJRDBnYzJOdmNHVmtRMkZzYkdKaFkyc29LVHRjYmlBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdVbVZoWTNSRGIyNTBaWGgwTG1OMWNuSmxiblFnUFNCd2NtVjJhVzkxYzBOdmJuUmxlSFE3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMWNibHh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEVOdmJuUmxlSFE3WEc0aVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDdXJyZW50T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICpcbiAqIFRoZSBkZXB0aCBpbmRpY2F0ZSBob3cgbWFueSBjb21wb3NpdGUgY29tcG9uZW50cyBhcmUgYWJvdmUgdGhpcyByZW5kZXIgbGV2ZWwuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBjcmVhdGVET01GYWN0b3J5KHRhZyl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSh0YWcpOlJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KHRhZyl9dmFyIFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksUmVhY3RFbGVtZW50VmFsaWRhdG9yPXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKSxtYXBPYmplY3Q9cmVxdWlyZShcIi4vbWFwT2JqZWN0XCIpLFJlYWN0RE9NPW1hcE9iamVjdCh7YTpcImFcIixhYmJyOlwiYWJiclwiLGFkZHJlc3M6XCJhZGRyZXNzXCIsYXJlYTpcImFyZWFcIixhcnRpY2xlOlwiYXJ0aWNsZVwiLGFzaWRlOlwiYXNpZGVcIixhdWRpbzpcImF1ZGlvXCIsYjpcImJcIixiYXNlOlwiYmFzZVwiLGJkaTpcImJkaVwiLGJkbzpcImJkb1wiLGJpZzpcImJpZ1wiLGJsb2NrcXVvdGU6XCJibG9ja3F1b3RlXCIsYm9keTpcImJvZHlcIixicjpcImJyXCIsYnV0dG9uOlwiYnV0dG9uXCIsY2FudmFzOlwiY2FudmFzXCIsY2FwdGlvbjpcImNhcHRpb25cIixjaXRlOlwiY2l0ZVwiLGNvZGU6XCJjb2RlXCIsY29sOlwiY29sXCIsY29sZ3JvdXA6XCJjb2xncm91cFwiLGRhdGE6XCJkYXRhXCIsZGF0YWxpc3Q6XCJkYXRhbGlzdFwiLGRkOlwiZGRcIixkZWw6XCJkZWxcIixkZXRhaWxzOlwiZGV0YWlsc1wiLGRmbjpcImRmblwiLGRpYWxvZzpcImRpYWxvZ1wiLGRpdjpcImRpdlwiLGRsOlwiZGxcIixkdDpcImR0XCIsZW06XCJlbVwiLGVtYmVkOlwiZW1iZWRcIixmaWVsZHNldDpcImZpZWxkc2V0XCIsZmlnY2FwdGlvbjpcImZpZ2NhcHRpb25cIixmaWd1cmU6XCJmaWd1cmVcIixmb290ZXI6XCJmb290ZXJcIixmb3JtOlwiZm9ybVwiLGgxOlwiaDFcIixoMjpcImgyXCIsaDM6XCJoM1wiLGg0OlwiaDRcIixoNTpcImg1XCIsaDY6XCJoNlwiLGhlYWQ6XCJoZWFkXCIsaGVhZGVyOlwiaGVhZGVyXCIsaHI6XCJoclwiLGh0bWw6XCJodG1sXCIsaTpcImlcIixpZnJhbWU6XCJpZnJhbWVcIixpbWc6XCJpbWdcIixpbnB1dDpcImlucHV0XCIsaW5zOlwiaW5zXCIsa2JkOlwia2JkXCIsa2V5Z2VuOlwia2V5Z2VuXCIsbGFiZWw6XCJsYWJlbFwiLGxlZ2VuZDpcImxlZ2VuZFwiLGxpOlwibGlcIixsaW5rOlwibGlua1wiLG1haW46XCJtYWluXCIsbWFwOlwibWFwXCIsbWFyazpcIm1hcmtcIixtZW51OlwibWVudVwiLG1lbnVpdGVtOlwibWVudWl0ZW1cIixtZXRhOlwibWV0YVwiLG1ldGVyOlwibWV0ZXJcIixuYXY6XCJuYXZcIixub3NjcmlwdDpcIm5vc2NyaXB0XCIsb2JqZWN0Olwib2JqZWN0XCIsb2w6XCJvbFwiLG9wdGdyb3VwOlwib3B0Z3JvdXBcIixvcHRpb246XCJvcHRpb25cIixvdXRwdXQ6XCJvdXRwdXRcIixwOlwicFwiLHBhcmFtOlwicGFyYW1cIixwaWN0dXJlOlwicGljdHVyZVwiLHByZTpcInByZVwiLHByb2dyZXNzOlwicHJvZ3Jlc3NcIixxOlwicVwiLHJwOlwicnBcIixydDpcInJ0XCIscnVieTpcInJ1YnlcIixzOlwic1wiLHNhbXA6XCJzYW1wXCIsc2NyaXB0Olwic2NyaXB0XCIsc2VjdGlvbjpcInNlY3Rpb25cIixzZWxlY3Q6XCJzZWxlY3RcIixzbWFsbDpcInNtYWxsXCIsc291cmNlOlwic291cmNlXCIsc3BhbjpcInNwYW5cIixzdHJvbmc6XCJzdHJvbmdcIixzdHlsZTpcInN0eWxlXCIsc3ViOlwic3ViXCIsc3VtbWFyeTpcInN1bW1hcnlcIixzdXA6XCJzdXBcIix0YWJsZTpcInRhYmxlXCIsdGJvZHk6XCJ0Ym9keVwiLHRkOlwidGRcIix0ZXh0YXJlYTpcInRleHRhcmVhXCIsdGZvb3Q6XCJ0Zm9vdFwiLHRoOlwidGhcIix0aGVhZDpcInRoZWFkXCIsdGltZTpcInRpbWVcIix0aXRsZTpcInRpdGxlXCIsdHI6XCJ0clwiLHRyYWNrOlwidHJhY2tcIix1OlwidVwiLHVsOlwidWxcIixcInZhclwiOlwidmFyXCIsdmlkZW86XCJ2aWRlb1wiLHdicjpcIndiclwiLGNpcmNsZTpcImNpcmNsZVwiLGNsaXBQYXRoOlwiY2xpcFBhdGhcIixkZWZzOlwiZGVmc1wiLGVsbGlwc2U6XCJlbGxpcHNlXCIsZzpcImdcIixsaW5lOlwibGluZVwiLGxpbmVhckdyYWRpZW50OlwibGluZWFyR3JhZGllbnRcIixtYXNrOlwibWFza1wiLHBhdGg6XCJwYXRoXCIscGF0dGVybjpcInBhdHRlcm5cIixwb2x5Z29uOlwicG9seWdvblwiLHBvbHlsaW5lOlwicG9seWxpbmVcIixyYWRpYWxHcmFkaWVudDpcInJhZGlhbEdyYWRpZW50XCIscmVjdDpcInJlY3RcIixzdG9wOlwic3RvcFwiLHN2ZzpcInN2Z1wiLHRleHQ6XCJ0ZXh0XCIsdHNwYW46XCJ0c3BhblwifSxjcmVhdGVET01GYWN0b3J5KTttb2R1bGUuZXhwb3J0cz1SZWFjdERPTTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFVDAwdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmxCTEZsQllVRXNVMEZCVXl4clFrRkJhVUlzUzBGRGVFSXNUVUZCU1N4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGRGVFSXNjMEpCUVhOQ0xHTkJRV01zUzBGRmRFTXNZVUZCWVN4alFVRmpMRXRCWm5CRExFZEJRVWtzWTBGQlpTeFJRVUZSTEd0Q1FVTjJRaXh6UWtGQmQwSXNVVUZCVVN3eVFrRkZhRU1zVlVGQldTeFJRVUZSTEdWQmNVSndRaXhUUVVGWExGZEJRMklzUlVGQlJ5eEpRVU5JTEV0QlFVMHNUMEZEVGl4UlFVRlRMRlZCUTFRc1MwRkJUU3hQUVVOT0xGRkJRVk1zVlVGRFZDeE5RVUZQTEZGQlExQXNUVUZCVHl4UlFVTlFMRVZCUVVjc1NVRkRTQ3hMUVVGTkxFOUJRMDRzU1VGQlN5eE5RVU5NTEVsQlFVc3NUVUZEVEN4SlFVRkxMRTFCUTB3c1YwRkJXU3hoUVVOYUxFdEJRVTBzVDBGRFRpeEhRVUZKTEV0QlEwb3NUMEZCVVN4VFFVTlNMRTlCUVZFc1UwRkRVaXhSUVVGVExGVkJRMVFzUzBGQlRTeFBRVU5PTEV0QlFVMHNUMEZEVGl4SlFVRkxMRTFCUTB3c1UwRkJWU3hYUVVOV0xFdEJRVTBzVDBGRFRpeFRRVUZWTEZkQlExWXNSMEZCU1N4TFFVTktMRWxCUVVzc1RVRkRUQ3hSUVVGVExGVkJRMVFzU1VGQlN5eE5RVU5NTEU5QlFWRXNVMEZEVWl4SlFVRkxMRTFCUTB3c1IwRkJTU3hMUVVOS0xFZEJRVWtzUzBGRFNpeEhRVUZKTEV0QlEwb3NUVUZCVHl4UlFVTlFMRk5CUVZVc1YwRkRWaXhYUVVGWkxHRkJRMW9zVDBGQlVTeFRRVU5TTEU5QlFWRXNVMEZEVWl4TFFVRk5MRTlCUTA0c1IwRkJTU3hMUVVOS0xFZEJRVWtzUzBGRFNpeEhRVUZKTEV0QlEwb3NSMEZCU1N4TFFVTktMRWRCUVVrc1MwRkRTaXhIUVVGSkxFdEJRMG9zUzBGQlRTeFBRVU5PTEU5QlFWRXNVMEZEVWl4SFFVRkpMRXRCUTBvc1MwRkJUU3hQUVVOT0xFVkJRVWNzU1VGRFNDeFBRVUZSTEZOQlExSXNTVUZCU3l4TlFVTk1MRTFCUVU4c1VVRkRVQ3hKUVVGTExFMUJRMHdzU1VGQlN5eE5RVU5NTEU5QlFWRXNVMEZEVWl4TlFVRlBMRkZCUTFBc1QwRkJVU3hUUVVOU0xFZEJRVWtzUzBGRFNpeExRVUZOTEU5QlEwNHNTMEZCVFN4UFFVTk9MRWxCUVVzc1RVRkRUQ3hMUVVGTkxFOUJRMDRzUzBGQlRTeFBRVU5PTEZOQlFWVXNWMEZEVml4TFFVRk5MRTlCUTA0c1RVRkJUeXhSUVVOUUxFbEJRVXNzVFVGRFRDeFRRVUZWTEZkQlExWXNUMEZCVVN4VFFVTlNMRWRCUVVrc1MwRkRTaXhUUVVGVkxGZEJRMVlzVDBGQlVTeFRRVU5TTEU5QlFWRXNVMEZEVWl4RlFVRkhMRWxCUTBnc1RVRkJUeXhSUVVOUUxGRkJRVk1zVlVGRFZDeEpRVUZMTEUxQlEwd3NVMEZCVlN4WFFVTldMRVZCUVVjc1NVRkRTQ3hIUVVGSkxFdEJRMG9zUjBGQlNTeExRVU5LTEV0QlFVMHNUMEZEVGl4RlFVRkhMRWxCUTBnc1MwRkJUU3hQUVVOT0xFOUJRVkVzVTBGRFVpeFJRVUZUTEZWQlExUXNUMEZCVVN4VFFVTlNMRTFCUVU4c1VVRkRVQ3hQUVVGUkxGTkJRMUlzUzBGQlRTeFBRVU5PTEU5QlFWRXNVMEZEVWl4TlFVRlBMRkZCUTFBc1NVRkJTeXhOUVVOTUxGRkJRVk1zVlVGRFZDeEpRVUZMTEUxQlEwd3NUVUZCVHl4UlFVTlFMRTFCUVU4c1VVRkRVQ3hIUVVGSkxFdEJRMG9zVTBGQlZTeFhRVU5XTEUxQlFVOHNVVUZEVUN4SFFVRkpMRXRCUTBvc1RVRkJUeXhSUVVOUUxFdEJRVTBzVDBGRFRpeE5RVUZQTEZGQlExQXNSMEZCU1N4TFFVTktMRTFCUVU4c1VVRkRVQ3hGUVVGSExFbEJRMGdzUjBGQlNTeExRVU5LTEUxQlFVOHNUVUZEVUN4TlFVRlBMRkZCUTFBc1NVRkJTeXhOUVVkTUxFOUJRVkVzVTBGRFVpeFRRVUZWTEZkQlExWXNTMEZCVFN4UFFVTk9MRkZCUVZNc1ZVRkRWQ3hGUVVGSExFbEJRMGdzUzBGQlRTeFBRVU5PTEdWQlFXZENMR2xDUVVOb1FpeExRVUZOTEU5QlEwNHNTMEZCVFN4UFFVTk9MRkZCUVZNc1ZVRkRWQ3hSUVVGVExGVkJRMVFzVTBGQlZTeFhRVU5XTEdWQlFXZENMR2xDUVVOb1FpeExRVUZOTEU5QlEwNHNTMEZCVFN4UFFVTk9MRWxCUVVzc1RVRkRUQ3hMUVVGTkxFOUJRMDRzVFVGQlR5eFRRVVZPTEdsQ1FVVklMRkZCUVU4c1VVRkJWU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFJFOU5YRzRnS2lCQWRIbHdaV05vWldOcmN5QnpkR0YwYVdNdGIyNXNlVnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBSV3hsYldWdWRDQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBSV3hsYldWdWRGd2lLVHRjYm5aaGNpQlNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0lnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0pjSWlrN1hHNWNiblpoY2lCdFlYQlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtGd2lMaTl0WVhCUFltcGxZM1JjSWlrN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbElHRWdabUZqZEc5eWVTQjBhR0YwSUdOeVpXRjBaWE1nU0ZSTlRDQjBZV2NnWld4bGJXVnVkSE11WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFJoWnlCVVlXY2dibUZ0WlNBb1pTNW5MaUJnWkdsMllDa3VYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqY21WaGRHVkVUMDFHWVdOMGIzSjVLSFJoWnlrZ2UxeHVJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaTVqY21WaGRHVkdZV04wYjNKNUtIUmhaeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRkpsWVdOMFJXeGxiV1Z1ZEM1amNtVmhkR1ZHWVdOMGIzSjVLSFJoWnlrN1hHNTlYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUcxaGNIQnBibWNnWm5KdmJTQnpkWEJ3YjNKMFpXUWdTRlJOVENCMFlXZHpJSFJ2SUdCU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEdBZ1kyeGhjM05sY3k1Y2JpQXFJRlJvYVhNZ2FYTWdZV3h6YnlCaFkyTmxjM05wWW14bElIWnBZU0JnVW1WaFkzUXVSRTlOWUM1Y2JpQXFYRzRnS2lCQWNIVmliR2xqWEc0Z0tpOWNiblpoY2lCU1pXRmpkRVJQVFNBOUlHMWhjRTlpYW1WamRDaDdYRzRnSUdFNklDZGhKeXhjYmlBZ1lXSmljam9nSjJGaVluSW5MRnh1SUNCaFpHUnlaWE56T2lBbllXUmtjbVZ6Y3ljc1hHNGdJR0Z5WldFNklDZGhjbVZoSnl4Y2JpQWdZWEowYVdOc1pUb2dKMkZ5ZEdsamJHVW5MRnh1SUNCaGMybGtaVG9nSjJGemFXUmxKeXhjYmlBZ1lYVmthVzg2SUNkaGRXUnBieWNzWEc0Z0lHSTZJQ2RpSnl4Y2JpQWdZbUZ6WlRvZ0oySmhjMlVuTEZ4dUlDQmlaR2s2SUNkaVpHa25MRnh1SUNCaVpHODZJQ2RpWkc4bkxGeHVJQ0JpYVdjNklDZGlhV2NuTEZ4dUlDQmliRzlqYTNGMWIzUmxPaUFuWW14dlkydHhkVzkwWlNjc1hHNGdJR0p2WkhrNklDZGliMlI1Snl4Y2JpQWdZbkk2SUNkaWNpY3NYRzRnSUdKMWRIUnZiam9nSjJKMWRIUnZiaWNzWEc0Z0lHTmhiblpoY3pvZ0oyTmhiblpoY3ljc1hHNGdJR05oY0hScGIyNDZJQ2RqWVhCMGFXOXVKeXhjYmlBZ1kybDBaVG9nSjJOcGRHVW5MRnh1SUNCamIyUmxPaUFuWTI5a1pTY3NYRzRnSUdOdmJEb2dKMk52YkNjc1hHNGdJR052YkdkeWIzVndPaUFuWTI5c1ozSnZkWEFuTEZ4dUlDQmtZWFJoT2lBblpHRjBZU2NzWEc0Z0lHUmhkR0ZzYVhOME9pQW5aR0YwWVd4cGMzUW5MRnh1SUNCa1pEb2dKMlJrSnl4Y2JpQWdaR1ZzT2lBblpHVnNKeXhjYmlBZ1pHVjBZV2xzY3pvZ0oyUmxkR0ZwYkhNbkxGeHVJQ0JrWm00NklDZGtabTRuTEZ4dUlDQmthV0ZzYjJjNklDZGthV0ZzYjJjbkxGeHVJQ0JrYVhZNklDZGthWFluTEZ4dUlDQmtiRG9nSjJSc0p5eGNiaUFnWkhRNklDZGtkQ2NzWEc0Z0lHVnRPaUFuWlcwbkxGeHVJQ0JsYldKbFpEb2dKMlZ0WW1Wa0p5eGNiaUFnWm1sbGJHUnpaWFE2SUNkbWFXVnNaSE5sZENjc1hHNGdJR1pwWjJOaGNIUnBiMjQ2SUNkbWFXZGpZWEIwYVc5dUp5eGNiaUFnWm1sbmRYSmxPaUFuWm1sbmRYSmxKeXhjYmlBZ1ptOXZkR1Z5T2lBblptOXZkR1Z5Snl4Y2JpQWdabTl5YlRvZ0oyWnZjbTBuTEZ4dUlDQm9NVG9nSjJneEp5eGNiaUFnYURJNklDZG9NaWNzWEc0Z0lHZ3pPaUFuYURNbkxGeHVJQ0JvTkRvZ0oyZzBKeXhjYmlBZ2FEVTZJQ2RvTlNjc1hHNGdJR2cyT2lBbmFEWW5MRnh1SUNCb1pXRmtPaUFuYUdWaFpDY3NYRzRnSUdobFlXUmxjam9nSjJobFlXUmxjaWNzWEc0Z0lHaHlPaUFuYUhJbkxGeHVJQ0JvZEcxc09pQW5hSFJ0YkNjc1hHNGdJR2s2SUNkcEp5eGNiaUFnYVdaeVlXMWxPaUFuYVdaeVlXMWxKeXhjYmlBZ2FXMW5PaUFuYVcxbkp5eGNiaUFnYVc1d2RYUTZJQ2RwYm5CMWRDY3NYRzRnSUdsdWN6b2dKMmx1Y3ljc1hHNGdJR3RpWkRvZ0oydGlaQ2NzWEc0Z0lHdGxlV2RsYmpvZ0oydGxlV2RsYmljc1hHNGdJR3hoWW1Wc09pQW5iR0ZpWld3bkxGeHVJQ0JzWldkbGJtUTZJQ2RzWldkbGJtUW5MRnh1SUNCc2FUb2dKMnhwSnl4Y2JpQWdiR2x1YXpvZ0oyeHBibXNuTEZ4dUlDQnRZV2x1T2lBbmJXRnBiaWNzWEc0Z0lHMWhjRG9nSjIxaGNDY3NYRzRnSUcxaGNtczZJQ2R0WVhKckp5eGNiaUFnYldWdWRUb2dKMjFsYm5VbkxGeHVJQ0J0Wlc1MWFYUmxiVG9nSjIxbGJuVnBkR1Z0Snl4Y2JpQWdiV1YwWVRvZ0oyMWxkR0VuTEZ4dUlDQnRaWFJsY2pvZ0oyMWxkR1Z5Snl4Y2JpQWdibUYyT2lBbmJtRjJKeXhjYmlBZ2JtOXpZM0pwY0hRNklDZHViM05qY21sd2RDY3NYRzRnSUc5aWFtVmpkRG9nSjI5aWFtVmpkQ2NzWEc0Z0lHOXNPaUFuYjJ3bkxGeHVJQ0J2Y0hSbmNtOTFjRG9nSjI5d2RHZHliM1Z3Snl4Y2JpQWdiM0IwYVc5dU9pQW5iM0IwYVc5dUp5eGNiaUFnYjNWMGNIVjBPaUFuYjNWMGNIVjBKeXhjYmlBZ2NEb2dKM0FuTEZ4dUlDQndZWEpoYlRvZ0ozQmhjbUZ0Snl4Y2JpQWdjR2xqZEhWeVpUb2dKM0JwWTNSMWNtVW5MRnh1SUNCd2NtVTZJQ2R3Y21VbkxGeHVJQ0J3Y205bmNtVnpjem9nSjNCeWIyZHlaWE56Snl4Y2JpQWdjVG9nSjNFbkxGeHVJQ0J5Y0RvZ0ozSndKeXhjYmlBZ2NuUTZJQ2R5ZENjc1hHNGdJSEoxWW5rNklDZHlkV0o1Snl4Y2JpQWdjem9nSjNNbkxGeHVJQ0J6WVcxd09pQW5jMkZ0Y0Njc1hHNGdJSE5qY21sd2REb2dKM05qY21sd2RDY3NYRzRnSUhObFkzUnBiMjQ2SUNkelpXTjBhVzl1Snl4Y2JpQWdjMlZzWldOME9pQW5jMlZzWldOMEp5eGNiaUFnYzIxaGJHdzZJQ2R6YldGc2JDY3NYRzRnSUhOdmRYSmpaVG9nSjNOdmRYSmpaU2NzWEc0Z0lITndZVzQ2SUNkemNHRnVKeXhjYmlBZ2MzUnliMjVuT2lBbmMzUnliMjVuSnl4Y2JpQWdjM1I1YkdVNklDZHpkSGxzWlNjc1hHNGdJSE4xWWpvZ0ozTjFZaWNzWEc0Z0lITjFiVzFoY25rNklDZHpkVzF0WVhKNUp5eGNiaUFnYzNWd09pQW5jM1Z3Snl4Y2JpQWdkR0ZpYkdVNklDZDBZV0pzWlNjc1hHNGdJSFJpYjJSNU9pQW5kR0p2WkhrbkxGeHVJQ0IwWkRvZ0ozUmtKeXhjYmlBZ2RHVjRkR0Z5WldFNklDZDBaWGgwWVhKbFlTY3NYRzRnSUhSbWIyOTBPaUFuZEdadmIzUW5MRnh1SUNCMGFEb2dKM1JvSnl4Y2JpQWdkR2hsWVdRNklDZDBhR1ZoWkNjc1hHNGdJSFJwYldVNklDZDBhVzFsSnl4Y2JpQWdkR2wwYkdVNklDZDBhWFJzWlNjc1hHNGdJSFJ5T2lBbmRISW5MRnh1SUNCMGNtRmphem9nSjNSeVlXTnJKeXhjYmlBZ2RUb2dKM1VuTEZ4dUlDQjFiRG9nSjNWc0p5eGNiaUFnSjNaaGNpYzZJQ2QyWVhJbkxGeHVJQ0IyYVdSbGJ6b2dKM1pwWkdWdkp5eGNiaUFnZDJKeU9pQW5kMkp5Snl4Y2JseHVJQ0F2THlCVFZrZGNiaUFnWTJseVkyeGxPaUFuWTJseVkyeGxKeXhjYmlBZ1kyeHBjRkJoZEdnNklDZGpiR2x3VUdGMGFDY3NYRzRnSUdSbFpuTTZJQ2RrWldaekp5eGNiaUFnWld4c2FYQnpaVG9nSjJWc2JHbHdjMlVuTEZ4dUlDQm5PaUFuWnljc1hHNGdJR3hwYm1VNklDZHNhVzVsSnl4Y2JpQWdiR2x1WldGeVIzSmhaR2xsYm5RNklDZHNhVzVsWVhKSGNtRmthV1Z1ZENjc1hHNGdJRzFoYzJzNklDZHRZWE5ySnl4Y2JpQWdjR0YwYURvZ0ozQmhkR2duTEZ4dUlDQndZWFIwWlhKdU9pQW5jR0YwZEdWeWJpY3NYRzRnSUhCdmJIbG5iMjQ2SUNkd2IyeDVaMjl1Snl4Y2JpQWdjRzlzZVd4cGJtVTZJQ2R3YjJ4NWJHbHVaU2NzWEc0Z0lISmhaR2xoYkVkeVlXUnBaVzUwT2lBbmNtRmthV0ZzUjNKaFpHbGxiblFuTEZ4dUlDQnlaV04wT2lBbmNtVmpkQ2NzWEc0Z0lITjBiM0E2SUNkemRHOXdKeXhjYmlBZ2MzWm5PaUFuYzNabkp5eGNiaUFnZEdWNGREb2dKM1JsZUhRbkxGeHVJQ0IwYzNCaGJqb2dKM1J6Y0dGdUoxeHVYRzU5TENCamNtVmhkR1ZFVDAxR1lXTjBiM0o1S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEVSUFRUdGNiaUpkZlE9PSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUJ1dHRvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbnZhciBidXR0b24gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnYnV0dG9uJyk7XG5cbnZhciBtb3VzZUxpc3RlbmVyTmFtZXMgPSBrZXlNaXJyb3Ioe1xuICBvbkNsaWNrOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrOiB0cnVlLFxuICBvbk1vdXNlRG93bjogdHJ1ZSxcbiAgb25Nb3VzZU1vdmU6IHRydWUsXG4gIG9uTW91c2VVcDogdHJ1ZSxcbiAgb25DbGlja0NhcHR1cmU6IHRydWUsXG4gIG9uRG91YmxlQ2xpY2tDYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlRG93bkNhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VNb3ZlQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZVVwQ2FwdHVyZTogdHJ1ZVxufSk7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxidXR0b24+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBkb2VzIG5vdCByZWNlaXZlIG1vdXNlIGV2ZW50c1xuICogd2hlbiBgZGlzYWJsZWRgIGlzIHNldC5cbiAqL1xudmFyIFJlYWN0RE9NQnV0dG9uID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01CdXR0b24nLFxuICB0YWdOYW1lOiAnQlVUVE9OJyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByb3BzID0ge307XG5cbiAgICAvLyBDb3B5IHRoZSBwcm9wczsgZXhjZXB0IHRoZSBtb3VzZSBsaXN0ZW5lcnMgaWYgd2UncmUgZGlzYWJsZWRcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5wcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuICAgICAgICAgICghdGhpcy5wcm9wcy5kaXNhYmxlZCB8fCAhbW91c2VMaXN0ZW5lck5hbWVzW2tleV0pKSB7XG4gICAgICAgIHByb3BzW2tleV0gPSB0aGlzLnByb3BzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1dHRvbihwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01CdXR0b247XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYXNzZXJ0VmFsaWRQcm9wcyhwcm9wcyl7cHJvcHMmJihudWxsIT1wcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG51bGw9PXByb3BzLmNoaWxkcmVuLFwiQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuXCIpOmludmFyaWFudChudWxsPT1wcm9wcy5jaGlsZHJlbiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoXCJvYmplY3RcIj09dHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsXCJgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgaW4gdGhlIGZvcm0gYHtfX2h0bWw6IC4uLn1gLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIpOmludmFyaWFudChcIm9iamVjdFwiPT10eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcobnVsbD09cHJvcHMuaW5uZXJIVE1MLFwiRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC5cIik6bnVsbCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoIXByb3BzLmNvbnRlbnRFZGl0YWJsZXx8bnVsbD09cHJvcHMuY2hpbGRyZW4sXCJBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5IFJlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mIHRob3NlIG5vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyBwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuXCIpOm51bGwpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG51bGw9PXByb3BzLnN0eWxlfHxcIm9iamVjdFwiPT10eXBlb2YgcHJvcHMuc3R5bGUsXCJUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsIG5vdCBhIHN0cmluZy4gRm9yIGV4YW1wbGUsIHN0eWxlPXt7bWFyZ2luUmlnaHQ6IHNwYWNpbmcgKyAnZW0nfX0gd2hlbiB1c2luZyBKU1guXCIpOmludmFyaWFudChudWxsPT1wcm9wcy5zdHlsZXx8XCJvYmplY3RcIj09dHlwZW9mIHByb3BzLnN0eWxlKSl9ZnVuY3Rpb24gcHV0TGlzdGVuZXIoaWQscmVnaXN0cmF0aW9uTmFtZSxsaXN0ZW5lcix0cmFuc2FjdGlvbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhcIm9uU2Nyb2xsXCIhPT1yZWdpc3RyYXRpb25OYW1lfHxpc0V2ZW50U3VwcG9ydGVkKFwic2Nyb2xsXCIsITApLFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgYG9uU2Nyb2xsYCBldmVudFwiKTpudWxsKTt2YXIgY29udGFpbmVyPVJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO2lmKGNvbnRhaW5lcil7dmFyIGRvYz1jb250YWluZXIubm9kZVR5cGU9PT1FTEVNRU5UX05PREVfVFlQRT9jb250YWluZXIub3duZXJEb2N1bWVudDpjb250YWluZXI7bGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSxkb2MpfXRyYW5zYWN0aW9uLmdldFB1dExpc3RlbmVyUXVldWUoKS5lbnF1ZXVlUHV0TGlzdGVuZXIoaWQscmVnaXN0cmF0aW9uTmFtZSxsaXN0ZW5lcil9ZnVuY3Rpb24gdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKXtoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZFRhZ0NhY2hlLHRhZyl8fChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChWQUxJRF9UQUdfUkVHRVgudGVzdCh0YWcpLFwiSW52YWxpZCB0YWc6ICVzXCIsdGFnKTppbnZhcmlhbnQoVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSksdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXT0hMCl9ZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQodGFnKXt2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpLHRoaXMuX3RhZz10YWcsdGhpcy5fcmVuZGVyZWRDaGlsZHJlbj1udWxsLHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5PW51bGwsdGhpcy5fcm9vdE5vZGVJRD1udWxsfXZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnM9cmVxdWlyZShcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCIpLERPTVByb3BlcnR5PXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpLERPTVByb3BlcnR5T3BlcmF0aW9ucz1yZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIiksUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKSxSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudD1yZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKSxSZWFjdE1vdW50PXJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIiksUmVhY3RNdWx0aUNoaWxkPXJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFwiKSxSZWFjdFBlcmY9cmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpLGFzc2lnbj1yZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpLGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcj1yZXF1aXJlKFwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxpc0V2ZW50U3VwcG9ydGVkPXJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIiksa2V5T2Y9cmVxdWlyZShcIi4va2V5T2ZcIiksd2FybmluZz1yZXF1aXJlKFwiLi93YXJuaW5nXCIpLGRlbGV0ZUxpc3RlbmVyPVJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVMaXN0ZW5lcixsaXN0ZW5Ubz1SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIubGlzdGVuVG8scmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM9UmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLENPTlRFTlRfVFlQRVM9e3N0cmluZzohMCxudW1iZXI6ITB9LFNUWUxFPWtleU9mKHtzdHlsZTpudWxsfSksRUxFTUVOVF9OT0RFX1RZUEU9MSxCYWNrZW5kSURPcGVyYXRpb25zPW51bGwsb21pdHRlZENsb3NlVGFncz17YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSxWQUxJRF9UQUdfUkVHRVg9L15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC8sdmFsaWRhdGVkVGFnQ2FjaGU9e30saGFzT3duUHJvcGVydHk9e30uaGFzT3duUHJvcGVydHk7UmVhY3RET01Db21wb25lbnQuZGlzcGxheU5hbWU9XCJSZWFjdERPTUNvbXBvbmVudFwiLFJlYWN0RE9NQ29tcG9uZW50Lk1peGluPXtjb25zdHJ1Y3Q6ZnVuY3Rpb24oZWxlbWVudCl7dGhpcy5fY3VycmVudEVsZW1lbnQ9ZWxlbWVudH0sbW91bnRDb21wb25lbnQ6ZnVuY3Rpb24ocm9vdElELHRyYW5zYWN0aW9uLGNvbnRleHQpe3RoaXMuX3Jvb3ROb2RlSUQ9cm9vdElELGFzc2VydFZhbGlkUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpO3ZhciBjbG9zZVRhZz1vbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10/XCJcIjpcIjwvXCIrdGhpcy5fdGFnK1wiPlwiO3JldHVybiB0aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKHRyYW5zYWN0aW9uKSt0aGlzLl9jcmVhdGVDb250ZW50TWFya3VwKHRyYW5zYWN0aW9uLGNvbnRleHQpK2Nsb3NlVGFnfSxfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczpmdW5jdGlvbih0cmFuc2FjdGlvbil7dmFyIHByb3BzPXRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzLHJldD1cIjxcIit0aGlzLl90YWc7Zm9yKHZhciBwcm9wS2V5IGluIHByb3BzKWlmKHByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKXt2YXIgcHJvcFZhbHVlPXByb3BzW3Byb3BLZXldO2lmKG51bGwhPXByb3BWYWx1ZSlpZihyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSlwdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELHByb3BLZXkscHJvcFZhbHVlLHRyYW5zYWN0aW9uKTtlbHNle3Byb3BLZXk9PT1TVFlMRSYmKHByb3BWYWx1ZSYmKHByb3BWYWx1ZT10aGlzLl9wcmV2aW91c1N0eWxlQ29weT1hc3NpZ24oe30scHJvcHMuc3R5bGUpKSxwcm9wVmFsdWU9Q1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyhwcm9wVmFsdWUpKTt2YXIgbWFya3VwPURPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShwcm9wS2V5LHByb3BWYWx1ZSk7bWFya3VwJiYocmV0Kz1cIiBcIittYXJrdXApfX1pZih0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cClyZXR1cm4gcmV0K1wiPlwiO3ZhciBtYXJrdXBGb3JJRD1ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9ySUQodGhpcy5fcm9vdE5vZGVJRCk7cmV0dXJuIHJldCtcIiBcIittYXJrdXBGb3JJRCtcIj5cIn0sX2NyZWF0ZUNvbnRlbnRNYXJrdXA6ZnVuY3Rpb24odHJhbnNhY3Rpb24sY29udGV4dCl7dmFyIHByZWZpeD1cIlwiOyhcImxpc3RpbmdcIj09PXRoaXMuX3RhZ3x8XCJwcmVcIj09PXRoaXMuX3RhZ3x8XCJ0ZXh0YXJlYVwiPT09dGhpcy5fdGFnKSYmKHByZWZpeD1cIlxcblwiKTt2YXIgcHJvcHM9dGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMsaW5uZXJIVE1MPXByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO2lmKG51bGwhPWlubmVySFRNTCl7aWYobnVsbCE9aW5uZXJIVE1MLl9faHRtbClyZXR1cm4gcHJlZml4K2lubmVySFRNTC5fX2h0bWx9ZWxzZXt2YXIgY29udGVudFRvVXNlPUNPTlRFTlRfVFlQRVNbdHlwZW9mIHByb3BzLmNoaWxkcmVuXT9wcm9wcy5jaGlsZHJlbjpudWxsLGNoaWxkcmVuVG9Vc2U9bnVsbCE9Y29udGVudFRvVXNlP251bGw6cHJvcHMuY2hpbGRyZW47aWYobnVsbCE9Y29udGVudFRvVXNlKXJldHVybiBwcmVmaXgrZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKGNvbnRlbnRUb1VzZSk7aWYobnVsbCE9Y2hpbGRyZW5Ub1VzZSl7dmFyIG1vdW50SW1hZ2VzPXRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLHRyYW5zYWN0aW9uLGNvbnRleHQpO3JldHVybiBwcmVmaXgrbW91bnRJbWFnZXMuam9pbihcIlwiKX19cmV0dXJuIHByZWZpeH0scmVjZWl2ZUNvbXBvbmVudDpmdW5jdGlvbihuZXh0RWxlbWVudCx0cmFuc2FjdGlvbixjb250ZXh0KXt2YXIgcHJldkVsZW1lbnQ9dGhpcy5fY3VycmVudEVsZW1lbnQ7dGhpcy5fY3VycmVudEVsZW1lbnQ9bmV4dEVsZW1lbnQsdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24scHJldkVsZW1lbnQsbmV4dEVsZW1lbnQsY29udGV4dCl9LHVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbih0cmFuc2FjdGlvbixwcmV2RWxlbWVudCxuZXh0RWxlbWVudCxjb250ZXh0KXthc3NlcnRWYWxpZFByb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKSx0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKHByZXZFbGVtZW50LnByb3BzLHRyYW5zYWN0aW9uKSx0aGlzLl91cGRhdGVET01DaGlsZHJlbihwcmV2RWxlbWVudC5wcm9wcyx0cmFuc2FjdGlvbixjb250ZXh0KX0sX3VwZGF0ZURPTVByb3BlcnRpZXM6ZnVuY3Rpb24obGFzdFByb3BzLHRyYW5zYWN0aW9uKXt2YXIgcHJvcEtleSxzdHlsZU5hbWUsc3R5bGVVcGRhdGVzLG5leHRQcm9wcz10aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztmb3IocHJvcEtleSBpbiBsYXN0UHJvcHMpaWYoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSYmbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKWlmKHByb3BLZXk9PT1TVFlMRSl7dmFyIGxhc3RTdHlsZT10aGlzLl9wcmV2aW91c1N0eWxlQ29weTtmb3Ioc3R5bGVOYW1lIGluIGxhc3RTdHlsZSlsYXN0U3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSYmKHN0eWxlVXBkYXRlcz1zdHlsZVVwZGF0ZXN8fHt9LHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdPVwiXCIpO3RoaXMuX3ByZXZpb3VzU3R5bGVDb3B5PW51bGx9ZWxzZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KT9kZWxldGVMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELHByb3BLZXkpOihET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wS2V5XXx8RE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUocHJvcEtleSkpJiZCYWNrZW5kSURPcGVyYXRpb25zLmRlbGV0ZVByb3BlcnR5QnlJRCh0aGlzLl9yb290Tm9kZUlELHByb3BLZXkpO2Zvcihwcm9wS2V5IGluIG5leHRQcm9wcyl7dmFyIG5leHRQcm9wPW5leHRQcm9wc1twcm9wS2V5XSxsYXN0UHJvcD1wcm9wS2V5PT09U1RZTEU/dGhpcy5fcHJldmlvdXNTdHlsZUNvcHk6bGFzdFByb3BzW3Byb3BLZXldO2lmKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSYmbmV4dFByb3AhPT1sYXN0UHJvcClpZihwcm9wS2V5PT09U1RZTEUpaWYobmV4dFByb3A/bmV4dFByb3A9dGhpcy5fcHJldmlvdXNTdHlsZUNvcHk9YXNzaWduKHt9LG5leHRQcm9wKTp0aGlzLl9wcmV2aW91c1N0eWxlQ29weT1udWxsLGxhc3RQcm9wKXtmb3Ioc3R5bGVOYW1lIGluIGxhc3RQcm9wKSFsYXN0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpfHxuZXh0UHJvcCYmbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKXx8KHN0eWxlVXBkYXRlcz1zdHlsZVVwZGF0ZXN8fHt9LHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdPVwiXCIpO2ZvcihzdHlsZU5hbWUgaW4gbmV4dFByb3ApbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSYmbGFzdFByb3Bbc3R5bGVOYW1lXSE9PW5leHRQcm9wW3N0eWxlTmFtZV0mJihzdHlsZVVwZGF0ZXM9c3R5bGVVcGRhdGVzfHx7fSxzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXT1uZXh0UHJvcFtzdHlsZU5hbWVdKX1lbHNlIHN0eWxlVXBkYXRlcz1uZXh0UHJvcDtlbHNlIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpP3B1dExpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQscHJvcEtleSxuZXh0UHJvcCx0cmFuc2FjdGlvbik6KERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW3Byb3BLZXldfHxET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkmJkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlUHJvcGVydHlCeUlEKHRoaXMuX3Jvb3ROb2RlSUQscHJvcEtleSxuZXh0UHJvcCl9c3R5bGVVcGRhdGVzJiZCYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZVN0eWxlc0J5SUQodGhpcy5fcm9vdE5vZGVJRCxzdHlsZVVwZGF0ZXMpfSxfdXBkYXRlRE9NQ2hpbGRyZW46ZnVuY3Rpb24obGFzdFByb3BzLHRyYW5zYWN0aW9uLGNvbnRleHQpe3ZhciBuZXh0UHJvcHM9dGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMsbGFzdENvbnRlbnQ9Q09OVEVOVF9UWVBFU1t0eXBlb2YgbGFzdFByb3BzLmNoaWxkcmVuXT9sYXN0UHJvcHMuY2hpbGRyZW46bnVsbCxuZXh0Q29udGVudD1DT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dP25leHRQcm9wcy5jaGlsZHJlbjpudWxsLGxhc3RIdG1sPWxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbCxuZXh0SHRtbD1uZXh0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwsbGFzdENoaWxkcmVuPW51bGwhPWxhc3RDb250ZW50P251bGw6bGFzdFByb3BzLmNoaWxkcmVuLG5leHRDaGlsZHJlbj1udWxsIT1uZXh0Q29udGVudD9udWxsOm5leHRQcm9wcy5jaGlsZHJlbixsYXN0SGFzQ29udGVudE9ySHRtbD1udWxsIT1sYXN0Q29udGVudHx8bnVsbCE9bGFzdEh0bWwsbmV4dEhhc0NvbnRlbnRPckh0bWw9bnVsbCE9bmV4dENvbnRlbnR8fG51bGwhPW5leHRIdG1sO251bGwhPWxhc3RDaGlsZHJlbiYmbnVsbD09bmV4dENoaWxkcmVuP3RoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCx0cmFuc2FjdGlvbixjb250ZXh0KTpsYXN0SGFzQ29udGVudE9ySHRtbCYmIW5leHRIYXNDb250ZW50T3JIdG1sJiZ0aGlzLnVwZGF0ZVRleHRDb250ZW50KFwiXCIpLG51bGwhPW5leHRDb250ZW50P2xhc3RDb250ZW50IT09bmV4dENvbnRlbnQmJnRoaXMudXBkYXRlVGV4dENvbnRlbnQoXCJcIituZXh0Q29udGVudCk6bnVsbCE9bmV4dEh0bWw/bGFzdEh0bWwhPT1uZXh0SHRtbCYmQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVJbm5lckhUTUxCeUlEKHRoaXMuX3Jvb3ROb2RlSUQsbmV4dEh0bWwpOm51bGwhPW5leHRDaGlsZHJlbiYmdGhpcy51cGRhdGVDaGlsZHJlbihuZXh0Q2hpbGRyZW4sdHJhbnNhY3Rpb24sY29udGV4dCl9LHVubW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oKXt0aGlzLnVubW91bnRDaGlsZHJlbigpLFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVBbGxMaXN0ZW5lcnModGhpcy5fcm9vdE5vZGVJRCksUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpLHRoaXMuX3Jvb3ROb2RlSUQ9bnVsbH19LFJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdERPTUNvbXBvbmVudCxcIlJlYWN0RE9NQ29tcG9uZW50XCIse21vdW50Q29tcG9uZW50OlwibW91bnRDb21wb25lbnRcIix1cGRhdGVDb21wb25lbnQ6XCJ1cGRhdGVDb21wb25lbnRcIn0pLGFzc2lnbihSZWFjdERPTUNvbXBvbmVudC5wcm90b3R5cGUsUmVhY3RET01Db21wb25lbnQuTWl4aW4sUmVhY3RNdWx0aUNoaWxkLk1peGluKSxSZWFjdERPTUNvbXBvbmVudC5pbmplY3Rpb249e2luamVjdElET3BlcmF0aW9uczpmdW5jdGlvbihJRE9wZXJhdGlvbnMpe1JlYWN0RE9NQ29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnM9QmFja2VuZElET3BlcmF0aW9ucz1JRE9wZXJhdGlvbnN9fSxtb2R1bGUuZXhwb3J0cz1SZWFjdERPTUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JFVDAxRGIyMXdiMjVsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRV05CTEZsQmMwTkJMRk5CUVZNc2EwSkJRV2xDTEU5QlEyNUNMRkZCU1dkRExFMUJRV3BETEUxQlFVMHNNRUpCUTFBc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEY2tJc1RVRkJiRUlzVFVGQlRTeFRRVU5PTEhORlFVTkZMRlZCUVRSQ0xFMUJRV3hDTEUxQlFVMHNWVUZEYmtJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEUlN4blFrRkJiRU1zVDBGQlRTeDVRa0ZEWWl4VlFVRlpMRTlCUVUwc2QwSkJRMnhDTEc5TFFVZEZMRlZCUVcxRUxHZENRVUZzUXl4UFFVRk5MSGxDUVVNelFpeFZRVUZaTEU5QlFVMHNNRUpCUldoQ0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4WFFVTTVRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4UlFVTndRaXhOUVVGdVFpeE5RVUZOTEZWQlEwNHNiMGxCUlVVc1MwRkRTQ3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VFFVTjBReXhOUVVGTkxHbENRVUZ4UXl4TlFVRnNRaXhOUVVGTkxGTkJRMmhETERaT1FVbEZMRTFCUlV3c1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEZUVJc1RVRkJaaXhOUVVGTkxFOUJRWGRETEdkQ1FVRm9RaXhQUVVGTkxFMUJRM0JETEhkS1FVZEZMRlZCUVhsQ0xFMUJRV1lzVFVGQlRTeFBRVUYzUXl4blFrRkJhRUlzVDBGQlRTeFJRVWR3UkN4UlFVRlRMR0ZCUVZrc1IwRkJTU3hwUWtGQmEwSXNVMEZCVlN4aFFVTXZReXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NWMEZIT1VJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVVUZEYkVJc1lVRkJja0lzYTBKQlFXMURMR2xDUVVGcFFpeFZRVUZWTEVkQlF6bEVMSEZFUVVORkxFdEJSVTRzU1VGQlNTeFhRVUZaTEZkQlFWY3NkMEpCUVhkQ0xFZEJRMjVFTEVsQlFVa3NWVUZCVnl4RFFVTmlMRWRCUVVrc1MwRkJUU3hWUVVGVkxGZEJRV0VzYTBKQlF5OUNMRlZCUVZVc1kwRkRWaXhUUVVOR0xGVkJRVk1zYVVKQlFXdENMRXRCUlRkQ0xGbEJRVmtzYzBKQlFYTkNMRzFDUVVOb1F5eEhRVU5CTEdsQ1FVTkJMRlZCYTBOS0xGRkJRVk1zYzBKQlFYRkNMRXRCUTNaQ0xHVkJRV1VzUzBGQlN5eHJRa0ZCYlVJc1QwRkRla01zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkJWU3huUWtGQlowSXNTMEZCU3l4TFFVRk5MR3RDUVVGdFFpeExRVUZQTEZWQlFWVXNaMEpCUVdkQ0xFdEJRVXNzVFVGRGRra3NhMEpCUVd0Q0xFMUJRVThzUjBGclFqZENMRkZCUVZNc2JVSkJRV3RDTEV0QlEzcENMSEZDUVVGeFFpeExRVU55UWl4TFFVRkxMRXRCUVU4c1NVRkRXaXhMUVVGTExHdENRVUZ2UWl4TFFVTjZRaXhMUVVGTExHMUNRVUZ4UWl4TFFVTXhRaXhMUVVGTExGbEJRV01zUzBFMVNuSkNMRWRCUVVrc2RVSkJRWGRDTEZGQlFWRXNNa0pCUTJoRExGbEJRV01zVVVGQlVTeHBRa0ZEZEVJc2MwSkJRWGRDTEZGQlFWRXNNa0pCUTJoRExIbENRVUV5UWl4UlFVRlJMRGhDUVVOdVF5eHBRMEZEUml4UlFVRlJMSE5EUVVOT0xGZEJRV0VzVVVGQlVTeG5Ra0ZEY2tJc1owSkJRV3RDTEZGQlFWRXNjVUpCUXpGQ0xGVkJRVmtzVVVGQlVTeGxRVVZ3UWl4UFFVRlRMRkZCUVZFc2JVSkJRMnBDTERSQ1FVRTRRaXhSUVVGUkxHbERRVU4wUXl4VlFVRlpMRkZCUVZFc1pVRkRjRUlzYVVKQlFXMUNMRkZCUVZFc2MwSkJRek5DTEUxQlFWRXNVVUZCVVN4WFFVTm9RaXhSUVVGVkxGRkJRVkVzWVVGRmJFSXNaVUZCYVVJc2VVSkJRWGxDTEdWQlF6RkRMRk5CUVZjc2VVSkJRWGxDTEZOQlEzQkRMSGRDUVVFd1FpeDVRa0ZCZVVJc2QwSkJSMjVFTEdWQlFXbENMRkZCUVZVc1JVRkJUU3hSUVVGVkxFZEJSVE5ETEUxQlFWRXNUMEZCVHl4TlFVRlBMRTlCUlhSQ0xHdENRVUZ2UWl4RlFVdHdRaXh2UWtGQmMwSXNTMEYzUlhSQ0xHdENRVU5HTEUxQlFWRXNSVUZEVWl4TlFVRlJMRVZCUTFJc1NVRkJUU3hGUVVOT0xFdEJRVThzUlVGRFVDeFBRVUZUTEVWQlExUXNTVUZCVFN4RlFVTk9MRXRCUVU4c1JVRkRVQ3hQUVVGVExFVkJRMVFzVVVGQlZTeEZRVU5XTEUxQlFWRXNSVUZEVWl4TlFVRlJMRVZCUTFJc1QwRkJVeXhGUVVOVUxGRkJRVlVzUlVGRFZpeFBRVUZUTEVWQlExUXNTMEZCVHl4SFFWRk1MR2RDUVVGclFpdzRRa0ZEYkVJc2NVSkJRMEVzYTBKQlFXOUNMR05CSzBKNFFpeHRRa0ZCYTBJc1dVRkJZeXh2UWtGRmFFTXNhMEpCUVd0Q0xFOUJSV2hDTEZWQlFWY3NVMEZCVXl4VFFVTnNRaXhMUVVGTExHZENRVUZyUWl4VFFWbDZRaXhsUVVGblFpeFRRVUZUTEU5QlFWRXNXVUZCWVN4VFFVTTFReXhMUVVGTExGbEJRV01zVDBGRGJrSXNhVUpCUVdsQ0xFdEJRVXNzWjBKQlFXZENMRTFCUTNSRExFbEJRVWtzVlVGQlZ5eHBRa0ZCYVVJc1MwRkJTeXhOUVVGUkxFZEJRVXNzUzBGQlR5eExRVUZMTEV0QlFVOHNSMEZEY2tVc1QwRkRSU3hOUVVGTExHOURRVUZ2UXl4aFFVTjZReXhMUVVGTExIRkNRVUZ4UWl4WlFVRmhMRk5CUTNaRExGVkJaMEpLTEc5RFFVRnhReXhUUVVGVExHRkJRelZETEVkQlFVa3NUMEZCVVN4TFFVRkxMR2RDUVVGblFpeE5RVU0zUWl4SlFVRk5MRWxCUVUwc1MwRkJTeXhKUVVWeVFpeExRVUZMTEVkQlFVa3NWMEZCVnl4UFFVTnNRaXhIUVVGTExFMUJRVTBzWlVGQlpTeFRRVUV4UWl4RFFVZEJMRWRCUVVrc1YwRkJXU3hOUVVGTkxGRkJRM1JDTEVsQlFXbENMRTFCUVdJc1ZVRkhTaXhIUVVGSkxIZENRVUYzUWl4bFFVRmxMRk5CUTNwRExGbEJRVmtzUzBGQlN5eFpRVUZoTEZGQlFWTXNWVUZCVnl4cFFrRkROME1zUTBGRFJDeFZRVUZaTEZGQlExWXNXVUZEUml4VlFVRlpMRXRCUVVzc2JVSkJRWEZDTEZWQlFWY3NUVUZCVFN4UlFVVjZSQ3hWUVVGWkxITkNRVUZ6UWl4elFrRkJjMElzVjBGRk1VUXNTVUZCU1N4UlFVTkdMSE5DUVVGelFpeDNRa0ZCZDBJc1VVRkJVeXhWUVVOeVJDeFZRVU5HTEV0QlFVOHNTVUZCVFN4VFFVOXVRaXhIUVVGSkxGbEJRVmtzY1VKQlEyUXNUVUZCVHl4TFFVRk5MRWRCUjJZc1NVRkJTU3hoUVVGakxITkNRVUZ6UWl4clFrRkJhMElzUzBGQlN5eFpRVU12UkN4UFFVRlBMRXRCUVUwc1NVRkJUU3haUVVGakxFdEJWMjVETEhGQ1FVRnpRaXhUUVVGVExGbEJRV0VzVTBGRE1VTXNSMEZCU1N4UlFVRlRMRWxCUTBzc1dVRkJaQ3hMUVVGTExFMUJRMU1zVVVGQlpDeExRVUZMTEUxQlExTXNZVUZCWkN4TFFVRkxMRkZCU1ZBc1QwRkJVeXhMUVVkWUxFbEJRVWtzVDBGQlVTeExRVUZMTEdkQ1FVRm5RaXhOUVVjM1FpeFZRVUZaTEUxQlFVMHNkVUpCUTNSQ0xFbEJRV2xDTEUxQlFXSXNWMEZEUml4SFFVRjNRaXhOUVVGd1FpeFZRVUZWTEU5QlExb3NUVUZCVHl4UlFVRlRMRlZCUVZVc1YwRkZka0lzUTBGRFRDeEhRVUZKTEdOQlEwWXNiMEpCUVhGQ0xFOUJRVTBzVlVGQldTeE5RVUZOTEZOQlFWY3NTMEZEZEVRc1kwRkJaME1zVFVGQmFFSXNZVUZCZFVJc1MwRkJUeXhOUVVGTkxGRkJRM2hFTEVsQlFXOUNMRTFCUVdoQ0xHRkJRMFlzVFVGQlR5eFJRVUZUTERSQ1FVRTBRaXhoUVVOMlF5eEpRVUZ4UWl4TlFVRnFRaXhqUVVGMVFpeERRVU5vUXl4SFFVRkpMR0ZCUVdNc1MwRkJTeXhqUVVOeVFpeGpRVU5CTEZsQlEwRXNVVUZGUml4UFFVRlBMRkZCUVZNc1dVRkJXU3hMUVVGTExFdEJSM0pETEUxQlFVOHNVMEZIVkN4cFFrRkJhMElzVTBGQlV5eFpRVUZoTEZsQlFXRXNVMEZEYmtRc1IwRkJTU3hoUVVGakxFdEJRVXNzWlVGRGRrSXNUVUZCU3l4blFrRkJhMElzV1VGRGRrSXNTMEZCU3l4blFrRkJaMElzV1VGQllTeFpRVUZoTEZsQlFXRXNWVUZoT1VRc1owSkJRV2xDTEZOQlFWTXNXVUZCWVN4WlFVRmhMRmxCUVdFc1UwRkRMMFFzYVVKQlFXbENMRXRCUVVzc1owSkJRV2RDTEU5QlEzUkRMRXRCUVVzc2NVSkJRWEZDTEZsQlFWa3NUVUZCVHl4aFFVTTNReXhMUVVGTExHMUNRVUZ0UWl4WlFVRlpMRTFCUVU4c1dVRkJZU3hWUVd0Q01VUXNjVUpCUVhOQ0xGTkJRVk1zVlVGQlZ5eGhRVU40UXl4SFFVTkpMRk5CUTBFc1ZVRkRRU3hoUVVoQkxGVkJRVmtzUzBGQlN5eG5Ra0ZCWjBJc1MwRkpja01zUzBGQlN5eFZRVUZYTEZkQlEyUXNTVUZCU1N4VlFVRlZMR1ZCUVdVc1ZVRkRla0lzVlVGQlZTeGxRVUZsTEZOQlJ6ZENMRWRCUVVrc1ZVRkJXU3hOUVVGUExFTkJRM0pDTEVkQlFVa3NWMEZCV1N4TFFVRkxMR3RDUVVOeVFpeExRVUZMTEZsQlFXRXNWMEZEV2l4VlFVRlZMR1ZCUVdVc1lVRkRNMElzWVVGQlpTeHBRa0ZEWml4aFFVRmhMRmRCUVdFc1IwRkhPVUlzVFVGQlN5eHRRa0ZCY1VJc1UwRkRha0lzZVVKQlFYZENMR1ZCUVdVc1UwRkRhRVFzWlVGQlpTeExRVUZMTEZsQlFXRXNWVUZGTDBJc1dVRkJXU3hsUVVGbExGVkJRek5DTEZsQlFWa3NhMEpCUVd0Q0xGZEJRMmhETEc5Q1FVRnZRaXh0UWtGRGJFSXNTMEZCU3l4WlFVTk1MRkZCU1U0c1MwRkJTeXhWUVVGWExGZEJRVmNzUTBGRGVrSXNSMEZCU1N4VlFVRlhMRlZCUVZVc1UwRkRja0lzVTBGQlZ5eFZRVUZaTEUxQlEzcENMRXRCUVVzc2JVSkJRMHdzVlVGQlZTeFJRVU5hTEVsQlFVc3NWVUZCVlN4bFFVRmxMRlZCUVZrc1YwRkJZU3hUUVVkMlJDeEhRVUZKTEZWQlFWa3NUVUZOWkN4SFFVeEpMRk5CUTBZc1UwRkJWeXhMUVVGTExHMUNRVUZ4UWl4VlFVRlhMRlZCUldoRUxFdEJRVXNzYlVKQlFYRkNMRXRCUlhoQ0xGTkJRVlVzUTBGRldpeEpRVUZMTEZsQlFXRXNWMEZEV2l4VFFVRlRMR1ZCUVdVc1dVRkRkRUlzVlVGQllTeFRRVUZUTEdWQlFXVXNZVUZEZWtNc1lVRkJaU3hwUWtGRFppeGhRVUZoTEZkQlFXRXNSMEZKT1VJc1MwRkJTeXhaUVVGaExGVkJRMW9zVTBGQlV5eGxRVUZsTEZsQlEzaENMRk5CUVZNc1lVRkJaU3hUUVVGVExHRkJRMjVETEdGQlFXVXNhVUpCUTJZc1lVRkJZU3hYUVVGaExGTkJRVk1zWjBKQlMzWkRMR05CUVdVc1lVRkZVaXg1UWtGQmQwSXNaVUZCWlN4VFFVTm9SQ3haUVVGWkxFdEJRVXNzV1VGQllTeFJRVUZUTEZOQlFWVXNZMEZGTDBNc1dVRkJXU3hsUVVGbExGVkJRek5DTEZsQlFWa3NhMEpCUVd0Q0xGZEJRMmhETEc5Q1FVRnZRaXh0UWtGRGJFSXNTMEZCU3l4WlFVTk1MRkZCUTBFc1ZVRkpSaXhqUVVOR0xHOUNRVUZ2UWl4cFFrRkRiRUlzUzBGQlN5eFpRVU5NTEdWQldVNHNiVUpCUVc5Q0xGTkJRVk1zVlVGQlZ5eFpRVUZoTEZOQlEyNUVMRWRCUVVrc1YwRkJXU3hMUVVGTExHZENRVUZuUWl4TlFVVnFReXhaUVVOR0xHOUNRVUZ4UWl4WFFVRlZMRlZCUVZrc1ZVRkJWU3hUUVVGWExFdEJRemxFTEZsQlEwWXNiMEpCUVhGQ0xGZEJRVlVzVlVGQldTeFZRVUZWTEZOQlFWY3NTMEZGT1VRc1UwRkRSaXhWUVVGVkxIbENRVU5XTEZWQlFWVXNkMEpCUVhkQ0xFOUJRMmhETEZOQlEwWXNWVUZCVlN4NVFrRkRWaXhWUVVGVkxIZENRVUYzUWl4UFFVZG9ReXhoUVVFNFFpeE5RVUZtTEZsQlFYTkNMRXRCUVU4c1ZVRkJWU3hUUVVOMFJDeGhRVUU0UWl4TlFVRm1MRmxCUVhOQ0xFdEJRVThzVlVGQlZTeFRRVWwwUkN4eFFrRkJjME1zVFVGQlppeGhRVUZ0UXl4TlFVRmFMRk5CUXpsRExIRkNRVUZ6UXl4TlFVRm1MR0ZCUVcxRExFMUJRVm9zVVVGRE9VSXNUMEZCYUVJc1kwRkJkME1zVFVGQmFFSXNZVUZETVVJc1MwRkJTeXhsUVVGbExFdEJRVTBzV1VGQllTeFRRVU01UWl4MVFrRkJlVUlzYzBKQlEyeERMRXRCUVVzc2EwSkJRV3RDTEVsQlIwNHNUVUZCWml4WlFVTkZMR05CUVdkQ0xHRkJRMnhDTEV0QlFVc3NhMEpCUVd0Q0xFZEJRVXNzWVVGRlZDeE5RVUZhTEZOQlEwd3NWMEZCWVN4VlFVTm1MRzlDUVVGdlFpeHZRa0ZEYkVJc1MwRkJTeXhaUVVOTUxGVkJSM0ZDTEUxQlFXaENMR05CUTFRc1MwRkJTeXhsUVVGbExHRkJRV01zV1VGQllTeFZRVlZ1UkN4cFFrRkJhMElzVjBGRGFFSXNTMEZCU3l4clFrRkRUQ3g1UWtGQmVVSXNiVUpCUVcxQ0xFdEJRVXNzWVVGRGFrUXNhVU5CUVdsRExIbENRVUY1UWl4TFFVRkxMR0ZCUXk5RUxFdEJRVXNzV1VGQll5eFBRVXQyUWl4VlFVRlZMR1ZCUVdVc2EwSkJRVzFDTEhGQ1FVTXhReXhsUVVGblFpeHBRa0ZEYUVJc1owSkJRV2xDTEc5Q1FVZHVRaXhQUVVORkxHdENRVUZyUWl4VlFVTnNRaXhyUWtGQmEwSXNUVUZEYkVJc1owSkJRV2RDTEU5QlIyeENMR3RDUVVGclFpeFhRVU5vUWl4dFFrRkJiMElzVTBGQlV5eGpRVU16UWl4clFrRkJhMElzYjBKQlFYTkNMRzlDUVVGelFpeGxRVWxzUlN4UFFVRlBMRkZCUVZVaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEZ4dUlDb2dRSFI1Y0dWamFHVmphM01nYzNSaGRHbGpMVzl1YkhsY2JpQXFMMXh1WEc0dktpQm5iRzlpWVd3Z2FHRnpUM2R1VUhKdmNHVnlkSGs2ZEhKMVpTQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQkRVMU5RY205d1pYSjBlVTl3WlhKaGRHbHZibk1nUFNCeVpYRjFhWEpsS0Z3aUxpOURVMU5RY205d1pYSjBlVTl3WlhKaGRHbHZibk5jSWlrN1hHNTJZWElnUkU5TlVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtGd2lMaTlFVDAxUWNtOXdaWEowZVZ3aUtUdGNiblpoY2lCRVQwMVFjbTl3WlhKMGVVOXdaWEpoZEdsdmJuTWdQU0J5WlhGMWFYSmxLRndpTGk5RVQwMVFjbTl3WlhKMGVVOXdaWEpoZEdsdmJuTmNJaWs3WEc1MllYSWdVbVZoWTNSQ2NtOTNjMlZ5UlhabGJuUkZiV2wwZEdWeUlEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkNjbTkzYzJWeVJYWmxiblJGYldsMGRHVnlYQ0lwTzF4dWRtRnlJRkpsWVdOMFEyOXRjRzl1Wlc1MFFuSnZkM05sY2tWdWRtbHliMjV0Wlc1MElEMWNiaUFnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JEYjIxd2IyNWxiblJDY205M2MyVnlSVzUyYVhKdmJtMWxiblJjSWlrN1hHNTJZWElnVW1WaFkzUk5iM1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFRXOTFiblJjSWlrN1hHNTJZWElnVW1WaFkzUk5kV3gwYVVOb2FXeGtJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JOZFd4MGFVTm9hV3hrWENJcE8xeHVkbUZ5SUZKbFlXTjBVR1Z5WmlBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFVHVnlabHdpS1R0Y2JseHVkbUZ5SUdGemMybG5iaUE5SUhKbGNYVnBjbVVvWENJdUwwOWlhbVZqZEM1aGMzTnBaMjVjSWlrN1hHNTJZWElnWlhOallYQmxWR1Y0ZEVOdmJuUmxiblJHYjNKQ2NtOTNjMlZ5SUQwZ2NtVnhkV2x5WlNoY0lpNHZaWE5qWVhCbFZHVjRkRU52Ym5SbGJuUkdiM0pDY205M2MyVnlYQ0lwTzF4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwybHVkbUZ5YVdGdWRGd2lLVHRjYm5aaGNpQnBjMFYyWlc1MFUzVndjRzl5ZEdWa0lEMGdjbVZ4ZFdseVpTaGNJaTR2YVhORmRtVnVkRk4xY0hCdmNuUmxaRndpS1R0Y2JuWmhjaUJyWlhsUFppQTlJSEpsY1hWcGNtVW9YQ0l1TDJ0bGVVOW1YQ0lwTzF4dWRtRnlJSGRoY201cGJtY2dQU0J5WlhGMWFYSmxLRndpTGk5M1lYSnVhVzVuWENJcE8xeHVYRzUyWVhJZ1pHVnNaWFJsVEdsemRHVnVaWElnUFNCU1pXRmpkRUp5YjNkelpYSkZkbVZ1ZEVWdGFYUjBaWEl1WkdWc1pYUmxUR2x6ZEdWdVpYSTdYRzUyWVhJZ2JHbHpkR1Z1Vkc4Z1BTQlNaV0ZqZEVKeWIzZHpaWEpGZG1WdWRFVnRhWFIwWlhJdWJHbHpkR1Z1Vkc4N1hHNTJZWElnY21WbmFYTjBjbUYwYVc5dVRtRnRaVTF2WkhWc1pYTWdQU0JTWldGamRFSnliM2R6WlhKRmRtVnVkRVZ0YVhSMFpYSXVjbVZuYVhOMGNtRjBhVzl1VG1GdFpVMXZaSFZzWlhNN1hHNWNiaTh2SUVadmNpQnhkV2xqYTJ4NUlHMWhkR05vYVc1bklHTm9hV3hrY21WdUlIUjVjR1VzSUhSdklIUmxjM1FnYVdZZ1kyRnVJR0psSUhSeVpXRjBaV1FnWVhNZ1kyOXVkR1Z1ZEM1Y2JuWmhjaUJEVDA1VVJVNVVYMVJaVUVWVElEMGdleWR6ZEhKcGJtY25PaUIwY25WbExDQW5iblZ0WW1WeUp6b2dkSEoxWlgwN1hHNWNiblpoY2lCVFZGbE1SU0E5SUd0bGVVOW1LSHR6ZEhsc1pUb2diblZzYkgwcE8xeHVYRzUyWVhJZ1JVeEZUVVZPVkY5T1QwUkZYMVJaVUVVZ1BTQXhPMXh1WEc0dktpcGNiaUFxSUU5d2RHbHZibUZzYkhrZ2FXNXFaV04wWVdKc1pTQnZjR1Z5WVhScGIyNXpJR1p2Y2lCdGRYUmhkR2x1WnlCMGFHVWdSRTlOWEc0Z0tpOWNiblpoY2lCQ1lXTnJaVzVrU1VSUGNHVnlZWFJwYjI1eklEMGdiblZzYkR0Y2JseHVMeW9xWEc0Z0tpQkFjR0Z5WVcwZ2V6OXZZbXBsWTNSOUlIQnliM0J6WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0Z6YzJWeWRGWmhiR2xrVUhKdmNITW9jSEp2Y0hNcElIdGNiaUFnYVdZZ0tDRndjbTl3Y3lrZ2UxeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVJQ0F2THlCT2IzUmxJSFJvWlNCMWMyVWdiMllnWUQwOVlDQjNhR2xqYUNCamFHVmphM01nWm05eUlHNTFiR3dnYjNJZ2RXNWtaV1pwYm1Wa0xseHVJQ0JwWmlBb2NISnZjSE11WkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVd2dJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnSUNCd2NtOXdjeTVqYUdsc1pISmxiaUE5UFNCdWRXeHNMRnh1SUNBZ0lDQWdKME5oYmlCdmJteDVJSE5sZENCdmJtVWdiMllnWUdOb2FXeGtjbVZ1WUNCdmNpQmdjSEp2Y0hNdVpHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXhnTGlkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtIQnliM0J6TG1Ob2FXeGtjbVZ1SUQwOUlHNTFiR3dwS1R0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdkSGx3Wlc5bUlIQnliM0J6TG1SaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1JRDA5UFNBbmIySnFaV04wSnlBbUpseHVJQ0FnSUNBZ0oxOWZhSFJ0YkNjZ2FXNGdjSEp2Y0hNdVpHRnVaMlZ5YjNWemJIbFRaWFJKYm01bGNraFVUVXdzWEc0Z0lDQWdJQ0FuWUhCeWIzQnpMbVJoYm1kbGNtOTFjMng1VTJWMFNXNXVaWEpJVkUxTVlDQnRkWE4wSUdKbElHbHVJSFJvWlNCbWIzSnRJR0I3WDE5b2RHMXNPaUF1TGk1OVlDNGdKeUFyWEc0Z0lDQWdJQ0FuVUd4bFlYTmxJSFpwYzJsMElHaDBkSEJ6T2k4dlptSXViV1V2Y21WaFkzUXRhVzUyWVhKcFlXNTBMV1JoYm1kbGNtOTFjMng1TFhObGRDMXBibTVsY2kxb2RHMXNJQ2NnSzF4dUlDQWdJQ0FnSjJadmNpQnRiM0psSUdsdVptOXliV0YwYVc5dUxpZGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLSFI1Y0dWdlppQndjbTl3Y3k1a1lXNW5aWEp2ZFhOc2VWTmxkRWx1Ym1WeVNGUk5UQ0E5UFQwZ0oyOWlhbVZqZENjZ0ppWmNiaUFnSUNBblgxOW9kRzFzSnlCcGJpQndjbTl3Y3k1a1lXNW5aWEp2ZFhOc2VWTmxkRWx1Ym1WeVNGUk5UQ2twTzF4dUlDQjlYRzRnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lIQnliM0J6TG1sdWJtVnlTRlJOVENBOVBTQnVkV3hzTEZ4dUlDQWdJQ0FnSjBScGNtVmpkR3g1SUhObGRIUnBibWNnY0hKdmNHVnlkSGtnWUdsdWJtVnlTRlJOVEdBZ2FYTWdibTkwSUhCbGNtMXBkSFJsWkM0Z0p5QXJYRzRnSUNBZ0lDQW5SbTl5SUcxdmNtVWdhVzVtYjNKdFlYUnBiMjRzSUd4dmIydDFjQ0JrYjJOMWJXVnVkR0YwYVc5dUlHOXVJR0JrWVc1blpYSnZkWE5zZVZObGRFbHVibVZ5U0ZSTlRHQXVKMXh1SUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnZDJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0Z3Y205d2N5NWpiMjUwWlc1MFJXUnBkR0ZpYkdVZ2ZId2djSEp2Y0hNdVkyaHBiR1J5Wlc0Z1BUMGdiblZzYkN4Y2JpQWdJQ0FnSUNkQklHTnZiWEJ2Ym1WdWRDQnBjeUJnWTI5dWRHVnVkRVZrYVhSaFlteGxZQ0JoYm1RZ1kyOXVkR0ZwYm5NZ1lHTm9hV3hrY21WdVlDQnRZVzVoWjJWa0lHSjVJQ2NnSzF4dUlDQWdJQ0FnSjFKbFlXTjBMaUJKZENCcGN5QnViM2NnZVc5MWNpQnlaWE53YjI1emFXSnBiR2wwZVNCMGJ5Qm5kV0Z5WVc1MFpXVWdkR2hoZENCdWIyNWxJRzltSUNjZ0sxeHVJQ0FnSUNBZ0ozUm9iM05sSUc1dlpHVnpJR0Z5WlNCMWJtVjRjR1ZqZEdWa2JIa2diVzlrYVdacFpXUWdiM0lnWkhWd2JHbGpZWFJsWkM0Z1ZHaHBjeUJwY3lBbklDdGNiaUFnSUNBZ0lDZHdjbTlpWVdKc2VTQnViM1FnYVc1MFpXNTBhVzl1WVd3dUoxeHVJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JpQWdmVnh1SUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJSEJ5YjNCekxuTjBlV3hsSUQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUhCeWIzQnpMbk4wZVd4bElEMDlQU0FuYjJKcVpXTjBKeXhjYmlBZ0lDQW5WR2hsSUdCemRIbHNaV0FnY0hKdmNDQmxlSEJsWTNSeklHRWdiV0Z3Y0dsdVp5Qm1jbTl0SUhOMGVXeGxJSEJ5YjNCbGNuUnBaWE1nZEc4Z2RtRnNkV1Z6TENBbklDdGNiaUFnSUNBbmJtOTBJR0VnYzNSeWFXNW5MaUJHYjNJZ1pYaGhiWEJzWlN3Z2MzUjViR1U5ZTN0dFlYSm5hVzVTYVdkb2REb2djM0JoWTJsdVp5QXJJRnhjSjJWdFhGd25mWDBnZDJobGJpQW5JQ3RjYmlBZ0lDQW5kWE5wYm1jZ1NsTllMaWRjYmlBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2h3Y205d2N5NXpkSGxzWlNBOVBTQnVkV3hzSUh4OElIUjVjR1Z2WmlCd2NtOXdjeTV6ZEhsc1pTQTlQVDBnSjI5aWFtVmpkQ2NwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hWMFRHbHpkR1Z1WlhJb2FXUXNJSEpsWjJsemRISmhkR2x2Yms1aGJXVXNJR3hwYzNSbGJtVnlMQ0IwY21GdWMyRmpkR2x2YmlrZ2UxeHVJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdMeThnU1VVNElHaGhjeUJ1YnlCQlVFa2dabTl5SUdWMlpXNTBJR05oY0hSMWNtbHVaeUJoYm1RZ2RHaGxJR0J2YmxOamNtOXNiR0FnWlhabGJuUWdaRzlsYzI0bmRGeHVJQ0FnSUM4dklHSjFZbUpzWlM1Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lISmxaMmx6ZEhKaGRHbHZiazVoYldVZ0lUMDlJQ2R2YmxOamNtOXNiQ2NnZkh3Z2FYTkZkbVZ1ZEZOMWNIQnZjblJsWkNnbmMyTnliMnhzSnl3Z2RISjFaU2tzWEc0Z0lDQWdJQ0FuVkdocGN5QmljbTkzYzJWeUlHUnZaWE51WEZ3bmRDQnpkWEJ3YjNKMElIUm9aU0JnYjI1VFkzSnZiR3hnSUdWMlpXNTBKMXh1SUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnZlZ4dUlDQjJZWElnWTI5dWRHRnBibVZ5SUQwZ1VtVmhZM1JOYjNWdWRDNW1hVzVrVW1WaFkzUkRiMjUwWVdsdVpYSkdiM0pKUkNocFpDazdYRzRnSUdsbUlDaGpiMjUwWVdsdVpYSXBJSHRjYmlBZ0lDQjJZWElnWkc5aklEMGdZMjl1ZEdGcGJtVnlMbTV2WkdWVWVYQmxJRDA5UFNCRlRFVk5SVTVVWDA1UFJFVmZWRmxRUlNBL1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdWIzZHVaWEpFYjJOMWJXVnVkQ0E2WEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWEk3WEc0Z0lDQWdiR2x6ZEdWdVZHOG9jbVZuYVhOMGNtRjBhVzl1VG1GdFpTd2daRzlqS1R0Y2JpQWdmVnh1SUNCMGNtRnVjMkZqZEdsdmJpNW5aWFJRZFhSTWFYTjBaVzVsY2xGMVpYVmxLQ2t1Wlc1eGRXVjFaVkIxZEV4cGMzUmxibVZ5S0Z4dUlDQWdJR2xrTEZ4dUlDQWdJSEpsWjJsemRISmhkR2x2Yms1aGJXVXNYRzRnSUNBZ2JHbHpkR1Z1WlhKY2JpQWdLVHRjYm4xY2JseHVMeThnUm05eUlFaFVUVXdzSUdObGNuUmhhVzRnZEdGbmN5QnphRzkxYkdRZ2IyMXBkQ0IwYUdWcGNpQmpiRzl6WlNCMFlXY3VJRmRsSUd0bFpYQWdZU0IzYUdsMFpXeHBjM1FnWm05eVhHNHZMeUIwYUc5elpTQnpjR1ZqYVdGc0lHTmhjMlZrSUhSaFozTXVYRzVjYm5aaGNpQnZiV2wwZEdWa1EyeHZjMlZVWVdkeklEMGdlMXh1SUNBbllYSmxZU2M2SUhSeWRXVXNYRzRnSUNkaVlYTmxKem9nZEhKMVpTeGNiaUFnSjJKeUp6b2dkSEoxWlN4Y2JpQWdKMk52YkNjNklIUnlkV1VzWEc0Z0lDZGxiV0psWkNjNklIUnlkV1VzWEc0Z0lDZG9jaWM2SUhSeWRXVXNYRzRnSUNkcGJXY25PaUIwY25WbExGeHVJQ0FuYVc1d2RYUW5PaUIwY25WbExGeHVJQ0FuYTJWNVoyVnVKem9nZEhKMVpTeGNiaUFnSjJ4cGJtc25PaUIwY25WbExGeHVJQ0FuYldWMFlTYzZJSFJ5ZFdVc1hHNGdJQ2R3WVhKaGJTYzZJSFJ5ZFdVc1hHNGdJQ2R6YjNWeVkyVW5PaUIwY25WbExGeHVJQ0FuZEhKaFkyc25PaUIwY25WbExGeHVJQ0FuZDJKeUp6b2dkSEoxWlZ4dUlDQXZMeUJPVDFSRk9pQnRaVzUxYVhSbGJTZHpJR05zYjNObElIUmhaeUJ6YUc5MWJHUWdZbVVnYjIxcGRIUmxaQ3dnWW5WMElIUm9ZWFFnWTJGMWMyVnpJSEJ5YjJKc1pXMXpMbHh1ZlR0Y2JseHVMeThnVjJVZ1lXTmpaWEIwSUdGdWVTQjBZV2NnZEc4Z1ltVWdjbVZ1WkdWeVpXUWdZblYwSUhOcGJtTmxJSFJvYVhNZ1oyVjBjeUJwYm1wbFkzUmxaQ0JwYm5SdklHRmlhWFJ5WVhKNVhHNHZMeUJJVkUxTUxDQjNaU0IzWVc1MElIUnZJRzFoYTJVZ2MzVnlaU0IwYUdGMElHbDBKM01nWVNCellXWmxJSFJoWnk1Y2JpOHZJR2gwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTDFKRlF5MTRiV3d2STA1VUxVNWhiV1ZjYmx4dWRtRnlJRlpCVEVsRVgxUkJSMTlTUlVkRldDQTlJQzllVzJFdGVrRXRXbDFiWVMxNlFTMWFPbDljWEM1Y1hDMWNYR1JkS2lRdk95QXZMeUJUYVcxd2JHbG1hV1ZrSUhOMVluTmxkRnh1ZG1GeUlIWmhiR2xrWVhSbFpGUmhaME5oWTJobElEMGdlMzA3WEc1MllYSWdhR0Z6VDNkdVVISnZjR1Z5ZEhrZ1BTQjdmUzVvWVhOUGQyNVFjbTl3WlhKMGVUdGNibHh1Wm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZFWVc1blpYSnZkWE5VWVdjb2RHRm5LU0I3WEc0Z0lHbG1JQ2doYUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoMllXeHBaR0YwWldSVVlXZERZV05vWlN3Z2RHRm5LU2tnZTF4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9Wa0ZNU1VSZlZFRkhYMUpGUjBWWUxuUmxjM1FvZEdGbktTd2dKMGx1ZG1Gc2FXUWdkR0ZuT2lBbGN5Y3NJSFJoWnlrZ09pQnBiblpoY21saGJuUW9Wa0ZNU1VSZlZFRkhYMUpGUjBWWUxuUmxjM1FvZEdGbktTa3BPMXh1SUNBZ0lIWmhiR2xrWVhSbFpGUmhaME5oWTJobFczUmhaMTBnUFNCMGNuVmxPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QlNaV0ZqZENCamJHRnpjeUIwYUdGMElHbHpJR2xrWlcxd2IzUmxiblFnWVc1a0lHTmhjR0ZpYkdVZ2IyWWdZMjl1ZEdGcGJtbHVaeUJ2ZEdobGNseHVJQ29nVW1WaFkzUWdZMjl0Y0c5dVpXNTBjeTRnU1hRZ1lXTmpaWEIwY3lCbGRtVnVkQ0JzYVhOMFpXNWxjbk1nWVc1a0lFUlBUU0J3Y205d1pYSjBhV1Z6SUhSb1lYUWdZWEpsWEc0Z0tpQjJZV3hwWkNCaFkyTnZjbVJwYm1jZ2RHOGdZRVJQVFZCeWIzQmxjblI1WUM1Y2JpQXFYRzRnS2lBZ0xTQkZkbVZ1ZENCc2FYTjBaVzVsY25NNklHQnZia05zYVdOcllDd2dZRzl1VFc5MWMyVkViM2R1WUN3Z1pYUmpMbHh1SUNvZ0lDMGdSRTlOSUhCeWIzQmxjblJwWlhNNklHQmpiR0Z6YzA1aGJXVmdMQ0JnYm1GdFpXQXNJR0IwYVhSc1pXQXNJR1YwWXk1Y2JpQXFYRzRnS2lCVWFHVWdZSE4wZVd4bFlDQndjbTl3WlhKMGVTQm1kVzVqZEdsdmJuTWdaR2xtWm1WeVpXNTBiSGtnWm5KdmJTQjBhR1VnUkU5TklFRlFTUzRnU1hRZ1lXTmpaWEIwY3lCaGJseHVJQ29nYjJKcVpXTjBJRzFoY0hCcGJtY2diMllnYzNSNWJHVWdjSEp2Y0dWeWRHbGxjeUIwYnlCMllXeDFaWE11WEc0Z0tseHVJQ29nUUdOdmJuTjBjblZqZEc5eUlGSmxZV04wUkU5TlEyOXRjRzl1Wlc1MFhHNGdLaUJBWlhoMFpXNWtjeUJTWldGamRFMTFiSFJwUTJocGJHUmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1VtVmhZM1JFVDAxRGIyMXdiMjVsYm5Rb2RHRm5LU0I3WEc0Z0lIWmhiR2xrWVhSbFJHRnVaMlZ5YjNWelZHRm5LSFJoWnlrN1hHNGdJSFJvYVhNdVgzUmhaeUE5SUhSaFp6dGNiaUFnZEdocGN5NWZjbVZ1WkdWeVpXUkRhR2xzWkhKbGJpQTlJRzUxYkd3N1hHNGdJSFJvYVhNdVgzQnlaWFpwYjNWelUzUjViR1ZEYjNCNUlEMGdiblZzYkR0Y2JpQWdkR2hwY3k1ZmNtOXZkRTV2WkdWSlJDQTlJRzUxYkd3N1hHNTlYRzVjYmxKbFlXTjBSRTlOUTI5dGNHOXVaVzUwTG1ScGMzQnNZWGxPWVcxbElEMGdKMUpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBKenRjYmx4dVVtVmhZM1JFVDAxRGIyMXdiMjVsYm5RdVRXbDRhVzRnUFNCN1hHNWNiaUFnWTI5dWMzUnlkV04wT2lCbWRXNWpkR2x2YmlobGJHVnRaVzUwS1NCN1hHNGdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRFVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1ME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlc1bGNtRjBaWE1nY205dmRDQjBZV2NnYldGeWEzVndJSFJvWlc0Z2NtVmpkWEp6WlhNdUlGUm9hWE1nYldWMGFHOWtJR2hoY3lCemFXUmxJR1ZtWm1WamRITWdZVzVrWEc0Z0lDQXFJR2x6SUc1dmRDQnBaR1Z0Y0c5MFpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEp2YjNSSlJDQlVhR1VnY205dmRDQkVUMDBnU1VRZ1ptOXlJSFJvYVhNZ2JtOWtaUzVjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dWZGSmxZV04wVTJWeWRtVnlVbVZ1WkdWeWFXNW5WSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzBnVkdobElHTnZiWEIxZEdWa0lHMWhjbXQxY0M1Y2JpQWdJQ292WEc0Z0lHMXZkVzUwUTI5dGNHOXVaVzUwT2lCbWRXNWpkR2x2YmloeWIyOTBTVVFzSUhSeVlXNXpZV04wYVc5dUxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RHaHBjeTVmY205dmRFNXZaR1ZKUkNBOUlISnZiM1JKUkR0Y2JpQWdJQ0JoYzNObGNuUldZV3hwWkZCeWIzQnpLSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwTG5CeWIzQnpLVHRjYmlBZ0lDQjJZWElnWTJ4dmMyVlVZV2NnUFNCdmJXbDBkR1ZrUTJ4dmMyVlVZV2R6VzNSb2FYTXVYM1JoWjEwZ1B5QW5KeUE2SUNjOEx5Y2dLeUIwYUdsekxsOTBZV2NnS3lBblBpYzdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUhSb2FYTXVYMk55WldGMFpVOXdaVzVVWVdkTllYSnJkWEJCYm1SUWRYUk1hWE4wWlc1bGNuTW9kSEpoYm5OaFkzUnBiMjRwSUN0Y2JpQWdJQ0FnSUhSb2FYTXVYMk55WldGMFpVTnZiblJsYm5STllYSnJkWEFvZEhKaGJuTmhZM1JwYjI0c0lHTnZiblJsZUhRcElDdGNiaUFnSUNBZ0lHTnNiM05sVkdGblhHNGdJQ0FnS1R0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QnRZWEpyZFhBZ1ptOXlJSFJvWlNCdmNHVnVJSFJoWnlCaGJtUWdZV3hzSUdGMGRISnBZblYwWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2JXVjBhRzlrSUdoaGN5QnphV1JsSUdWbVptVmpkSE1nWW1WallYVnpaU0JsZG1WdWRITWdaMlYwSUhKbFoybHpkR1Z5WldRdVhHNGdJQ0FxWEc0Z0lDQXFJRWwwWlhKaGRHbHVaeUJ2ZG1WeUlHOWlhbVZqZENCd2NtOXdaWEowYVdWeklHbHpJR1poYzNSbGNpQjBhR0Z1SUdsMFpYSmhkR2x1WnlCdmRtVnlJR0Z5Y21GNWN5NWNiaUFnSUNvZ1FITmxaU0JvZEhSd09pOHZhbk53WlhKbUxtTnZiUzl2WW1vdGRuTXRZWEp5TFdsMFpYSmhkR2x2Ymx4dUlDQWdLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU4VW1WaFkzUlRaWEoyWlhKU1pXNWtaWEpwYm1kVWNtRnVjMkZqZEdsdmJuMGdkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQk5ZWEpyZFhBZ2IyWWdiM0JsYm1sdVp5QjBZV2N1WEc0Z0lDQXFMMXh1SUNCZlkzSmxZWFJsVDNCbGJsUmhaMDFoY210MWNFRnVaRkIxZEV4cGMzUmxibVZ5Y3pvZ1puVnVZM1JwYjI0b2RISmhibk5oWTNScGIyNHBJSHRjYmlBZ0lDQjJZWElnY0hKdmNITWdQU0IwYUdsekxsOWpkWEp5Wlc1MFJXeGxiV1Z1ZEM1d2NtOXdjenRjYmlBZ0lDQjJZWElnY21WMElEMGdKenduSUNzZ2RHaHBjeTVmZEdGbk8xeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2NISnZjRXRsZVNCcGJpQndjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0Z3Y205d2N5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdTMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIWmhjaUJ3Y205d1ZtRnNkV1VnUFNCd2NtOXdjMXR3Y205d1MyVjVYVHRjYmlBZ0lDQWdJR2xtSUNod2NtOXdWbUZzZFdVZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h5WldkcGMzUnlZWFJwYjI1T1lXMWxUVzlrZFd4bGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdTMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQndkWFJNYVhOMFpXNWxjaWgwYUdsekxsOXliMjkwVG05a1pVbEVMQ0J3Y205d1MyVjVMQ0J3Y205d1ZtRnNkV1VzSUhSeVlXNXpZV04wYVc5dUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205d1MyVjVJRDA5UFNCVFZGbE1SU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h3Y205d1ZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCV1lXeDFaU0E5SUhSb2FYTXVYM0J5WlhacGIzVnpVM1I1YkdWRGIzQjVJRDBnWVhOemFXZHVLSHQ5TENCd2NtOXdjeTV6ZEhsc1pTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIQnliM0JXWVd4MVpTQTlJRU5UVTFCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3k1amNtVmhkR1ZOWVhKcmRYQkdiM0pUZEhsc1pYTW9jSEp2Y0ZaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdiV0Z5YTNWd0lEMWNiaUFnSUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NdVkzSmxZWFJsVFdGeWEzVndSbTl5VUhKdmNHVnlkSGtvY0hKdmNFdGxlU3dnY0hKdmNGWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFoY210MWNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRDQXJQU0FuSUNjZ0t5QnRZWEpyZFhBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkdiM0lnYzNSaGRHbGpJSEJoWjJWekxDQnVieUJ1WldWa0lIUnZJSEIxZENCU1pXRmpkQ0JKUkNCaGJtUWdZMmhsWTJ0emRXMHVJRk5oZG1WeklHeHZkSE1nYjJaY2JpQWdJQ0F2THlCaWVYUmxjeTVjYmlBZ0lDQnBaaUFvZEhKaGJuTmhZM1JwYjI0dWNtVnVaR1Z5Vkc5VGRHRjBhV05OWVhKcmRYQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWFFnS3lBblBpYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJRzFoY210MWNFWnZja2xFSUQwZ1JFOU5VSEp2Y0dWeWRIbFBjR1Z5WVhScGIyNXpMbU55WldGMFpVMWhjbXQxY0VadmNrbEVLSFJvYVhNdVgzSnZiM1JPYjJSbFNVUXBPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYUWdLeUFuSUNjZ0t5QnRZWEpyZFhCR2IzSkpSQ0FySUNjK0p6dGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJ0WVhKcmRYQWdabTl5SUhSb1pTQmpiMjUwWlc1MElHSmxkSGRsWlc0Z2RHaGxJSFJoWjNNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JTWldOdmJtTnBiR1ZVY21GdWMyRmpkR2x2Ym54U1pXRmpkRk5sY25abGNsSmxibVJsY21sdVoxUnlZVzV6WVdOMGFXOXVmU0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdZMjl1ZEdWNGRGeHVJQ0FnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUVOdmJuUmxiblFnYldGeWEzVndMbHh1SUNBZ0tpOWNiaUFnWDJOeVpXRjBaVU52Ym5SbGJuUk5ZWEpyZFhBNklHWjFibU4wYVc5dUtIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUhCeVpXWnBlQ0E5SUNjbk8xeHVJQ0FnSUdsbUlDaDBhR2x6TGw5MFlXY2dQVDA5SUNkc2FYTjBhVzVuSnlCOGZGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MFlXY2dQVDA5SUNkd2NtVW5JSHg4WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1JoWnlBOVBUMGdKM1JsZUhSaGNtVmhKeWtnZTF4dUlDQWdJQ0FnTHk4Z1FXUmtJR0Z1SUdsdWFYUnBZV3dnYm1WM2JHbHVaU0JpWldOaGRYTmxJR0p5YjNkelpYSnpJR2xuYm05eVpTQjBhR1VnWm1seWMzUWdibVYzYkdsdVpTQnBibHh1SUNBZ0lDQWdMeThnWVNBOGJHbHpkR2x1Wno0c0lEeHdjbVUrTENCdmNpQThkR1Y0ZEdGeVpXRStJR0Z6SUdGdUlGd2lZWFYwYUc5eWFXNW5JR052Ym5abGJtbGxibU5sWENJZ0xTMGdjMlZsWEc0Z0lDQWdJQ0F2THlCb2RIUndjem92TDJoMGJXd3VjM0JsWXk1M2FHRjBkMmN1YjNKbkwyMTFiSFJwY0dGblpTOXplVzUwWVhndWFIUnRiQ053WVhKemFXNW5MVzFoYVc0dGFXNWliMlI1TGx4dUlDQWdJQ0FnY0hKbFptbDRJRDBnSjF4Y2JpYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSEJ5YjNCeklEMGdkR2hwY3k1ZlkzVnljbVZ1ZEVWc1pXMWxiblF1Y0hKdmNITTdYRzVjYmlBZ0lDQXZMeUJKYm5SbGJuUnBiMjVoYkNCMWMyVWdiMllnSVQwZ2RHOGdZWFp2YVdRZ1kyRjBZMmhwYm1jZ2VtVnlieTltWVd4elpTNWNiaUFnSUNCMllYSWdhVzV1WlhKSVZFMU1JRDBnY0hKdmNITXVaR0Z1WjJWeWIzVnpiSGxUWlhSSmJtNWxja2hVVFV3N1hHNGdJQ0FnYVdZZ0tHbHVibVZ5U0ZSTlRDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnBaaUFvYVc1dVpYSklWRTFNTGw5ZmFIUnRiQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUJwYm01bGNraFVUVXd1WDE5b2RHMXNPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllYSWdZMjl1ZEdWdWRGUnZWWE5sSUQxY2JpQWdJQ0FnSUNBZ1EwOU9WRVZPVkY5VVdWQkZVMXQwZVhCbGIyWWdjSEp2Y0hNdVkyaHBiR1J5Wlc1ZElEOGdjSEp2Y0hNdVkyaHBiR1J5Wlc0Z09pQnVkV3hzTzF4dUlDQWdJQ0FnZG1GeUlHTm9hV3hrY21WdVZHOVZjMlVnUFNCamIyNTBaVzUwVkc5VmMyVWdJVDBnYm5Wc2JDQS9JRzUxYkd3Z09pQndjbTl3Y3k1amFHbHNaSEpsYmp0Y2JpQWdJQ0FnSUdsbUlDaGpiMjUwWlc1MFZHOVZjMlVnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0hKbFptbDRJQ3NnWlhOallYQmxWR1Y0ZEVOdmJuUmxiblJHYjNKQ2NtOTNjMlZ5S0dOdmJuUmxiblJVYjFWelpTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR05vYVd4a2NtVnVWRzlWYzJVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYlc5MWJuUkpiV0ZuWlhNZ1BTQjBhR2x6TG0xdmRXNTBRMmhwYkdSeVpXNG9YRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUnlaVzVVYjFWelpTeGNiaUFnSUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2Yml4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWlhoMFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbVZtYVhnZ0t5QnRiM1Z1ZEVsdFlXZGxjeTVxYjJsdUtDY25LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlRHRjYmlBZ2ZTeGNibHh1SUNCeVpXTmxhWFpsUTI5dGNHOXVaVzUwT2lCbWRXNWpkR2x2YmlodVpYaDBSV3hsYldWdWRDd2dkSEpoYm5OaFkzUnBiMjRzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ2NISmxka1ZzWlcxbGJuUWdQU0IwYUdsekxsOWpkWEp5Wlc1MFJXeGxiV1Z1ZER0Y2JpQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFJXeGxiV1Z1ZENBOUlHNWxlSFJGYkdWdFpXNTBPMXh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxRMjl0Y0c5dVpXNTBLSFJ5WVc1ellXTjBhVzl1TENCd2NtVjJSV3hsYldWdWRDd2dibVY0ZEVWc1pXMWxiblFzSUdOdmJuUmxlSFFwTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdWeklHRWdibUYwYVhabElFUlBUU0JqYjIxd2IyNWxiblFnWVdaMFpYSWdhWFFnYUdGeklHRnNjbVZoWkhrZ1ltVmxiaUJoYkd4dlkyRjBaV1FnWVc1a1hHNGdJQ0FxSUdGMGRHRmphR1ZrSUhSdklIUm9aU0JFVDAwdUlGSmxZMjl1WTJsc1pYTWdkR2hsSUhKdmIzUWdSRTlOSUc1dlpHVXNJSFJvWlc0Z2NtVmpkWEp6WlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSU1pXTnZibU5wYkdWVWNtRnVjMkZqZEdsdmJuMGdkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVWc1pXMWxiblI5SUhCeVpYWkZiR1Z0Wlc1MFhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZTQnVaWGgwUld4bGJXVnVkRnh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvZ1FHOTJaWEp5YVdSaFlteGxYRzRnSUNBcUwxeHVJQ0IxY0dSaGRHVkRiMjF3YjI1bGJuUTZJR1oxYm1OMGFXOXVLSFJ5WVc1ellXTjBhVzl1TENCd2NtVjJSV3hsYldWdWRDd2dibVY0ZEVWc1pXMWxiblFzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0JoYzNObGNuUldZV3hwWkZCeWIzQnpLSFJvYVhNdVgyTjFjbkpsYm5SRmJHVnRaVzUwTG5CeWIzQnpLVHRjYmlBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZFVDAxUWNtOXdaWEowYVdWektIQnlaWFpGYkdWdFpXNTBMbkJ5YjNCekxDQjBjbUZ1YzJGamRHbHZiaWs3WEc0Z0lDQWdkR2hwY3k1ZmRYQmtZWFJsUkU5TlEyaHBiR1J5Wlc0b2NISmxka1ZzWlcxbGJuUXVjSEp2Y0hNc0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVmpiMjVqYVd4bGN5QjBhR1VnY0hKdmNHVnlkR2xsY3lCaWVTQmtaWFJsWTNScGJtY2daR2xtWm1WeVpXNWpaWE1nYVc0Z2NISnZjR1Z5ZEhrZ2RtRnNkV1Z6SUdGdVpGeHVJQ0FnS2lCMWNHUmhkR2x1WnlCMGFHVWdSRTlOSUdGeklHNWxZMlZ6YzJGeWVTNGdWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QndjbTlpWVdKc2VTQjBhR1VnYzJsdVoyeGxJRzF2YzNSY2JpQWdJQ29nWTNKcGRHbGpZV3dnY0dGMGFDQm1iM0lnY0dWeVptOXliV0Z1WTJVZ2IzQjBhVzFwZW1GMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCVVQwUlBPaUJDWlc1amFHMWhjbXNnZDJobGRHaGxjaUJqYUdWamEybHVaeUJtYjNJZ1kyaGhibWRsWkNCMllXeDFaWE1nYVc0Z2JXVnRiM0o1SUdGamRIVmhiR3g1WEc0Z0lDQXFJQ0FnSUNBZ0lHbHRjSEp2ZG1WeklIQmxjbVp2Y20xaGJtTmxJQ2hsYzNCbFkybGhiR3g1SUhOMFlYUnBZMkZzYkhrZ2NHOXphWFJwYjI1bFpDQmxiR1Z0Wlc1MGN5a3VYRzRnSUNBcUlGUlBSRTg2SUVKbGJtTm9iV0Z5YXlCMGFHVWdaV1ptWldOMGN5QnZaaUJ3ZFhSMGFXNW5JSFJvYVhNZ1lYUWdkR2hsSUhSdmNDQnphVzVqWlNBNU9TVWdiMllnY0hKdmNITmNiaUFnSUNvZ0lDQWdJQ0FnWkc4Z2JtOTBJR05vWVc1blpTQm1iM0lnWVNCbmFYWmxiaUJ5WldOdmJtTnBiR2xoZEdsdmJpNWNiaUFnSUNvZ1ZFOUVUem9nUW1WdVkyaHRZWEpySUdGeVpXRnpJSFJvWVhRZ1kyRnVJR0psSUdsdGNISnZkbVZrSUhkcGRHZ2dZMkZqYUdsdVp5NWNiaUFnSUNwY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHeGhjM1JRY205d2MxeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FxTDF4dUlDQmZkWEJrWVhSbFJFOU5VSEp2Y0dWeWRHbGxjem9nWm5WdVkzUnBiMjRvYkdGemRGQnliM0J6TENCMGNtRnVjMkZqZEdsdmJpa2dlMXh1SUNBZ0lIWmhjaUJ1WlhoMFVISnZjSE1nUFNCMGFHbHpMbDlqZFhKeVpXNTBSV3hsYldWdWRDNXdjbTl3Y3p0Y2JpQWdJQ0IyWVhJZ2NISnZjRXRsZVR0Y2JpQWdJQ0IyWVhJZ2MzUjViR1ZPWVcxbE8xeHVJQ0FnSUhaaGNpQnpkSGxzWlZWd1pHRjBaWE03WEc0Z0lDQWdabTl5SUNod2NtOXdTMlY1SUdsdUlHeGhjM1JRY205d2N5a2dlMXh1SUNBZ0lDQWdhV1lnS0c1bGVIUlFjbTl3Y3k1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1MyVjVLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lXeGhjM1JRY205d2N5NW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdTMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h3Y205d1MyVjVJRDA5UFNCVFZGbE1SU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdiR0Z6ZEZOMGVXeGxJRDBnZEdocGN5NWZjSEpsZG1sdmRYTlRkSGxzWlVOdmNIazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2MzUjViR1ZPWVcxbElHbHVJR3hoYzNSVGRIbHNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhOMFUzUjViR1V1YUdGelQzZHVVSEp2Y0dWeWRIa29jM1I1YkdWT1lXMWxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdWVmNHUmhkR1Z6SUQwZ2MzUjViR1ZWY0dSaGRHVnpJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVlZjR1JoZEdWelczTjBlV3hsVG1GdFpWMGdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjSEpsZG1sdmRYTlRkSGxzWlVOdmNIa2dQU0J1ZFd4c08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaV2RwYzNSeVlYUnBiMjVPWVcxbFRXOWtkV3hsY3k1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1MyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1ZNYVhOMFpXNWxjaWgwYUdsekxsOXliMjkwVG05a1pVbEVMQ0J3Y205d1MyVjVLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ1JFOU5VSEp2Y0dWeWRIa3VhWE5UZEdGdVpHRnlaRTVoYldWYmNISnZjRXRsZVYwZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1cGMwTjFjM1J2YlVGMGRISnBZblYwWlNod2NtOXdTMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQkNZV05yWlc1a1NVUlBjR1Z5WVhScGIyNXpMbVJsYkdWMFpWQnliM0JsY25SNVFubEpSQ2hjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5YjI5MFRtOWtaVWxFTEZ4dUlDQWdJQ0FnSUNBZ0lIQnliM0JMWlhsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWm05eUlDaHdjbTl3UzJWNUlHbHVJRzVsZUhSUWNtOXdjeWtnZTF4dUlDQWdJQ0FnZG1GeUlHNWxlSFJRY205d0lEMGdibVY0ZEZCeWIzQnpXM0J5YjNCTFpYbGRPMXh1SUNBZ0lDQWdkbUZ5SUd4aGMzUlFjbTl3SUQwZ2NISnZjRXRsZVNBOVBUMGdVMVJaVEVVZ1AxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NtVjJhVzkxYzFOMGVXeGxRMjl3ZVNBNlhHNGdJQ0FnSUNBZ0lHeGhjM1JRY205d2MxdHdjbTl3UzJWNVhUdGNiaUFnSUNBZ0lHbG1JQ2doYm1WNGRGQnliM0J6TG1oaGMwOTNibEJ5YjNCbGNuUjVLSEJ5YjNCTFpYa3BJSHg4SUc1bGVIUlFjbTl3SUQwOVBTQnNZWE4wVUhKdmNDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNod2NtOXdTMlY1SUQwOVBTQlRWRmxNUlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYm1WNGRGQnliM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwVUhKdmNDQTlJSFJvYVhNdVgzQnlaWFpwYjNWelUzUjViR1ZEYjNCNUlEMGdZWE56YVdkdUtIdDlMQ0J1WlhoMFVISnZjQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKbGRtbHZkWE5UZEhsc1pVTnZjSGtnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHNZWE4wVUhKdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGVnVjMlYwSUhOMGVXeGxjeUJ2YmlCZ2JHRnpkRkJ5YjNCZ0lHSjFkQ0J1YjNRZ2IyNGdZRzVsZUhSUWNtOXdZQzVjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLSE4wZVd4bFRtRnRaU0JwYmlCc1lYTjBVSEp2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHeGhjM1JRY205d0xtaGhjMDkzYmxCeWIzQmxjblI1S0hOMGVXeGxUbUZ0WlNrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9JVzVsZUhSUWNtOXdJSHg4SUNGdVpYaDBVSEp2Y0M1b1lYTlBkMjVRY205d1pYSjBlU2h6ZEhsc1pVNWhiV1VwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVlZ3WkdGMFpYTWdQU0J6ZEhsc1pWVndaR0YwWlhNZ2ZId2dlMzA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFZYQmtZWFJsYzF0emRIbHNaVTVoYldWZElEMGdKeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJRlZ3WkdGMFpTQnpkSGxzWlhNZ2RHaGhkQ0JqYUdGdVoyVmtJSE5wYm1ObElHQnNZWE4wVUhKdmNHQXVYRzRnSUNBZ0lDQWdJQ0FnWm05eUlDaHpkSGxzWlU1aGJXVWdhVzRnYm1WNGRGQnliM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodVpYaDBVSEp2Y0M1b1lYTlBkMjVRY205d1pYSjBlU2h6ZEhsc1pVNWhiV1VwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRkJ5YjNCYmMzUjViR1ZPWVcxbFhTQWhQVDBnYm1WNGRGQnliM0JiYzNSNWJHVk9ZVzFsWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVlZ3WkdGMFpYTWdQU0J6ZEhsc1pWVndaR0YwWlhNZ2ZId2dlMzA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFZYQmtZWFJsYzF0emRIbHNaVTVoYldWZElEMGdibVY0ZEZCeWIzQmJjM1I1YkdWT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVbVZzYVdWeklHOXVJR0IxY0dSaGRHVlRkSGxzWlhOQ2VVbEVZQ0J1YjNRZ2JYVjBZWFJwYm1jZ1lITjBlV3hsVlhCa1lYUmxjMkF1WEc0Z0lDQWdJQ0FnSUNBZ2MzUjViR1ZWY0dSaGRHVnpJRDBnYm1WNGRGQnliM0E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVm5hWE4wY21GMGFXOXVUbUZ0WlUxdlpIVnNaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29jSEp2Y0V0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnY0hWMFRHbHpkR1Z1WlhJb2RHaHBjeTVmY205dmRFNXZaR1ZKUkN3Z2NISnZjRXRsZVN3Z2JtVjRkRkJ5YjNBc0lIUnlZVzV6WVdOMGFXOXVLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ1JFOU5VSEp2Y0dWeWRIa3VhWE5UZEdGdVpHRnlaRTVoYldWYmNISnZjRXRsZVYwZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0JFVDAxUWNtOXdaWEowZVM1cGMwTjFjM1J2YlVGMGRISnBZblYwWlNod2NtOXdTMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQkNZV05yWlc1a1NVUlBjR1Z5WVhScGIyNXpMblZ3WkdGMFpWQnliM0JsY25SNVFubEpSQ2hjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5YjI5MFRtOWtaVWxFTEZ4dUlDQWdJQ0FnSUNBZ0lIQnliM0JMWlhrc1hHNGdJQ0FnSUNBZ0lDQWdibVY0ZEZCeWIzQmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSE4wZVd4bFZYQmtZWFJsY3lrZ2UxeHVJQ0FnSUNBZ1FtRmphMlZ1WkVsRVQzQmxjbUYwYVc5dWN5NTFjR1JoZEdWVGRIbHNaWE5DZVVsRUtGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eWIyOTBUbTlrWlVsRUxGeHVJQ0FnSUNBZ0lDQnpkSGxzWlZWd1pHRjBaWE5jYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXTnZibU5wYkdWeklIUm9aU0JqYUdsc1pISmxiaUIzYVhSb0lIUm9aU0IyWVhKcGIzVnpJSEJ5YjNCbGNuUnBaWE1nZEdoaGRDQmhabVpsWTNRZ2RHaGxYRzRnSUNBcUlHTm9hV3hrY21WdUlHTnZiblJsYm5RdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnNZWE4wVUhKdmNITmNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1ZlNCMGNtRnVjMkZqZEdsdmJseHVJQ0FnS2k5Y2JpQWdYM1Z3WkdGMFpVUlBUVU5vYVd4a2NtVnVPaUJtZFc1amRHbHZiaWhzWVhOMFVISnZjSE1zSUhSeVlXNXpZV04wYVc5dUxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJRzVsZUhSUWNtOXdjeUE5SUhSb2FYTXVYMk4xY25KbGJuUkZiR1Z0Wlc1MExuQnliM0J6TzF4dVhHNGdJQ0FnZG1GeUlHeGhjM1JEYjI1MFpXNTBJRDFjYmlBZ0lDQWdJRU5QVGxSRlRsUmZWRmxRUlZOYmRIbHdaVzltSUd4aGMzUlFjbTl3Y3k1amFHbHNaSEpsYmwwZ1B5QnNZWE4wVUhKdmNITXVZMmhwYkdSeVpXNGdPaUJ1ZFd4c08xeHVJQ0FnSUhaaGNpQnVaWGgwUTI5dWRHVnVkQ0E5WEc0Z0lDQWdJQ0JEVDA1VVJVNVVYMVJaVUVWVFczUjVjR1Z2WmlCdVpYaDBVSEp2Y0hNdVkyaHBiR1J5Wlc1ZElEOGdibVY0ZEZCeWIzQnpMbU5vYVd4a2NtVnVJRG9nYm5Wc2JEdGNibHh1SUNBZ0lIWmhjaUJzWVhOMFNIUnRiQ0E5WEc0Z0lDQWdJQ0JzWVhOMFVISnZjSE11WkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVd2dKaVpjYmlBZ0lDQWdJR3hoYzNSUWNtOXdjeTVrWVc1blpYSnZkWE5zZVZObGRFbHVibVZ5U0ZSTlRDNWZYMmgwYld3N1hHNGdJQ0FnZG1GeUlHNWxlSFJJZEcxc0lEMWNiaUFnSUNBZ0lHNWxlSFJRY205d2N5NWtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVENBbUpseHVJQ0FnSUNBZ2JtVjRkRkJ5YjNCekxtUmhibWRsY205MWMyeDVVMlYwU1c1dVpYSklWRTFNTGw5ZmFIUnRiRHRjYmx4dUlDQWdJQzh2SUU1dmRHVWdkR2hsSUhWelpTQnZaaUJnSVQxZ0lIZG9hV05vSUdOb1pXTnJjeUJtYjNJZ2JuVnNiQ0J2Y2lCMWJtUmxabWx1WldRdVhHNGdJQ0FnZG1GeUlHeGhjM1JEYUdsc1pISmxiaUE5SUd4aGMzUkRiMjUwWlc1MElDRTlJRzUxYkd3Z1B5QnVkV3hzSURvZ2JHRnpkRkJ5YjNCekxtTm9hV3hrY21WdU8xeHVJQ0FnSUhaaGNpQnVaWGgwUTJocGJHUnlaVzRnUFNCdVpYaDBRMjl1ZEdWdWRDQWhQU0J1ZFd4c0lEOGdiblZzYkNBNklHNWxlSFJRY205d2N5NWphR2xzWkhKbGJqdGNibHh1SUNBZ0lDOHZJRWxtSUhkbEozSmxJSE4zYVhSamFHbHVaeUJtY205dElHTm9hV3hrY21WdUlIUnZJR052Ym5SbGJuUXZhSFJ0YkNCdmNpQjJhV05sSUhabGNuTmhMQ0J5WlcxdmRtVmNiaUFnSUNBdkx5QjBhR1VnYjJ4a0lHTnZiblJsYm5SY2JpQWdJQ0IyWVhJZ2JHRnpkRWhoYzBOdmJuUmxiblJQY2toMGJXd2dQU0JzWVhOMFEyOXVkR1Z1ZENBaFBTQnVkV3hzSUh4OElHeGhjM1JJZEcxc0lDRTlJRzUxYkd3N1hHNGdJQ0FnZG1GeUlHNWxlSFJJWVhORGIyNTBaVzUwVDNKSWRHMXNJRDBnYm1WNGRFTnZiblJsYm5RZ0lUMGdiblZzYkNCOGZDQnVaWGgwU0hSdGJDQWhQU0J1ZFd4c08xeHVJQ0FnSUdsbUlDaHNZWE4wUTJocGJHUnlaVzRnSVQwZ2JuVnNiQ0FtSmlCdVpYaDBRMmhwYkdSeVpXNGdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZEYUdsc1pISmxiaWh1ZFd4c0xDQjBjbUZ1YzJGamRHbHZiaXdnWTI5dWRHVjRkQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hzWVhOMFNHRnpRMjl1ZEdWdWRFOXlTSFJ0YkNBbUppQWhibVY0ZEVoaGMwTnZiblJsYm5SUGNraDBiV3dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFZHVjRkRU52Ym5SbGJuUW9KeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodVpYaDBRMjl1ZEdWdWRDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnBaaUFvYkdGemRFTnZiblJsYm5RZ0lUMDlJRzVsZUhSRGIyNTBaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxWR1Y0ZEVOdmJuUmxiblFvSnljZ0t5QnVaWGgwUTI5dWRHVnVkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h1WlhoMFNIUnRiQ0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JwWmlBb2JHRnpkRWgwYld3Z0lUMDlJRzVsZUhSSWRHMXNLU0I3WEc0Z0lDQWdJQ0FnSUVKaFkydGxibVJKUkU5d1pYSmhkR2x2Ym5NdWRYQmtZWFJsU1c1dVpYSklWRTFNUW5sSlJDaGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXliMjkwVG05a1pVbEVMRnh1SUNBZ0lDQWdJQ0FnSUc1bGVIUklkRzFzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodVpYaDBRMmhwYkdSeVpXNGdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZEYUdsc1pISmxiaWh1WlhoMFEyaHBiR1J5Wlc0c0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbGMzUnliM2x6SUdGc2JDQmxkbVZ1ZENCeVpXZHBjM1J5WVhScGIyNXpJR1p2Y2lCMGFHbHpJR2x1YzNSaGJtTmxMaUJFYjJWeklHNXZkQ0J5WlcxdmRtVWdabkp2YlZ4dUlDQWdLaUIwYUdVZ1JFOU5MaUJVYUdGMElHMTFjM1FnWW1VZ1pHOXVaU0JpZVNCMGFHVWdjR0Z5Wlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUhWdWJXOTFiblJEYjIxd2IyNWxiblE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVkVzV0YjNWdWRFTm9hV3hrY21WdUtDazdYRzRnSUNBZ1VtVmhZM1JDY205M2MyVnlSWFpsYm5SRmJXbDBkR1Z5TG1SbGJHVjBaVUZzYkV4cGMzUmxibVZ5Y3loMGFHbHpMbDl5YjI5MFRtOWtaVWxFS1R0Y2JpQWdJQ0JTWldGamRFTnZiWEJ2Ym1WdWRFSnliM2R6WlhKRmJuWnBjbTl1YldWdWRDNTFibTF2ZFc1MFNVUkdjbTl0Ulc1MmFYSnZibTFsYm5Rb2RHaHBjeTVmY205dmRFNXZaR1ZKUkNrN1hHNGdJQ0FnZEdocGN5NWZjbTl2ZEU1dlpHVkpSQ0E5SUc1MWJHdzdYRzRnSUgxY2JseHVmVHRjYmx4dVVtVmhZM1JRWlhKbUxtMWxZWE4xY21WTlpYUm9iMlJ6S0ZKbFlXTjBSRTlOUTI5dGNHOXVaVzUwTENBblVtVmhZM1JFVDAxRGIyMXdiMjVsYm5RbkxDQjdYRzRnSUcxdmRXNTBRMjl0Y0c5dVpXNTBPaUFuYlc5MWJuUkRiMjF3YjI1bGJuUW5MRnh1SUNCMWNHUmhkR1ZEYjIxd2IyNWxiblE2SUNkMWNHUmhkR1ZEYjIxd2IyNWxiblFuWEc1OUtUdGNibHh1WVhOemFXZHVLRnh1SUNCU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZEM1d2NtOTBiM1I1Y0dVc1hHNGdJRkpsWVdOMFJFOU5RMjl0Y0c5dVpXNTBMazFwZUdsdUxGeHVJQ0JTWldGamRFMTFiSFJwUTJocGJHUXVUV2w0YVc1Y2JpazdYRzVjYmxKbFlXTjBSRTlOUTI5dGNHOXVaVzUwTG1sdWFtVmpkR2x2YmlBOUlIdGNiaUFnYVc1cVpXTjBTVVJQY0dWeVlYUnBiMjV6T2lCbWRXNWpkR2x2YmloSlJFOXdaWEpoZEdsdmJuTXBJSHRjYmlBZ0lDQlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRDNUNZV05yWlc1a1NVUlBjR1Z5WVhScGIyNXpJRDBnUW1GamEyVnVaRWxFVDNCbGNtRjBhVzl1Y3lBOUlFbEVUM0JsY21GMGFXOXVjenRjYmlBZ2ZWeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRVJQVFVOdmJYQnZibVZ1ZER0Y2JpSmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRm9ybVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgTG9jYWxFdmVudFRyYXBNaXhpbiA9IHJlcXVpcmUoXCIuL0xvY2FsRXZlbnRUcmFwTWl4aW5cIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBmb3JtID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2Zvcm0nKTtcblxuLyoqXG4gKiBTaW5jZSBvblN1Ym1pdCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkXG4gKiB0byBjYXB0dXJlIGl0IG9uIHRoZSA8Zm9ybT4gZWxlbWVudCBpdHNlbGYuIFRoZXJlIGFyZSBsb3RzIG9mIGhhY2tzIHdlIGNvdWxkXG4gKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxmb3JtPiBhXG4gKiBjb21wb3NpdGUgY29tcG9uZW50IGFuZCB1c2UgYGNvbXBvbmVudERpZE1vdW50YCB0byBhdHRhY2ggdGhlIGV2ZW50IGhhbmRsZXJzLlxuICovXG52YXIgUmVhY3RET01Gb3JtID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01Gb3JtJyxcbiAgdGFnTmFtZTogJ0ZPUk0nLFxuXG4gIG1peGluczogW1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluLCBMb2NhbEV2ZW50VHJhcE1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE86IEluc3RlYWQgb2YgdXNpbmcgYFJlYWN0RE9NYCBkaXJlY3RseSwgd2Ugc2hvdWxkIHVzZSBKU1guIEhvd2V2ZXIsXG4gICAgLy8gYGpzaGludGAgZmFpbHMgdG8gcGFyc2UgSlNYIHNvIGluIG9yZGVyIGZvciBsaW50aW5nIHRvIHdvcmsgaW4gdGhlIG9wZW5cbiAgICAvLyBzb3VyY2UgcmVwbywgd2UgbmVlZCB0byBqdXN0IHVzZSBgUmVhY3RET00uZm9ybWAuXG4gICAgcmV0dXJuIGZvcm0odGhpcy5wcm9wcyk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFJlc2V0LCAncmVzZXQnKTtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQsICdzdWJtaXQnKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Gb3JtO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnM9cmVxdWlyZShcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCIpLERPTUNoaWxkcmVuT3BlcmF0aW9ucz1yZXF1aXJlKFwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnNcIiksRE9NUHJvcGVydHlPcGVyYXRpb25zPXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKSxSZWFjdE1vdW50PXJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIiksUmVhY3RQZXJmPXJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHNldElubmVySFRNTD1yZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIiksSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlM9e2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MOlwiYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlSW5uZXJIVE1MQnlJRCgpYC5cIixzdHlsZTpcImBzdHlsZWAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZVN0eWxlc0J5SUQoKWAuXCJ9LFJlYWN0RE9NSURPcGVyYXRpb25zPXt1cGRhdGVQcm9wZXJ0eUJ5SUQ6ZnVuY3Rpb24oaWQsbmFtZSx2YWx1ZSl7dmFyIG5vZGU9UmVhY3RNb3VudC5nZXROb2RlKGlkKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXCJ1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXNcIixJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXSk6aW52YXJpYW50KCFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSksbnVsbCE9dmFsdWU/RE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSxuYW1lLHZhbHVlKTpET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLG5hbWUpfSxkZWxldGVQcm9wZXJ0eUJ5SUQ6ZnVuY3Rpb24oaWQsbmFtZSx2YWx1ZSl7dmFyIG5vZGU9UmVhY3RNb3VudC5nZXROb2RlKGlkKTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXCJ1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXNcIixJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXSk6aW52YXJpYW50KCFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSksRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSxuYW1lLHZhbHVlKX0sdXBkYXRlU3R5bGVzQnlJRDpmdW5jdGlvbihpZCxzdHlsZXMpe3ZhciBub2RlPVJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7Q1NTUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yU3R5bGVzKG5vZGUsc3R5bGVzKX0sdXBkYXRlSW5uZXJIVE1MQnlJRDpmdW5jdGlvbihpZCxodG1sKXt2YXIgbm9kZT1SZWFjdE1vdW50LmdldE5vZGUoaWQpO3NldElubmVySFRNTChub2RlLGh0bWwpfSx1cGRhdGVUZXh0Q29udGVudEJ5SUQ6ZnVuY3Rpb24oaWQsY29udGVudCl7dmFyIG5vZGU9UmVhY3RNb3VudC5nZXROb2RlKGlkKTtET01DaGlsZHJlbk9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnQobm9kZSxjb250ZW50KX0sZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOmZ1bmN0aW9uKGlkLG1hcmt1cCl7dmFyIG5vZGU9UmVhY3RNb3VudC5nZXROb2RlKGlkKTtET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAobm9kZSxtYXJrdXApfSxkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6ZnVuY3Rpb24odXBkYXRlcyxtYXJrdXApe2Zvcih2YXIgaT0wO2k8dXBkYXRlcy5sZW5ndGg7aSsrKXVwZGF0ZXNbaV0ucGFyZW50Tm9kZT1SZWFjdE1vdW50LmdldE5vZGUodXBkYXRlc1tpXS5wYXJlbnRJRCk7RE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKHVwZGF0ZXMsbWFya3VwKX19O1JlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdERPTUlET3BlcmF0aW9ucyxcIlJlYWN0RE9NSURPcGVyYXRpb25zXCIse3VwZGF0ZVByb3BlcnR5QnlJRDpcInVwZGF0ZVByb3BlcnR5QnlJRFwiLGRlbGV0ZVByb3BlcnR5QnlJRDpcImRlbGV0ZVByb3BlcnR5QnlJRFwiLHVwZGF0ZVN0eWxlc0J5SUQ6XCJ1cGRhdGVTdHlsZXNCeUlEXCIsdXBkYXRlSW5uZXJIVE1MQnlJRDpcInVwZGF0ZUlubmVySFRNTEJ5SURcIix1cGRhdGVUZXh0Q29udGVudEJ5SUQ6XCJ1cGRhdGVUZXh0Q29udGVudEJ5SURcIixkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6XCJkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SURcIixkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6XCJkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXNcIn0pLG1vZHVsZS5leHBvcnRzPVJlYWN0RE9NSURPcGVyYXRpb25zO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkVUMDFKUkU5d1pYSmhkR2x2Ym5NdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRV05CTEZsQlJVRXNTVUZCU1N4MVFrRkJkMElzVVVGQlVTd3lRa0ZEYUVNc2MwSkJRWGRDTEZGQlFWRXNNa0pCUTJoRExITkNRVUYzUWl4UlFVRlJMREpDUVVOb1F5eFhRVUZoTEZGQlFWRXNaMEpCUTNKQ0xGVkJRVmtzVVVGQlVTeGxRVVZ3UWl4VlFVRlpMRkZCUVZFc1pVRkRjRUlzWVVGQlpTeFJRVUZSTEd0Q1FWRjJRaXg1UWtGRFJpeDNRa0ZEUlN4MVJVRkRSaXhOUVVGUExHMUVRVTlNTEhOQ1FWZEdMRzFDUVVGdlFpeFRRVUZUTEVkQlFVa3NTMEZCVFN4UFFVTnlReXhIUVVGSkxFMUJRVThzVjBGQlZ5eFJRVUZSTEVkQlF6ZENMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4WFFVTjBReXgzUWtGQmQwSXNaVUZCWlN4TlFVTjRReXc0UWtGRFFTeDNRa0ZCZDBJc1QwRkRkRUlzVjBGQlZ5eDNRa0ZCZDBJc1pVRkJaU3hQUVV0NlF5eE5RVUZVTEUxQlEwWXNjMEpCUVhOQ0xHOUNRVUZ2UWl4TFFVRk5MRXRCUVUwc1QwRkZkRVFzYzBKQlFYTkNMSFZDUVVGMVFpeExRVUZOTEU5QldYWkVMRzFDUVVGdlFpeFRRVUZUTEVkQlFVa3NTMEZCVFN4UFFVTnlReXhIUVVGSkxFMUJRVThzVjBGQlZ5eFJRVUZSTEVkQlF6ZENMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4WFFVTjBReXgzUWtGQmQwSXNaVUZCWlN4TlFVTjRReXc0UWtGRFFTeDNRa0ZCZDBJc1QwRkRkRUlzVjBGQlZ5eDNRa0ZCZDBJc1pVRkJaU3hQUVVOMFJDeHpRa0ZCYzBJc2RVSkJRWFZDTEV0QlFVMHNTMEZCVFN4UlFWY3pSQ3hwUWtGQmEwSXNVMEZCVXl4SFFVRkpMRkZCUXpkQ0xFZEJRVWtzVFVGQlR5eFhRVUZYTEZGQlFWRXNSMEZET1VJc2RVSkJRWE5DTEd0Q1FVRnJRaXhMUVVGTkxGTkJWV2hFTEc5Q1FVRnhRaXhUUVVGVExFZEJRVWtzVFVGRGFFTXNSMEZCU1N4TlFVRlBMRmRCUVZjc1VVRkJVU3hIUVVNNVFpeGpRVUZoTEV0QlFVMHNUMEZWY2tJc2MwSkJRWFZDTEZOQlFWTXNSMEZCU1N4VFFVTnNReXhIUVVGSkxFMUJRVThzVjBGQlZ5eFJRVUZSTEVkQlF6bENMSFZDUVVGelFpeHJRa0ZCYTBJc1MwRkJUU3hWUVZkb1JDeHhRMEZCYzBNc1UwRkJVeXhIUVVGSkxGRkJRMnBFTEVkQlFVa3NUVUZCVHl4WFFVRlhMRkZCUVZFc1IwRkRPVUlzZFVKQlFYTkNMR2xEUVVGcFF5eExRVUZOTEZOQlZTOUVMR3REUVVGdFF5eFRRVUZUTEZGQlFWTXNVVUZEYmtRc1NVRkJTeXhIUVVGSkxFZEJRVWtzUlVGQlJ5eEZRVUZKTEZGQlFWRXNUMEZCVVN4SlFVTnNReXhSUVVGUkxFZEJRVWNzVjBGQllTeFhRVUZYTEZGQlFWRXNVVUZCVVN4SFFVRkhMRk5CUlhoRUxIVkNRVUZ6UWl4bFFVRmxMRkZCUVZNc1UwRkpiRVFzVjBGQlZTeGxRVUZsTEhGQ1FVRnpRaXgzUWtGRE4wTXNiVUpCUVc5Q0xIRkNRVU53UWl4dFFrRkJiMElzY1VKQlEzQkNMR2xDUVVGclFpeHRRa0ZEYkVJc2IwSkJRWEZDTEhOQ1FVTnlRaXh6UWtGQmRVSXNkMEpCUTNaQ0xIRkRRVUZ6UXl4MVEwRkRkRU1zYTBOQlFXMURMSE5EUVVkeVF5eFBRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlNaV0ZqZEVSUFRVbEVUM0JsY21GMGFXOXVjMXh1SUNvZ1FIUjVjR1ZqYUdWamEzTWdjM1JoZEdsakxXOXViSGxjYmlBcUwxeHVYRzR2S21wemJHbHVkQ0JsZG1sc09pQjBjblZsSUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUVOVFUxQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5QTlJSEpsY1hWcGNtVW9YQ0l1TDBOVFUxQnliM0JsY25SNVQzQmxjbUYwYVc5dWMxd2lLVHRjYm5aaGNpQkVUMDFEYUdsc1pISmxiazl3WlhKaGRHbHZibk1nUFNCeVpYRjFhWEpsS0Z3aUxpOUVUMDFEYUdsc1pISmxiazl3WlhKaGRHbHZibk5jSWlrN1hHNTJZWElnUkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1eklEMGdjbVZ4ZFdseVpTaGNJaTR2UkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1elhDSXBPMXh1ZG1GeUlGSmxZV04wVFc5MWJuUWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRTF2ZFc1MFhDSXBPMXh1ZG1GeUlGSmxZV04wVUdWeVppQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBVR1Z5Wmx3aUtUdGNibHh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9YQ0l1TDJsdWRtRnlhV0Z1ZEZ3aUtUdGNiblpoY2lCelpYUkpibTVsY2toVVRVd2dQU0J5WlhGMWFYSmxLRndpTGk5elpYUkpibTVsY2toVVRVeGNJaWs3WEc1Y2JpOHFLbHh1SUNvZ1JYSnliM0p6SUdadmNpQndjbTl3WlhKMGFXVnpJSFJvWVhRZ2MyaHZkV3hrSUc1dmRDQmlaU0IxY0dSaGRHVmtJSGRwZEdnZ1lIVndaR0YwWlZCeWIzQmxjblI1UW5sSlpDZ3BZQzVjYmlBcVhHNGdLaUJBZEhsd1pTQjdiMkpxWldOMGZWeHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVkbUZ5SUVsT1ZrRk1TVVJmVUZKUFVFVlNWRmxmUlZKU1QxSlRJRDBnZTF4dUlDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJtVnlTRlJOVERwY2JpQWdJQ0FuWUdSaGJtZGxjbTkxYzJ4NVUyVjBTVzV1WlhKSVZFMU1ZQ0J0ZFhOMElHSmxJSE5sZENCMWMybHVaeUJnZFhCa1lYUmxTVzV1WlhKSVZFMU1RbmxKUkNncFlDNG5MRnh1SUNCemRIbHNaVG9nSjJCemRIbHNaV0FnYlhWemRDQmlaU0J6WlhRZ2RYTnBibWNnWUhWd1pHRjBaVk4wZVd4bGMwSjVTVVFvS1dBdUoxeHVmVHRjYmx4dUx5b3FYRzRnS2lCUGNHVnlZWFJwYjI1eklIVnpaV1FnZEc4Z2NISnZZMlZ6Y3lCMWNHUmhkR1Z6SUhSdklFUlBUU0J1YjJSbGN5NGdWR2hwY3lCcGN5QnRZV1JsSUdsdWFtVmpkR0ZpYkdVZ2RtbGhYRzRnS2lCZ1VtVmhZM1JFVDAxRGIyMXdiMjVsYm5RdVFtRmphMlZ1WkVsRVQzQmxjbUYwYVc5dWMyQXVYRzRnS2k5Y2JuWmhjaUJTWldGamRFUlBUVWxFVDNCbGNtRjBhVzl1Y3lBOUlIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsY3lCaElFUlBUU0J1YjJSbElIZHBkR2dnYm1WM0lIQnliM0JsY25SNUlIWmhiSFZsY3k0Z1ZHaHBjeUJ6YUc5MWJHUWdiMjVzZVNCaVpTQjFjMlZrSUhSdlhHNGdJQ0FxSUhWd1pHRjBaU0JFVDAwZ2NISnZjR1Z5ZEdsbGN5QnBiaUJnUkU5TlVISnZjR1Z5ZEhsZ0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdkR2hsSUc1dlpHVWdkRzhnZFhCa1lYUmxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaU0JCSUhaaGJHbGtJSEJ5YjNCbGNuUjVJRzVoYldVc0lITmxaU0JnUkU5TlVISnZjR1Z5ZEhsZ0xseHVJQ0FnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUU1bGR5QjJZV3gxWlNCdlppQjBhR1VnY0hKdmNHVnlkSGt1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnZFhCa1lYUmxVSEp2Y0dWeWRIbENlVWxFT2lCbWRXNWpkR2x2YmlocFpDd2dibUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0IyWVhJZ2JtOWtaU0E5SUZKbFlXTjBUVzkxYm5RdVoyVjBUbTlrWlNocFpDazdYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUNGSlRsWkJURWxFWDFCU1QxQkZVbFJaWDBWU1VrOVNVeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHVZVzFsS1N4Y2JpQWdJQ0FnSUNkMWNHUmhkR1ZRY205d1pYSjBlVUo1U1VRb0xpNHVLVG9nSlhNbkxGeHVJQ0FnSUNBZ1NVNVdRVXhKUkY5UVVrOVFSVkpVV1Y5RlVsSlBVbE5iYm1GdFpWMWNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLQ0ZKVGxaQlRFbEVYMUJTVDFCRlVsUlpYMFZTVWs5U1V5NW9ZWE5QZDI1UWNtOXdaWEowZVNodVlXMWxLU2twTzF4dVhHNGdJQ0FnTHk4Z1NXWWdkMlVuY21VZ2RYQmtZWFJwYm1jZ2RHOGdiblZzYkNCdmNpQjFibVJsWm1sdVpXUXNJSGRsSUhOb2IzVnNaQ0J5WlcxdmRtVWdkR2hsSUhCeWIzQmxjblI1WEc0Z0lDQWdMeThnWm5KdmJTQjBhR1VnUkU5TklHNXZaR1VnYVc1emRHVmhaQ0J2WmlCcGJtRmtkbVZ5ZEdGdWRHeDVJSE5sZEhScGJtY2dkRzhnWVNCemRISnBibWN1SUZSb2FYTmNiaUFnSUNBdkx5QmljbWx1WjNNZ2RYTWdhVzRnYkdsdVpTQjNhWFJvSUhSb1pTQnpZVzFsSUdKbGFHRjJhVzl5SUhkbElHaGhkbVVnYjI0Z2FXNXBkR2xoYkNCeVpXNWtaWEl1WEc0Z0lDQWdhV1lnS0haaGJIVmxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJRVJQVFZCeWIzQmxjblI1VDNCbGNtRjBhVzl1Y3k1elpYUldZV3gxWlVadmNsQnliM0JsY25SNUtHNXZaR1VzSUc1aGJXVXNJSFpoYkhWbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnUkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1ekxtUmxiR1YwWlZaaGJIVmxSbTl5VUhKdmNHVnlkSGtvYm05a1pTd2dibUZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdWeklHRWdSRTlOSUc1dlpHVWdkRzhnY21WdGIzWmxJR0VnY0hKdmNHVnlkSGt1SUZSb2FYTWdjMmh2ZFd4a0lHOXViSGtnWW1VZ2RYTmxaQ0IwYnlCeVpXMXZkbVZjYmlBZ0lDb2dSRTlOSUhCeWIzQmxjblJwWlhNZ2FXNGdZRVJQVFZCeWIzQmxjblI1WUM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHbGtJRWxFSUc5bUlIUm9aU0J1YjJSbElIUnZJSFZ3WkdGMFpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVWdRU0J3Y205d1pYSjBlU0J1WVcxbElIUnZJSEpsYlc5MlpTd2djMlZsSUdCRVQwMVFjbTl3WlhKMGVXQXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdaR1ZzWlhSbFVISnZjR1Z5ZEhsQ2VVbEVPaUJtZFc1amRHbHZiaWhwWkN3Z2JtRnRaU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQjJZWElnYm05a1pTQTlJRkpsWVdOMFRXOTFiblF1WjJWMFRtOWtaU2hwWkNrN1hHNGdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQWdJQ0ZKVGxaQlRFbEVYMUJTVDFCRlVsUlpYMFZTVWs5U1V5NW9ZWE5QZDI1UWNtOXdaWEowZVNodVlXMWxLU3hjYmlBZ0lDQWdJQ2QxY0dSaGRHVlFjbTl3WlhKMGVVSjVTVVFvTGk0dUtUb2dKWE1uTEZ4dUlDQWdJQ0FnU1U1V1FVeEpSRjlRVWs5UVJWSlVXVjlGVWxKUFVsTmJibUZ0WlYxY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtDRkpUbFpCVEVsRVgxQlNUMUJGVWxSWlgwVlNVazlTVXk1b1lYTlBkMjVRY205d1pYSjBlU2h1WVcxbEtTa3BPMXh1SUNBZ0lFUlBUVkJ5YjNCbGNuUjVUM0JsY21GMGFXOXVjeTVrWld4bGRHVldZV3gxWlVadmNsQnliM0JsY25SNUtHNXZaR1VzSUc1aGJXVXNJSFpoYkhWbEtUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxjeUJoSUVSUFRTQnViMlJsSUhkcGRHZ2dibVYzSUhOMGVXeGxJSFpoYkhWbGN5NGdTV1lnWVNCMllXeDFaU0JwY3lCemNHVmphV1pwWldRZ1lYTWdKeWNzWEc0Z0lDQXFJSFJvWlNCamIzSnlaWE53YjI1a2FXNW5JSE4wZVd4bElIQnliM0JsY25SNUlIZHBiR3dnWW1VZ2RXNXpaWFF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQkpSQ0J2WmlCMGFHVWdibTlrWlNCMGJ5QjFjR1JoZEdVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J6ZEhsc1pYTWdUV0Z3Y0dsdVp5Qm1jbTl0SUhOMGVXeGxjeUIwYnlCMllXeDFaWE11WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnZFhCa1lYUmxVM1I1YkdWelFubEpSRG9nWm5WdVkzUnBiMjRvYVdRc0lITjBlV3hsY3lrZ2UxeHVJQ0FnSUhaaGNpQnViMlJsSUQwZ1VtVmhZM1JOYjNWdWRDNW5aWFJPYjJSbEtHbGtLVHRjYmlBZ0lDQkRVMU5RY205d1pYSjBlVTl3WlhKaGRHbHZibk11YzJWMFZtRnNkV1ZHYjNKVGRIbHNaWE1vYm05a1pTd2djM1I1YkdWektUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxjeUJoSUVSUFRTQnViMlJsSjNNZ2FXNXVaWEpJVkUxTUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdkR2hsSUc1dlpHVWdkRzhnZFhCa1lYUmxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FIUnRiQ0JCYmlCSVZFMU1JSE4wY21sdVp5NWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQjFjR1JoZEdWSmJtNWxja2hVVFV4Q2VVbEVPaUJtZFc1amRHbHZiaWhwWkN3Z2FIUnRiQ2tnZTF4dUlDQWdJSFpoY2lCdWIyUmxJRDBnVW1WaFkzUk5iM1Z1ZEM1blpYUk9iMlJsS0dsa0tUdGNiaUFnSUNCelpYUkpibTVsY2toVVRVd29ibTlrWlN3Z2FIUnRiQ2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVndaR0YwWlhNZ1lTQkVUMDBnYm05a1pTZHpJSFJsZUhRZ1kyOXVkR1Z1ZENCelpYUWdZbmtnWUhCeWIzQnpMbU52Ym5SbGJuUmdMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYVdRZ1NVUWdiMllnZEdobElHNXZaR1VnZEc4Z2RYQmtZWFJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjl1ZEdWdWRDQlVaWGgwSUdOdmJuUmxiblF1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnZFhCa1lYUmxWR1Y0ZEVOdmJuUmxiblJDZVVsRU9pQm1kVzVqZEdsdmJpaHBaQ3dnWTI5dWRHVnVkQ2tnZTF4dUlDQWdJSFpoY2lCdWIyUmxJRDBnVW1WaFkzUk5iM1Z1ZEM1blpYUk9iMlJsS0dsa0tUdGNiaUFnSUNCRVQwMURhR2xzWkhKbGJrOXdaWEpoZEdsdmJuTXVkWEJrWVhSbFZHVjRkRU52Ym5SbGJuUW9ibTlrWlN3Z1kyOXVkR1Z1ZENrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsY0d4aFkyVnpJR0VnUkU5TklHNXZaR1VnZEdoaGRDQmxlR2x6ZEhNZ2FXNGdkR2hsSUdSdlkzVnRaVzUwSUhkcGRHZ2diV0Z5YTNWd0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdZMmhwYkdRZ2RHOGdZbVVnY21Wd2JHRmpaV1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRZWEpyZFhBZ1JHRnVaMlZ5YjNWeklHMWhjbXQxY0NCMGJ5QnBibXBsWTNRZ2FXNGdjR3hoWTJVZ2IyWWdZMmhwYkdRdVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaUJBYzJWbElIdEVZVzVuWlhJdVpHRnVaMlZ5YjNWemJIbFNaWEJzWVdObFRtOWtaVmRwZEdoTllYSnJkWEI5WEc0Z0lDQXFMMXh1SUNCa1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjRUo1U1VRNklHWjFibU4wYVc5dUtHbGtMQ0J0WVhKcmRYQXBJSHRjYmlBZ0lDQjJZWElnYm05a1pTQTlJRkpsWVdOMFRXOTFiblF1WjJWMFRtOWtaU2hwWkNrN1hHNGdJQ0FnUkU5TlEyaHBiR1J5Wlc1UGNHVnlZWFJwYjI1ekxtUmhibWRsY205MWMyeDVVbVZ3YkdGalpVNXZaR1ZYYVhSb1RXRnlhM1Z3S0c1dlpHVXNJRzFoY210MWNDazdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaWE1nWVNCamIyMXdiMjVsYm5RbmN5QmphR2xzWkhKbGJpQmllU0J3Y205alpYTnphVzVuSUdFZ2MyVnlhV1Z6SUc5bUlIVndaR0YwWlhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdZWEp5WVhrOGIySnFaV04wUG4wZ2RYQmtZWFJsY3lCTWFYTjBJRzltSUhWd1pHRjBaU0JqYjI1bWFXZDFjbUYwYVc5dWN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0aGNuSmhlVHh6ZEhKcGJtYytmU0J0WVhKcmRYQWdUR2x6ZENCdlppQnRZWEpyZFhBZ2MzUnlhVzVuY3k1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCa1lXNW5aWEp2ZFhOc2VWQnliMk5sYzNORGFHbHNaSEpsYmxWd1pHRjBaWE02SUdaMWJtTjBhVzl1S0hWd1pHRjBaWE1zSUcxaGNtdDFjQ2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZFhCa1lYUmxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RYQmtZWFJsYzF0cFhTNXdZWEpsYm5ST2IyUmxJRDBnVW1WaFkzUk5iM1Z1ZEM1blpYUk9iMlJsS0hWd1pHRjBaWE5iYVYwdWNHRnlaVzUwU1VRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JFVDAxRGFHbHNaSEpsYms5d1pYSmhkR2x2Ym5NdWNISnZZMlZ6YzFWd1pHRjBaWE1vZFhCa1lYUmxjeXdnYldGeWEzVndLVHRjYmlBZ2ZWeHVmVHRjYmx4dVVtVmhZM1JRWlhKbUxtMWxZWE4xY21WTlpYUm9iMlJ6S0ZKbFlXTjBSRTlOU1VSUGNHVnlZWFJwYjI1ekxDQW5VbVZoWTNSRVQwMUpSRTl3WlhKaGRHbHZibk1uTENCN1hHNGdJSFZ3WkdGMFpWQnliM0JsY25SNVFubEpSRG9nSjNWd1pHRjBaVkJ5YjNCbGNuUjVRbmxKUkNjc1hHNGdJR1JsYkdWMFpWQnliM0JsY25SNVFubEpSRG9nSjJSbGJHVjBaVkJ5YjNCbGNuUjVRbmxKUkNjc1hHNGdJSFZ3WkdGMFpWTjBlV3hsYzBKNVNVUTZJQ2QxY0dSaGRHVlRkSGxzWlhOQ2VVbEVKeXhjYmlBZ2RYQmtZWFJsU1c1dVpYSklWRTFNUW5sSlJEb2dKM1Z3WkdGMFpVbHVibVZ5U0ZSTlRFSjVTVVFuTEZ4dUlDQjFjR1JoZEdWVVpYaDBRMjl1ZEdWdWRFSjVTVVE2SUNkMWNHUmhkR1ZVWlhoMFEyOXVkR1Z1ZEVKNVNVUW5MRnh1SUNCa1lXNW5aWEp2ZFhOc2VWSmxjR3hoWTJWT2IyUmxWMmwwYUUxaGNtdDFjRUo1U1VRNklDZGtZVzVuWlhKdmRYTnNlVkpsY0d4aFkyVk9iMlJsVjJsMGFFMWhjbXQxY0VKNVNVUW5MRnh1SUNCa1lXNW5aWEp2ZFhOc2VWQnliMk5sYzNORGFHbHNaSEpsYmxWd1pHRjBaWE02SUNka1lXNW5aWEp2ZFhOc2VWQnliMk5sYzNORGFHbHNaSEpsYmxWd1pHRjBaWE1uWEc1OUtUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRFUlBUVWxFVDNCbGNtRjBhVzl1Y3p0Y2JpSmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSWZyYW1lXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGlmcmFtZSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdpZnJhbWUnKTtcblxuLyoqXG4gKiBTaW5jZSBvbkxvYWQgZG9lc24ndCBidWJibGUgT1IgY2FwdHVyZSBvbiB0aGUgdG9wIGxldmVsIGluIElFOCwgd2UgbmVlZCB0b1xuICogY2FwdHVyZSBpdCBvbiB0aGUgPGlmcmFtZT4gZWxlbWVudCBpdHNlbGYuIFRoZXJlIGFyZSBsb3RzIG9mIGhhY2tzIHdlIGNvdWxkXG4gKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxpZnJhbWU+IGEgY29tcG9zaXRlXG4gKiBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbnZhciBSZWFjdERPTUlmcmFtZSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSWZyYW1lJyxcbiAgdGFnTmFtZTogJ0lGUkFNRScsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlmcmFtZSh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JZnJhbWU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbWdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW1nID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2ltZycpO1xuXG4vKipcbiAqIFNpbmNlIG9uTG9hZCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkIHRvXG4gKiBjYXB0dXJlIGl0IG9uIHRoZSA8aW1nPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGQgZG9cbiAqIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGltZz4gYSBjb21wb3NpdGVcbiAqIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NSW1nID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01JbWcnLFxuICB0YWdOYW1lOiAnSU1HJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaW1nKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcpO1xuICAgIHRoaXMudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcEVycm9yLCAnZXJyb3InKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbWc7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKXt0aGlzLmlzTW91bnRlZCgpJiZ0aGlzLmZvcmNlVXBkYXRlKCl9dmFyIEF1dG9Gb2N1c01peGluPXJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpLERPTVByb3BlcnR5T3BlcmF0aW9ucz1yZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIiksTGlua2VkVmFsdWVVdGlscz1yZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpLFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpLFJlYWN0Q2xhc3M9cmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLFJlYWN0TW91bnQ9cmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKSxSZWFjdFVwZGF0ZXM9cmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpLGFzc2lnbj1yZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIiksaW5wdXQ9UmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoXCJpbnB1dFwiKSxpbnN0YW5jZXNCeVJlYWN0SUQ9e30sUmVhY3RET01JbnB1dD1SZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTpcIlJlYWN0RE9NSW5wdXRcIix0YWdOYW1lOlwiSU5QVVRcIixtaXhpbnM6W0F1dG9Gb2N1c01peGluLExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLGdldEluaXRpYWxTdGF0ZTpmdW5jdGlvbigpe3ZhciBkZWZhdWx0VmFsdWU9dGhpcy5wcm9wcy5kZWZhdWx0VmFsdWU7cmV0dXJue2luaXRpYWxDaGVja2VkOnRoaXMucHJvcHMuZGVmYXVsdENoZWNrZWR8fCExLGluaXRpYWxWYWx1ZTpudWxsIT1kZWZhdWx0VmFsdWU/ZGVmYXVsdFZhbHVlOm51bGx9fSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgcHJvcHM9YXNzaWduKHt9LHRoaXMucHJvcHMpO3Byb3BzLmRlZmF1bHRDaGVja2VkPW51bGwscHJvcHMuZGVmYXVsdFZhbHVlPW51bGw7dmFyIHZhbHVlPUxpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7cHJvcHMudmFsdWU9bnVsbCE9dmFsdWU/dmFsdWU6dGhpcy5zdGF0ZS5pbml0aWFsVmFsdWU7dmFyIGNoZWNrZWQ9TGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHRoaXMpO3JldHVybiBwcm9wcy5jaGVja2VkPW51bGwhPWNoZWNrZWQ/Y2hlY2tlZDp0aGlzLnN0YXRlLmluaXRpYWxDaGVja2VkLHByb3BzLm9uQ2hhbmdlPXRoaXMuX2hhbmRsZUNoYW5nZSxpbnB1dChwcm9wcyx0aGlzLnByb3BzLmNoaWxkcmVuKX0sY29tcG9uZW50RGlkTW91bnQ6ZnVuY3Rpb24oKXt2YXIgaWQ9UmVhY3RNb3VudC5nZXRJRCh0aGlzLmdldERPTU5vZGUoKSk7aW5zdGFuY2VzQnlSZWFjdElEW2lkXT10aGlzfSxjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpe3ZhciByb290Tm9kZT10aGlzLmdldERPTU5vZGUoKSxpZD1SZWFjdE1vdW50LmdldElEKHJvb3ROb2RlKTtkZWxldGUgaW5zdGFuY2VzQnlSZWFjdElEW2lkXX0sY29tcG9uZW50RGlkVXBkYXRlOmZ1bmN0aW9uKHByZXZQcm9wcyxwcmV2U3RhdGUscHJldkNvbnRleHQpe3ZhciByb290Tm9kZT10aGlzLmdldERPTU5vZGUoKTtudWxsIT10aGlzLnByb3BzLmNoZWNrZWQmJkRPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KHJvb3ROb2RlLFwiY2hlY2tlZFwiLHRoaXMucHJvcHMuY2hlY2tlZHx8ITEpO3ZhciB2YWx1ZT1MaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO251bGwhPXZhbHVlJiZET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShyb290Tm9kZSxcInZhbHVlXCIsXCJcIit2YWx1ZSl9LF9oYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oZXZlbnQpe3ZhciByZXR1cm5WYWx1ZSxvbkNoYW5nZT1MaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO29uQ2hhbmdlJiYocmV0dXJuVmFsdWU9b25DaGFuZ2UuY2FsbCh0aGlzLGV2ZW50KSksUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsdGhpcyk7dmFyIG5hbWU9dGhpcy5wcm9wcy5uYW1lO2lmKFwicmFkaW9cIj09PXRoaXMucHJvcHMudHlwZSYmbnVsbCE9bmFtZSl7Zm9yKHZhciByb290Tm9kZT10aGlzLmdldERPTU5vZGUoKSxxdWVyeVJvb3Q9cm9vdE5vZGU7cXVlcnlSb290LnBhcmVudE5vZGU7KXF1ZXJ5Um9vdD1xdWVyeVJvb3QucGFyZW50Tm9kZTtmb3IodmFyIGdyb3VwPXF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK25hbWUpKyddW3R5cGU9XCJyYWRpb1wiXScpLGk9MCxncm91cExlbj1ncm91cC5sZW5ndGg7Z3JvdXBMZW4+aTtpKyspe3ZhciBvdGhlck5vZGU9Z3JvdXBbaV07aWYob3RoZXJOb2RlIT09cm9vdE5vZGUmJm90aGVyTm9kZS5mb3JtPT09cm9vdE5vZGUuZm9ybSl7dmFyIG90aGVySUQ9UmVhY3RNb3VudC5nZXRJRChvdGhlck5vZGUpO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG90aGVySUQsXCJSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC5cIik6aW52YXJpYW50KG90aGVySUQpO3ZhciBvdGhlckluc3RhbmNlPWluc3RhbmNlc0J5UmVhY3RJRFtvdGhlcklEXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChvdGhlckluc3RhbmNlLFwiUmVhY3RET01JbnB1dDogVW5rbm93biByYWRpbyBidXR0b24gSUQgJXMuXCIsb3RoZXJJRCk6aW52YXJpYW50KG90aGVySW5zdGFuY2UpLFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLG90aGVySW5zdGFuY2UpfX19cmV0dXJuIHJldHVyblZhbHVlfX0pO21vZHVsZS5leHBvcnRzPVJlYWN0RE9NSW5wdXQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRVQwMUpibkIxZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJWMEVzV1VGclFrRXNVMEZCVXl4M1FrRkZTQ3hMUVVGTExHRkJRMUFzUzBGQlN5eGpRVzVDVkN4SFFVRkpMR2RDUVVGcFFpeFJRVUZSTEc5Q1FVTjZRaXh6UWtGQmQwSXNVVUZCVVN3eVFrRkRhRU1zYVVKQlFXMUNMRkZCUVZFc2MwSkJRek5DTERKQ1FVRTJRaXhSUVVGUkxHZERRVU55UXl4WFFVRmhMRkZCUVZFc1owSkJRM0pDTEdGQlFXVXNVVUZCVVN4clFrRkRka0lzVjBGQllTeFJRVUZSTEdkQ1FVTnlRaXhoUVVGbExGRkJRVkVzYTBKQlJYWkNMRTlCUVZNc1VVRkJVU3h0UWtGRGFrSXNWVUZCV1N4UlFVRlJMR1ZCUlhCQ0xFMUJRVkVzWVVGQllTeGpRVUZqTEZOQlJXNURMSE5DUVhsQ1FTeGpRVUZuUWl4WFFVRlhMR0ZCUXpkQ0xGbEJRV0VzWjBKQlEySXNVVUZCVXl4UlFVVlVMRkZCUVZNc1pVRkJaMElzYVVKQlFXbENMRTFCUVU4c05FSkJSV3BFTEdkQ1FVRnBRaXhYUVVObUxFZEJRVWtzWTBGQlpTeExRVUZMTEUxQlFVMHNXVUZET1VJc1VVRkRSU3hsUVVGblFpeExRVUZMTEUxQlFVMHNhVUpCUVd0Q0xFVkJRemRETEdGQlFUaENMRTFCUVdoQ0xHRkJRWFZDTEdGQlFXVXNUMEZKZUVRc1QwRkJVU3hYUVVWT0xFZEJRVWtzVDBGQlVTeFZRVUZYTEV0QlFVc3NUVUZGTlVJc1QwRkJUU3hsUVVGcFFpeExRVU4yUWl4TlFVRk5MR0ZCUVdVc1NVRkZja0lzU1VGQlNTeFBRVUZSTEdsQ1FVRnBRaXhUUVVGVExFdEJRM1JETEU5QlFVMHNUVUZCYVVJc1RVRkJWQ3hOUVVGblFpeE5RVUZSTEV0QlFVc3NUVUZCVFN4WlFVVnFSQ3hKUVVGSkxGTkJRVlVzYVVKQlFXbENMRmRCUVZjc1MwRkxNVU1zVDBGS1FTeFBRVUZOTEZGQlFYRkNMRTFCUVZnc1VVRkJhMElzVVVGQlZTeExRVUZMTEUxQlFVMHNaVUZGZGtRc1RVRkJUU3hUUVVGWExFdEJRVXNzWTBGRlppeE5RVUZOTEUxQlFVOHNTMEZCU3l4TlFVRk5MRmRCUjJwRExHdENRVUZ0UWl4WFFVTnFRaXhIUVVGSkxFbEJRVXNzVjBGQlZ5eE5RVUZOTEV0QlFVc3NZVUZETDBJc2IwSkJRVzFDTEVsQlFVMHNUVUZITTBJc2NVSkJRWE5DTEZkQlEzQkNMRWRCUVVrc1ZVRkJWeXhMUVVGTExHRkJRMmhDTEVkQlFVc3NWMEZCVnl4TlFVRk5MR2RDUVVOdVFpeHZRa0ZCYlVJc1MwRkhOVUlzYlVKQlFXOUNMRk5CUVZNc1ZVRkJWeXhWUVVGWExHRkJRMnBFTEVkQlFVa3NWVUZCVnl4TFFVRkxMRmxCUTAwc1QwRkJkRUlzUzBGQlN5eE5RVUZOTEZOQlEySXNjMEpCUVhOQ0xHOUNRVU53UWl4VFFVTkJMRlZCUTBFc1MwRkJTeXhOUVVGTkxGVkJRVmNzUlVGSk1VSXNTVUZCU1N4UFFVRlJMR2xDUVVGcFFpeFRRVUZUTEV0QlEzcENMRTlCUVZRc1QwRkhSaXh6UWtGQmMwSXNiMEpCUVc5Q0xGTkJRVlVzVVVGQlV5eEhRVUZMTEZGQlNYUkZMR05CUVdVc1UwRkJVeXhQUVVOMFFpeEhRVUZKTEdGQlEwRXNVMEZCVnl4cFFrRkJhVUlzV1VGQldTeExRVU40UXl4WlFVTkdMRmxCUVdNc1UwRkJVeXhMUVVGTExFdEJRVTBzVVVGTGNFTXNZVUZCWVN4TFFVRkxMSEZDUVVGelFpeExRVVY0UXl4SlFVRkpMRTFCUVU4c1MwRkJTeXhOUVVGTkxFbEJRM1JDTEVsQlFYZENMRlZCUVhCQ0xFdEJRVXNzVFVGQlRTeE5RVUUwUWl4TlFVRlNMRXRCUVdNc1EwRkpMME1zU1VGSVFTeEhRVUZKTEZWQlFWY3NTMEZCU3l4aFFVTm9RaXhWUVVGWkxGTkJSVlFzVlVGQlZTeFpRVU5tTEZWQlFWa3NWVUZCVlN4VlFWbDRRaXhMUVVGTExFZEJTRVFzVDBGQlVTeFZRVUZWTEdsQ1FVTndRaXhqUVVGblFpeExRVUZMTEZWQlFWVXNSMEZCU3l4TlFVRlJMRzFDUVVWeVF5eEZRVUZKTEVWQlFVY3NVMEZCVnl4TlFVRk5MRTlCUVZrc1UwRkJTaXhGUVVGakxFbEJRVXNzUTBGRE1VUXNSMEZCU1N4WFFVRlpMRTFCUVUwc1JVRkRkRUlzU1VGQlNTeFpRVUZqTEZWQlEyUXNWVUZCVlN4UFFVRlRMRk5CUVZNc1MwRkVhRU1zUTBGSlFTeEhRVUZKTEZOQlFWVXNWMEZCVnl4TlFVRk5MRlZCUXpsQ0xHZENRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eFJRVU5CTEdsSFFVVkZMRlZCUVZVc1VVRkRaQ3hKUVVGSkxHVkJRV2RDTEcxQ1FVRnRRaXhSUVVOMFF5eG5Ra0ZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNZMEZEUVN3MlEwRkRRU3hUUVVORkxGVkJRVlVzWlVGSlpDeGhRVUZoTEV0QlFVc3NjVUpCUVhOQ0xHbENRVWsxUXl4TlFVRlBMR1ZCUzFnc1VVRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1VtVmhZM1JFVDAxSmJuQjFkRnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUVGMWRHOUdiMk4xYzAxcGVHbHVJRDBnY21WeGRXbHlaU2hjSWk0dlFYVjBiMFp2WTNWelRXbDRhVzVjSWlrN1hHNTJZWElnUkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1eklEMGdjbVZ4ZFdseVpTaGNJaTR2UkU5TlVISnZjR1Z5ZEhsUGNHVnlZWFJwYjI1elhDSXBPMXh1ZG1GeUlFeHBibXRsWkZaaGJIVmxWWFJwYkhNZ1BTQnlaWEYxYVhKbEtGd2lMaTlNYVc1clpXUldZV3gxWlZWMGFXeHpYQ0lwTzF4dWRtRnlJRkpsWVdOMFFuSnZkM05sY2tOdmJYQnZibVZ1ZEUxcGVHbHVJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JDY205M2MyVnlRMjl0Y0c5dVpXNTBUV2w0YVc1Y0lpazdYRzUyWVhJZ1VtVmhZM1JEYkdGemN5QTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBRMnhoYzNOY0lpazdYRzUyWVhJZ1VtVmhZM1JGYkdWdFpXNTBJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JGYkdWdFpXNTBYQ0lwTzF4dWRtRnlJRkpsWVdOMFRXOTFiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEUxdmRXNTBYQ0lwTzF4dWRtRnlJRkpsWVdOMFZYQmtZWFJsY3lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFZYQmtZWFJsYzF3aUtUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb1hDSXVMMDlpYW1WamRDNWhjM05wWjI1Y0lpazdYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVYRzUyWVhJZ2FXNXdkWFFnUFNCU1pXRmpkRVZzWlcxbGJuUXVZM0psWVhSbFJtRmpkRzl5ZVNnbmFXNXdkWFFuS1R0Y2JseHVkbUZ5SUdsdWMzUmhibU5sYzBKNVVtVmhZM1JKUkNBOUlIdDlPMXh1WEc1bWRXNWpkR2x2YmlCbWIzSmpaVlZ3WkdGMFpVbG1UVzkxYm5SbFpDZ3BJSHRjYmlBZ0x5cHFjMmhwYm5RZ2RtRnNhV1IwYUdsek9uUnlkV1VnS2k5Y2JpQWdhV1lnS0hSb2FYTXVhWE5OYjNWdWRHVmtLQ2twSUh0Y2JpQWdJQ0IwYUdsekxtWnZjbU5sVlhCa1lYUmxLQ2s3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCSmJYQnNaVzFsYm5SeklHRnVJRHhwYm5CMWRENGdibUYwYVhabElHTnZiWEJ2Ym1WdWRDQjBhR0YwSUdGc2JHOTNjeUJ6WlhSMGFXNW5JSFJvWlhObElHOXdkR2x2Ym1Gc1hHNGdLaUJ3Y205d2N6b2dZR05vWldOclpXUmdMQ0JnZG1Gc2RXVmdMQ0JnWkdWbVlYVnNkRU5vWldOclpXUmdMQ0JoYm1RZ1lHUmxabUYxYkhSV1lXeDFaV0F1WEc0Z0tseHVJQ29nU1dZZ1lHTm9aV05yWldSZ0lHOXlJR0IyWVd4MVpXQWdZWEpsSUc1dmRDQnpkWEJ3YkdsbFpDQW9iM0lnYm5Wc2JDOTFibVJsWm1sdVpXUXBMQ0IxYzJWeUlHRmpkR2x2Ym5OY2JpQXFJSFJvWVhRZ1lXWm1aV04wSUhSb1pTQmphR1ZqYTJWa0lITjBZWFJsSUc5eUlIWmhiSFZsSUhkcGJHd2dkSEpwWjJkbGNpQjFjR1JoZEdWeklIUnZJSFJvWlNCbGJHVnRaVzUwTGx4dUlDcGNiaUFxSUVsbUlIUm9aWGtnWVhKbElITjFjSEJzYVdWa0lDaGhibVFnYm05MElHNTFiR3d2ZFc1a1pXWnBibVZrS1N3Z2RHaGxJSEpsYm1SbGNtVmtJR1ZzWlcxbGJuUWdkMmxzYkNCdWIzUmNiaUFxSUhSeWFXZG5aWElnZFhCa1lYUmxjeUIwYnlCMGFHVWdaV3hsYldWdWRDNGdTVzV6ZEdWaFpDd2dkR2hsSUhCeWIzQnpJRzExYzNRZ1kyaGhibWRsSUdsdUlHOXlaR1Z5SUdadmNseHVJQ29nZEdobElISmxibVJsY21Wa0lHVnNaVzFsYm5RZ2RHOGdZbVVnZFhCa1lYUmxaQzVjYmlBcVhHNGdLaUJVYUdVZ2NtVnVaR1Z5WldRZ1pXeGxiV1Z1ZENCM2FXeHNJR0psSUdsdWFYUnBZV3hwZW1Wa0lHRnpJSFZ1WTJobFkydGxaQ0FvYjNJZ1lHUmxabUYxYkhSRGFHVmphMlZrWUNsY2JpQXFJSGRwZEdnZ1lXNGdaVzF3ZEhrZ2RtRnNkV1VnS0c5eUlHQmtaV1poZFd4MFZtRnNkV1ZnS1M1Y2JpQXFYRzRnS2lCQWMyVmxJR2gwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MMVJTTHpJd01USXZWMFF0YUhSdGJEVXRNakF4TWpFd01qVXZkR2hsTFdsdWNIVjBMV1ZzWlcxbGJuUXVhSFJ0YkZ4dUlDb3ZYRzUyWVhJZ1VtVmhZM1JFVDAxSmJuQjFkQ0E5SUZKbFlXTjBRMnhoYzNNdVkzSmxZWFJsUTJ4aGMzTW9lMXh1SUNCa2FYTndiR0Y1VG1GdFpUb2dKMUpsWVdOMFJFOU5TVzV3ZFhRbkxGeHVJQ0IwWVdkT1lXMWxPaUFuU1U1UVZWUW5MRnh1WEc0Z0lHMXBlR2x1Y3pvZ1cwRjFkRzlHYjJOMWMwMXBlR2x1TENCTWFXNXJaV1JXWVd4MVpWVjBhV3h6TGsxcGVHbHVMQ0JTWldGamRFSnliM2R6WlhKRGIyMXdiMjVsYm5STmFYaHBibDBzWEc1Y2JpQWdaMlYwU1c1cGRHbGhiRk4wWVhSbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnWkdWbVlYVnNkRlpoYkhWbElEMGdkR2hwY3k1d2NtOXdjeTVrWldaaGRXeDBWbUZzZFdVN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJR2x1YVhScFlXeERhR1ZqYTJWa09pQjBhR2x6TG5CeWIzQnpMbVJsWm1GMWJIUkRhR1ZqYTJWa0lIeDhJR1poYkhObExGeHVJQ0FnSUNBZ2FXNXBkR2xoYkZaaGJIVmxPaUJrWldaaGRXeDBWbUZzZFdVZ0lUMGdiblZzYkNBL0lHUmxabUYxYkhSV1lXeDFaU0E2SUc1MWJHeGNiaUFnSUNCOU8xeHVJQ0I5TEZ4dVhHNGdJSEpsYm1SbGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdMeThnUTJ4dmJtVWdZSFJvYVhNdWNISnZjSE5nSUhOdklIZGxJR1J2YmlkMElHMTFkR0YwWlNCMGFHVWdhVzV3ZFhRdVhHNGdJQ0FnZG1GeUlIQnliM0J6SUQwZ1lYTnphV2R1S0h0OUxDQjBhR2x6TG5CeWIzQnpLVHRjYmx4dUlDQWdJSEJ5YjNCekxtUmxabUYxYkhSRGFHVmphMlZrSUQwZ2JuVnNiRHRjYmlBZ0lDQndjbTl3Y3k1a1pXWmhkV3gwVm1Gc2RXVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ2RtRnlJSFpoYkhWbElEMGdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NW5aWFJXWVd4MVpTaDBhR2x6S1R0Y2JpQWdJQ0J3Y205d2N5NTJZV3gxWlNBOUlIWmhiSFZsSUNFOUlHNTFiR3dnUHlCMllXeDFaU0E2SUhSb2FYTXVjM1JoZEdVdWFXNXBkR2xoYkZaaGJIVmxPMXh1WEc0Z0lDQWdkbUZ5SUdOb1pXTnJaV1FnUFNCTWFXNXJaV1JXWVd4MVpWVjBhV3h6TG1kbGRFTm9aV05yWldRb2RHaHBjeWs3WEc0Z0lDQWdjSEp2Y0hNdVkyaGxZMnRsWkNBOUlHTm9aV05yWldRZ0lUMGdiblZzYkNBL0lHTm9aV05yWldRZ09pQjBhR2x6TG5OMFlYUmxMbWx1YVhScFlXeERhR1ZqYTJWa08xeHVYRzRnSUNBZ2NISnZjSE11YjI1RGFHRnVaMlVnUFNCMGFHbHpMbDlvWVc1a2JHVkRhR0Z1WjJVN1hHNWNiaUFnSUNCeVpYUjFjbTRnYVc1d2RYUW9jSEp2Y0hNc0lIUm9hWE11Y0hKdmNITXVZMmhwYkdSeVpXNHBPMXh1SUNCOUxGeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMllYSWdhV1FnUFNCU1pXRmpkRTF2ZFc1MExtZGxkRWxFS0hSb2FYTXVaMlYwUkU5TlRtOWtaU2dwS1R0Y2JpQWdJQ0JwYm5OMFlXNWpaWE5DZVZKbFlXTjBTVVJiYVdSZElEMGdkR2hwY3p0Y2JpQWdmU3hjYmx4dUlDQmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlISnZiM1JPYjJSbElEMGdkR2hwY3k1blpYUkVUMDFPYjJSbEtDazdYRzRnSUNBZ2RtRnlJR2xrSUQwZ1VtVmhZM1JOYjNWdWRDNW5aWFJKUkNoeWIyOTBUbTlrWlNrN1hHNGdJQ0FnWkdWc1pYUmxJR2x1YzNSaGJtTmxjMEo1VW1WaFkzUkpSRnRwWkYwN1hHNGdJSDBzWEc1Y2JpQWdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxPaUJtZFc1amRHbHZiaWh3Y21WMlVISnZjSE1zSUhCeVpYWlRkR0YwWlN3Z2NISmxka052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnY205dmRFNXZaR1VnUFNCMGFHbHpMbWRsZEVSUFRVNXZaR1VvS1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV3Y205d2N5NWphR1ZqYTJWa0lDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lFUlBUVkJ5YjNCbGNuUjVUM0JsY21GMGFXOXVjeTV6WlhSV1lXeDFaVVp2Y2xCeWIzQmxjblI1S0Z4dUlDQWdJQ0FnSUNCeWIyOTBUbTlrWlN4Y2JpQWdJQ0FnSUNBZ0oyTm9aV05yWldRbkxGeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbU5vWldOclpXUWdmSHdnWm1Gc2MyVmNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSFpoYkhWbElEMGdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NW5aWFJXWVd4MVpTaDBhR2x6S1R0Y2JpQWdJQ0JwWmlBb2RtRnNkV1VnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnTHk4Z1EyRnpkQ0JnZG1Gc2RXVmdJSFJ2SUdFZ2MzUnlhVzVuSUhSdklHVnVjM1Z5WlNCMGFHVWdkbUZzZFdVZ2FYTWdjMlYwSUdOdmNuSmxZM1JzZVM0Z1YyaHBiR1ZjYmlBZ0lDQWdJQzh2SUdKeWIzZHpaWEp6SUhSNWNHbGpZV3hzZVNCa2J5QjBhR2x6SUdGeklHNWxZMlZ6YzJGeWVTd2dhbk5rYjIwZ1pHOWxjMjRuZEM1Y2JpQWdJQ0FnSUVSUFRWQnliM0JsY25SNVQzQmxjbUYwYVc5dWN5NXpaWFJXWVd4MVpVWnZjbEJ5YjNCbGNuUjVLSEp2YjNST2IyUmxMQ0FuZG1Gc2RXVW5MQ0FuSnlBcklIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ1gyaGhibVJzWlVOb1lXNW5aVG9nWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQjJZWElnY21WMGRYSnVWbUZzZFdVN1hHNGdJQ0FnZG1GeUlHOXVRMmhoYm1kbElEMGdUR2x1YTJWa1ZtRnNkV1ZWZEdsc2N5NW5aWFJQYmtOb1lXNW5aU2gwYUdsektUdGNiaUFnSUNCcFppQW9iMjVEYUdGdVoyVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJsWmhiSFZsSUQwZ2IyNURhR0Z1WjJVdVkyRnNiQ2gwYUdsekxDQmxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVobGNtVWdkMlVnZFhObElHRnpZWEFnZEc4Z2QyRnBkQ0IxYm5ScGJDQmhiR3dnZFhCa1lYUmxjeUJvWVhabElIQnliM0JoWjJGMFpXUXNJSGRvYVdOb1hHNGdJQ0FnTHk4Z2FYTWdhVzF3YjNKMFlXNTBJSGRvWlc0Z2RYTnBibWNnWTI5dWRISnZiR3hsWkNCamIyMXdiMjVsYm5SeklIZHBkR2hwYmlCc1lYbGxjbk02WEc0Z0lDQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaFkyVmliMjlyTDNKbFlXTjBMMmx6YzNWbGN5OHhOams0WEc0Z0lDQWdVbVZoWTNSVmNHUmhkR1Z6TG1GellYQW9abTl5WTJWVmNHUmhkR1ZKWmsxdmRXNTBaV1FzSUhSb2FYTXBPMXh1WEc0Z0lDQWdkbUZ5SUc1aGJXVWdQU0IwYUdsekxuQnliM0J6TG01aGJXVTdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZjSE11ZEhsd1pTQTlQVDBnSjNKaFpHbHZKeUFtSmlCdVlXMWxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSFpoY2lCeWIyOTBUbTlrWlNBOUlIUm9hWE11WjJWMFJFOU5UbTlrWlNncE8xeHVJQ0FnSUNBZ2RtRnlJSEYxWlhKNVVtOXZkQ0E5SUhKdmIzUk9iMlJsTzF4dVhHNGdJQ0FnSUNCM2FHbHNaU0FvY1hWbGNubFNiMjkwTG5CaGNtVnVkRTV2WkdVcElIdGNiaUFnSUNBZ0lDQWdjWFZsY25sU2IyOTBJRDBnY1hWbGNubFNiMjkwTG5CaGNtVnVkRTV2WkdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRWxtSUdCeWIyOTBUbTlrWlM1bWIzSnRZQ0IzWVhNZ2JtOXVMVzUxYkd3c0lIUm9aVzRnZDJVZ1kyOTFiR1FnZEhKNUlHQm1iM0p0TG1Wc1pXMWxiblJ6WUN4Y2JpQWdJQ0FnSUM4dklHSjFkQ0IwYUdGMElITnZiV1YwYVcxbGN5QmlaV2hoZG1WeklITjBjbUZ1WjJWc2VTQnBiaUJKUlRndUlGZGxJR052ZFd4a0lHRnNjMjhnZEhKNUlIVnphVzVuWEc0Z0lDQWdJQ0F2THlCZ1ptOXliUzVuWlhSRmJHVnRaVzUwYzBKNVRtRnRaV0FzSUdKMWRDQjBhR0YwSUhkcGJHd2diMjVzZVNCeVpYUjFjbTRnWkdseVpXTjBJR05vYVd4a2NtVnVYRzRnSUNBZ0lDQXZMeUJoYm1RZ2QyOXVKM1FnYVc1amJIVmtaU0JwYm5CMWRITWdkR2hoZENCMWMyVWdkR2hsSUVoVVRVdzFJR0JtYjNKdFBXQWdZWFIwY21saWRYUmxMaUJUYVc1alpWeHVJQ0FnSUNBZ0x5OGdkR2hsSUdsdWNIVjBJRzFwWjJoMElHNXZkQ0JsZG1WdUlHSmxJR2x1SUdFZ1ptOXliU3dnYkdWMEozTWdhblZ6ZENCMWMyVWdkR2hsSUdkc2IySmhiRnh1SUNBZ0lDQWdMeThnWUhGMVpYSjVVMlZzWldOMGIzSkJiR3hnSUhSdklHVnVjM1Z5WlNCM1pTQmtiMjRuZENCdGFYTnpJR0Z1ZVhSb2FXNW5MbHh1SUNBZ0lDQWdkbUZ5SUdkeWIzVndJRDBnY1hWbGNubFNiMjkwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvWEc0Z0lDQWdJQ0FnSUNkcGJuQjFkRnR1WVcxbFBTY2dLeUJLVTA5T0xuTjBjbWx1WjJsbWVTZ25KeUFySUc1aGJXVXBJQ3NnSjExYmRIbHdaVDFjSW5KaFpHbHZYQ0pkSnlrN1hHNWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCbmNtOTFjRXhsYmlBOUlHZHliM1Z3TG14bGJtZDBhRHNnYVNBOElHZHliM1Z3VEdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzkwYUdWeVRtOWtaU0E5SUdkeWIzVndXMmxkTzF4dUlDQWdJQ0FnSUNCcFppQW9iM1JvWlhKT2IyUmxJRDA5UFNCeWIyOTBUbTlrWlNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNSb1pYSk9iMlJsTG1admNtMGdJVDA5SUhKdmIzUk9iMlJsTG1admNtMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnYjNSb1pYSkpSQ0E5SUZKbFlXTjBUVzkxYm5RdVoyVjBTVVFvYjNSb1pYSk9iMlJsS1R0Y2JpQWdJQ0FnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUNBZ0lDQnZkR2hsY2tsRUxGeHVJQ0FnSUNBZ0lDQWdJQ2RTWldGamRFUlBUVWx1Y0hWME9pQk5hWGhwYm1jZ1VtVmhZM1FnWVc1a0lHNXZiaTFTWldGamRDQnlZV1JwYnlCcGJuQjFkSE1nZDJsMGFDQjBhR1VnSnlBclhHNGdJQ0FnSUNBZ0lDQWdKM05oYldVZ1lHNWhiV1ZnSUdseklHNXZkQ0J6ZFhCd2IzSjBaV1F1SjF4dUlDQWdJQ0FnSUNBcElEb2dhVzUyWVhKcFlXNTBLRzkwYUdWeVNVUXBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOTBhR1Z5U1c1emRHRnVZMlVnUFNCcGJuTjBZVzVqWlhOQ2VWSmxZV04wU1VSYmIzUm9aWEpKUkYwN1hHNGdJQ0FnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnSUNBZ0lDQWdiM1JvWlhKSmJuTjBZVzVqWlN4Y2JpQWdJQ0FnSUNBZ0lDQW5VbVZoWTNSRVQwMUpibkIxZERvZ1ZXNXJibTkzYmlCeVlXUnBieUJpZFhSMGIyNGdTVVFnSlhNdUp5eGNiaUFnSUNBZ0lDQWdJQ0J2ZEdobGNrbEVYRzRnSUNBZ0lDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2IzUm9aWEpKYm5OMFlXNWpaU2twTzF4dUlDQWdJQ0FnSUNBdkx5QkpaaUIwYUdseklHbHpJR0VnWTI5dWRISnZiR3hsWkNCeVlXUnBieUJpZFhSMGIyNGdaM0p2ZFhBc0lHWnZjbU5wYm1jZ2RHaGxJR2x1Y0hWMElIUm9ZWFJjYmlBZ0lDQWdJQ0FnTHk4Z2QyRnpJSEJ5WlhacGIzVnpiSGtnWTJobFkydGxaQ0IwYnlCMWNHUmhkR1VnZDJsc2JDQmpZWFZ6WlNCcGRDQjBieUJpWlNCamIyMWxJSEpsTFdOb1pXTnJaV1JjYmlBZ0lDQWdJQ0FnTHk4Z1lYTWdZWEJ3Y205d2NtbGhkR1V1WEc0Z0lDQWdJQ0FnSUZKbFlXTjBWWEJrWVhSbGN5NWhjMkZ3S0dadmNtTmxWWEJrWVhSbFNXWk5iM1Z1ZEdWa0xDQnZkR2hsY2tsdWMzUmhibU5sS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbVYwZFhKdVZtRnNkV1U3WEc0Z0lIMWNibHh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZoWTNSRVQwMUpibkIxZER0Y2JpSmRmUT09IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbj1yZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKSxSZWFjdENsYXNzPXJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIiksUmVhY3RFbGVtZW50PXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIiksb3B0aW9uPVJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KFwib3B0aW9uXCIpLFJlYWN0RE9NT3B0aW9uPVJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOlwiUmVhY3RET01PcHRpb25cIix0YWdOYW1lOlwiT1BUSU9OXCIsbWl4aW5zOltSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sY29tcG9uZW50V2lsbE1vdW50OmZ1bmN0aW9uKCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhudWxsPT10aGlzLnByb3BzLnNlbGVjdGVkLFwiVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2Ygc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LlwiKTpudWxsKX0scmVuZGVyOmZ1bmN0aW9uKCl7cmV0dXJuIG9wdGlvbih0aGlzLnByb3BzLHRoaXMucHJvcHMuY2hpbGRyZW4pfX0pO21vZHVsZS5leHBvcnRzPVJlYWN0RE9NT3B0aW9uO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkVUMDFQY0hScGIyNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVZkQkxGbEJSVUVzU1VGQlNTdzBRa0ZCTmtJc1VVRkJVU3huUTBGRGNrTXNWMEZCWVN4UlFVRlJMR2RDUVVOeVFpeGhRVUZsTEZGQlFWRXNhMEpCUlhaQ0xGRkJRVlVzVVVGQlVTeGhRVVZzUWl4UFFVRlRMR0ZCUVdFc1kwRkJZeXhWUVV0d1F5eGxRVUZwUWl4WFFVRlhMR0ZCUXpsQ0xGbEJRV0VzYVVKQlEySXNVVUZCVXl4VFFVVlVMRkZCUVZNc05FSkJSVlFzYlVKQlFXOUNMRmRCUldRc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZkQlF6bENMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZGQlEyaENMRTFCUVhaQ0xFdEJRVXNzVFVGQlRTeFRRVU5ZTEd0SFFVVkZMRTlCU1ZJc1QwRkJVU3hYUVVOT0xFMUJRVThzVVVGQlR5eExRVUZMTEUxQlFVOHNTMEZCU3l4TlFVRk5MRmxCUzNwRExGRkJRVThzVVVGQlZTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wUkU5TlQzQjBhVzl1WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1VtVmhZM1JDY205M2MyVnlRMjl0Y0c5dVpXNTBUV2w0YVc0Z1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFSnliM2R6WlhKRGIyMXdiMjVsYm5STmFYaHBibHdpS1R0Y2JuWmhjaUJTWldGamRFTnNZWE56SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSRGJHRnpjMXdpS1R0Y2JuWmhjaUJTWldGamRFVnNaVzFsYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFVnNaVzFsYm5SY0lpazdYRzVjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTaGNJaTR2ZDJGeWJtbHVaMXdpS1R0Y2JseHVkbUZ5SUc5d2RHbHZiaUE5SUZKbFlXTjBSV3hsYldWdWRDNWpjbVZoZEdWR1lXTjBiM0o1S0NkdmNIUnBiMjRuS1R0Y2JseHVMeW9xWEc0Z0tpQkpiWEJzWlcxbGJuUnpJR0Z1SUR4dmNIUnBiMjQrSUc1aGRHbDJaU0JqYjIxd2IyNWxiblFnZEdoaGRDQjNZWEp1Y3lCM2FHVnVJR0J6Wld4bFkzUmxaR0FnYVhNZ2MyVjBMbHh1SUNvdlhHNTJZWElnVW1WaFkzUkVUMDFQY0hScGIyNGdQU0JTWldGamRFTnNZWE56TG1OeVpXRjBaVU5zWVhOektIdGNiaUFnWkdsemNHeGhlVTVoYldVNklDZFNaV0ZqZEVSUFRVOXdkR2x2Ymljc1hHNGdJSFJoWjA1aGJXVTZJQ2RQVUZSSlQwNG5MRnh1WEc0Z0lHMXBlR2x1Y3pvZ1cxSmxZV04wUW5KdmQzTmxja052YlhCdmJtVnVkRTFwZUdsdVhTeGNibHh1SUNCamIyMXdiMjVsYm5SWGFXeHNUVzkxYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDOHZJRlJQUkU4Z0tIbDFibWR6ZEdWeWN5azZJRkpsYlc5MlpTQnpkWEJ3YjNKMElHWnZjaUJnYzJWc1pXTjBaV1JnSUdsdUlEeHZjSFJwYjI0K0xseHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG5ObGJHVmpkR1ZrSUQwOUlHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNkVmMyVWdkR2hsSUdCa1pXWmhkV3gwVm1Gc2RXVmdJRzl5SUdCMllXeDFaV0FnY0hKdmNITWdiMjRnUEhObGJHVmpkRDRnYVc1emRHVmhaQ0J2WmlBbklDdGNiaUFnSUNBZ0lDQWdKM05sZEhScGJtY2dZSE5sYkdWamRHVmtZQ0J2YmlBOGIzQjBhVzl1UGk0blhHNGdJQ0FnSUNBcElEb2diblZzYkNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lISmxibVJsY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5d2RHbHZiaWgwYUdsekxuQnliM0J6TENCMGFHbHpMbkJ5YjNCekxtTm9hV3hrY21WdUtUdGNiaUFnZlZ4dVhHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRVJQVFU5d2RHbHZianRjYmlKZGZRPT0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZWxlY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbnZhciBzZWxlY3QgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSgnc2VsZWN0Jyk7XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICBpZiAodGhpcy5fcGVuZGluZ1VwZGF0ZSkge1xuICAgIHRoaXMuX3BlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2VsZWN0VmFsdWVUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiVGhlIGBcIiArIHByb3BOYW1lICsgXCJgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiBcIikgK1xuICAgICAgICAoXCJgbXVsdGlwbGVgIGlzIHRydWUuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJUaGUgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyIFwiKSArXG4gICAgICAgIChcInZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBJbnN0YW5jZSBvZiBSZWFjdERPTVNlbGVjdFxuICogQHBhcmFtIHsqfSBwcm9wVmFsdWUgQSBzdHJpbmdhYmxlICh3aXRoIGBtdWx0aXBsZWAsIGEgbGlzdCBvZiBzdHJpbmdhYmxlcykuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKGNvbXBvbmVudCwgcHJvcFZhbHVlKSB7XG4gIHZhciBzZWxlY3RlZFZhbHVlLCBpLCBsO1xuICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5nZXRET01Ob2RlKCkub3B0aW9ucztcblxuICBpZiAoY29tcG9uZW50LnByb3BzLm11bHRpcGxlKSB7XG4gICAgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAoaSA9IDAsIGwgPSBwcm9wVmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlWycnICsgcHJvcFZhbHVlW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIHNlbGVjdGVkID0gc2VsZWN0ZWRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIGlmIChvcHRpb25zW2ldLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIERvIG5vdCBzZXQgYHNlbGVjdC52YWx1ZWAgYXMgZXhhY3QgYmVoYXZpb3IgaXNuJ3QgY29uc2lzdGVudCBhY3Jvc3MgYWxsXG4gICAgLy8gYnJvd3NlcnMgZm9yIGFsbCBjYXNlcy5cbiAgICBzZWxlY3RlZFZhbHVlID0gJycgKyBwcm9wVmFsdWU7XG4gICAgZm9yIChpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAob3B0aW9uc1tpXS52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8c2VsZWN0PiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG52YXIgUmVhY3RET01TZWxlY3QgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTVNlbGVjdCcsXG4gIHRhZ05hbWU6ICdTRUxFQ1QnLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBMaW5rZWRWYWx1ZVV0aWxzLk1peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGVmYXVsdFZhbHVlOiBzZWxlY3RWYWx1ZVR5cGUsXG4gICAgdmFsdWU6IHNlbGVjdFZhbHVlVHlwZVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuICAgIHByb3BzLnZhbHVlID0gbnVsbDtcblxuICAgIHJldHVybiBzZWxlY3QocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoIXByZXZQcm9wcy5tdWx0aXBsZSAhPT0gIXRoaXMucHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIC8vIEZvciBzaW1wbGljaXR5LCByZWFwcGx5IGBkZWZhdWx0VmFsdWVgIGlmIGBtdWx0aXBsZWAgaXMgdG9nZ2xlZC5cbiAgICAgIGlmICh0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV2ZXJ0IHRoZSBzZWxlY3QgYmFjayB0byBpdHMgZGVmYXVsdCB1bnNlbGVjdGVkIHN0YXRlLlxuICAgICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIHRoaXMucHJvcHMubXVsdGlwbGUgPyBbXSA6ICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWU7XG4gICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVyblZhbHVlID0gb25DaGFuZ2UuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IHRydWU7XG4gICAgUmVhY3RVcGRhdGVzLmFzYXAodXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQsIHRoaXMpO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZShcIi4vZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldFwiKTtcbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcblxuLyoqXG4gKiBXaGlsZSBgaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBvbiB0aGUgU2VsZWN0aW9uIG9iamVjdCBhbmQgYGNvbGxhcHNlZGBcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgUmFuZ2Ugb2JqZWN0LCBJRTExIHNvbWV0aW1lcyBnZXRzIHRoZW0gd3JvbmcuXG4gKiBJZiB0aGUgYW5jaG9yL2ZvY3VzIG5vZGVzIGFuZCBvZmZzZXRzIGFyZSB0aGUgc2FtZSwgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZC5cbiAqL1xuZnVuY3Rpb24gaXNDb2xsYXBzZWQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGFuY2hvciBhbmQgZm9jdXMgbm9kZS9vZmZzZXQgcGFpcnMgZm9yIElFLlxuICpcbiAqIFRoZSBjYXRjaCBoZXJlIGlzIHRoYXQgSUUncyBzZWxlY3Rpb24gQVBJIGRvZXNuJ3QgcHJvdmlkZSBpbmZvcm1hdGlvblxuICogYWJvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGZvcndhcmQgb3IgYmFja3dhcmQsIHNvIHdlIGhhdmUgdG9cbiAqIGJlaGF2ZSBhcyB0aG91Z2ggaXQncyBhbHdheXMgZm9yd2FyZC5cbiAqXG4gKiBJRSB0ZXh0IGRpZmZlcnMgZnJvbSBtb2Rlcm4gc2VsZWN0aW9uIGluIHRoYXQgaXQgYmVoYXZlcyBhcyB0aG91Z2hcbiAqIGJsb2NrIGVsZW1lbnRzIGVuZCB3aXRoIGEgbmV3IGxpbmUuIFRoaXMgbWVhbnMgY2hhcmFjdGVyIG9mZnNldHMgd2lsbFxuICogZGlmZmVyIGJldHdlZW4gdGhlIHR3byBBUElzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuICB2YXIgc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuXG4gIC8vIER1cGxpY2F0ZSBzZWxlY3Rpb24gc28gd2UgY2FuIG1vdmUgcmFuZ2Ugd2l0aG91dCBicmVha2luZyB1c2VyIHNlbGVjdGlvbi5cbiAgdmFyIGZyb21TdGFydCA9IHNlbGVjdGVkUmFuZ2UuZHVwbGljYXRlKCk7XG4gIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgZnJvbVN0YXJ0LnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0Jywgc2VsZWN0ZWRSYW5nZSk7XG5cbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBzZWxlY3RlZExlbmd0aDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydE9mZnNldCxcbiAgICBlbmQ6IGVuZE9mZnNldFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGN1cnJlbnRSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuICAgIHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgKTtcblxuICB2YXIgcmFuZ2VMZW5ndGggPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCA/IDAgOiBjdXJyZW50UmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG5cbiAgdmFyIHRlbXBSYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHRlbXBSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gIHRlbXBSYW5nZS5zZXRFbmQoY3VycmVudFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBjdXJyZW50UmFuZ2Uuc3RhcnRPZmZzZXQpO1xuXG4gIHZhciBpc1RlbXBSYW5nZUNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKFxuICAgIHRlbXBSYW5nZS5zdGFydENvbnRhaW5lcixcbiAgICB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsXG4gICAgdGVtcFJhbmdlLmVuZENvbnRhaW5lcixcbiAgICB0ZW1wUmFuZ2UuZW5kT2Zmc2V0XG4gICk7XG5cbiAgdmFyIHN0YXJ0ID0gaXNUZW1wUmFuZ2VDb2xsYXBzZWQgPyAwIDogdGVtcFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuICB2YXIgZW5kID0gc3RhcnQgKyByYW5nZUxlbmd0aDtcblxuICAvLyBEZXRlY3Qgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGJhY2t3YXJkLlxuICB2YXIgZGV0ZWN0aW9uUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRTdGFydChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRFbmQoZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG4gIHZhciBpc0JhY2t3YXJkID0gZGV0ZWN0aW9uUmFuZ2UuY29sbGFwc2VkO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IGlzQmFja3dhcmQgPyBlbmQgOiBzdGFydCxcbiAgICBlbmQ6IGlzQmFja3dhcmQgPyBzdGFydCA6IGVuZFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0SUVPZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkuZHVwbGljYXRlKCk7XG4gIHZhciBzdGFydCwgZW5kO1xuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IHN0YXJ0O1xuICB9IGVsc2UgaWYgKG9mZnNldHMuc3RhcnQgPiBvZmZzZXRzLmVuZCkge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5lbmQ7XG4gICAgZW5kID0gb2Zmc2V0cy5zdGFydDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gIH1cblxuICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gIHJhbmdlLnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0JywgcmFuZ2UpO1xuICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gIHJhbmdlLnNlbGVjdCgpO1xufVxuXG4vKipcbiAqIEluIG1vZGVybiBub24tSUUgYnJvd3NlcnMsIHdlIGNhbiBzdXBwb3J0IGJvdGggZm9yd2FyZCBhbmQgYmFja3dhcmRcbiAqIHNlbGVjdGlvbnMuXG4gKlxuICogTm90ZTogSUUxMCsgc3VwcG9ydHMgdGhlIFNlbGVjdGlvbiBvYmplY3QsIGJ1dCBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuICogdG8gcHJvZ3JhbWF0aWNhbGx5IGNyZWF0ZSBhIGJhY2t3YXJkIHNlbGVjdGlvbi4gVGh1cywgZm9yIGFsbCBJRVxuICogdmVyc2lvbnMsIHdlIHVzZSB0aGUgb2xkIElFIEFQSSB0byBjcmVhdGUgb3VyIHNlbGVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRNb2Rlcm5PZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gIHZhciBzdGFydCA9IE1hdGgubWluKG9mZnNldHMuc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSB0eXBlb2Ygb2Zmc2V0cy5lbmQgPT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAgIHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG5cbiAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuICAvLyBGbGlwIGJhY2t3YXJkIHNlbGVjdGlvbnMsIHNvIHdlIGNhbiBzZXQgd2l0aCBhIHNpbmdsZSByYW5nZS5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG5cbiAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBzdGFydCk7XG4gIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cbiAgaWYgKHN0YXJ0TWFya2VyICYmIGVuZE1hcmtlcikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRNYXJrZXIubm9kZSwgc3RhcnRNYXJrZXIub2Zmc2V0KTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VJRU9mZnNldHMgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAnc2VsZWN0aW9uJyBpbiBkb2N1bWVudCAmJlxuICAhKCdnZXRTZWxlY3Rpb24nIGluIHdpbmRvdylcbik7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgZ2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gZ2V0SUVPZmZzZXRzIDogZ2V0TW9kZXJuT2Zmc2V0cyxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gICAqL1xuICBzZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBzZXRJRU9mZnNldHMgOiBzZXRNb2Rlcm5PZmZzZXRzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0aW9uO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPVxuICByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIik7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG4gKiB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgLy8gVGhpcyBjb25zdHJ1Y3RvciBhbmQgaXRzIGFyZ3VtZW50IGlzIGN1cnJlbnRseSB1c2VkIGJ5IG1vY2tzLlxufTtcblxuYXNzaWduKFJlYWN0RE9NVGV4dENvbXBvbmVudC5wcm90b3R5cGUsIHtcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdFRleHR9IHRleHRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIHJlYWxseSBhIFJlYWN0VGV4dCAoUmVhY3ROb2RlKSwgbm90IGEgUmVhY3RFbGVtZW50XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICAgIHRoaXMuX3N0cmluZ1RleHQgPSAnJyArIHRleHQ7XG5cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIG1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuIFRoaXMgbm9kZSBpcyBub3QgaW50ZW5kZWQgdG8gaGF2ZVxuICAgKiBhbnkgZmVhdHVyZXMgYmVzaWRlcyBjb250YWluaW5nIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24ocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgdmFyIGVzY2FwZWRUZXh0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRoaXMuX3N0cmluZ1RleHQpO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcbiAgICAgIC8vIHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb24gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyIChzdGF0aWMgcGFnZXMpLFxuICAgICAgLy8gd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICc8c3BhbiAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHJvb3RJRCkgKyAnPicgK1xuICAgICAgICBlc2NhcGVkVGV4dCArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY29tcG9uZW50IGJ5IHVwZGF0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSBuZXh0VGV4dCBUaGUgbmV4dCB0ZXh0IGNvbnRlbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRUZXh0LCB0cmFuc2FjdGlvbikge1xuICAgIGlmIChuZXh0VGV4dCAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFRleHQ7XG4gICAgICB2YXIgbmV4dFN0cmluZ1RleHQgPSAnJyArIG5leHRUZXh0O1xuICAgICAgaWYgKG5leHRTdHJpbmdUZXh0ICE9PSB0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgIC8vIFRPRE86IFNhdmUgdGhpcyBhcyBwZW5kaW5nIHByb3BzIGFuZCB1c2UgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5XG4gICAgICAgIC8vIGFuZC9vciB1cGRhdGVDb21wb25lbnQgdG8gZG8gdGhlIGFjdHVhbCB1cGRhdGUgZm9yIGNvbnNpc3RlbmN5IHdpdGhcbiAgICAgICAgLy8gb3RoZXIgY29tcG9uZW50IHR5cGVzP1xuICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgIFJlYWN0RE9NQ29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnRCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgbmV4dFN0cmluZ1RleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dENvbXBvbmVudDtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpe3RoaXMuaXNNb3VudGVkKCkmJnRoaXMuZm9yY2VVcGRhdGUoKX12YXIgQXV0b0ZvY3VzTWl4aW49cmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIiksRE9NUHJvcGVydHlPcGVyYXRpb25zPXJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKSxMaW5rZWRWYWx1ZVV0aWxzPXJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIiksUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW49cmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIiksUmVhY3RDbGFzcz1yZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpLFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksUmVhY3RVcGRhdGVzPXJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKSxhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSx0ZXh0YXJlYT1SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShcInRleHRhcmVhXCIpLFJlYWN0RE9NVGV4dGFyZWE9UmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6XCJSZWFjdERPTVRleHRhcmVhXCIsdGFnTmFtZTpcIlRFWFRBUkVBXCIsbWl4aW5zOltBdXRvRm9jdXNNaXhpbixMaW5rZWRWYWx1ZVV0aWxzLk1peGluLFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxnZXRJbml0aWFsU3RhdGU6ZnVuY3Rpb24oKXt2YXIgZGVmYXVsdFZhbHVlPXRoaXMucHJvcHMuZGVmYXVsdFZhbHVlLGNoaWxkcmVuPXRoaXMucHJvcHMuY2hpbGRyZW47bnVsbCE9Y2hpbGRyZW4mJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwiVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyBjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LlwiKTpudWxsKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChudWxsPT1kZWZhdWx0VmFsdWUsXCJJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uXCIpOmludmFyaWFudChudWxsPT1kZWZhdWx0VmFsdWUpLEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoY2hpbGRyZW4ubGVuZ3RoPD0xLFwiPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLlwiKTppbnZhcmlhbnQoY2hpbGRyZW4ubGVuZ3RoPD0xKSxjaGlsZHJlbj1jaGlsZHJlblswXSksZGVmYXVsdFZhbHVlPVwiXCIrY2hpbGRyZW4pLG51bGw9PWRlZmF1bHRWYWx1ZSYmKGRlZmF1bHRWYWx1ZT1cIlwiKTt2YXIgdmFsdWU9TGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtyZXR1cm57aW5pdGlhbFZhbHVlOlwiXCIrKG51bGwhPXZhbHVlP3ZhbHVlOmRlZmF1bHRWYWx1ZSl9fSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgcHJvcHM9YXNzaWduKHt9LHRoaXMucHJvcHMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG51bGw9PXByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLFwiYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uXCIpOmludmFyaWFudChudWxsPT1wcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkscHJvcHMuZGVmYXVsdFZhbHVlPW51bGwscHJvcHMudmFsdWU9bnVsbCxwcm9wcy5vbkNoYW5nZT10aGlzLl9oYW5kbGVDaGFuZ2UsdGV4dGFyZWEocHJvcHMsdGhpcy5zdGF0ZS5pbml0aWFsVmFsdWUpfSxjb21wb25lbnREaWRVcGRhdGU6ZnVuY3Rpb24ocHJldlByb3BzLHByZXZTdGF0ZSxwcmV2Q29udGV4dCl7dmFyIHZhbHVlPUxpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7aWYobnVsbCE9dmFsdWUpe3ZhciByb290Tm9kZT10aGlzLmdldERPTU5vZGUoKTtET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShyb290Tm9kZSxcInZhbHVlXCIsXCJcIit2YWx1ZSl9fSxfaGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGV2ZW50KXt2YXIgcmV0dXJuVmFsdWUsb25DaGFuZ2U9TGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtyZXR1cm4gb25DaGFuZ2UmJihyZXR1cm5WYWx1ZT1vbkNoYW5nZS5jYWxsKHRoaXMsZXZlbnQpKSxSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCx0aGlzKSxyZXR1cm5WYWx1ZX19KTttb2R1bGUuZXhwb3J0cz1SZWFjdERPTVRleHRhcmVhO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkVUMDFVWlhoMFlYSmxZUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlYwRXNXVUZwUWtFc1UwRkJVeXgzUWtGRlNDeExRVUZMTEdGQlExQXNTMEZCU3l4alFXeENWQ3hIUVVGSkxHZENRVUZwUWl4UlFVRlJMRzlDUVVONlFpeHpRa0ZCZDBJc1VVRkJVU3d5UWtGRGFFTXNhVUpCUVcxQ0xGRkJRVkVzYzBKQlF6TkNMREpDUVVFMlFpeFJRVUZSTEdkRFFVTnlReXhYUVVGaExGRkJRVkVzWjBKQlEzSkNMR0ZCUVdVc1VVRkJVU3hyUWtGRGRrSXNZVUZCWlN4UlFVRlJMR3RDUVVWMlFpeFBRVUZUTEZGQlFWRXNiVUpCUTJwQ0xGVkJRVmtzVVVGQlVTeGxRVVZ3UWl4UlFVRlZMRkZCUVZFc1lVRkZiRUlzVTBGQlZ5eGhRVUZoTEdOQlFXTXNXVUYzUW5SRExHbENRVUZ0UWl4WFFVRlhMR0ZCUTJoRExGbEJRV0VzYlVKQlEySXNVVUZCVXl4WFFVVlVMRkZCUVZNc1pVRkJaMElzYVVKQlFXbENMRTFCUVU4c05FSkJSV3BFTEdkQ1FVRnBRaXhYUVVObUxFZEJRVWtzWTBGQlpTeExRVUZMTEUxQlFVMHNZVUZGTVVJc1UwRkJWeXhMUVVGTExFMUJRVTBzVVVGRFZpeFBRVUZhTEZkQlEwVXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGZEJRemxDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGTkJRM1pETEVWQlEwRXNjMFpCUlVVc1RVRkZUQ3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTjJRaXhOUVVGb1FpeGhRVU5CTEhWRlFVTkZMRlZCUVRCQ0xFMUJRV2hDTEdOQlExWXNUVUZCVFN4UlFVRlJMRmxCUTJZc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEZGtNc1UwRkJVeXhSUVVGVkxFVkJRMjVDTEN0RFFVTkZMRlZCUVZVc1UwRkJVeXhSUVVGVkxFZEJRMnBETEZOQlFWY3NVMEZCVXl4SlFVZDBRaXhoUVVGbExFZEJRVXNzVlVGRlJpeE5RVUZvUWl4bFFVTkdMR0ZCUVdVc1IwRkZha0lzU1VGQlNTeFBRVUZSTEdsQ1FVRnBRaXhUUVVGVExFdEJRM1JETEZGQlMwVXNZVUZCWXl4SlFVRmxMRTFCUVZRc1RVRkJaMElzVFVGQlVTeG5Ra0ZKYUVRc1QwRkJVU3hYUVVWT0xFZEJRVWtzVDBGQlVTeFZRVUZYTEV0QlFVc3NUVUZoTlVJc1QwRllReXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTk9MRTFCUVdwRExFMUJRVTBzZDBKQlEwNHNaMFZCUTBVc1ZVRkJNa01zVFVGQmFrTXNUVUZCVFN4NVFrRkZjRUlzVFVGQlRTeGhRVUZsTEV0QlEzSkNMRTFCUVUwc1RVRkJVU3hMUVVOa0xFMUJRVTBzVTBGQlZ5eExRVUZMTEdOQlNXWXNVMEZCVXl4TlFVRlBMRXRCUVVzc1RVRkJUU3hsUVVkd1F5eHRRa0ZCYjBJc1UwRkJVeXhWUVVGWExGVkJRVmNzWVVGRGFrUXNSMEZCU1N4UFFVRlJMR2xDUVVGcFFpeFRRVUZUTEV0QlEzUkRMRWxCUVdFc1RVRkJWQ3hOUVVGbExFTkJRMnBDTEVkQlFVa3NWVUZCVnl4TFFVRkxMRmxCUjNCQ0xIVkNRVUZ6UWl4dlFrRkJiMElzVTBGQlZTeFJRVUZUTEVkQlFVc3NVMEZKZEVVc1kwRkJaU3hUUVVGVExFOUJRM1JDTEVkQlFVa3NZVUZEUVN4VFFVRlhMR2xDUVVGcFFpeFpRVUZaTEV0QlN6VkRMRTlCU2trc1dVRkRSaXhaUVVGakxGTkJRVk1zUzBGQlN5eExRVUZOTEZGQlJYQkRMR0ZCUVdFc1MwRkJTeXh4UWtGQmMwSXNUVUZEYWtNc1kwRkxXQ3hSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFUlBUVlJsZUhSaGNtVmhYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnUVhWMGIwWnZZM1Z6VFdsNGFXNGdQU0J5WlhGMWFYSmxLRndpTGk5QmRYUnZSbTlqZFhOTmFYaHBibHdpS1R0Y2JuWmhjaUJFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NZ1BTQnlaWEYxYVhKbEtGd2lMaTlFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5OY0lpazdYRzUyWVhJZ1RHbHVhMlZrVm1Gc2RXVlZkR2xzY3lBOUlISmxjWFZwY21Vb1hDSXVMMHhwYm10bFpGWmhiSFZsVlhScGJITmNJaWs3WEc1MllYSWdVbVZoWTNSQ2NtOTNjMlZ5UTI5dGNHOXVaVzUwVFdsNGFXNGdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRUp5YjNkelpYSkRiMjF3YjI1bGJuUk5hWGhwYmx3aUtUdGNiblpoY2lCU1pXRmpkRU5zWVhOeklEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkRiR0Z6YzF3aUtUdGNiblpoY2lCU1pXRmpkRVZzWlcxbGJuUWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRVZzWlcxbGJuUmNJaWs3WEc1MllYSWdVbVZoWTNSVmNHUmhkR1Z6SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSVmNHUmhkR1Z6WENJcE8xeHVYRzUyWVhJZ1lYTnphV2R1SUQwZ2NtVnhkV2x5WlNoY0lpNHZUMkpxWldOMExtRnpjMmxuYmx3aUtUdGNiblpoY2lCcGJuWmhjbWxoYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm5aaGNtbGhiblJjSWlrN1hHNWNiblpoY2lCM1lYSnVhVzVuSUQwZ2NtVnhkV2x5WlNoY0lpNHZkMkZ5Ym1sdVoxd2lLVHRjYmx4dWRtRnlJSFJsZUhSaGNtVmhJRDBnVW1WaFkzUkZiR1Z0Wlc1MExtTnlaV0YwWlVaaFkzUnZjbmtvSjNSbGVIUmhjbVZoSnlrN1hHNWNibVoxYm1OMGFXOXVJR1p2Y21ObFZYQmtZWFJsU1daTmIzVnVkR1ZrS0NrZ2UxeHVJQ0F2S21wemFHbHVkQ0IyWVd4cFpIUm9hWE02ZEhKMVpTQXFMMXh1SUNCcFppQW9kR2hwY3k1cGMwMXZkVzUwWldRb0tTa2dlMXh1SUNBZ0lIUm9hWE11Wm05eVkyVlZjR1JoZEdVb0tUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRWx0Y0d4bGJXVnVkSE1nWVNBOGRHVjRkR0Z5WldFK0lHNWhkR2wyWlNCamIyMXdiMjVsYm5RZ2RHaGhkQ0JoYkd4dmQzTWdjMlYwZEdsdVp5QmdkbUZzZFdWZ0xDQmhibVJjYmlBcUlHQmtaV1poZFd4MFZtRnNkV1ZnTGlCVWFHbHpJR1JwWm1abGNuTWdabkp2YlNCMGFHVWdkSEpoWkdsMGFXOXVZV3dnUkU5TklFRlFTU0JpWldOaGRYTmxJSFpoYkhWbElHbHpYRzRnS2lCMWMzVmhiR3g1SUhObGRDQmhjeUJRUTBSQlZFRWdZMmhwYkdSeVpXNHVYRzRnS2x4dUlDb2dTV1lnWUhaaGJIVmxZQ0JwY3lCdWIzUWdjM1Z3Y0d4cFpXUWdLRzl5SUc1MWJHd3ZkVzVrWldacGJtVmtLU3dnZFhObGNpQmhZM1JwYjI1eklIUm9ZWFFnWVdabVpXTjBJSFJvWlZ4dUlDb2dkbUZzZFdVZ2QybHNiQ0IwY21sbloyVnlJSFZ3WkdGMFpYTWdkRzhnZEdobElHVnNaVzFsYm5RdVhHNGdLbHh1SUNvZ1NXWWdZSFpoYkhWbFlDQnBjeUJ6ZFhCd2JHbGxaQ0FvWVc1a0lHNXZkQ0J1ZFd4c0wzVnVaR1ZtYVc1bFpDa3NJSFJvWlNCeVpXNWtaWEpsWkNCbGJHVnRaVzUwSUhkcGJHeGNiaUFxSUc1dmRDQjBjbWxuWjJWeUlIVndaR0YwWlhNZ2RHOGdkR2hsSUdWc1pXMWxiblF1SUVsdWMzUmxZV1FzSUhSb1pTQmdkbUZzZFdWZ0lIQnliM0FnYlhWemRDQmphR0Z1WjJVZ2FXNWNiaUFxSUc5eVpHVnlJR1p2Y2lCMGFHVWdjbVZ1WkdWeVpXUWdaV3hsYldWdWRDQjBieUJpWlNCMWNHUmhkR1ZrTGx4dUlDcGNiaUFxSUZSb1pTQnlaVzVrWlhKbFpDQmxiR1Z0Wlc1MElIZHBiR3dnWW1VZ2FXNXBkR2xoYkdsNlpXUWdkMmwwYUNCaGJpQmxiWEIwZVNCMllXeDFaU3dnZEdobElIQnliM0JjYmlBcUlHQmtaV1poZFd4MFZtRnNkV1ZnSUdsbUlITndaV05wWm1sbFpDd2diM0lnZEdobElHTm9hV3hrY21WdUlHTnZiblJsYm5RZ0tHUmxjSEpsWTJGMFpXUXBMbHh1SUNvdlhHNTJZWElnVW1WaFkzUkVUMDFVWlhoMFlYSmxZU0E5SUZKbFlXTjBRMnhoYzNNdVkzSmxZWFJsUTJ4aGMzTW9lMXh1SUNCa2FYTndiR0Y1VG1GdFpUb2dKMUpsWVdOMFJFOU5WR1Y0ZEdGeVpXRW5MRnh1SUNCMFlXZE9ZVzFsT2lBblZFVllWRUZTUlVFbkxGeHVYRzRnSUcxcGVHbHVjem9nVzBGMWRHOUdiMk4xYzAxcGVHbHVMQ0JNYVc1clpXUldZV3gxWlZWMGFXeHpMazFwZUdsdUxDQlNaV0ZqZEVKeWIzZHpaWEpEYjIxd2IyNWxiblJOYVhocGJsMHNYRzVjYmlBZ1oyVjBTVzVwZEdsaGJGTjBZWFJsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMllYSWdaR1ZtWVhWc2RGWmhiSFZsSUQwZ2RHaHBjeTV3Y205d2N5NWtaV1poZFd4MFZtRnNkV1U3WEc0Z0lDQWdMeThnVkU5RVR5QW9lWFZ1WjNOMFpYSnpLVG9nVW1WdGIzWmxJSE4xY0hCdmNuUWdabTl5SUdOb2FXeGtjbVZ1SUdOdmJuUmxiblFnYVc0Z1BIUmxlSFJoY21WaFBpNWNiaUFnSUNCMllYSWdZMmhwYkdSeVpXNGdQU0IwYUdsekxuQnliM0J6TG1Ob2FXeGtjbVZ1TzF4dUlDQWdJR2xtSUNoamFHbHNaSEpsYmlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCcFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJQ0FnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDZFZjMlVnZEdobElHQmtaV1poZFd4MFZtRnNkV1ZnSUc5eUlHQjJZV3gxWldBZ2NISnZjSE1nYVc1emRHVmhaQ0J2WmlCelpYUjBhVzVuSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2RqYUdsc1pISmxiaUJ2YmlBOGRHVjRkR0Z5WldFK0xpZGNiaUFnSUNBZ0lDQWdLU0E2SUc1MWJHd3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2RGWmhiSFZsSUQwOUlHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNkSlppQjViM1VnYzNWd2NHeDVJR0JrWldaaGRXeDBWbUZzZFdWZ0lHOXVJR0VnUEhSbGVIUmhjbVZoUGl3Z1pHOGdibTkwSUhCaGMzTWdZMmhwYkdSeVpXNHVKMXh1SUNBZ0lDQWdLU0E2SUdsdWRtRnlhV0Z1ZENoa1pXWmhkV3gwVm1Gc2RXVWdQVDBnYm5Wc2JDa3BPMXh1SUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZMmhwYkdSeVpXNHBLU0I3WEc0Z0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc0dWJHVnVaM1JvSUR3OUlERXNYRzRnSUNBZ0lDQWdJQ0FnSnp4MFpYaDBZWEpsWVQ0Z1kyRnVJRzl1YkhrZ2FHRjJaU0JoZENCdGIzTjBJRzl1WlNCamFHbHNaQzRuWEc0Z0lDQWdJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9ZMmhwYkdSeVpXNHViR1Z1WjNSb0lEdzlJREVwS1R0Y2JpQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc0Z1BTQmphR2xzWkhKbGJsc3dYVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWkdWbVlYVnNkRlpoYkhWbElEMGdKeWNnS3lCamFHbHNaSEpsYmp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dSbFptRjFiSFJXWVd4MVpTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQmtaV1poZFd4MFZtRnNkV1VnUFNBbkp6dGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlIWmhiSFZsSUQwZ1RHbHVhMlZrVm1Gc2RXVlZkR2xzY3k1blpYUldZV3gxWlNoMGFHbHpLVHRjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0x5OGdWMlVnYzJGMlpTQjBhR1VnYVc1cGRHbGhiQ0IyWVd4MVpTQnpieUIwYUdGMElHQlNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRHQWdaRzlsYzI0bmRDQjFjR1JoZEdWY2JpQWdJQ0FnSUM4dklHQjBaWGgwUTI5dWRHVnVkR0FnS0hWdWJtVmpaWE56WVhKNUlITnBibU5sSUhkbElIVndaR0YwWlNCMllXeDFaU2t1WEc0Z0lDQWdJQ0F2THlCVWFHVWdhVzVwZEdsaGJDQjJZV3gxWlNCallXNGdZbVVnWVNCaWIyOXNaV0Z1SUc5eUlHOWlhbVZqZENCemJ5QjBhR0YwSjNNZ2QyaDVJR2wwSjNOY2JpQWdJQ0FnSUM4dklHWnZjbU5sWkNCMGJ5QmlaU0JoSUhOMGNtbHVaeTVjYmlBZ0lDQWdJR2x1YVhScFlXeFdZV3gxWlRvZ0p5Y2dLeUFvZG1Gc2RXVWdJVDBnYm5Wc2JDQS9JSFpoYkhWbElEb2daR1ZtWVhWc2RGWmhiSFZsS1Z4dUlDQWdJSDA3WEc0Z0lIMHNYRzVjYmlBZ2NtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBdkx5QkRiRzl1WlNCZ2RHaHBjeTV3Y205d2MyQWdjMjhnZDJVZ1pHOXVKM1FnYlhWMFlYUmxJSFJvWlNCcGJuQjFkQzVjYmlBZ0lDQjJZWElnY0hKdmNITWdQU0JoYzNOcFoyNG9lMzBzSUhSb2FYTXVjSEp2Y0hNcE8xeHVYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUhCeWIzQnpMbVJoYm1kbGNtOTFjMng1VTJWMFNXNXVaWEpJVkUxTUlEMDlJRzUxYkd3c1hHNGdJQ0FnSUNBbllHUmhibWRsY205MWMyeDVVMlYwU1c1dVpYSklWRTFNWUNCa2IyVnpJRzV2ZENCdFlXdGxJSE5sYm5ObElHOXVJRHgwWlhoMFlYSmxZVDR1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2NISnZjSE11WkdGdVoyVnliM1Z6YkhsVFpYUkpibTVsY2toVVRVd2dQVDBnYm5Wc2JDa3BPMXh1WEc0Z0lDQWdjSEp2Y0hNdVpHVm1ZWFZzZEZaaGJIVmxJRDBnYm5Wc2JEdGNiaUFnSUNCd2NtOXdjeTUyWVd4MVpTQTlJRzUxYkd3N1hHNGdJQ0FnY0hKdmNITXViMjVEYUdGdVoyVWdQU0IwYUdsekxsOW9ZVzVrYkdWRGFHRnVaMlU3WEc1Y2JpQWdJQ0F2THlCQmJIZGhlWE1nYzJWMElHTm9hV3hrY21WdUlIUnZJSFJvWlNCellXMWxJSFJvYVc1bkxpQkpiaUJKUlRrc0lIUm9aU0J6Wld4bFkzUnBiMjRnY21GdVoyVWdkMmxzYkZ4dUlDQWdJQzh2SUdkbGRDQnlaWE5sZENCcFppQmdkR1Y0ZEVOdmJuUmxiblJnSUdseklHMTFkR0YwWldRdVhHNGdJQ0FnY21WMGRYSnVJSFJsZUhSaGNtVmhLSEJ5YjNCekxDQjBhR2x6TG5OMFlYUmxMbWx1YVhScFlXeFdZV3gxWlNrN1hHNGdJSDBzWEc1Y2JpQWdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxPaUJtZFc1amRHbHZiaWh3Y21WMlVISnZjSE1zSUhCeVpYWlRkR0YwWlN3Z2NISmxka052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0JNYVc1clpXUldZV3gxWlZWMGFXeHpMbWRsZEZaaGJIVmxLSFJvYVhNcE8xeHVJQ0FnSUdsbUlDaDJZV3gxWlNBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCMllYSWdjbTl2ZEU1dlpHVWdQU0IwYUdsekxtZGxkRVJQVFU1dlpHVW9LVHRjYmlBZ0lDQWdJQzh2SUVOaGMzUWdZSFpoYkhWbFlDQjBieUJoSUhOMGNtbHVaeUIwYnlCbGJuTjFjbVVnZEdobElIWmhiSFZsSUdseklITmxkQ0JqYjNKeVpXTjBiSGt1SUZkb2FXeGxYRzRnSUNBZ0lDQXZMeUJpY205M2MyVnljeUIwZVhCcFkyRnNiSGtnWkc4Z2RHaHBjeUJoY3lCdVpXTmxjM05oY25rc0lHcHpaRzl0SUdSdlpYTnVKM1F1WEc0Z0lDQWdJQ0JFVDAxUWNtOXdaWEowZVU5d1pYSmhkR2x2Ym5NdWMyVjBWbUZzZFdWR2IzSlFjbTl3WlhKMGVTaHliMjkwVG05a1pTd2dKM1poYkhWbEp5d2dKeWNnS3lCMllXeDFaU2s3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUY5b1lXNWtiR1ZEYUdGdVoyVTZJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ2RtRnlJSEpsZEhWeWJsWmhiSFZsTzF4dUlDQWdJSFpoY2lCdmJrTm9ZVzVuWlNBOUlFeHBibXRsWkZaaGJIVmxWWFJwYkhNdVoyVjBUMjVEYUdGdVoyVW9kR2hwY3lrN1hHNGdJQ0FnYVdZZ0tHOXVRMmhoYm1kbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY201V1lXeDFaU0E5SUc5dVEyaGhibWRsTG1OaGJHd29kR2hwY3l3Z1pYWmxiblFwTzF4dUlDQWdJSDFjYmlBZ0lDQlNaV0ZqZEZWd1pHRjBaWE11WVhOaGNDaG1iM0pqWlZWd1pHRjBaVWxtVFc5MWJuUmxaQ3dnZEdocGN5azdYRzRnSUNBZ2NtVjBkWEp1SUhKbGRIVnlibFpoYkhWbE8xeHVJQ0I5WEc1Y2JuMHBPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBSRTlOVkdWNGRHRnlaV0U3WEc0aVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxudmFyIFJFU0VUX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSBmYWxzZTtcbiAgfVxufTtcblxudmFyIEZMVVNIX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IFJlYWN0VXBkYXRlcy5mbHVzaEJhdGNoZWRVcGRhdGVzLmJpbmQoUmVhY3RVcGRhdGVzKVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW0ZMVVNIX0JBVENIRURfVVBEQVRFUywgUkVTRVRfQkFUQ0hFRF9VUERBVEVTXTtcblxuZnVuY3Rpb24gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG59XG5cbmFzc2lnbihcbiAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgVHJhbnNhY3Rpb24uTWl4aW4sXG4gIHtcbiAgICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgICB9XG4gIH1cbik7XG5cbnZhciB0cmFuc2FjdGlvbiA9IG5ldyBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKTtcblxudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaW4gYSBjb250ZXh0IHdpdGhpbiB3aGljaCBjYWxscyB0byBgc2V0U3RhdGVgXG4gICAqIGFuZCBmcmllbmRzIGFyZSBiYXRjaGVkIHN1Y2ggdGhhdCBjb21wb25lbnRzIGFyZW4ndCB1cGRhdGVkIHVubmVjZXNzYXJpbHkuXG4gICAqL1xuICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24oY2FsbGJhY2ssIGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM7XG5cbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBjb2RlIGlzIHdyaXR0ZW4gdGhpcyB3YXkgdG8gYXZvaWQgZXh0cmEgYWxsb2NhdGlvbnNcbiAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgY2FsbGJhY2soYSwgYiwgYywgZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oY2FsbGJhY2ssIG51bGwsIGEsIGIsIGMsIGQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0eXBlKXtyZXR1cm4gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7dGFnTmFtZTp0eXBlLnRvVXBwZXJDYXNlKCkscmVuZGVyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQodHlwZSxudWxsLG51bGwsbnVsbCxudWxsLHRoaXMucHJvcHMpfX0pfWZ1bmN0aW9uIGluamVjdCgpe2lmKFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoUmVhY3RFdmVudExpc3RlbmVyKSxSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKSxSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RJbnN0YW5jZUhhbmRsZShSZWFjdEluc3RhbmNlSGFuZGxlcyksUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0TW91bnQoUmVhY3RNb3VudCksUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpTaW1wbGVFdmVudFBsdWdpbixFbnRlckxlYXZlRXZlbnRQbHVnaW46RW50ZXJMZWF2ZUV2ZW50UGx1Z2luLENoYW5nZUV2ZW50UGx1Z2luOkNoYW5nZUV2ZW50UGx1Z2luLE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW46TW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbixTZWxlY3RFdmVudFBsdWdpbjpTZWxlY3RFdmVudFBsdWdpbixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkJlZm9yZUlucHV0RXZlbnRQbHVnaW59KSxSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzKFJlYWN0RE9NQ29tcG9uZW50KSxSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0VGV4dENvbXBvbmVudENsYXNzKFJlYWN0RE9NVGV4dENvbXBvbmVudCksUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdEF1dG9XcmFwcGVyKGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyksUmVhY3RJbmplY3Rpb24uQ2xhc3MuaW5qZWN0TWl4aW4oUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4pLFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RDb21wb25lbnRDbGFzc2VzKHtidXR0b246UmVhY3RET01CdXR0b24sZm9ybTpSZWFjdERPTUZvcm0saWZyYW1lOlJlYWN0RE9NSWZyYW1lLGltZzpSZWFjdERPTUltZyxpbnB1dDpSZWFjdERPTUlucHV0LG9wdGlvbjpSZWFjdERPTU9wdGlvbixzZWxlY3Q6UmVhY3RET01TZWxlY3QsdGV4dGFyZWE6UmVhY3RET01UZXh0YXJlYSxodG1sOmNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KFwiaHRtbFwiKSxoZWFkOmNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KFwiaGVhZFwiKSxib2R5OmNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KFwiYm9keVwiKX0pLFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKEhUTUxET01Qcm9wZXJ0eUNvbmZpZyksUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpLFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50KFwibm9zY3JpcHRcIiksUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbihSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKSxSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSksUmVhY3RJbmplY3Rpb24uUm9vdEluZGV4LmluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTT9DbGllbnRSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleDpTZXJ2ZXJSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCksUmVhY3RJbmplY3Rpb24uQ29tcG9uZW50LmluamVjdEVudmlyb25tZW50KFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50KSxSZWFjdEluamVjdGlvbi5ET01Db21wb25lbnQuaW5qZWN0SURPcGVyYXRpb25zKFJlYWN0RE9NSURPcGVyYXRpb25zKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgdXJsPUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSYmd2luZG93LmxvY2F0aW9uLmhyZWZ8fFwiXCI7aWYoL1s/Jl1yZWFjdF9wZXJmXFxiLy50ZXN0KHVybCkpe3ZhciBSZWFjdERlZmF1bHRQZXJmPXJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdFBlcmZcIik7UmVhY3REZWZhdWx0UGVyZi5zdGFydCgpfX19dmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW49cmVxdWlyZShcIi4vQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiKSxDaGFuZ2VFdmVudFBsdWdpbj1yZXF1aXJlKFwiLi9DaGFuZ2VFdmVudFBsdWdpblwiKSxDbGllbnRSZWFjdFJvb3RJbmRleD1yZXF1aXJlKFwiLi9DbGllbnRSZWFjdFJvb3RJbmRleFwiKSxEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcj1yZXF1aXJlKFwiLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlclwiKSxFbnRlckxlYXZlRXZlbnRQbHVnaW49cmVxdWlyZShcIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXCIpLEV4ZWN1dGlvbkVudmlyb25tZW50PXJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLEhUTUxET01Qcm9wZXJ0eUNvbmZpZz1yZXF1aXJlKFwiLi9IVE1MRE9NUHJvcGVydHlDb25maWdcIiksTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbj1yZXF1aXJlKFwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXCIpLFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluPXJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpLFJlYWN0Q2xhc3M9cmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKSxSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudD1yZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKSxSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5PXJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcIiksUmVhY3RET01Db21wb25lbnQ9cmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRcIiksUmVhY3RET01CdXR0b249cmVxdWlyZShcIi4vUmVhY3RET01CdXR0b25cIiksUmVhY3RET01Gb3JtPXJlcXVpcmUoXCIuL1JlYWN0RE9NRm9ybVwiKSxSZWFjdERPTUltZz1yZXF1aXJlKFwiLi9SZWFjdERPTUltZ1wiKSxSZWFjdERPTUlET3BlcmF0aW9ucz1yZXF1aXJlKFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiKSxSZWFjdERPTUlmcmFtZT1yZXF1aXJlKFwiLi9SZWFjdERPTUlmcmFtZVwiKSxSZWFjdERPTUlucHV0PXJlcXVpcmUoXCIuL1JlYWN0RE9NSW5wdXRcIiksUmVhY3RET01PcHRpb249cmVxdWlyZShcIi4vUmVhY3RET01PcHRpb25cIiksUmVhY3RET01TZWxlY3Q9cmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3RcIiksUmVhY3RET01UZXh0YXJlYT1yZXF1aXJlKFwiLi9SZWFjdERPTVRleHRhcmVhXCIpLFJlYWN0RE9NVGV4dENvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdERPTVRleHRDb21wb25lbnRcIiksUmVhY3RFbGVtZW50PXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKSxSZWFjdEV2ZW50TGlzdGVuZXI9cmVxdWlyZShcIi4vUmVhY3RFdmVudExpc3RlbmVyXCIpLFJlYWN0SW5qZWN0aW9uPXJlcXVpcmUoXCIuL1JlYWN0SW5qZWN0aW9uXCIpLFJlYWN0SW5zdGFuY2VIYW5kbGVzPXJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpLFJlYWN0TW91bnQ9cmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKSxSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uPXJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cIiksU2VsZWN0RXZlbnRQbHVnaW49cmVxdWlyZShcIi4vU2VsZWN0RXZlbnRQbHVnaW5cIiksU2VydmVyUmVhY3RSb290SW5kZXg9cmVxdWlyZShcIi4vU2VydmVyUmVhY3RSb290SW5kZXhcIiksU2ltcGxlRXZlbnRQbHVnaW49cmVxdWlyZShcIi4vU2ltcGxlRXZlbnRQbHVnaW5cIiksU1ZHRE9NUHJvcGVydHlDb25maWc9cmVxdWlyZShcIi4vU1ZHRE9NUHJvcGVydHlDb25maWdcIiksY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQ9cmVxdWlyZShcIi4vY3JlYXRlRnVsbFBhZ2VDb21wb25lbnRcIik7bW9kdWxlLmV4cG9ydHM9e2luamVjdDppbmplY3R9O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkVaV1poZFd4MFNXNXFaV04wYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZYUVN4WlFYVkRRU3hUUVVGVExEQkNRVUY1UWl4TlFVTm9ReXhOUVVGUExGbEJRVmNzWVVGRGFFSXNVVUZCVXl4TFFVRkxMR05CUTJRc1QwRkJVU3hYUVVOT0xFMUJRVThzU1VGQlNTeGpRVU5VTEV0QlEwRXNTMEZEUVN4TFFVTkJMRXRCUTBFc1MwRkRRU3hMUVVGTExGVkJUV0lzVVVGQlV5eFZRVFpGVUN4SFFUVkZRU3hsUVVGbExHRkJRV0VzZVVKQlF6RkNMRzlDUVUxR0xHVkJRV1VzWlVGQlpTeDFRa0ZCZFVJc2VVSkJRM0pFTEdWQlFXVXNaVUZCWlN4eFFrRkJjVUlzYzBKQlEyNUVMR1ZCUVdVc1pVRkJaU3haUVVGWkxGbEJUVEZETEdWQlFXVXNaVUZCWlN3d1FrRkROVUlzYTBKQlFXMUNMR3RDUVVOdVFpeHpRa0ZCZFVJc2MwSkJRM1pDTEd0Q1FVRnRRaXhyUWtGRGJrSXNOa0pCUVRoQ0xEWkNRVU01UWl4clFrRkJiVUlzYTBKQlEyNUNMSFZDUVVGM1FpeDVRa0ZITVVJc1pVRkJaU3huUWtGQlowSXNORUpCUXpkQ0xHMUNRVWRHTEdWQlFXVXNaMEpCUVdkQ0xIbENRVU0zUWl4MVFrRkhSaXhsUVVGbExHZENRVUZuUWl4clFrRkROMElzTUVKQlMwWXNaVUZCWlN4TlFVRk5MRmxCUVZrc05FSkJSV3BETEdWQlFXVXNaMEpCUVdkQ0xIZENRVU0zUWl4UFFVRlZMR1ZCUTFZc1MwRkJVU3hoUVVOU0xFOUJRVlVzWlVGRFZpeEpRVUZQTEZsQlExQXNUVUZCVXl4alFVTlVMRTlCUVZVc1pVRkRWaXhQUVVGVkxHVkJRMVlzVTBGQldTeHBRa0ZGV2l4TFFVRlJMSGRDUVVGM1FpeFJRVU5vUXl4TFFVRlJMSGRDUVVGM1FpeFJRVU5vUXl4TFFVRlJMSGRDUVVGM1FpeFZRVWRzUXl4bFFVRmxMRmxCUVZrc2QwSkJRWGRDTEhWQ1FVTnVSQ3hsUVVGbExGbEJRVmtzZDBKQlFYZENMSE5DUVVWdVJDeGxRVUZsTEdWQlFXVXNjVUpCUVhGQ0xGbEJSVzVFTEdWQlFXVXNVVUZCVVN3eVFrRkRja0lzTWtKQlJVWXNaVUZCWlN4UlFVRlJMSFZDUVVOeVFpdzRRa0ZIUml4bFFVRmxMRlZCUVZVc01rSkJRM1pDTEhGQ1FVRnhRaXhWUVVOdVFpeHhRa0ZCY1VJc2NVSkJRM0pDTEhGQ1FVRnhRaXh6UWtGSGVrSXNaVUZCWlN4VlFVRlZMR3RDUVVGclFpeHJRMEZETTBNc1pVRkJaU3hoUVVGaExHMUNRVUZ0UWl4elFrRkZNME1zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZVc1EwRkRla01zUjBGQlNTeExRVUZQTEhGQ1FVRnhRaXhYUVVGaExFOUJRVThzVTBGQlV5eE5RVUZUTEVWQlEzUkZMRWxCUVVrc2JVSkJRWEZDTEV0QlFVc3NTMEZCVFN4RFFVTnNReXhIUVVGSkxHdENRVUZ0UWl4UlFVRlJMSEZDUVVNdlFpeHJRa0ZCYVVJc1ZVRjBTWFpDTEVkQlFVa3NkMEpCUVhsQ0xGRkJRVkVzTkVKQlEycERMR3RDUVVGdlFpeFJRVUZSTEhWQ1FVTTFRaXh4UWtGQmRVSXNVVUZCVVN3d1FrRkRMMElzZDBKQlFUQkNMRkZCUVZFc05rSkJRMnhETEhOQ1FVRjNRaXhSUVVGUkxESkNRVU5vUXl4eFFrRkJkVUlzVVVGQlVTd3dRa0ZETDBJc2MwSkJRWGRDTEZGQlFWRXNNa0pCUTJoRExEWkNRVUVyUWl4UlFVRlJMR3REUVVOMlF5d3lRa0ZCTmtJc1VVRkJVU3huUTBGRGNrTXNWMEZCWVN4UlFVRlJMR2RDUVVOeVFpeHBRMEZEUml4UlFVRlJMSE5EUVVOT0xEWkNRVUVyUWl4UlFVRlJMR3REUVVOMlF5eHJRa0ZCYjBJc1VVRkJVU3gxUWtGRE5VSXNaVUZCYVVJc1VVRkJVU3h2UWtGRGVrSXNZVUZCWlN4UlFVRlJMR3RDUVVOMlFpeFpRVUZqTEZGQlFWRXNhVUpCUTNSQ0xIRkNRVUYxUWl4UlFVRlJMREJDUVVNdlFpeGxRVUZwUWl4UlFVRlJMRzlDUVVONlFpeGpRVUZuUWl4UlFVRlJMRzFDUVVONFFpeGxRVUZwUWl4UlFVRlJMRzlDUVVONlFpeGxRVUZwUWl4UlFVRlJMRzlDUVVONlFpeHBRa0ZCYlVJc1VVRkJVU3h6UWtGRE0wSXNjMEpCUVhkQ0xGRkJRVkVzTWtKQlEyaERMR0ZCUVdVc1VVRkJVU3hyUWtGRGRrSXNiVUpCUVhGQ0xGRkJRVkVzZDBKQlF6ZENMR1ZCUVdsQ0xGRkJRVkVzYjBKQlEzcENMSEZDUVVGMVFpeFJRVUZSTERCQ1FVTXZRaXhYUVVGaExGRkJRVkVzWjBKQlEzSkNMREJDUVVFMFFpeFJRVUZSTEN0Q1FVTndReXhyUWtGQmIwSXNVVUZCVVN4MVFrRkROVUlzY1VKQlFYVkNMRkZCUVZFc01FSkJReTlDTEd0Q1FVRnZRaXhSUVVGUkxIVkNRVU0xUWl4eFFrRkJkVUlzVVVGQlVTd3dRa0ZGTDBJc2QwSkJRVEJDTEZGQlFWRXNORUpCZDBkMFF5eFJRVUZQTEZOQlEwd3NUMEZCVVNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBSR1ZtWVhWc2RFbHVhbVZqZEdsdmJseHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRUpsWm05eVpVbHVjSFYwUlhabGJuUlFiSFZuYVc0Z1BTQnlaWEYxYVhKbEtGd2lMaTlDWldadmNtVkpibkIxZEVWMlpXNTBVR3gxWjJsdVhDSXBPMXh1ZG1GeUlFTm9ZVzVuWlVWMlpXNTBVR3gxWjJsdUlEMGdjbVZ4ZFdseVpTaGNJaTR2UTJoaGJtZGxSWFpsYm5SUWJIVm5hVzVjSWlrN1hHNTJZWElnUTJ4cFpXNTBVbVZoWTNSU2IyOTBTVzVrWlhnZ1BTQnlaWEYxYVhKbEtGd2lMaTlEYkdsbGJuUlNaV0ZqZEZKdmIzUkpibVJsZUZ3aUtUdGNiblpoY2lCRVpXWmhkV3gwUlhabGJuUlFiSFZuYVc1UGNtUmxjaUE5SUhKbGNYVnBjbVVvWENJdUwwUmxabUYxYkhSRmRtVnVkRkJzZFdkcGJrOXlaR1Z5WENJcE8xeHVkbUZ5SUVWdWRHVnlUR1ZoZG1WRmRtVnVkRkJzZFdkcGJpQTlJSEpsY1hWcGNtVW9YQ0l1TDBWdWRHVnlUR1ZoZG1WRmRtVnVkRkJzZFdkcGJsd2lLVHRjYm5aaGNpQkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwwVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBYQ0lwTzF4dWRtRnlJRWhVVFV4RVQwMVFjbTl3WlhKMGVVTnZibVpwWnlBOUlISmxjWFZwY21Vb1hDSXVMMGhVVFV4RVQwMVFjbTl3WlhKMGVVTnZibVpwWjF3aUtUdGNiblpoY2lCTmIySnBiR1ZUWVdaaGNtbERiR2xqYTBWMlpXNTBVR3gxWjJsdUlEMGdjbVZ4ZFdseVpTaGNJaTR2VFc5aWFXeGxVMkZtWVhKcFEyeHBZMnRGZG1WdWRGQnNkV2RwYmx3aUtUdGNiblpoY2lCU1pXRmpkRUp5YjNkelpYSkRiMjF3YjI1bGJuUk5hWGhwYmlBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFFuSnZkM05sY2tOdmJYQnZibVZ1ZEUxcGVHbHVYQ0lwTzF4dWRtRnlJRkpsWVdOMFEyeGhjM01nUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVOc1lYTnpYQ0lwTzF4dWRtRnlJRkpsWVdOMFEyOXRjRzl1Wlc1MFFuSnZkM05sY2tWdWRtbHliMjV0Wlc1MElEMWNiaUFnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JEYjIxd2IyNWxiblJDY205M2MyVnlSVzUyYVhKdmJtMWxiblJjSWlrN1hHNTJZWElnVW1WaFkzUkVaV1poZFd4MFFtRjBZMmhwYm1kVGRISmhkR1ZuZVNBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJHVm1ZWFZzZEVKaGRHTm9hVzVuVTNSeVlYUmxaM2xjSWlrN1hHNTJZWElnVW1WaFkzUkVUMDFEYjIxd2IyNWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVSUFRVTnZiWEJ2Ym1WdWRGd2lLVHRjYm5aaGNpQlNaV0ZqZEVSUFRVSjFkSFJ2YmlBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJFOU5RblYwZEc5dVhDSXBPMXh1ZG1GeUlGSmxZV04wUkU5TlJtOXliU0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUkU5TlJtOXliVndpS1R0Y2JuWmhjaUJTWldGamRFUlBUVWx0WnlBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJFOU5TVzFuWENJcE8xeHVkbUZ5SUZKbFlXTjBSRTlOU1VSUGNHVnlZWFJwYjI1eklEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkVUMDFKUkU5d1pYSmhkR2x2Ym5OY0lpazdYRzUyWVhJZ1VtVmhZM1JFVDAxSlpuSmhiV1VnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVSUFRVbG1jbUZ0WlZ3aUtUdGNiblpoY2lCU1pXRmpkRVJQVFVsdWNIVjBJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JFVDAxSmJuQjFkRndpS1R0Y2JuWmhjaUJTWldGamRFUlBUVTl3ZEdsdmJpQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBSRTlOVDNCMGFXOXVYQ0lwTzF4dWRtRnlJRkpsWVdOMFJFOU5VMlZzWldOMElEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkVUMDFUWld4bFkzUmNJaWs3WEc1MllYSWdVbVZoWTNSRVQwMVVaWGgwWVhKbFlTQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBSRTlOVkdWNGRHRnlaV0ZjSWlrN1hHNTJZWElnVW1WaFkzUkVUMDFVWlhoMFEyOXRjRzl1Wlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkVUMDFVWlhoMFEyOXRjRzl1Wlc1MFhDSXBPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRndpS1R0Y2JuWmhjaUJTWldGamRFVjJaVzUwVEdsemRHVnVaWElnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVWMlpXNTBUR2x6ZEdWdVpYSmNJaWs3WEc1MllYSWdVbVZoWTNSSmJtcGxZM1JwYjI0Z1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFbHVhbVZqZEdsdmJsd2lLVHRjYm5aaGNpQlNaV0ZqZEVsdWMzUmhibU5sU0dGdVpHeGxjeUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wU1c1emRHRnVZMlZJWVc1a2JHVnpYQ0lwTzF4dWRtRnlJRkpsWVdOMFRXOTFiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEUxdmRXNTBYQ0lwTzF4dWRtRnlJRkpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNGdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1WENJcE8xeHVkbUZ5SUZObGJHVmpkRVYyWlc1MFVHeDFaMmx1SUQwZ2NtVnhkV2x5WlNoY0lpNHZVMlZzWldOMFJYWmxiblJRYkhWbmFXNWNJaWs3WEc1MllYSWdVMlZ5ZG1WeVVtVmhZM1JTYjI5MFNXNWtaWGdnUFNCeVpYRjFhWEpsS0Z3aUxpOVRaWEoyWlhKU1pXRmpkRkp2YjNSSmJtUmxlRndpS1R0Y2JuWmhjaUJUYVcxd2JHVkZkbVZ1ZEZCc2RXZHBiaUE5SUhKbGNYVnBjbVVvWENJdUwxTnBiWEJzWlVWMlpXNTBVR3gxWjJsdVhDSXBPMXh1ZG1GeUlGTldSMFJQVFZCeWIzQmxjblI1UTI5dVptbG5JRDBnY21WeGRXbHlaU2hjSWk0dlUxWkhSRTlOVUhKdmNHVnlkSGxEYjI1bWFXZGNJaWs3WEc1Y2JuWmhjaUJqY21WaGRHVkdkV3hzVUdGblpVTnZiWEJ2Ym1WdWRDQTlJSEpsY1hWcGNtVW9YQ0l1TDJOeVpXRjBaVVoxYkd4UVlXZGxRMjl0Y0c5dVpXNTBYQ0lwTzF4dVhHNW1kVzVqZEdsdmJpQmhkWFJ2UjJWdVpYSmhkR1ZYY21Gd2NHVnlRMnhoYzNNb2RIbHdaU2tnZTF4dUlDQnlaWFIxY200Z1VtVmhZM1JEYkdGemN5NWpjbVZoZEdWRGJHRnpjeWg3WEc0Z0lDQWdkR0ZuVG1GdFpUb2dkSGx3WlM1MGIxVndjR1Z5UTJGelpTZ3BMRnh1SUNBZ0lISmxibVJsY2pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkpsWVdOMFJXeGxiV1Z1ZENoY2JpQWdJQ0FnSUNBZ2RIbHdaU3hjYmlBZ0lDQWdJQ0FnYm5Wc2JDeGNiaUFnSUNBZ0lDQWdiblZzYkN4Y2JpQWdJQ0FnSUNBZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnYm5Wc2JDeGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGJtcGxZM1FvS1NCN1hHNGdJRkpsWVdOMFNXNXFaV04wYVc5dUxrVjJaVzUwUlcxcGRIUmxjaTVwYm1wbFkzUlNaV0ZqZEVWMlpXNTBUR2x6ZEdWdVpYSW9YRzRnSUNBZ1VtVmhZM1JGZG1WdWRFeHBjM1JsYm1WeVhHNGdJQ2s3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YW1WamRDQnRiMlIxYkdWeklHWnZjaUJ5WlhOdmJIWnBibWNnUkU5TklHaHBaWEpoY21Ob2VTQmhibVFnY0d4MVoybHVJRzl5WkdWeWFXNW5MbHh1SUNBZ0tpOWNiaUFnVW1WaFkzUkpibXBsWTNScGIyNHVSWFpsYm5SUWJIVm5hVzVJZFdJdWFXNXFaV04wUlhabGJuUlFiSFZuYVc1UGNtUmxjaWhFWldaaGRXeDBSWFpsYm5SUWJIVm5hVzVQY21SbGNpazdYRzRnSUZKbFlXTjBTVzVxWldOMGFXOXVMa1YyWlc1MFVHeDFaMmx1U0hWaUxtbHVhbVZqZEVsdWMzUmhibU5sU0dGdVpHeGxLRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6S1R0Y2JpQWdVbVZoWTNSSmJtcGxZM1JwYjI0dVJYWmxiblJRYkhWbmFXNUlkV0l1YVc1cVpXTjBUVzkxYm5Rb1VtVmhZM1JOYjNWdWRDazdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTnZiV1VnYVcxd2IzSjBZVzUwSUdWMlpXNTBJSEJzZFdkcGJuTWdhVzVqYkhWa1pXUWdZbmtnWkdWbVlYVnNkQ0FvZDJsMGFHOTFkQ0JvWVhacGJtY2dkRzhnY21WeGRXbHlaVnh1SUNBZ0tpQjBhR1Z0S1M1Y2JpQWdJQ292WEc0Z0lGSmxZV04wU1c1cVpXTjBhVzl1TGtWMlpXNTBVR3gxWjJsdVNIVmlMbWx1YW1WamRFVjJaVzUwVUd4MVoybHVjMEo1VG1GdFpTaDdYRzRnSUNBZ1UybHRjR3hsUlhabGJuUlFiSFZuYVc0NklGTnBiWEJzWlVWMlpXNTBVR3gxWjJsdUxGeHVJQ0FnSUVWdWRHVnlUR1ZoZG1WRmRtVnVkRkJzZFdkcGJqb2dSVzUwWlhKTVpXRjJaVVYyWlc1MFVHeDFaMmx1TEZ4dUlDQWdJRU5vWVc1blpVVjJaVzUwVUd4MVoybHVPaUJEYUdGdVoyVkZkbVZ1ZEZCc2RXZHBiaXhjYmlBZ0lDQk5iMkpwYkdWVFlXWmhjbWxEYkdsamEwVjJaVzUwVUd4MVoybHVPaUJOYjJKcGJHVlRZV1poY21sRGJHbGphMFYyWlc1MFVHeDFaMmx1TEZ4dUlDQWdJRk5sYkdWamRFVjJaVzUwVUd4MVoybHVPaUJUWld4bFkzUkZkbVZ1ZEZCc2RXZHBiaXhjYmlBZ0lDQkNaV1p2Y21WSmJuQjFkRVYyWlc1MFVHeDFaMmx1T2lCQ1pXWnZjbVZKYm5CMWRFVjJaVzUwVUd4MVoybHVYRzRnSUgwcE8xeHVYRzRnSUZKbFlXTjBTVzVxWldOMGFXOXVMazVoZEdsMlpVTnZiWEJ2Ym1WdWRDNXBibXBsWTNSSFpXNWxjbWxqUTI5dGNHOXVaVzUwUTJ4aGMzTW9YRzRnSUNBZ1VtVmhZM1JFVDAxRGIyMXdiMjVsYm5SY2JpQWdLVHRjYmx4dUlDQlNaV0ZqZEVsdWFtVmpkR2x2Ymk1T1lYUnBkbVZEYjIxd2IyNWxiblF1YVc1cVpXTjBWR1Y0ZEVOdmJYQnZibVZ1ZEVOc1lYTnpLRnh1SUNBZ0lGSmxZV04wUkU5TlZHVjRkRU52YlhCdmJtVnVkRnh1SUNBcE8xeHVYRzRnSUZKbFlXTjBTVzVxWldOMGFXOXVMazVoZEdsMlpVTnZiWEJ2Ym1WdWRDNXBibXBsWTNSQmRYUnZWM0poY0hCbGNpaGNiaUFnSUNCaGRYUnZSMlZ1WlhKaGRHVlhjbUZ3Y0dWeVEyeGhjM05jYmlBZ0tUdGNibHh1SUNBdkx5QlVhR2x6SUc1bFpXUnpJSFJ2SUdoaGNIQmxiaUJpWldadmNtVWdZM0psWVhSbFJuVnNiRkJoWjJWRGIyMXdiMjVsYm5Rb0tTQnZkR2hsY25kcGMyVWdkR2hsSUcxcGVHbHVYRzRnSUM4dklIZHZiaWQwSUdKbElHbHVZMngxWkdWa0xseHVJQ0JTWldGamRFbHVhbVZqZEdsdmJpNURiR0Z6Y3k1cGJtcGxZM1JOYVhocGJpaFNaV0ZqZEVKeWIzZHpaWEpEYjIxd2IyNWxiblJOYVhocGJpazdYRzVjYmlBZ1VtVmhZM1JKYm1wbFkzUnBiMjR1VG1GMGFYWmxRMjl0Y0c5dVpXNTBMbWx1YW1WamRFTnZiWEJ2Ym1WdWRFTnNZWE56WlhNb2UxeHVJQ0FnSUNkaWRYUjBiMjRuT2lCU1pXRmpkRVJQVFVKMWRIUnZiaXhjYmlBZ0lDQW5abTl5YlNjNklGSmxZV04wUkU5TlJtOXliU3hjYmlBZ0lDQW5hV1p5WVcxbEp6b2dVbVZoWTNSRVQwMUpabkpoYldVc1hHNGdJQ0FnSjJsdFp5YzZJRkpsWVdOMFJFOU5TVzFuTEZ4dUlDQWdJQ2RwYm5CMWRDYzZJRkpsWVdOMFJFOU5TVzV3ZFhRc1hHNGdJQ0FnSjI5d2RHbHZiaWM2SUZKbFlXTjBSRTlOVDNCMGFXOXVMRnh1SUNBZ0lDZHpaV3hsWTNRbk9pQlNaV0ZqZEVSUFRWTmxiR1ZqZEN4Y2JpQWdJQ0FuZEdWNGRHRnlaV0VuT2lCU1pXRmpkRVJQVFZSbGVIUmhjbVZoTEZ4dVhHNGdJQ0FnSjJoMGJXd25PaUJqY21WaGRHVkdkV3hzVUdGblpVTnZiWEJ2Ym1WdWRDZ25hSFJ0YkNjcExGeHVJQ0FnSUNkb1pXRmtKem9nWTNKbFlYUmxSblZzYkZCaFoyVkRiMjF3YjI1bGJuUW9KMmhsWVdRbktTeGNiaUFnSUNBblltOWtlU2M2SUdOeVpXRjBaVVoxYkd4UVlXZGxRMjl0Y0c5dVpXNTBLQ2RpYjJSNUp5bGNiaUFnZlNrN1hHNWNiaUFnVW1WaFkzUkpibXBsWTNScGIyNHVSRTlOVUhKdmNHVnlkSGt1YVc1cVpXTjBSRTlOVUhKdmNHVnlkSGxEYjI1bWFXY29TRlJOVEVSUFRWQnliM0JsY25SNVEyOXVabWxuS1R0Y2JpQWdVbVZoWTNSSmJtcGxZM1JwYjI0dVJFOU5VSEp2Y0dWeWRIa3VhVzVxWldOMFJFOU5VSEp2Y0dWeWRIbERiMjVtYVdjb1UxWkhSRTlOVUhKdmNHVnlkSGxEYjI1bWFXY3BPMXh1WEc0Z0lGSmxZV04wU1c1cVpXTjBhVzl1TGtWdGNIUjVRMjl0Y0c5dVpXNTBMbWx1YW1WamRFVnRjSFI1UTI5dGNHOXVaVzUwS0NkdWIzTmpjbWx3ZENjcE8xeHVYRzRnSUZKbFlXTjBTVzVxWldOMGFXOXVMbFZ3WkdGMFpYTXVhVzVxWldOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNG9YRzRnSUNBZ1VtVmhZM1JTWldOdmJtTnBiR1ZVY21GdWMyRmpkR2x2Ymx4dUlDQXBPMXh1SUNCU1pXRmpkRWx1YW1WamRHbHZiaTVWY0dSaGRHVnpMbWx1YW1WamRFSmhkR05vYVc1blUzUnlZWFJsWjNrb1hHNGdJQ0FnVW1WaFkzUkVaV1poZFd4MFFtRjBZMmhwYm1kVGRISmhkR1ZuZVZ4dUlDQXBPMXh1WEc0Z0lGSmxZV04wU1c1cVpXTjBhVzl1TGxKdmIzUkpibVJsZUM1cGJtcGxZM1JEY21WaGRHVlNaV0ZqZEZKdmIzUkpibVJsZUNoY2JpQWdJQ0JGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZEM1allXNVZjMlZFVDAwZ1AxeHVJQ0FnSUNBZ1EyeHBaVzUwVW1WaFkzUlNiMjkwU1c1a1pYZ3VZM0psWVhSbFVtVmhZM1JTYjI5MFNXNWtaWGdnT2x4dUlDQWdJQ0FnVTJWeWRtVnlVbVZoWTNSU2IyOTBTVzVrWlhndVkzSmxZWFJsVW1WaFkzUlNiMjkwU1c1a1pYaGNiaUFnS1R0Y2JseHVJQ0JTWldGamRFbHVhbVZqZEdsdmJpNURiMjF3YjI1bGJuUXVhVzVxWldOMFJXNTJhWEp2Ym0xbGJuUW9VbVZoWTNSRGIyMXdiMjVsYm5SQ2NtOTNjMlZ5Ulc1MmFYSnZibTFsYm5RcE8xeHVJQ0JTWldGamRFbHVhbVZqZEdsdmJpNUVUMDFEYjIxd2IyNWxiblF1YVc1cVpXTjBTVVJQY0dWeVlYUnBiMjV6S0ZKbFlXTjBSRTlOU1VSUGNHVnlZWFJwYjI1ektUdGNibHh1SUNCcFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJQ0FnZG1GeUlIVnliQ0E5SUNoRmVHVmpkWFJwYjI1RmJuWnBjbTl1YldWdWRDNWpZVzVWYzJWRVQwMGdKaVlnZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldZcElIeDhJQ2NuTzF4dUlDQWdJR2xtSUNnb0wxcy9KbDF5WldGamRGOXdaWEptWEZ4aUx5a3VkR1Z6ZENoMWNtd3BLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1VtVmhZM1JFWldaaGRXeDBVR1Z5WmlBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJHVm1ZWFZzZEZCbGNtWmNJaWs3WEc0Z0lDQWdJQ0JTWldGamRFUmxabUYxYkhSUVpYSm1Mbk4wWVhKMEtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCcGJtcGxZM1E2SUdsdWFtVmpkRnh1ZlR0Y2JpSmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMgPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xuXG52YXIgcGVyZm9ybWFuY2VOb3cgPSByZXF1aXJlKFwiLi9wZXJmb3JtYW5jZU5vd1wiKTtcblxuZnVuY3Rpb24gcm91bmRGbG9hdCh2YWwpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IodmFsICogMTAwKSAvIDEwMDtcbn1cblxuZnVuY3Rpb24gYWRkVmFsdWUob2JqLCBrZXksIHZhbCkge1xuICBvYmpba2V5XSA9IChvYmpba2V5XSB8fCAwKSArIHZhbDtcbn1cblxudmFyIFJlYWN0RGVmYXVsdFBlcmYgPSB7XG4gIF9hbGxNZWFzdXJlbWVudHM6IFtdLCAvLyBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QgaXMgdGhlIGN1cnJlbnQgb25lXG4gIF9tb3VudFN0YWNrOiBbMF0sXG4gIF9pbmplY3RlZDogZmFsc2UsXG5cbiAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghUmVhY3REZWZhdWx0UGVyZi5faW5qZWN0ZWQpIHtcbiAgICAgIFJlYWN0UGVyZi5pbmplY3Rpb24uaW5qZWN0TWVhc3VyZShSZWFjdERlZmF1bHRQZXJmLm1lYXN1cmUpO1xuICAgIH1cblxuICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggPSAwO1xuICAgIFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlID0gdHJ1ZTtcbiAgfSxcblxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IGZhbHNlO1xuICB9LFxuXG4gIGdldExhc3RNZWFzdXJlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gIH0sXG5cbiAgcHJpbnRFeGNsdXNpdmU6IGZ1bmN0aW9uKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpO1xuICAgIGNvbnNvbGUudGFibGUoc3VtbWFyeS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ0NvbXBvbmVudCBjbGFzcyBuYW1lJzogaXRlbS5jb21wb25lbnROYW1lLFxuICAgICAgICAnVG90YWwgaW5jbHVzaXZlIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5pbmNsdXNpdmUpLFxuICAgICAgICAnRXhjbHVzaXZlIG1vdW50IHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5leGNsdXNpdmUpLFxuICAgICAgICAnRXhjbHVzaXZlIHJlbmRlciB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyKSxcbiAgICAgICAgJ01vdW50IHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdSZW5kZXIgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5yZW5kZXIgLyBpdGVtLmNvdW50KSxcbiAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcbiAgICAgIH07XG4gICAgfSkpO1xuICAgIC8vIFRPRE86IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUoKSBkb2VzIG5vdCByZXR1cm4gdGhlIGNvcnJlY3RcbiAgICAvLyBudW1iZXIuXG4gIH0sXG5cbiAgcHJpbnRJbmNsdXNpdmU6IGZ1bmN0aW9uKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0SW5jbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpO1xuICAgIGNvbnNvbGUudGFibGUoc3VtbWFyeS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ093bmVyID4gY29tcG9uZW50JzogaXRlbS5jb21wb25lbnROYW1lLFxuICAgICAgICAnSW5jbHVzaXZlIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS50aW1lKSxcbiAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcbiAgICAgIH07XG4gICAgfSkpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ1RvdGFsIHRpbWU6JyxcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcydcbiAgICApO1xuICB9LFxuXG4gIGdldE1lYXN1cmVtZW50c1N1bW1hcnlNYXA6IGZ1bmN0aW9uKG1lYXN1cmVtZW50cykge1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkoXG4gICAgICBtZWFzdXJlbWVudHMsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICByZXR1cm4gc3VtbWFyeS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ093bmVyID4gY29tcG9uZW50JzogaXRlbS5jb21wb25lbnROYW1lLFxuICAgICAgICAnV2FzdGVkIHRpbWUgKG1zKSc6IGl0ZW0udGltZSxcbiAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcbiAgICAgIH07XG4gICAgfSk7XG4gIH0sXG5cbiAgcHJpbnRXYXN0ZWQ6IGZ1bmN0aW9uKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgY29uc29sZS50YWJsZShSZWFjdERlZmF1bHRQZXJmLmdldE1lYXN1cmVtZW50c1N1bW1hcnlNYXAobWVhc3VyZW1lbnRzKSk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAnVG90YWwgdGltZTonLFxuICAgICAgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJ1xuICAgICk7XG4gIH0sXG5cbiAgcHJpbnRET006IGZ1bmN0aW9uKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpO1xuICAgIGNvbnNvbGUudGFibGUoc3VtbWFyeS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgcmVzdWx0W0RPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FXSA9IGl0ZW0uaWQ7XG4gICAgICByZXN1bHRbJ3R5cGUnXSA9IGl0ZW0udHlwZTtcbiAgICAgIHJlc3VsdFsnYXJncyddID0gSlNPTi5zdHJpbmdpZnkoaXRlbS5hcmdzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSkpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ1RvdGFsIHRpbWU6JyxcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcydcbiAgICApO1xuICB9LFxuXG4gIF9yZWNvcmRXcml0ZTogZnVuY3Rpb24oaWQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzKSB7XG4gICAgLy8gVE9ETzogdG90YWxUaW1lIGlzbid0IHRoYXQgdXNlZnVsIHNpbmNlIGl0IGRvZXNuJ3QgY291bnQgcGFpbnRzL3JlZmxvd3NcbiAgICB2YXIgd3JpdGVzID1cbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZcbiAgICAgICAgLl9hbGxNZWFzdXJlbWVudHNbUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdXG4gICAgICAgIC53cml0ZXM7XG4gICAgd3JpdGVzW2lkXSA9IHdyaXRlc1tpZF0gfHwgW107XG4gICAgd3JpdGVzW2lkXS5wdXNoKHtcbiAgICAgIHR5cGU6IGZuTmFtZSxcbiAgICAgIHRpbWU6IHRvdGFsVGltZSxcbiAgICAgIGFyZ3M6IGFyZ3NcbiAgICB9KTtcbiAgfSxcblxuICBtZWFzdXJlOiBmdW5jdGlvbihtb2R1bGVOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7Zm9yICh2YXIgYXJncz1bXSwkX18wPTAsJF9fMT1hcmd1bWVudHMubGVuZ3RoOyRfXzA8JF9fMTskX18wKyspIGFyZ3MucHVzaChhcmd1bWVudHNbJF9fMF0pO1xuICAgICAgdmFyIHRvdGFsVGltZTtcbiAgICAgIHZhciBydjtcbiAgICAgIHZhciBzdGFydDtcblxuICAgICAgaWYgKGZuTmFtZSA9PT0gJ19yZW5kZXJOZXdSb290Q29tcG9uZW50JyB8fFxuICAgICAgICAgIGZuTmFtZSA9PT0gJ2ZsdXNoQmF0Y2hlZFVwZGF0ZXMnKSB7XG4gICAgICAgIC8vIEEgXCJtZWFzdXJlbWVudFwiIGlzIGEgc2V0IG9mIG1ldHJpY3MgcmVjb3JkZWQgZm9yIGVhY2ggZmx1c2guIFdlIHdhbnRcbiAgICAgICAgLy8gdG8gZ3JvdXAgdGhlIG1ldHJpY3MgZm9yIGEgZ2l2ZW4gZmx1c2ggdG9nZXRoZXIgc28gd2UgY2FuIGxvb2sgYXQgdGhlXG4gICAgICAgIC8vIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCBhbmQgdGhlIERPTSBvcGVyYXRpb25zIHRoYXQgYWN0dWFsbHlcbiAgICAgICAgLy8gaGFwcGVuZWQgdG8gZGV0ZXJtaW5lIHRoZSBhbW91bnQgb2YgXCJ3YXN0ZWQgd29ya1wiIHBlcmZvcm1lZC5cbiAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLnB1c2goe1xuICAgICAgICAgIGV4Y2x1c2l2ZToge30sXG4gICAgICAgICAgaW5jbHVzaXZlOiB7fSxcbiAgICAgICAgICByZW5kZXI6IHt9LFxuICAgICAgICAgIGNvdW50czoge30sXG4gICAgICAgICAgd3JpdGVzOiB7fSxcbiAgICAgICAgICBkaXNwbGF5TmFtZXM6IHt9LFxuICAgICAgICAgIHRvdGFsVGltZTogMFxuICAgICAgICB9KTtcbiAgICAgICAgc3RhcnQgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICBydiA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50c1tcbiAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMVxuICAgICAgICBdLnRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdfbW91bnRJbWFnZUludG9Ob2RlJyB8fFxuICAgICAgICAgIG1vZHVsZU5hbWUgPT09ICdSZWFjdERPTUlET3BlcmF0aW9ucycpIHtcbiAgICAgICAgc3RhcnQgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICBydiA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblxuICAgICAgICBpZiAoZm5OYW1lID09PSAnX21vdW50SW1hZ2VJbnRvTm9kZScpIHtcbiAgICAgICAgICB2YXIgbW91bnRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoYXJnc1sxXSk7XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUobW91bnRJRCwgZm5OYW1lLCB0b3RhbFRpbWUsIGFyZ3NbMF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGZuTmFtZSA9PT0gJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcycpIHtcbiAgICAgICAgICAvLyBzcGVjaWFsIGZvcm1hdFxuICAgICAgICAgIGFyZ3NbMF0uZm9yRWFjaChmdW5jdGlvbih1cGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB3cml0ZUFyZ3MgPSB7fTtcbiAgICAgICAgICAgIGlmICh1cGRhdGUuZnJvbUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5mcm9tSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50b0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy50b0luZGV4ID0gdXBkYXRlLnRvSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLnRleHRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy50ZXh0Q29udGVudCA9IHVwZGF0ZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUubWFya3VwSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLm1hcmt1cCA9IGFyZ3NbMV1bdXBkYXRlLm1hcmt1cEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKFxuICAgICAgICAgICAgICB1cGRhdGUucGFyZW50SUQsXG4gICAgICAgICAgICAgIHVwZGF0ZS50eXBlLFxuICAgICAgICAgICAgICB0b3RhbFRpbWUsXG4gICAgICAgICAgICAgIHdyaXRlQXJnc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBiYXNpYyBmb3JtYXRcbiAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShcbiAgICAgICAgICAgIGFyZ3NbMF0sXG4gICAgICAgICAgICBmbk5hbWUsXG4gICAgICAgICAgICB0b3RhbFRpbWUsXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChtb2R1bGVOYW1lID09PSAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnICYmIChcbiAgICAgICAgKC8vIFRPRE86IHJlY2VpdmVDb21wb25lbnQoKT9cbiAgICAgICAgKGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JyB8fFxuICAgICAgICBmbk5hbWUgPT09ICd1cGRhdGVDb21wb25lbnQnIHx8IGZuTmFtZSA9PT0gJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnKSkpKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvb3ROb2RlSUQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgP1xuICAgICAgICAgIGFyZ3NbMF0gOlxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIHZhciBpc1JlbmRlciA9IGZuTmFtZSA9PT0gJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnO1xuICAgICAgICB2YXIgaXNNb3VudCA9IGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JztcblxuICAgICAgICB2YXIgbW91bnRTdGFjayA9IFJlYWN0RGVmYXVsdFBlcmYuX21vdW50U3RhY2s7XG4gICAgICAgIHZhciBlbnRyeSA9IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50c1tcbiAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMVxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChpc1JlbmRlcikge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmNvdW50cywgcm9vdE5vZGVJRCwgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VudCkge1xuICAgICAgICAgIG1vdW50U3RhY2sucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkucmVuZGVyLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91bnQpIHtcbiAgICAgICAgICB2YXIgc3ViTW91bnRUaW1lID0gbW91bnRTdGFjay5wb3AoKTtcbiAgICAgICAgICBtb3VudFN0YWNrW21vdW50U3RhY2subGVuZ3RoIC0gMV0gKz0gdG90YWxUaW1lO1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmV4Y2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lIC0gc3ViTW91bnRUaW1lKTtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuaW5jbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW50cnkuZGlzcGxheU5hbWVzW3Jvb3ROb2RlSURdID0ge1xuICAgICAgICAgIGN1cnJlbnQ6IHRoaXMuZ2V0TmFtZSgpLFxuICAgICAgICAgIG93bmVyOiB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXIgP1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyLmdldE5hbWUoKSA6XG4gICAgICAgICAgICAnPHJvb3Q+J1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXNcbiAqL1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLy8gRG9uJ3QgdHJ5IHRvIHNhdmUgdXNlcnMgbGVzcyB0aGFuIDEuMm1zIChhIG51bWJlciBJIG1hZGUgdXApXG52YXIgRE9OVF9DQVJFX1RIUkVTSE9MRCA9IDEuMjtcbnZhciBET01fT1BFUkFUSU9OX1RZUEVTID0ge1xuICAnX21vdW50SW1hZ2VJbnRvTm9kZSc6ICdzZXQgaW5uZXJIVE1MJyxcbiAgSU5TRVJUX01BUktVUDogJ3NldCBpbm5lckhUTUwnLFxuICBNT1ZFX0VYSVNUSU5HOiAnbW92ZScsXG4gIFJFTU9WRV9OT0RFOiAncmVtb3ZlJyxcbiAgVEVYVF9DT05URU5UOiAnc2V0IHRleHRDb250ZW50JyxcbiAgJ3VwZGF0ZVByb3BlcnR5QnlJRCc6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgJ2RlbGV0ZVByb3BlcnR5QnlJRCc6ICdkZWxldGUgYXR0cmlidXRlJyxcbiAgJ3VwZGF0ZVN0eWxlc0J5SUQnOiAndXBkYXRlIHN0eWxlcycsXG4gICd1cGRhdGVJbm5lckhUTUxCeUlEJzogJ3NldCBpbm5lckhUTUwnLFxuICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEJzogJ3JlcGxhY2UnXG59O1xuXG5mdW5jdGlvbiBnZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKSB7XG4gIC8vIFRPRE86IHJldHVybiBudW1iZXIgb2YgRE9NIG9wcz8gY291bGQgYmUgbWlzbGVhZGluZy5cbiAgLy8gVE9ETzogbWVhc3VyZSBkcm9wcGVkIGZyYW1lcyBhZnRlciByZWNvbmNpbGU/XG4gIC8vIFRPRE86IGxvZyB0b3RhbCB0aW1lIG9mIGVhY2ggcmVjb25jaWxlIGFuZCB0aGUgdG9wLWxldmVsIGNvbXBvbmVudFxuICAvLyBjbGFzcyB0aGF0IHRyaWdnZXJlZCBpdC5cbiAgdmFyIHRvdGFsVGltZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHRvdGFsVGltZSArPSBtZWFzdXJlbWVudC50b3RhbFRpbWU7XG4gIH1cbiAgcmV0dXJuIHRvdGFsVGltZTtcbn1cblxuZnVuY3Rpb24gZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGl0ZW1zID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBpZDtcblxuICAgIGZvciAoaWQgaW4gbWVhc3VyZW1lbnQud3JpdGVzKSB7XG4gICAgICBtZWFzdXJlbWVudC53cml0ZXNbaWRdLmZvckVhY2goZnVuY3Rpb24od3JpdGUpIHtcbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHR5cGU6IERPTV9PUEVSQVRJT05fVFlQRVNbd3JpdGUudHlwZV0gfHwgd3JpdGUudHlwZSxcbiAgICAgICAgICBhcmdzOiB3cml0ZS5hcmdzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtcztcbn1cblxuZnVuY3Rpb24gZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcbiAgdmFyIGRpc3BsYXlOYW1lO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcbiAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuICAgICk7XG5cbiAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICAgIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSA9IGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdIHx8IHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICAgIGluY2x1c2l2ZTogMCxcbiAgICAgICAgZXhjbHVzaXZlOiAwLFxuICAgICAgICByZW5kZXI6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuICAgICAgaWYgKG1lYXN1cmVtZW50LnJlbmRlcltpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0ucmVuZGVyICs9IG1lYXN1cmVtZW50LnJlbmRlcltpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmluY2x1c2l2ZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoZGlzcGxheU5hbWUgaW4gY2FuZGlkYXRlcykge1xuICAgIGlmIChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0pO1xuICAgIH1cbiAgfVxuXG4gIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5leGNsdXNpdmUgLSBhLmV4Y2x1c2l2ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0SW5jbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMsIG9ubHlDbGVhbikge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgaW5jbHVzaXZlS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcbiAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuICAgICk7XG4gICAgdmFyIGNsZWFuQ29tcG9uZW50cztcblxuICAgIGlmIChvbmx5Q2xlYW4pIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50cyA9IGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgaWYgKG9ubHlDbGVhbiAmJiAhY2xlYW5Db21wb25lbnRzW2lkXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXTtcblxuICAgICAgLy8gSW5jbHVzaXZlIHRpbWUgaXMgbm90IHVzZWZ1bCBmb3IgbWFueSBjb21wb25lbnRzIHdpdGhvdXQga25vd2luZyB3aGVyZVxuICAgICAgLy8gdGhleSBhcmUgaW5zdGFudGlhdGVkLiBTbyB3ZSBhZ2dyZWdhdGUgaW5jbHVzaXZlIHRpbWUgd2l0aCBib3RoIHRoZVxuICAgICAgLy8gb3duZXIgYW5kIGN1cnJlbnQgZGlzcGxheU5hbWUgYXMgdGhlIGtleS5cbiAgICAgIGluY2x1c2l2ZUtleSA9IGRpc3BsYXlOYW1lLm93bmVyICsgJyA+ICcgKyBkaXNwbGF5TmFtZS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gPSBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBpbmNsdXNpdmVLZXksXG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0udGltZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKGluY2x1c2l2ZUtleSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcbiAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnRpbWUgLSBhLnRpbWU7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpIHtcbiAgLy8gRm9yIGEgZ2l2ZW4gcmVjb25jaWxlLCBsb29rIGF0IHdoaWNoIGNvbXBvbmVudHMgZGlkIG5vdCBhY3R1YWxseVxuICAvLyByZW5kZXIgYW55dGhpbmcgdG8gdGhlIERPTSBhbmQgcmV0dXJuIGEgbWFwcGluZyBvZiB0aGVpciBJRCB0b1xuICAvLyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdG9vayB0byByZW5kZXIgdGhlIGVudGlyZSBzdWJ0cmVlLlxuICB2YXIgY2xlYW5Db21wb25lbnRzID0ge307XG4gIHZhciBkaXJ0eUxlYWZJRHMgPSBPYmplY3Qua2V5cyhtZWFzdXJlbWVudC53cml0ZXMpO1xuICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG5cbiAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgdmFyIGlzRGlydHkgPSBmYWxzZTtcbiAgICAvLyBGb3IgZWFjaCBjb21wb25lbnQgdGhhdCByZW5kZXJlZCwgc2VlIGlmIGEgY29tcG9uZW50IHRoYXQgdHJpZ2dlcmVkXG4gICAgLy8gYSBET00gb3AgaXMgaW4gaXRzIHN1YnRyZWUuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJ0eUxlYWZJRHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChkaXJ0eUxlYWZJRHNbaV0uaW5kZXhPZihpZCkgPT09IDApIHtcbiAgICAgICAgaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzRGlydHkgJiYgbWVhc3VyZW1lbnQuY291bnRzW2lkXSA+IDApIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50c1tpZF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xlYW5Db21wb25lbnRzO1xufVxuXG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0ge1xuICBnZXRFeGNsdXNpdmVTdW1tYXJ5OiBnZXRFeGNsdXNpdmVTdW1tYXJ5LFxuICBnZXRJbmNsdXNpdmVTdW1tYXJ5OiBnZXRJbmNsdXNpdmVTdW1tYXJ5LFxuICBnZXRET01TdW1tYXJ5OiBnZXRET01TdW1tYXJ5LFxuICBnZXRUb3RhbFRpbWU6IGdldFRvdGFsVGltZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXM7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZGVmaW5lV2FybmluZ1Byb3BlcnR5KG9iamVjdCxrZXkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3Qsa2V5LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RvcmU/dGhpcy5fc3RvcmVba2V5XTpudWxsfSxzZXQ6ZnVuY3Rpb24odmFsdWUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSxcIkRvbid0IHNldCB0aGUgJXMgcHJvcGVydHkgb2YgdGhlIFJlYWN0IGVsZW1lbnQuIEluc3RlYWQsIHNwZWNpZnkgdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpbml0aWFsbHkgY3JlYXRpbmcgdGhlIGVsZW1lbnQuXCIsa2V5KTpudWxsLHRoaXMuX3N0b3JlW2tleV09dmFsdWV9fSl9ZnVuY3Rpb24gZGVmaW5lTXV0YXRpb25NZW1icmFuZShwcm90b3R5cGUpe3RyeXt2YXIgcHNldWRvRnJvemVuUHJvcGVydGllcz17cHJvcHM6ITB9O2Zvcih2YXIga2V5IGluIHBzZXVkb0Zyb3plblByb3BlcnRpZXMpZGVmaW5lV2FybmluZ1Byb3BlcnR5KHByb3RvdHlwZSxrZXkpO3VzZU11dGF0aW9uTWVtYnJhbmU9ITB9Y2F0Y2goeCl7fX12YXIgUmVhY3RDb250ZXh0PXJlcXVpcmUoXCIuL1JlYWN0Q29udGV4dFwiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKSxhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIiksUkVTRVJWRURfUFJPUFM9e2tleTohMCxyZWY6ITB9LHVzZU11dGF0aW9uTWVtYnJhbmU9ITEsUmVhY3RFbGVtZW50PWZ1bmN0aW9uKHR5cGUsa2V5LHJlZixvd25lcixjb250ZXh0LHByb3BzKXtpZih0aGlzLnR5cGU9dHlwZSx0aGlzLmtleT1rZXksdGhpcy5yZWY9cmVmLHRoaXMuX293bmVyPW93bmVyLHRoaXMuX2NvbnRleHQ9Y29udGV4dCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt0aGlzLl9zdG9yZT17cHJvcHM6cHJvcHMsb3JpZ2luYWxQcm9wczphc3NpZ24oe30scHJvcHMpfTt0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuX3N0b3JlLFwidmFsaWRhdGVkXCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwfSl9Y2F0Y2goeCl7fWlmKHRoaXMuX3N0b3JlLnZhbGlkYXRlZD0hMSx1c2VNdXRhdGlvbk1lbWJyYW5lKXJldHVybiB2b2lkIE9iamVjdC5mcmVlemUodGhpcyl9dGhpcy5wcm9wcz1wcm9wc307UmVhY3RFbGVtZW50LnByb3RvdHlwZT17X2lzUmVhY3RFbGVtZW50OiEwfSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZkZWZpbmVNdXRhdGlvbk1lbWJyYW5lKFJlYWN0RWxlbWVudC5wcm90b3R5cGUpLFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKHR5cGUsY29uZmlnLGNoaWxkcmVuKXt2YXIgcHJvcE5hbWUscHJvcHM9e30sa2V5PW51bGwscmVmPW51bGw7aWYobnVsbCE9Y29uZmlnKXtyZWY9dm9pZCAwPT09Y29uZmlnLnJlZj9udWxsOmNvbmZpZy5yZWYsa2V5PXZvaWQgMD09PWNvbmZpZy5rZXk/bnVsbDpcIlwiK2NvbmZpZy5rZXk7Zm9yKHByb3BOYW1lIGluIGNvbmZpZyljb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpJiYhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpJiYocHJvcHNbcHJvcE5hbWVdPWNvbmZpZ1twcm9wTmFtZV0pfXZhciBjaGlsZHJlbkxlbmd0aD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWNoaWxkcmVuTGVuZ3RoKXByb3BzLmNoaWxkcmVuPWNoaWxkcmVuO2Vsc2UgaWYoY2hpbGRyZW5MZW5ndGg+MSl7Zm9yKHZhciBjaGlsZEFycmF5PUFycmF5KGNoaWxkcmVuTGVuZ3RoKSxpPTA7Y2hpbGRyZW5MZW5ndGg+aTtpKyspY2hpbGRBcnJheVtpXT1hcmd1bWVudHNbaSsyXTtwcm9wcy5jaGlsZHJlbj1jaGlsZEFycmF5fWlmKHR5cGUmJnR5cGUuZGVmYXVsdFByb3BzKXt2YXIgZGVmYXVsdFByb3BzPXR5cGUuZGVmYXVsdFByb3BzO2Zvcihwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpXCJ1bmRlZmluZWRcIj09dHlwZW9mIHByb3BzW3Byb3BOYW1lXSYmKHByb3BzW3Byb3BOYW1lXT1kZWZhdWx0UHJvcHNbcHJvcE5hbWVdKX1yZXR1cm4gbmV3IFJlYWN0RWxlbWVudCh0eXBlLGtleSxyZWYsUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCxSZWFjdENvbnRleHQuY3VycmVudCxwcm9wcyl9LFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKHR5cGUpe3ZhciBmYWN0b3J5PVJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCx0eXBlKTtyZXR1cm4gZmFjdG9yeS50eXBlPXR5cGUsZmFjdG9yeX0sUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzPWZ1bmN0aW9uKG9sZEVsZW1lbnQsbmV3UHJvcHMpe3ZhciBuZXdFbGVtZW50PW5ldyBSZWFjdEVsZW1lbnQob2xkRWxlbWVudC50eXBlLG9sZEVsZW1lbnQua2V5LG9sZEVsZW1lbnQucmVmLG9sZEVsZW1lbnQuX293bmVyLG9sZEVsZW1lbnQuX2NvbnRleHQsbmV3UHJvcHMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihuZXdFbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQ9b2xkRWxlbWVudC5fc3RvcmUudmFsaWRhdGVkKSxuZXdFbGVtZW50fSxSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGVsZW1lbnQsY29uZmlnLGNoaWxkcmVuKXt2YXIgcHJvcE5hbWUscHJvcHM9YXNzaWduKHt9LGVsZW1lbnQucHJvcHMpLGtleT1lbGVtZW50LmtleSxyZWY9ZWxlbWVudC5yZWYsb3duZXI9ZWxlbWVudC5fb3duZXI7aWYobnVsbCE9Y29uZmlnKXt2b2lkIDAhPT1jb25maWcucmVmJiYocmVmPWNvbmZpZy5yZWYsb3duZXI9UmVhY3RDdXJyZW50T3duZXIuY3VycmVudCksdm9pZCAwIT09Y29uZmlnLmtleSYmKGtleT1cIlwiK2NvbmZpZy5rZXkpO2Zvcihwcm9wTmFtZSBpbiBjb25maWcpY29uZmlnLmhhc093blByb3BlcnR5KHByb3BOYW1lKSYmIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSYmKHByb3BzW3Byb3BOYW1lXT1jb25maWdbcHJvcE5hbWVdKX12YXIgY2hpbGRyZW5MZW5ndGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jaGlsZHJlbkxlbmd0aClwcm9wcy5jaGlsZHJlbj1jaGlsZHJlbjtlbHNlIGlmKGNoaWxkcmVuTGVuZ3RoPjEpe2Zvcih2YXIgY2hpbGRBcnJheT1BcnJheShjaGlsZHJlbkxlbmd0aCksaT0wO2NoaWxkcmVuTGVuZ3RoPmk7aSsrKWNoaWxkQXJyYXlbaV09YXJndW1lbnRzW2krMl07cHJvcHMuY2hpbGRyZW49Y2hpbGRBcnJheX1yZXR1cm4gbmV3IFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsa2V5LHJlZixvd25lcixlbGVtZW50Ll9jb250ZXh0LHByb3BzKX0sUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50PWZ1bmN0aW9uKG9iamVjdCl7dmFyIGlzRWxlbWVudD0hKCFvYmplY3R8fCFvYmplY3QuX2lzUmVhY3RFbGVtZW50KTtyZXR1cm4gaXNFbGVtZW50fSxtb2R1bGUuZXhwb3J0cz1SZWFjdEVsZW1lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRmJHVnRaVzUwTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRlhRU3haUVc5Q1FTeFRRVUZUTEhWQ1FVRnpRaXhQUVVGUkxFdEJRM0pETEU5QlFVOHNaVUZCWlN4UFFVRlJMRXRCUlRWQ0xHTkJRV01zUlVGRFpDeFpRVUZaTEVWQlJWb3NTVUZCU3l4WFFVTklMRTFCUVVzc1RVRkJTeXhQUVVkSUxFdEJRVXNzVDBGQlR5eExRVVpXTEUxQlMxZ3NTVUZCU3l4VFFVRlRMRTlCUTFnc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVMEZEZGtNc1JVRkRRU3d3U0VGRlFTeExRVU5GTEV0QlEwb3NTMEZCU3l4UFFVRlBMRXRCUVU4c1UwRnBRbnBDTEZGQlFWTXNkMEpCUVhWQ0xGZEJRemxDTEVsQlEwVXNSMEZCU1N4NVFrRkRSaXhQUVVGUExFVkJSVlFzUzBGQlN5eEhRVUZKTEU5QlFVOHNkMEpCUTJRc2MwSkJRWE5DTEZWQlFWY3NTVUZGYmtNc2MwSkJRWE5DTEVWQlEzUkNMRTFCUVU4c1MwRm9SVmdzUjBGQlNTeGpRVUZsTEZGQlFWRXNhMEpCUTNaQ0xHdENRVUZ2UWl4UlFVRlJMSFZDUVVVMVFpeFBRVUZUTEZGQlFWRXNiVUpCUTJwQ0xGRkJRVlVzVVVGQlVTeGhRVVZzUWl4blFrRkRSaXhMUVVGTExFVkJRMHdzUzBGQlN5eEhRWFZEU0N4eFFrRkJjMElzUlVGblEzUkNMR0ZCUVdVc1UwRkJVeXhMUVVGTkxFbEJRVXNzU1VGQlN5eE5RVUZQTEZGQlFWTXNUMEZoTVVRc1IwRllRU3hMUVVGTExFdEJRVThzUzBGRFdpeExRVUZMTEVsQlFVMHNTVUZEV0N4TFFVRkxMRWxCUVUwc1NVRkhXQ3hMUVVGTExFOUJRVk1zVFVGSlpDeExRVUZMTEZOQlFWY3NVVUZGV2l4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZTeERRVXQ2UXl4TFFVRkxMRkZCUVZVc1RVRkJUeXhOUVVGUExHTkJRV1VzVlVGQlZ5eFBRVTEyUkN4TFFVTkZMRTlCUVU4c1pVRkJaU3hMUVVGTExFOUJRVkVzWVVGRGFrTXNZMEZCWXl4RlFVTmtMRmxCUVZrc1JVRkRXaXhWUVVGVkxFbEJSVm9zVFVGQlR5eEpRVTlVTEVkQlRFRXNTMEZCU3l4UFFVRlBMRmRCUVZrc1JVRkxjRUlzYjBKQlJVWXNWMEZFUVN4UlFVRlBMRTlCUVU4c1RVRkxiRUlzUzBGQlN5eE5RVUZSTEUxQlMyWXNZMEZCWVN4WFFVTllMR2xDUVVGcFFpeEhRVWRtTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hWUVVNdlFpeDFRa0ZCZFVJc1lVRkJZU3hYUVVkMFF5eGhRVUZoTEdOQlFXZENMRk5CUVZNc1MwRkJUU3hQUVVGUkxGVkJRMnhFTEVkQlFVa3NWVUZIUVN4VFFVVkJMRWxCUVUwc1MwRkRUaXhKUVVGTkxFbEJSVllzU1VGQll5eE5RVUZXTEU5QlFXZENMRU5CUTJ4Q0xFbEJRWEZDTEZOQlFXWXNUMEZCVHl4SlFVRnZRaXhMUVVGUExFOUJRVThzU1VGREwwTXNTVUZCY1VJc1UwRkJaaXhQUVVGUExFbEJRVzlDTEV0QlFVOHNSMEZCU3l4UFFVRlBMRWRCUlhCRUxFdEJRVXNzVjBGQldTeFJRVU5ZTEU5QlFVOHNaVUZCWlN4WlFVTnlRaXhsUVVGbExHVkJRV1VzV1VGRGFrTXNUVUZCVFN4VlFVRlpMRTlCUVU4c1YwRlBMMElzUjBGQlNTeG5Ra0ZCYVVJc1ZVRkJWU3hQUVVGVExFTkJRM2hETEVsQlFYVkNMRWxCUVc1Q0xHVkJRMFlzVFVGQlRTeFRRVUZYTEdGQlExb3NTVUZCU1N4bFFVRnBRaXhGUVVGSExFTkJSVGRDTEVsQlFVc3NSMEZFUkN4WlFVRmhMRTFCUVUwc1owSkJRMlFzUlVGQlNTeEZRVUZQTEdWQlFVb3NSVUZCYjBJc1NVRkRiRU1zVjBGQlZ5eEhRVUZMTEZWQlFWVXNSVUZCU1N4RlFVVm9ReXhQUVVGTkxGTkJRVmNzVjBGSmJrSXNSMEZCU1N4TlFVRlJMRXRCUVVzc1lVRkJZeXhEUVVNM1FpeEhRVUZKTEdOQlFXVXNTMEZCU3l4WlFVTjRRaXhMUVVGTExGZEJRVmtzWTBGRFowSXNiVUpCUVhCQ0xFOUJRVTBzV1VGRFppeE5RVUZOTEZWQlFWa3NZVUZCWVN4WFFVdHlReXhOUVVGUExFbEJRVWtzWTBGRFZDeExRVU5CTEVsQlEwRXNTVUZEUVN4clFrRkJhMElzVVVGRGJFSXNZVUZCWVN4UlFVTmlMRkZCU1Vvc1lVRkJZU3hqUVVGblFpeFRRVUZUTEUxQlEzQkRMRWRCUVVrc1UwRkJWU3hoUVVGaExHTkJRV01zUzBGQlN5eExRVUZOTEV0QlQzQkVMRTlCUkVFc1UwRkJVU3hMUVVGUExFdEJRMUlzVTBGSFZDeGhRVUZoTEhGQ1FVRjFRaXhUUVVGVExGZEJRVmtzVlVGRGRrUXNSMEZCU1N4WlFVRmhMRWRCUVVrc1kwRkRia0lzVjBGQlZ5eExRVU5ZTEZkQlFWY3NTVUZEV0N4WFFVRlhMRWxCUTFnc1YwRkJWeXhQUVVOWUxGZEJRVmNzVTBGRFdDeFRRVTlHTEU5QlNra3NaVUZCYVVJc1VVRkJVU3hKUVVGSkxGZEJSUzlDTEZkQlFWY3NUMEZCVHl4VlFVRlpMRmRCUVZjc1QwRkJUeXhYUVVVelF5eFpRVWRVTEdGQlFXRXNZVUZCWlN4VFFVRlRMRkZCUVZNc1QwRkJVU3hWUVVOd1JDeEhRVUZKTEZWQlIwRXNUVUZCVVN4VlFVRlhMRkZCUVZFc1QwRkhNMElzU1VGQlRTeFJRVUZSTEVsQlEyUXNTVUZCVFN4UlFVRlJMRWxCUjJRc1RVRkJVU3hSUVVGUkxFMUJSWEJDTEVsQlFXTXNUVUZCVml4UFFVRm5RaXhEUVVORExGTkJRV1lzVDBGQlR5eE5RVVZVTEVsQlFVMHNUMEZCVHl4SlFVTmlMRTFCUVZFc2EwSkJRV3RDTEZOQlJWUXNVMEZCWml4UFFVRlBMRTFCUTFRc1NVRkJUU3hIUVVGTExFOUJRVThzU1VGSGNFSXNTMEZCU3l4WFFVRlpMRkZCUTFnc1QwRkJUeXhsUVVGbExGbEJRM0pDTEdWQlFXVXNaVUZCWlN4WlFVTnFReXhOUVVGTkxGVkJRVmtzVDBGQlR5eFhRVTh2UWl4SFFVRkpMR2RDUVVGcFFpeFZRVUZWTEU5QlFWTXNRMEZEZUVNc1NVRkJkVUlzU1VGQmJrSXNaVUZEUml4TlFVRk5MRk5CUVZjc1lVRkRXaXhKUVVGSkxHVkJRV2xDTEVWQlFVY3NRMEZGTjBJc1NVRkJTeXhIUVVSRUxGbEJRV0VzVFVGQlRTeG5Ra0ZEWkN4RlFVRkpMRVZCUVU4c1pVRkJTaXhGUVVGdlFpeEpRVU5zUXl4WFFVRlhMRWRCUVVzc1ZVRkJWU3hGUVVGSkxFVkJSV2hETEU5QlFVMHNVMEZCVnl4WFFVZHVRaXhOUVVGUExFbEJRVWtzWTBGRFZDeFJRVUZSTEV0QlExSXNTVUZEUVN4SlFVTkJMRTFCUTBFc1VVRkJVU3hUUVVOU0xGRkJVMG9zWVVGQllTeGxRVUZwUWl4VFFVRlRMRkZCUzNKRExFZEJRVWtzWTBGQlpTeFRRVUZWTEU5QlFVOHNaMEpCVFhCRExFOUJRVThzV1VGSFZDeFBRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UUXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlNaV0ZqZEVWc1pXMWxiblJjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCU1pXRmpkRU52Ym5SbGVIUWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRU52Ym5SbGVIUmNJaWs3WEc1MllYSWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRU4xY25KbGJuUlBkMjVsY2x3aUtUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb1hDSXVMMDlpYW1WamRDNWhjM05wWjI1Y0lpazdYRzUyWVhJZ2QyRnlibWx1WnlBOUlISmxjWFZwY21Vb1hDSXVMM2RoY201cGJtZGNJaWs3WEc1Y2JuWmhjaUJTUlZORlVsWkZSRjlRVWs5UVV5QTlJSHRjYmlBZ2EyVjVPaUIwY25WbExGeHVJQ0J5WldZNklIUnlkV1ZjYm4wN1hHNWNiaThxS2x4dUlDb2dWMkZ5YmlCbWIzSWdiWFYwWVhScGIyNXpMbHh1SUNwY2JpQXFJRUJwYm5SbGNtNWhiRnh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc5aWFtVmpkRnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVWeHVJQ292WEc1bWRXNWpkR2x2YmlCa1pXWnBibVZYWVhKdWFXNW5VSEp2Y0dWeWRIa29iMkpxWldOMExDQnJaWGtwSUh0Y2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c5aWFtVmpkQ3dnYTJWNUxDQjdYRzVjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNWNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5emRHOXlaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEc5eVpWdHJaWGxkTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnZDJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ2RFYjI1Y1hDZDBJSE5sZENCMGFHVWdKWE1nY0hKdmNHVnlkSGtnYjJZZ2RHaGxJRkpsWVdOMElHVnNaVzFsYm5RdUlFbHVjM1JsWVdRc0lDY2dLMXh1SUNBZ0lDQWdJQ0FuYzNCbFkybG1lU0IwYUdVZ1kyOXljbVZqZENCMllXeDFaU0IzYUdWdUlHbHVhWFJwWVd4c2VTQmpjbVZoZEdsdVp5QjBhR1VnWld4bGJXVnVkQzRuTEZ4dUlDQWdJQ0FnSUNCclpYbGNiaUFnSUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNBZ0lIUm9hWE11WDNOMGIzSmxXMnRsZVYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdmU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dWR2hwY3lCcGN5QjFjR1JoZEdWa0lIUnZJSFJ5ZFdVZ2FXWWdkR2hsSUcxbGJXSnlZVzVsSUdseklITjFZMk5sYzNObWRXeHNlU0JqY21WaGRHVmtMbHh1SUNvdlhHNTJZWElnZFhObFRYVjBZWFJwYjI1TlpXMWljbUZ1WlNBOUlHWmhiSE5sTzF4dVhHNHZLaXBjYmlBcUlGZGhjbTRnWm05eUlHMTFkR0YwYVc5dWN5NWNiaUFxWEc0Z0tpQkFhVzUwWlhKdVlXeGNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JsYkdWdFpXNTBYRzRnS2k5Y2JtWjFibU4wYVc5dUlHUmxabWx1WlUxMWRHRjBhVzl1VFdWdFluSmhibVVvY0hKdmRHOTBlWEJsS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlIQnpaWFZrYjBaeWIzcGxibEJ5YjNCbGNuUnBaWE1nUFNCN1hHNGdJQ0FnSUNCd2NtOXdjem9nZEhKMVpWeHVJQ0FnSUgwN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJSEJ6WlhWa2IwWnliM3BsYmxCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lHUmxabWx1WlZkaGNtNXBibWRRY205d1pYSjBlU2h3Y205MGIzUjVjR1VzSUd0bGVTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhWelpVMTFkR0YwYVc5dVRXVnRZbkpoYm1VZ1BTQjBjblZsTzF4dUlDQjlJR05oZEdOb0lDaDRLU0I3WEc0Z0lDQWdMeThnU1VVZ2QybHNiQ0JtWVdsc0lHOXVJR1JsWm1sdVpWQnliM0JsY25SNVhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkNZWE5sSUdOdmJuTjBjblZqZEc5eUlHWnZjaUJoYkd3Z1VtVmhZM1FnWld4bGJXVnVkSE11SUZSb2FYTWdhWE1nYjI1c2VTQjFjMlZrSUhSdklHMWhhMlVnZEdocGMxeHVJQ29nZDI5eWF5QjNhWFJvSUdFZ1pIbHVZVzFwWXlCcGJuTjBZVzVqWlc5bUlHTm9aV05yTGlCT2IzUm9hVzVuSUhOb2IzVnNaQ0JzYVhabElHOXVJSFJvYVhNZ2NISnZkRzkwZVhCbExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN0tuMGdkSGx3WlZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOGIySnFaV04wZlNCeVpXWmNiaUFxSUVCd1lYSmhiU0I3S24wZ2EyVjVYRzRnS2lCQWNHRnlZVzBnZXlwOUlIQnliM0J6WEc0Z0tpQkFhVzUwWlhKdVlXeGNiaUFxTDF4dWRtRnlJRkpsWVdOMFJXeGxiV1Z1ZENBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUd0bGVTd2djbVZtTENCdmQyNWxjaXdnWTI5dWRHVjRkQ3dnY0hKdmNITXBJSHRjYmlBZ0x5OGdRblZwYkhRdGFXNGdjSEp2Y0dWeWRHbGxjeUIwYUdGMElHSmxiRzl1WnlCdmJpQjBhR1VnWld4bGJXVnVkRnh1SUNCMGFHbHpMblI1Y0dVZ1BTQjBlWEJsTzF4dUlDQjBhR2x6TG10bGVTQTlJR3RsZVR0Y2JpQWdkR2hwY3k1eVpXWWdQU0J5WldZN1hHNWNiaUFnTHk4Z1VtVmpiM0prSUhSb1pTQmpiMjF3YjI1bGJuUWdjbVZ6Y0c5dWMybGliR1VnWm05eUlHTnlaV0YwYVc1bklIUm9hWE1nWld4bGJXVnVkQzVjYmlBZ2RHaHBjeTVmYjNkdVpYSWdQU0J2ZDI1bGNqdGNibHh1SUNBdkx5QlVUMFJQT2lCRVpYQnlaV05oZEdVZ2QybDBhRU52Ym5SbGVIUXNJR0Z1WkNCMGFHVnVJSFJvWlNCamIyNTBaWGgwSUdKbFkyOXRaWE1nWVdOalpYTnphV0pzWlZ4dUlDQXZMeUIwYUhKdmRXZG9JSFJvWlNCdmQyNWxjaTVjYmlBZ2RHaHBjeTVmWTI5dWRHVjRkQ0E5SUdOdmJuUmxlSFE3WEc1Y2JpQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDOHZJRlJvWlNCMllXeHBaR0YwYVc5dUlHWnNZV2NnWVc1a0lIQnliM0J6SUdGeVpTQmpkWEp5Wlc1MGJIa2diWFYwWVhScGRtVXVJRmRsSUhCMWRDQjBhR1Z0SUc5dVhHNGdJQ0FnTHk4Z1lXNGdaWGgwWlhKdVlXd2dZbUZqYTJsdVp5QnpkRzl5WlNCemJ5QjBhR0YwSUhkbElHTmhiaUJtY21WbGVtVWdkR2hsSUhkb2IyeGxJRzlpYW1WamRDNWNiaUFnSUNBdkx5QlVhR2x6SUdOaGJpQmlaU0J5WlhCc1lXTmxaQ0IzYVhSb0lHRWdWMlZoYTAxaGNDQnZibU5sSUhSb1pYa2dZWEpsSUdsdGNHeGxiV1Z1ZEdWa0lHbHVYRzRnSUNBZ0x5OGdZMjl0Ylc5dWJIa2dkWE5sWkNCa1pYWmxiRzl3YldWdWRDQmxiblpwY205dWJXVnVkSE11WEc0Z0lDQWdkR2hwY3k1ZmMzUnZjbVVnUFNCN2NISnZjSE02SUhCeWIzQnpMQ0J2Y21sbmFXNWhiRkJ5YjNCek9pQmhjM05wWjI0b2UzMHNJSEJ5YjNCektYMDdYRzVjYmlBZ0lDQXZMeUJVYnlCdFlXdGxJR052YlhCaGNtbHVaeUJTWldGamRFVnNaVzFsYm5SeklHVmhjMmxsY2lCbWIzSWdkR1Z6ZEdsdVp5QndkWEp3YjNObGN5d2dkMlVnYldGclpWeHVJQ0FnSUM4dklIUm9aU0IyWVd4cFpHRjBhVzl1SUdac1lXY2dibTl1TFdWdWRXMWxjbUZpYkdVZ0tIZG9aWEpsSUhCdmMzTnBZbXhsTENCM2FHbGphQ0J6YUc5MWJHUmNiaUFnSUNBdkx5QnBibU5zZFdSbElHVjJaWEo1SUdWdWRtbHliMjV0Wlc1MElIZGxJSEoxYmlCMFpYTjBjeUJwYmlrc0lITnZJSFJvWlNCMFpYTjBJR1p5WVcxbGQyOXlhMXh1SUNBZ0lDOHZJR2xuYm05eVpYTWdhWFF1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBhR2x6TGw5emRHOXlaU3dnSjNaaGJHbGtZWFJsWkNjc0lIdGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlJR05oZEdOb0lDaDRLU0I3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11WDNOMGIzSmxMblpoYkdsa1lYUmxaQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdMeThnVjJVbmNtVWdibTkwSUdGc2JHOTNaV1FnZEc4Z2MyVjBJSEJ5YjNCeklHUnBjbVZqZEd4NUlHOXVJSFJvWlNCdlltcGxZM1FnYzI4Z2QyVWdaV0Z5YkhsY2JpQWdJQ0F2THlCeVpYUjFjbTRnWVc1a0lISmxiSGtnYjI0Z2RHaGxJSEJ5YjNSdmRIbHdaU0J0WlcxaWNtRnVaU0IwYnlCbWIzSjNZWEprSUhSdklIUm9aU0JpWVdOcmFXNW5YRzRnSUNBZ0x5OGdjM1J2Y21VdVhHNGdJQ0FnYVdZZ0tIVnpaVTExZEdGMGFXOXVUV1Z0WW5KaGJtVXBJSHRjYmlBZ0lDQWdJRTlpYW1WamRDNW1jbVZsZW1Vb2RHaHBjeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1d2NtOXdjeUE5SUhCeWIzQnpPMXh1ZlR0Y2JseHVMeThnVjJVZ2FXNTBaVzUwYVc5dVlXeHNlU0JrYjI0bmRDQmxlSEJ2YzJVZ2RHaGxJR1oxYm1OMGFXOXVJRzl1SUhSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ3Y205d1pYSjBlUzVjYmk4dklGSmxZV04wUld4bGJXVnVkQ0J6YUc5MWJHUWdZbVVnYVc1a2FYTjBhVzVuZFdsemFHRmliR1VnWm5KdmJTQmhJSEJzWVdsdUlHOWlhbVZqZEM1Y2JsSmxZV04wUld4bGJXVnVkQzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJRjlwYzFKbFlXTjBSV3hsYldWdWREb2dkSEoxWlZ4dWZUdGNibHh1YVdZZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaWtnZTF4dUlDQmtaV1pwYm1WTmRYUmhkR2x2YmsxbGJXSnlZVzVsS0ZKbFlXTjBSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXBPMXh1ZlZ4dVhHNVNaV0ZqZEVWc1pXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDQTlJR1oxYm1OMGFXOXVLSFI1Y0dVc0lHTnZibVpwWnl3Z1kyaHBiR1J5Wlc0cElIdGNiaUFnZG1GeUlIQnliM0JPWVcxbE8xeHVYRzRnSUM4dklGSmxjMlZ5ZG1Wa0lHNWhiV1Z6SUdGeVpTQmxlSFJ5WVdOMFpXUmNiaUFnZG1GeUlIQnliM0J6SUQwZ2UzMDdYRzVjYmlBZ2RtRnlJR3RsZVNBOUlHNTFiR3c3WEc0Z0lIWmhjaUJ5WldZZ1BTQnVkV3hzTzF4dVhHNGdJR2xtSUNoamIyNW1hV2NnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsWmlBOUlHTnZibVpwWnk1eVpXWWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lHNTFiR3dnT2lCamIyNW1hV2N1Y21WbU8xeHVJQ0FnSUd0bGVTQTlJR052Ym1acFp5NXJaWGtnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JRzUxYkd3Z09pQW5KeUFySUdOdmJtWnBaeTVyWlhrN1hHNGdJQ0FnTHk4Z1VtVnRZV2x1YVc1bklIQnliM0JsY25ScFpYTWdZWEpsSUdGa1pHVmtJSFJ2SUdFZ2JtVjNJSEJ5YjNCeklHOWlhbVZqZEZ4dUlDQWdJR1p2Y2lBb2NISnZjRTVoYldVZ2FXNGdZMjl1Wm1sbktTQjdYRzRnSUNBZ0lDQnBaaUFvWTI5dVptbG5MbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JPWVcxbEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNGU1JWTkZVbFpGUkY5UVVrOVFVeTVvWVhOUGQyNVFjbTl3WlhKMGVTaHdjbTl3VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnY0hKdmNITmJjSEp2Y0U1aGJXVmRJRDBnWTI5dVptbG5XM0J5YjNCT1lXMWxYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2THlCRGFHbHNaSEpsYmlCallXNGdZbVVnYlc5eVpTQjBhR0Z1SUc5dVpTQmhjbWQxYldWdWRDd2dZVzVrSUhSb2IzTmxJR0Z5WlNCMGNtRnVjMlpsY25KbFpDQnZiblJ2WEc0Z0lDOHZJSFJvWlNCdVpYZHNlU0JoYkd4dlkyRjBaV1FnY0hKdmNITWdiMkpxWldOMExseHVJQ0IyWVhJZ1kyaHBiR1J5Wlc1TVpXNW5kR2dnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01qdGNiaUFnYVdZZ0tHTm9hV3hrY21WdVRHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdjSEp2Y0hNdVkyaHBiR1J5Wlc0Z1BTQmphR2xzWkhKbGJqdGNiaUFnZlNCbGJITmxJR2xtSUNoamFHbHNaSEpsYmt4bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNCMllYSWdZMmhwYkdSQmNuSmhlU0E5SUVGeWNtRjVLR05vYVd4a2NtVnVUR1Z1WjNSb0tUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTm9hV3hrY21WdVRHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR05vYVd4a1FYSnlZWGxiYVYwZ1BTQmhjbWQxYldWdWRITmJhU0FySURKZE8xeHVJQ0FnSUgxY2JpQWdJQ0J3Y205d2N5NWphR2xzWkhKbGJpQTlJR05vYVd4a1FYSnlZWGs3WEc0Z0lIMWNibHh1SUNBdkx5QlNaWE52YkhabElHUmxabUYxYkhRZ2NISnZjSE5jYmlBZ2FXWWdLSFI1Y0dVZ0ppWWdkSGx3WlM1a1pXWmhkV3gwVUhKdmNITXBJSHRjYmlBZ0lDQjJZWElnWkdWbVlYVnNkRkJ5YjNCeklEMGdkSGx3WlM1a1pXWmhkV3gwVUhKdmNITTdYRzRnSUNBZ1ptOXlJQ2h3Y205d1RtRnRaU0JwYmlCa1pXWmhkV3gwVUhKdmNITXBJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY0hKdmNITmJjSEp2Y0U1aGJXVmRJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0J3Y205d2MxdHdjbTl3VG1GdFpWMGdQU0JrWldaaGRXeDBVSEp2Y0hOYmNISnZjRTVoYldWZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdVpYY2dVbVZoWTNSRmJHVnRaVzUwS0Z4dUlDQWdJSFI1Y0dVc1hHNGdJQ0FnYTJWNUxGeHVJQ0FnSUhKbFppeGNiaUFnSUNCU1pXRmpkRU4xY25KbGJuUlBkMjVsY2k1amRYSnlaVzUwTEZ4dUlDQWdJRkpsWVdOMFEyOXVkR1Y0ZEM1amRYSnlaVzUwTEZ4dUlDQWdJSEJ5YjNCelhHNGdJQ2s3WEc1OU8xeHVYRzVTWldGamRFVnNaVzFsYm5RdVkzSmxZWFJsUm1GamRHOXllU0E5SUdaMWJtTjBhVzl1S0hSNWNHVXBJSHRjYmlBZ2RtRnlJR1poWTNSdmNua2dQU0JTWldGamRFVnNaVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQzVpYVc1a0tHNTFiR3dzSUhSNWNHVXBPMXh1SUNBdkx5QkZlSEJ2YzJVZ2RHaGxJSFI1Y0dVZ2IyNGdkR2hsSUdaaFkzUnZjbmtnWVc1a0lIUm9aU0J3Y205MGIzUjVjR1VnYzI4Z2RHaGhkQ0JwZENCallXNGdZbVZjYmlBZ0x5OGdaV0Z6YVd4NUlHRmpZMlZ6YzJWa0lHOXVJR1ZzWlcxbGJuUnpMaUJGTG1jdUlEeEdiMjhnTHo0dWRIbHdaU0E5UFQwZ1JtOXZMblI1Y0dVdVhHNGdJQzh2SUZSb2FYTWdjMmh2ZFd4a0lHNXZkQ0JpWlNCdVlXMWxaQ0JnWTI5dWMzUnlkV04wYjNKZ0lITnBibU5sSUhSb2FYTWdiV0Y1SUc1dmRDQmlaU0IwYUdVZ1puVnVZM1JwYjI1Y2JpQWdMeThnZEdoaGRDQmpjbVZoZEdWa0lIUm9aU0JsYkdWdFpXNTBMQ0JoYm1RZ2FYUWdiV0Y1SUc1dmRDQmxkbVZ1SUdKbElHRWdZMjl1YzNSeWRXTjBiM0l1WEc0Z0lDOHZJRXhsWjJGamVTQm9iMjlySUZSUFJFODZJRmRoY200Z2FXWWdkR2hwY3lCcGN5QmhZMk5sYzNObFpGeHVJQ0JtWVdOMGIzSjVMblI1Y0dVZ1BTQjBlWEJsTzF4dUlDQnlaWFIxY200Z1ptRmpkRzl5ZVR0Y2JuMDdYRzVjYmxKbFlXTjBSV3hsYldWdWRDNWpiRzl1WlVGdVpGSmxjR3hoWTJWUWNtOXdjeUE5SUdaMWJtTjBhVzl1S0c5c1pFVnNaVzFsYm5Rc0lHNWxkMUJ5YjNCektTQjdYRzRnSUhaaGNpQnVaWGRGYkdWdFpXNTBJRDBnYm1WM0lGSmxZV04wUld4bGJXVnVkQ2hjYmlBZ0lDQnZiR1JGYkdWdFpXNTBMblI1Y0dVc1hHNGdJQ0FnYjJ4a1JXeGxiV1Z1ZEM1clpYa3NYRzRnSUNBZ2IyeGtSV3hsYldWdWRDNXlaV1lzWEc0Z0lDQWdiMnhrUld4bGJXVnVkQzVmYjNkdVpYSXNYRzRnSUNBZ2IyeGtSV3hsYldWdWRDNWZZMjl1ZEdWNGRDeGNiaUFnSUNCdVpYZFFjbTl3YzF4dUlDQXBPMXh1WEc0Z0lHbG1JQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZcElIdGNiaUFnSUNBdkx5QkpaaUIwYUdVZ2EyVjVJRzl1SUhSb1pTQnZjbWxuYVc1aGJDQnBjeUIyWVd4cFpDd2dkR2hsYmlCMGFHVWdZMnh2Ym1VZ2FYTWdkbUZzYVdSY2JpQWdJQ0J1WlhkRmJHVnRaVzUwTGw5emRHOXlaUzUyWVd4cFpHRjBaV1FnUFNCdmJHUkZiR1Z0Wlc1MExsOXpkRzl5WlM1MllXeHBaR0YwWldRN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUc1bGQwVnNaVzFsYm5RN1hHNTlPMXh1WEc1U1pXRmpkRVZzWlcxbGJuUXVZMnh2Ym1WRmJHVnRaVzUwSUQwZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z1kyOXVabWxuTENCamFHbHNaSEpsYmlrZ2UxeHVJQ0IyWVhJZ2NISnZjRTVoYldVN1hHNWNiaUFnTHk4Z1QzSnBaMmx1WVd3Z2NISnZjSE1nWVhKbElHTnZjR2xsWkZ4dUlDQjJZWElnY0hKdmNITWdQU0JoYzNOcFoyNG9lMzBzSUdWc1pXMWxiblF1Y0hKdmNITXBPMXh1WEc0Z0lDOHZJRkpsYzJWeWRtVmtJRzVoYldWeklHRnlaU0JsZUhSeVlXTjBaV1JjYmlBZ2RtRnlJR3RsZVNBOUlHVnNaVzFsYm5RdWEyVjVPMXh1SUNCMllYSWdjbVZtSUQwZ1pXeGxiV1Z1ZEM1eVpXWTdYRzVjYmlBZ0x5OGdUM2R1WlhJZ2QybHNiQ0JpWlNCd2NtVnpaWEoyWldRc0lIVnViR1Z6Y3lCeVpXWWdhWE1nYjNabGNuSnBaR1JsYmx4dUlDQjJZWElnYjNkdVpYSWdQU0JsYkdWdFpXNTBMbDl2ZDI1bGNqdGNibHh1SUNCcFppQW9ZMjl1Wm1sbklDRTlJRzUxYkd3cElIdGNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxuSmxaaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQXZMeUJUYVd4bGJuUnNlU0J6ZEdWaGJDQjBhR1VnY21WbUlHWnliMjBnZEdobElIQmhjbVZ1ZEM1Y2JpQWdJQ0FnSUhKbFppQTlJR052Ym1acFp5NXlaV1k3WEc0Z0lDQWdJQ0J2ZDI1bGNpQTlJRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGpiMjVtYVdjdWEyVjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHdGxlU0E5SUNjbklDc2dZMjl1Wm1sbkxtdGxlVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdVbVZ0WVdsdWFXNW5JSEJ5YjNCbGNuUnBaWE1nYjNabGNuSnBaR1VnWlhocGMzUnBibWNnY0hKdmNITmNiaUFnSUNCbWIzSWdLSEJ5YjNCT1lXMWxJR2x1SUdOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHTnZibVpwWnk1b1lYTlBkMjVRY205d1pYSjBlU2h3Y205d1RtRnRaU2tnSmlaY2JpQWdJQ0FnSUNBZ0lDQWhVa1ZUUlZKV1JVUmZVRkpQVUZNdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0hKdmNFNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lIQnliM0J6VzNCeWIzQk9ZVzFsWFNBOUlHTnZibVpwWjF0d2NtOXdUbUZ0WlYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdRMmhwYkdSeVpXNGdZMkZ1SUdKbElHMXZjbVVnZEdoaGJpQnZibVVnWVhKbmRXMWxiblFzSUdGdVpDQjBhRzl6WlNCaGNtVWdkSEpoYm5ObVpYSnlaV1FnYjI1MGIxeHVJQ0F2THlCMGFHVWdibVYzYkhrZ1lXeHNiMk5oZEdWa0lIQnliM0J6SUc5aWFtVmpkQzVjYmlBZ2RtRnlJR05vYVd4a2NtVnVUR1Z1WjNSb0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREk3WEc0Z0lHbG1JQ2hqYUdsc1pISmxia3hsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUhCeWIzQnpMbU5vYVd4a2NtVnVJRDBnWTJocGJHUnlaVzQ3WEc0Z0lIMGdaV3h6WlNCcFppQW9ZMmhwYkdSeVpXNU1aVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdkbUZ5SUdOb2FXeGtRWEp5WVhrZ1BTQkJjbkpoZVNoamFHbHNaSEpsYmt4bGJtZDBhQ2s3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JqYUdsc1pISmxia3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCamFHbHNaRUZ5Y21GNVcybGRJRDBnWVhKbmRXMWxiblJ6VzJrZ0t5QXlYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NISnZjSE11WTJocGJHUnlaVzRnUFNCamFHbHNaRUZ5Y21GNU8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJTWldGamRFVnNaVzFsYm5Rb1hHNGdJQ0FnWld4bGJXVnVkQzUwZVhCbExGeHVJQ0FnSUd0bGVTeGNiaUFnSUNCeVpXWXNYRzRnSUNBZ2IzZHVaWElzWEc0Z0lDQWdaV3hsYldWdWRDNWZZMjl1ZEdWNGRDeGNiaUFnSUNCd2NtOXdjMXh1SUNBcE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCQWNHRnlZVzBnZXo5dlltcGxZM1I5SUc5aWFtVmpkRnh1SUNvZ1FISmxkSFZ5YmlCN1ltOXZiR1ZoYm4wZ1ZISjFaU0JwWmlCZ2IySnFaV04wWUNCcGN5QmhJSFpoYkdsa0lHTnZiWEJ2Ym1WdWRDNWNiaUFxSUVCbWFXNWhiRnh1SUNvdlhHNVNaV0ZqZEVWc1pXMWxiblF1YVhOV1lXeHBaRVZzWlcxbGJuUWdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXBJSHRjYmlBZ0x5OGdVbVZoWTNSVVpYTjBWWFJwYkhNZ2FYTWdiMlowWlc0Z2RYTmxaQ0J2ZFhSemFXUmxJRzltSUdKbFptOXlaVVZoWTJnZ2QyaGxjbVVnWVhNZ1VtVmhZM1FnYVhOY2JpQWdMeThnZDJsMGFHbHVJR2wwTGlCVWFHbHpJR3hsWVdSeklIUnZJSFIzYnlCa2FXWm1aWEpsYm5RZ2FXNXpkR0Z1WTJWeklHOW1JRkpsWVdOMElHOXVJSFJvWlNCellXMWxYRzRnSUM4dklIQmhaMlV1SUZSdklHbGtaVzUwYVdaNUlHRWdaV3hsYldWdWRDQm1jbTl0SUdFZ1pHbG1abVZ5Wlc1MElGSmxZV04wSUdsdWMzUmhibU5sSUhkbElIVnpaVnh1SUNBdkx5QmhJR1pzWVdjZ2FXNXpkR1ZoWkNCdlppQmhiaUJwYm5OMFlXNWpaVzltSUdOb1pXTnJMbHh1SUNCMllYSWdhWE5GYkdWdFpXNTBJRDBnSVNFb2IySnFaV04wSUNZbUlHOWlhbVZqZEM1ZmFYTlNaV0ZqZEVWc1pXMWxiblFwTzF4dUlDQXZMeUJwWmlBb2FYTkZiR1Z0Wlc1MElDWW1JQ0VvYjJKcVpXTjBJR2x1YzNSaGJtTmxiMllnVW1WaFkzUkZiR1Z0Wlc1MEtTa2dlMXh1SUNBdkx5QlVhR2x6SUdseklHRnVJR2x1WkdsallYUnZjaUIwYUdGMElIbHZkU2R5WlNCMWMybHVaeUJ0ZFd4MGFYQnNaU0IyWlhKemFXOXVjeUJ2WmlCU1pXRmpkQ0JoZENCMGFHVmNiaUFnTHk4Z2MyRnRaU0IwYVcxbExpQlVhR2x6SUhkcGJHd2djMk55WlhjZ2QybDBhQ0J2ZDI1bGNuTm9hWEFnWVc1a0lITjBkV1ptTGlCR2FYZ2dhWFFzSUhCc1pXRnpaUzVjYmlBZ0x5OGdWRTlFVHpvZ1YyVWdZMjkxYkdRZ2NHOXpjMmxpYkhrZ2QyRnliaUJvWlhKbExseHVJQ0F2THlCOVhHNGdJSEpsZEhWeWJpQnBjMFZzWlcxbGJuUTdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxZV04wUld4bGJXVnVkRHRjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCl7aWYoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCl7dmFyIG5hbWU9UmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7aWYobmFtZSlyZXR1cm5cIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIrbmFtZStcImAuXCJ9cmV0dXJuXCJcIn1mdW5jdGlvbiBnZXROYW1lKGluc3RhbmNlKXt2YXIgcHVibGljSW5zdGFuY2U9aW5zdGFuY2UmJmluc3RhbmNlLmdldFB1YmxpY0luc3RhbmNlKCk7aWYoIXB1YmxpY0luc3RhbmNlKXJldHVybiB2b2lkIDA7dmFyIGNvbnN0cnVjdG9yPXB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO3JldHVybiBjb25zdHJ1Y3Rvcj9jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8Y29uc3RydWN0b3IubmFtZXx8dm9pZCAwOnZvaWQgMH1mdW5jdGlvbiBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpe3ZhciBjdXJyZW50PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7cmV0dXJuIGN1cnJlbnQmJmdldE5hbWUoY3VycmVudCl8fHZvaWQgMH1mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQscGFyZW50VHlwZSl7ZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkfHxudWxsIT1lbGVtZW50LmtleXx8KGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZD0hMCx3YXJuQW5kTW9uaXRvckZvcktleVVzZSgnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyxlbGVtZW50LHBhcmVudFR5cGUpKX1mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5S2V5KG5hbWUsZWxlbWVudCxwYXJlbnRUeXBlKXtOVU1FUklDX1BST1BFUlRZX1JFR0VYLnRlc3QobmFtZSkmJndhcm5BbmRNb25pdG9yRm9yS2V5VXNlKFwiQ2hpbGQgb2JqZWN0cyBzaG91bGQgaGF2ZSBub24tbnVtZXJpYyBrZXlzIHNvIG9yZGVyaW5nIGlzIHByZXNlcnZlZC5cIixlbGVtZW50LHBhcmVudFR5cGUpfWZ1bmN0aW9uIHdhcm5BbmRNb25pdG9yRm9yS2V5VXNlKG1lc3NhZ2UsZWxlbWVudCxwYXJlbnRUeXBlKXt2YXIgb3duZXJOYW1lPWdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lKCkscGFyZW50TmFtZT1cInN0cmluZ1wiPT10eXBlb2YgcGFyZW50VHlwZT9wYXJlbnRUeXBlOnBhcmVudFR5cGUuZGlzcGxheU5hbWV8fHBhcmVudFR5cGUubmFtZSx1c2VOYW1lPW93bmVyTmFtZXx8cGFyZW50TmFtZSxtZW1vaXplcj1vd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZV18fChvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZV09e30pO2lmKCFtZW1vaXplci5oYXNPd25Qcm9wZXJ0eSh1c2VOYW1lKSl7bWVtb2l6ZXJbdXNlTmFtZV09ITA7dmFyIHBhcmVudE9yT3duZXJBZGRlbmR1bT1vd25lck5hbWU/XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgXCIrb3duZXJOYW1lK1wiLlwiOnBhcmVudE5hbWU/XCIgQ2hlY2sgdGhlIFJlYWN0LnJlbmRlciBjYWxsIHVzaW5nIDxcIitwYXJlbnROYW1lK1wiPi5cIjpcIlwiLGNoaWxkT3duZXJBZGRlbmR1bT1cIlwiO2lmKGVsZW1lbnQmJmVsZW1lbnQuX293bmVyJiZlbGVtZW50Ll9vd25lciE9PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpe3ZhciBjaGlsZE93bmVyTmFtZT1nZXROYW1lKGVsZW1lbnQuX293bmVyKTtjaGlsZE93bmVyQWRkZW5kdW09XCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIrY2hpbGRPd25lck5hbWUrXCIuXCJ9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLG1lc3NhZ2UrXCIlcyVzIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIixwYXJlbnRPck93bmVyQWRkZW5kdW0sY2hpbGRPd25lckFkZGVuZHVtKTpudWxsfX1mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLHBhcmVudFR5cGUpe2lmKEFycmF5LmlzQXJyYXkobm9kZSkpZm9yKHZhciBpPTA7aTxub2RlLmxlbmd0aDtpKyspe3ZhciBjaGlsZD1ub2RlW2ldO1JlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkmJnZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQscGFyZW50VHlwZSl9ZWxzZSBpZihSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpbm9kZS5fc3RvcmUudmFsaWRhdGVkPSEwO2Vsc2UgaWYobm9kZSl7dmFyIGl0ZXJhdG9yRm49Z2V0SXRlcmF0b3JGbihub2RlKTtpZihpdGVyYXRvckZuKXtpZihpdGVyYXRvckZuIT09bm9kZS5lbnRyaWVzKWZvcih2YXIgc3RlcCxpdGVyYXRvcj1pdGVyYXRvckZuLmNhbGwobm9kZSk7IShzdGVwPWl0ZXJhdG9yLm5leHQoKSkuZG9uZTspUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpJiZ2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUscGFyZW50VHlwZSl9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2Ygbm9kZSl7dmFyIGZyYWdtZW50PVJlYWN0RnJhZ21lbnQuZXh0cmFjdElmRnJhZ21lbnQobm9kZSk7Zm9yKHZhciBrZXkgaW4gZnJhZ21lbnQpZnJhZ21lbnQuaGFzT3duUHJvcGVydHkoa2V5KSYmdmFsaWRhdGVQcm9wZXJ0eUtleShrZXksZnJhZ21lbnRba2V5XSxwYXJlbnRUeXBlKX19fWZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUscHJvcFR5cGVzLHByb3BzLGxvY2F0aW9uKXtmb3IodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcylpZihwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKXt2YXIgZXJyb3I7dHJ5e1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwiZnVuY3Rpb25cIj09dHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0sXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIixjb21wb25lbnROYW1lfHxcIlJlYWN0IGNsYXNzXCIsUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLHByb3BOYW1lKTppbnZhcmlhbnQoXCJmdW5jdGlvblwiPT10eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSksZXJyb3I9cHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcyxwcm9wTmFtZSxjb21wb25lbnROYW1lLGxvY2F0aW9uKX1jYXRjaChleCl7ZXJyb3I9ZXh9aWYoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciYmIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpe2xvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXT0hMDt2YXIgYWRkZW5kdW09Z2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKHRoaXMpO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSxcIkZhaWxlZCBwcm9wVHlwZTogJXMlc1wiLGVycm9yLm1lc3NhZ2UsYWRkZW5kdW0pOm51bGx9fX1mdW5jdGlvbiB3YXJuRm9yUHJvcHNNdXRhdGlvbihwcm9wTmFtZSxlbGVtZW50KXt2YXIgdHlwZT1lbGVtZW50LnR5cGUsZWxlbWVudE5hbWU9XCJzdHJpbmdcIj09dHlwZW9mIHR5cGU/dHlwZTp0eXBlLmRpc3BsYXlOYW1lLG93bmVyTmFtZT1lbGVtZW50Ll9vd25lcj9lbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lOm51bGwsd2FybmluZ0tleT1wcm9wTmFtZStcInxcIitlbGVtZW50TmFtZStcInxcIitvd25lck5hbWU7aWYoIXdhcm5lZFByb3BzTXV0YXRpb25zLmhhc093blByb3BlcnR5KHdhcm5pbmdLZXkpKXt3YXJuZWRQcm9wc011dGF0aW9uc1t3YXJuaW5nS2V5XT0hMDt2YXIgZWxlbWVudEluZm89XCJcIjtlbGVtZW50TmFtZSYmKGVsZW1lbnRJbmZvPVwiIDxcIitlbGVtZW50TmFtZStcIiAvPlwiKTt2YXIgb3duZXJJbmZvPVwiXCI7b3duZXJOYW1lJiYob3duZXJJbmZvPVwiIFRoZSBlbGVtZW50IHdhcyBjcmVhdGVkIGJ5IFwiK293bmVyTmFtZStcIi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwiRG9uJ3Qgc2V0IC5wcm9wcy4lcyBvZiB0aGUgUmVhY3QgY29tcG9uZW50JXMuIEluc3RlYWQsIHNwZWNpZnkgdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpbml0aWFsbHkgY3JlYXRpbmcgdGhlIGVsZW1lbnQgb3IgdXNlIFJlYWN0LmNsb25lRWxlbWVudCB0byBtYWtlIGEgbmV3IGVsZW1lbnQgd2l0aCB1cGRhdGVkIHByb3BzLiVzXCIscHJvcE5hbWUsZWxlbWVudEluZm8sb3duZXJJbmZvKTpudWxsfX1mdW5jdGlvbiBpcyhhLGIpe3JldHVybiBhIT09YT9iIT09YjowPT09YSYmMD09PWI/MS9hPT09MS9iOmE9PT1ifWZ1bmN0aW9uIGNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyhlbGVtZW50KXtpZihlbGVtZW50Ll9zdG9yZSl7dmFyIG9yaWdpbmFsUHJvcHM9ZWxlbWVudC5fc3RvcmUub3JpZ2luYWxQcm9wcyxwcm9wcz1lbGVtZW50LnByb3BzO2Zvcih2YXIgcHJvcE5hbWUgaW4gcHJvcHMpcHJvcHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpJiYob3JpZ2luYWxQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkmJmlzKG9yaWdpbmFsUHJvcHNbcHJvcE5hbWVdLHByb3BzW3Byb3BOYW1lXSl8fCh3YXJuRm9yUHJvcHNNdXRhdGlvbihwcm9wTmFtZSxlbGVtZW50KSxvcmlnaW5hbFByb3BzW3Byb3BOYW1lXT1wcm9wc1twcm9wTmFtZV0pKX19ZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCl7aWYobnVsbCE9ZWxlbWVudC50eXBlKXt2YXIgY29tcG9uZW50Q2xhc3M9UmVhY3ROYXRpdmVDb21wb25lbnQuZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50KGVsZW1lbnQpLG5hbWU9Y29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWV8fGNvbXBvbmVudENsYXNzLm5hbWU7Y29tcG9uZW50Q2xhc3MucHJvcFR5cGVzJiZjaGVja1Byb3BUeXBlcyhuYW1lLGNvbXBvbmVudENsYXNzLnByb3BUeXBlcyxlbGVtZW50LnByb3BzLFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCksXCJmdW5jdGlvblwiPT10eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzJiYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKGNvbXBvbmVudENsYXNzLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcImdldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyBkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuXCIpOm51bGwpfX12YXIgUmVhY3RFbGVtZW50PXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKSxSZWFjdEZyYWdtZW50PXJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIiksUmVhY3RQcm9wVHlwZUxvY2F0aW9ucz1yZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCIpLFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzPXJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpLFJlYWN0TmF0aXZlQ29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpLGdldEl0ZXJhdG9yRm49cmVxdWlyZShcIi4vZ2V0SXRlcmF0b3JGblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSxvd25lckhhc0tleVVzZVdhcm5pbmc9e30sbG9nZ2VkVHlwZUZhaWx1cmVzPXt9LE5VTUVSSUNfUFJPUEVSVFlfUkVHRVg9L15cXGQrJC8sd2FybmVkUHJvcHNNdXRhdGlvbnM9e30sUmVhY3RFbGVtZW50VmFsaWRhdG9yPXtjaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHM6Y2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzLGNyZWF0ZUVsZW1lbnQ6ZnVuY3Rpb24odHlwZSxwcm9wcyxjaGlsZHJlbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKG51bGwhPXR5cGUsXCJSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIHNob3VsZCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuIEl0IHNob3VsZCBiZSBhIHN0cmluZyAoZm9yIERPTSBlbGVtZW50cykgb3IgYSBSZWFjdENsYXNzIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpLlwiKTpudWxsO3ZhciBlbGVtZW50PVJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihudWxsPT1lbGVtZW50KXJldHVybiBlbGVtZW50O2Zvcih2YXIgaT0yO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLHR5cGUpO3JldHVybiB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KSxlbGVtZW50fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKHR5cGUpe3ZhciB2YWxpZGF0ZWRGYWN0b3J5PVJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCx0eXBlKTtpZih2YWxpZGF0ZWRGYWN0b3J5LnR5cGU9dHlwZSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsaWRhdGVkRmFjdG9yeSxcInR5cGVcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoITEsXCJGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSBiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LlwiKTpudWxsLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidHlwZVwiLHt2YWx1ZTp0eXBlfSksdHlwZX19KX1jYXRjaCh4KXt9cmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnl9LGNsb25lRWxlbWVudDpmdW5jdGlvbihlbGVtZW50LHByb3BzLGNoaWxkcmVuKXtmb3IodmFyIG5ld0VsZW1lbnQ9UmVhY3RFbGVtZW50LmNsb25lRWxlbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyksaT0yO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLG5ld0VsZW1lbnQudHlwZSk7cmV0dXJuIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpLG5ld0VsZW1lbnR9fTttb2R1bGUuZXhwb3J0cz1SZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSRmJHVnRaVzUwVm1Gc2FXUmhkRzl5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRnJRa0VzV1VGaFFTeFRRVUZUTEN0Q1FVTlFMRWRCUVVrc2EwSkJRV3RDTEZGQlFWTXNRMEZETjBJc1IwRkJTU3hOUVVGUExHdENRVUZyUWl4UlFVRlJMRk5CUTNKRExFbEJRVWtzUzBGRFJpeE5RVUZQTEdkRFFVRnJReXhMUVVGUExFdEJSM0JFTEUxQlFVOHNSMEZ2UWxRc1VVRkJVeXhUUVVGUkxGVkJRMllzUjBGQlNTeG5Ra0ZCYVVJc1ZVRkJXU3hUUVVGVExHMUNRVU14UXl4TFFVRkxMR1ZCUTBnc1RVRkJUeXhQUVVWVUxFbEJRVWtzWVVGQll5eGxRVUZsTEZkQlEycERMRTlCUVVzc1lVRkhSU3haUVVGWkxHRkJRV1VzV1VGQldTeE5RVUZSTEU5QlJqZERMRTlCVjFnc1VVRkJVeXc0UWtGRFVDeEhRVUZKTEZOQlFWVXNhMEpCUVd0Q0xFOUJRMmhETEU5QlEwVXNWVUZCVnl4UlFVRlJMRlZCUVZrc1QwRmpia01zVVVGQlV5eHhRa0ZCYjBJc1VVRkJVeXhaUVVOb1F5eFJRVUZSTEU5QlFVOHNWMEZCTkVJc1RVRkJaaXhSUVVGUkxFMUJSM2hETEZGQlFWRXNUMEZCVHl4WFFVRlpMRVZCUlROQ0xIZENRVU5GTEhORlFVTkJMRkZCUTBFc1lVRmhTaXhSUVVGVExIRkNRVUZ2UWl4TFFVRk5MRkZCUVZNc1dVRkRja01zZFVKQlFYVkNMRXRCUVVzc1QwRkhha01zZDBKQlEwVXNkVVZCUTBFc1VVRkRRU3haUVZsS0xGRkJRVk1zZVVKQlFYZENMRkZCUVZNc1VVRkJVeXhaUVVOcVJDeEhRVUZKTEZkQlFWa3NOa0pCUTFvc1YwRkJiVU1zWjBKQlFXWXNXVUZEZEVJc1YwRkJZU3hYUVVGWExHRkJRV1VzVjBGQlZ5eExRVVZvUkN4UlFVRlZMRmRCUVdFc1YwRkRka0lzVTBGQlZ5eHpRa0ZCYzBJc1YwRkRiRU1zYzBKQlFYTkNMRmxCUlhwQ0xFdEJRVWtzVTBGQlV5eGxRVUZsTEZOQlFUVkNMRU5CUjBFc1UwRkJVeXhWUVVGWExFTkJSWEJDTEVsQlFVa3NkVUpCUTBZc1ZVRkJZU3dyUWtGQmFVTXNWVUZCV1N4SlFVTXhSQ3hYUVVGakxIVkRRVUY1UXl4WFFVRmhMRXRCUTNCRkxFZEJTMFVzYlVKQlFYRkNMRVZCUTNwQ0xFbEJRVWtzVTBGRFFTeFJRVUZSTEZGQlExSXNVVUZCVVN4VFFVRlhMR3RDUVVGclFpeFJRVUZUTEVOQlJXaEVMRWRCUVVrc1owSkJRV2xDTEZGQlFWRXNVVUZCVVN4UFFVVnlReXh2UWtGQmMwSXNLMEpCUVdsRExHVkJRV2xDTEVsQlIzcEZMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZOQlEzWkRMRVZCUTBFc1VVRkJWU3hyUlVGRFZpeHpRa0ZEUVN4dlFrRkRSU3hOUVZsT0xGRkJRVk1zYlVKQlFXdENMRXRCUVUwc1dVRkRMMElzUjBGQlNTeE5RVUZOTEZGQlFWRXNUVUZEYUVJc1NVRkJTeXhIUVVGSkxFZEJRVWtzUlVGQlJ5eEZRVUZKTEV0QlFVc3NUMEZCVVN4SlFVRkxMRU5CUTNCRExFZEJRVWtzVDBGQlVTeExRVUZMTEVWQlEySXNZMEZCWVN4bFFVRmxMRkZCUXpsQ0xHOUNRVUZ2UWl4TlFVRlBMR2RDUVVjeFFpeEpRVUZKTEdGQlFXRXNaVUZCWlN4TlFVVnlReXhMUVVGTExFOUJRVThzVjBGQldTeE5RVU51UWl4SlFVRkpMRXRCUVUwc1EwRkRaaXhIUVVGSkxGbEJRV0VzWTBGQll5eExRVVV2UWl4SlFVRkpMRmxCUTBZc1IwRkJTU3hoUVVGbExFdEJRVXNzVVVGSGRFSXNTVUZHUVN4SFFVTkpMRTFCUkVFc1UwRkJWeXhYUVVGWExFdEJRVXNzVVVGRmRFSXNTMEZCVHl4VFFVRlRMRkZCUVZFc1RVRkRNMElzWVVGQllTeGxRVUZsTEV0QlFVc3NVVUZEYmtNc2IwSkJRVzlDTEV0QlFVc3NUVUZCVHl4blFrRkpha01zU1VGQmIwSXNaMEpCUVZRc1RVRkJiVUlzUTBGRGJrTXNSMEZCU1N4VlFVRlhMR05CUVdNc2EwSkJRV3RDTEV0QlF5OURMRXRCUVVzc1IwRkJTU3hQUVVGUExGVkJRMVlzVTBGQlV5eGxRVUZsTEUxQlF6RkNMRzlDUVVGdlFpeEpRVUZMTEZOQlFWTXNTMEZCVFN4alFXZENiRVFzVVVGQlV5eG5Ra0ZCWlN4alFVRmxMRlZCUVZjc1RVRkJUeXhWUVVOMlJDeEpRVUZMTEVkQlFVa3NXVUZCV1N4WFFVTnVRaXhIUVVGSkxGVkJRVlVzWlVGQlpTeFZRVUZYTEVOQlEzUkRMRWRCUVVrc1RVRkpTaXhMUVVkSExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTFJc2EwSkJRWGhDTEZkQlFWVXNWVUZEYWtJc2IwWkJSVUVzWlVGQmFVSXNZMEZEYWtJc01rSkJRVEpDTEZWQlF6TkNMRlZCUTBVc1ZVRkJlVU1zYTBKQlFYaENMRmRCUVZVc1YwRkRMMElzVFVGQlVTeFZRVUZWTEZWQlFWVXNUVUZCVHl4VFFVRlZMR05CUVdVc1ZVRkROVVFzVFVGQlR5eEpRVU5RTEUxQlFWRXNSMEZGVml4SFFVRkpMR2RDUVVGcFFpeFZRVUZYTEUxQlFVMHNWVUZCVnl4eFFrRkJjVUlzUTBGSGNFVXNiVUpCUVcxQ0xFMUJRVTBzVlVGQlZ5eERRVVZ3UXl4SlFVRkpMRlZCUVZjc05FSkJRVFJDTEV0QlF6RkRMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VFFVRlJMRVZCUVU4c2QwSkJRWGxDTEUxQlFVMHNVVUZCVXl4VlFVRlpMRTlCWTNCSUxGRkJRVk1zYzBKQlFYRkNMRk5CUVZVc1UwRkRkRU1zUjBGQlNTeE5RVUZQTEZGQlFWRXNTMEZEWml4WlFVRTRRaXhuUWtGQlZDeE5RVUZ2UWl4TFFVRlBMRXRCUVVzc1dVRkRja1FzVlVGQldTeFJRVUZSTEU5QlEzUkNMRkZCUVZFc1QwRkJUeXh2UWtGQmIwSXNXVUZCV1N4WlFVRmpMRXRCUlRORUxGZEJRV0VzVTBGQlZ5eEpRVUZOTEZsQlFXTXNTVUZCVFN4VFFVTjBSQ3hMUVVGSkxIRkNRVUZ4UWl4bFFVRmxMRmxCUVhoRExFTkJSMEVzY1VKQlFYRkNMR0ZCUVdNc1EwRkZia01zU1VGQlNTeGhRVUZqTEVWQlEyUXNaVUZEUml4WlFVRmpMRXRCUVU4c1dVRkJZeXhOUVVWeVF5eEpRVUZKTEZkQlFWa3NSVUZEV2l4aFFVTkdMRlZCUVZrc0swSkJRV2xETEZWQlFWa3NTMEZITVVRc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVMEZEZGtNc1JVRkRRU3cyVEVGSFFTeFRRVU5CTEZsQlEwRXNWMEZEUlN4TlFVbE9MRkZCUVZNc1NVRkJSeXhGUVVGSExFZEJRMklzVFVGQlNTeExRVUZOTEVWQlJVUXNTVUZCVFN4RlFVVk1MRWxCUVU0c1IwRkJhVUlzU1VGQlRpeEZRVVZPTEVWQlFVa3NTVUZCVFN4RlFVRkpMRVZCUldoQ0xFbEJRVTBzUlVGWFppeFJRVUZUTERaQ1FVRTBRaXhUUVVOdVF5eEhRVUZMTEZGQlFWRXNUMEZCWWl4RFFVMUJMRWRCUVVrc1pVRkJaMElzVVVGQlVTeFBRVUZQTEdOQlF5OUNMRTFCUVZFc1VVRkJVU3hMUVVWd1FpeExRVUZMTEVkQlFVa3NXVUZCV1N4UFFVTm1MRTFCUVUwc1pVRkJaU3haUVVOc1FpeGpRVUZqTEdWQlFXVXNWMEZETjBJc1IwRkJSeXhqUVVGakxGVkJRVmNzVFVGQlRTeGhRVU55UXl4eFFrRkJjVUlzVTBGQlZTeFRRVWN2UWl4alFVRmpMRlZCUVZrc1RVRkJUU3hoUVZsNFF5eFJRVUZUTEcxQ1FVRnJRaXhUUVVONlFpeEhRVUZ2UWl4TlFVRm9RaXhSUVVGUkxFdEJRVm9zUTBGUlFTeEhRVUZKTEdkQ1FVRnBRaXh4UWtGQmNVSXNORUpCUTNoRExGTkJSVVVzUzBGQlR5eGxRVUZsTEdGQlFXVXNaVUZCWlN4SlFVTndSQ3huUWtGQlpTeFhRVU5xUWl4bFFVTkZMRXRCUTBFc1pVRkJaU3hWUVVObUxGRkJRVkVzVFVGRFVpeDFRa0ZCZFVJc1RVRkhiVUlzYTBKQlFXNURMR2RDUVVGbExHdENRVU4yUWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFJRVU4yUXl4bFFVRmxMR2RDUVVGblFpeHhRa0ZETDBJc09FaEJSVVVzVDBGeVYxSXNSMEZCU1N4alFVRmxMRkZCUVZFc2EwSkJRM1pDTEdOQlFXZENMRkZCUVZFc2JVSkJRM2hDTEhWQ1FVRjVRaXhSUVVGUkxEUkNRVU5xUXl3eVFrRkJOa0lzVVVGQlVTeG5RMEZEY2tNc2EwSkJRVzlDTEZGQlFWRXNkVUpCUXpWQ0xIRkNRVUYxUWl4UlFVRlJMREJDUVVVdlFpeGpRVUZuUWl4UlFVRlJMRzFDUVVONFFpeFZRVUZaTEZGQlFWRXNaVUZEY0VJc1VVRkJWU3hSUVVGUkxHRkJhVUpzUWl4NVFrRkZRU3h6UWtGRlFTeDFRa0ZCZVVJc1VVRnRUbnBDTEhkQ1FYZElRU3gxUWtGRlJpdzBRa0ZCTmtJc05FSkJSVGRDTEdOQlFXVXNVMEZCVXl4TFFVRk5MRTFCUVU4c1ZVRkhiRU1zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1VVRkRMMElzVFVGQlVpeExRVU5CTEcxS1FVZEZMRWxCUlVvc1NVRkJTU3hUUVVGVkxHRkJRV0VzWTBGQll5eE5RVUZOTEV0QlFVMHNWVUZKY2tRc1NVRkJaU3hOUVVGWUxGRkJRMFlzVFVGQlR5eFJRVWRVTEV0QlFVc3NSMEZCU1N4SFFVRkpMRVZCUVVjc1JVRkJTU3hWUVVGVkxFOUJRVkVzU1VGRGNFTXNhMEpCUVd0Q0xGVkJRVlVzUjBGQlNTeExRVXRzUXl4UFFVWkJMRzFDUVVGclFpeFRRVVZZTEZOQlIxUXNZMEZCWlN4VFFVRlRMRTFCUTNSQ0xFZEJRVWtzYTBKQlFXMUNMSE5DUVVGelFpeGpRVUZqTEV0QlEzcEVMRXRCUTBFc1MwRkxSaXhKUVVaQkxHbENRVUZwUWl4TFFVRlBMRXRCUlhCQ0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVTXZRaXhKUVVORkxFOUJRVThzWlVGRFRDeHBRa0ZEUVN4UlFVVkZMRmxCUVZrc1JVRkRXaXhKUVVGTExGZEJVMGdzVFVGU1F5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhUUVVOMlF5eEZRVU5CTERaR1FVVkZMRXRCUTBvc1QwRkJUeXhsUVVGbExFdEJRVTBzVVVGRE1VSXNUVUZCVHl4UFFVVkdMRkZCU1dJc1RVRkJUeXhKUVUxWUxFMUJRVThzYlVKQlIxUXNZVUZCWXl4VFFVRlRMRkZCUVZNc1RVRkJUeXhWUVVWeVF5eEpRVUZMTEVkQlJFUXNXVUZCWVN4aFFVRmhMR0ZCUVdFc1RVRkJUU3hMUVVGTkxGZEJRemxETEVWQlFVa3NSVUZCUnl4RlFVRkpMRlZCUVZVc1QwRkJVU3hKUVVOd1F5eHJRa0ZCYTBJc1ZVRkJWU3hIUVVGSkxGZEJRVmNzUzBGSE4wTXNUMEZFUVN4dFFrRkJhMElzV1VGRFdDeFpRVXRZTEZGQlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TkMweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBSV3hsYldWdWRGWmhiR2xrWVhSdmNseHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1VtVmhZM1JGYkdWdFpXNTBWbUZzYVdSaGRHOXlJSEJ5YjNacFpHVnpJR0VnZDNKaGNIQmxjaUJoY205MWJtUWdZU0JsYkdWdFpXNTBJR1poWTNSdmNubGNiaUFxSUhkb2FXTm9JSFpoYkdsa1lYUmxjeUIwYUdVZ2NISnZjSE1nY0dGemMyVmtJSFJ2SUhSb1pTQmxiR1Z0Wlc1MExpQlVhR2x6SUdseklHbHVkR1Z1WkdWa0lIUnZJR0psWEc0Z0tpQjFjMlZrSUc5dWJIa2dhVzRnUkVWV0lHRnVaQ0JqYjNWc1pDQmlaU0J5WlhCc1lXTmxaQ0JpZVNCaElITjBZWFJwWXlCMGVYQmxJR05vWldOclpYSWdabTl5SUd4aGJtZDFZV2RsYzF4dUlDb2dkR2hoZENCemRYQndiM0owSUdsMExseHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFJXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJXeGxiV1Z1ZEZ3aUtUdGNiblpoY2lCU1pXRmpkRVp5WVdkdFpXNTBJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JHY21GbmJXVnVkRndpS1R0Y2JuWmhjaUJTWldGamRGQnliM0JVZVhCbFRHOWpZWFJwYjI1eklEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dWMxd2lLVHRjYm5aaGNpQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjVPWVcxbGN5QTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBVSEp2Y0ZSNWNHVk1iMk5oZEdsdmJrNWhiV1Z6WENJcE8xeHVkbUZ5SUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSmNJaWs3WEc1MllYSWdVbVZoWTNST1lYUnBkbVZEYjIxd2IyNWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEU1aGRHbDJaVU52YlhCdmJtVnVkRndpS1R0Y2JseHVkbUZ5SUdkbGRFbDBaWEpoZEc5eVJtNGdQU0J5WlhGMWFYSmxLRndpTGk5blpYUkpkR1Z5WVhSdmNrWnVYQ0lwTzF4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwybHVkbUZ5YVdGdWRGd2lLVHRjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTaGNJaTR2ZDJGeWJtbHVaMXdpS1R0Y2JseHVablZ1WTNScGIyNGdaMlYwUkdWamJHRnlZWFJwYjI1RmNuSnZja0ZrWkdWdVpIVnRLQ2tnZTF4dUlDQnBaaUFvVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWEl1WTNWeWNtVnVkQ2tnZTF4dUlDQWdJSFpoY2lCdVlXMWxJRDBnVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWEl1WTNWeWNtVnVkQzVuWlhST1lXMWxLQ2s3WEc0Z0lDQWdhV1lnS0c1aGJXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW5JRU5vWldOcklIUm9aU0J5Wlc1a1pYSWdiV1YwYUc5a0lHOW1JR0FuSUNzZ2JtRnRaU0FySUNkZ0xpYzdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBbkp6dGNibjFjYmx4dUx5b3FYRzRnS2lCWFlYSnVJR2xtSUhSb1pYSmxKM01nYm04Z2EyVjVJR1Y0Y0d4cFkybDBiSGtnYzJWMElHOXVJR1I1Ym1GdGFXTWdZWEp5WVhseklHOW1JR05vYVd4a2NtVnVJRzl5WEc0Z0tpQnZZbXBsWTNRZ2EyVjVjeUJoY21VZ2JtOTBJSFpoYkdsa0xpQlVhR2x6SUdGc2JHOTNjeUIxY3lCMGJ5QnJaV1Z3SUhSeVlXTnJJRzltSUdOb2FXeGtjbVZ1SUdKbGRIZGxaVzVjYmlBcUlIVndaR0YwWlhNdVhHNGdLaTljYm5aaGNpQnZkMjVsY2toaGMwdGxlVlZ6WlZkaGNtNXBibWNnUFNCN2ZUdGNibHh1ZG1GeUlHeHZaMmRsWkZSNWNHVkdZV2xzZFhKbGN5QTlJSHQ5TzF4dVhHNTJZWElnVGxWTlJWSkpRMTlRVWs5UVJWSlVXVjlTUlVkRldDQTlJQzllWEZ4a0t5UXZPMXh1WEc0dktpcGNiaUFxSUVkbGRITWdkR2hsSUdsdWMzUmhibU5sSjNNZ2JtRnRaU0JtYjNJZ2RYTmxJR2x1SUhkaGNtNXBibWR6TGx4dUlDcGNiaUFxSUVCcGJuUmxjbTVoYkZ4dUlDb2dRSEpsZEhWeWJpQjdQM04wY21sdVozMGdSR2x6Y0d4aGVTQnVZVzFsSUc5eUlIVnVaR1ZtYVc1bFpGeHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUk9ZVzFsS0dsdWMzUmhibU5sS1NCN1hHNGdJSFpoY2lCd2RXSnNhV05KYm5OMFlXNWpaU0E5SUdsdWMzUmhibU5sSUNZbUlHbHVjM1JoYm1ObExtZGxkRkIxWW14cFkwbHVjM1JoYm1ObEtDazdYRzRnSUdsbUlDZ2hjSFZpYkdsalNXNXpkR0Z1WTJVcElIdGNiaUFnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQjlYRzRnSUhaaGNpQmpiMjV6ZEhKMVkzUnZjaUE5SUhCMVlteHBZMGx1YzNSaGJtTmxMbU52Ym5OMGNuVmpkRzl5TzF4dUlDQnBaaUFvSVdOdmJuTjBjblZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWTI5dWMzUnlkV04wYjNJdVpHbHpjR3hoZVU1aGJXVWdmSHdnWTI5dWMzUnlkV04wYjNJdWJtRnRaU0I4ZkNCMWJtUmxabWx1WldRN1hHNTlYRzVjYmk4cUtseHVJQ29nUjJWMGN5QjBhR1VnWTNWeWNtVnVkQ0J2ZDI1bGNpZHpJR1JwYzNCc1lYbE9ZVzFsSUdadmNpQjFjMlVnYVc0Z2QyRnlibWx1WjNNdVhHNGdLbHh1SUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdLaUJBY21WMGRYSnVJSHMvYzNSeWFXNW5mU0JFYVhOd2JHRjVJRzVoYldVZ2IzSWdkVzVrWldacGJtVmtYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRU4xY25KbGJuUlBkMjVsY2tScGMzQnNZWGxPWVcxbEtDa2dlMXh1SUNCMllYSWdZM1Z5Y21WdWRDQTlJRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlMbU4xY25KbGJuUTdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdZM1Z5Y21WdWRDQW1KaUJuWlhST1lXMWxLR04xY25KbGJuUXBJSHg4SUhWdVpHVm1hVzVsWkZ4dUlDQXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGZGhjbTRnYVdZZ2RHaGxJR1ZzWlcxbGJuUWdaRzlsYzI0bmRDQm9ZWFpsSUdGdUlHVjRjR3hwWTJsMElHdGxlU0JoYzNOcFoyNWxaQ0IwYnlCcGRDNWNiaUFxSUZSb2FYTWdaV3hsYldWdWRDQnBjeUJwYmlCaGJpQmhjbkpoZVM0Z1ZHaGxJR0Z5Y21GNUlHTnZkV3hrSUdkeWIzY2dZVzVrSUhOb2NtbHVheUJ2Y2lCaVpWeHVJQ29nY21WdmNtUmxjbVZrTGlCQmJHd2dZMmhwYkdSeVpXNGdkR2hoZENCb1lYWmxiaWQwSUdGc2NtVmhaSGtnWW1WbGJpQjJZV3hwWkdGMFpXUWdZWEpsSUhKbGNYVnBjbVZrSUhSdlhHNGdLaUJvWVhabElHRWdYQ0pyWlhsY0lpQndjbTl3WlhKMGVTQmhjM05wWjI1bFpDQjBieUJwZEM1Y2JpQXFYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRmJHVnRaVzUwZlNCbGJHVnRaVzUwSUVWc1pXMWxiblFnZEdoaGRDQnlaWEYxYVhKbGN5QmhJR3RsZVM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnY0dGeVpXNTBWSGx3WlNCbGJHVnRaVzUwSjNNZ2NHRnlaVzUwSjNNZ2RIbHdaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdkbUZzYVdSaGRHVkZlSEJzYVdOcGRFdGxlU2hsYkdWdFpXNTBMQ0J3WVhKbGJuUlVlWEJsS1NCN1hHNGdJR2xtSUNobGJHVnRaVzUwTGw5emRHOXlaUzUyWVd4cFpHRjBaV1FnZkh3Z1pXeGxiV1Z1ZEM1clpYa2dJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lISmxkSFZ5Ymp0Y2JpQWdmVnh1SUNCbGJHVnRaVzUwTGw5emRHOXlaUzUyWVd4cFpHRjBaV1FnUFNCMGNuVmxPMXh1WEc0Z0lIZGhjbTVCYm1STmIyNXBkRzl5Um05eVMyVjVWWE5sS0Z4dUlDQWdJQ2RGWVdOb0lHTm9hV3hrSUdsdUlHRnVJR0Z5Y21GNUlHOXlJR2wwWlhKaGRHOXlJSE5vYjNWc1pDQm9ZWFpsSUdFZ2RXNXBjWFZsSUZ3aWEyVjVYQ0lnY0hKdmNDNG5MRnh1SUNBZ0lHVnNaVzFsYm5Rc1hHNGdJQ0FnY0dGeVpXNTBWSGx3WlZ4dUlDQXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGZGhjbTRnYVdZZ2RHaGxJR3RsZVNCcGN5QmlaV2x1WnlCa1pXWnBibVZrSUdGeklHRnVJRzlpYW1WamRDQndjbTl3WlhKMGVTQmlkWFFnYUdGeklHRnVJR2x1WTI5eWNtVmpkRnh1SUNvZ2RtRnNkV1V1WEc0Z0tseHVJQ29nUUdsdWRHVnlibUZzWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaU0JRY205d1pYSjBlU0J1WVcxbElHOW1JSFJvWlNCclpYa3VYRzRnS2lCQWNHRnlZVzBnZTFKbFlXTjBSV3hsYldWdWRIMGdaV3hsYldWdWRDQkRiMjF3YjI1bGJuUWdkR2hoZENCeVpYRjFhWEpsY3lCaElHdGxlUzVjYmlBcUlFQndZWEpoYlNCN0tuMGdjR0Z5Wlc1MFZIbHdaU0JsYkdWdFpXNTBKM01nY0dGeVpXNTBKM01nZEhsd1pTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWUWNtOXdaWEowZVV0bGVTaHVZVzFsTENCbGJHVnRaVzUwTENCd1lYSmxiblJVZVhCbEtTQjdYRzRnSUdsbUlDZ2hUbFZOUlZKSlExOVFVazlRUlZKVVdWOVNSVWRGV0M1MFpYTjBLRzVoYldVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzRnSUhkaGNtNUJibVJOYjI1cGRHOXlSbTl5UzJWNVZYTmxLRnh1SUNBZ0lDZERhR2xzWkNCdlltcGxZM1J6SUhOb2IzVnNaQ0JvWVhabElHNXZiaTF1ZFcxbGNtbGpJR3RsZVhNZ2MyOGdiM0prWlhKcGJtY2dhWE1nY0hKbGMyVnlkbVZrTGljc1hHNGdJQ0FnWld4bGJXVnVkQ3hjYmlBZ0lDQndZWEpsYm5SVWVYQmxYRzRnSUNrN1hHNTlYRzVjYmk4cUtseHVJQ29nVTJoaGNtVmtJSGRoY201cGJtY2dZVzVrSUcxdmJtbDBiM0pwYm1jZ1kyOWtaU0JtYjNJZ2RHaGxJR3RsZVNCM1lYSnVhVzVuY3k1Y2JpQXFYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRaWE56WVdkbElGUm9aU0JpWVhObElIZGhjbTVwYm1jZ2RHaGhkQ0JuWlhSeklHOTFkSEIxZEM1Y2JpQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRmJHVnRaVzUwZlNCbGJHVnRaVzUwSUVOdmJYQnZibVZ1ZENCMGFHRjBJSEpsY1hWcGNtVnpJR0VnYTJWNUxseHVJQ29nUUhCaGNtRnRJSHNxZlNCd1lYSmxiblJVZVhCbElHVnNaVzFsYm5RbmN5QndZWEpsYm5RbmN5QjBlWEJsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUIzWVhKdVFXNWtUVzl1YVhSdmNrWnZja3RsZVZWelpTaHRaWE56WVdkbExDQmxiR1Z0Wlc1MExDQndZWEpsYm5SVWVYQmxLU0I3WEc0Z0lIWmhjaUJ2ZDI1bGNrNWhiV1VnUFNCblpYUkRkWEp5Wlc1MFQzZHVaWEpFYVhOd2JHRjVUbUZ0WlNncE8xeHVJQ0IyWVhJZ2NHRnlaVzUwVG1GdFpTQTlJSFI1Y0dWdlppQndZWEpsYm5SVWVYQmxJRDA5UFNBbmMzUnlhVzVuSnlBL1hHNGdJQ0FnY0dGeVpXNTBWSGx3WlNBNklIQmhjbVZ1ZEZSNWNHVXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z2NHRnlaVzUwVkhsd1pTNXVZVzFsTzF4dVhHNGdJSFpoY2lCMWMyVk9ZVzFsSUQwZ2IzZHVaWEpPWVcxbElIeDhJSEJoY21WdWRFNWhiV1U3WEc0Z0lIWmhjaUJ0WlcxdmFYcGxjaUE5SUc5M2JtVnlTR0Z6UzJWNVZYTmxWMkZ5Ym1sdVoxdHRaWE56WVdkbFhTQjhmQ0FvWEc0Z0lDQWdLRzkzYm1WeVNHRnpTMlY1VlhObFYyRnlibWx1WjF0dFpYTnpZV2RsWFNBOUlIdDlLVnh1SUNBcE8xeHVJQ0JwWmlBb2JXVnRiMmw2WlhJdWFHRnpUM2R1VUhKdmNHVnlkSGtvZFhObFRtRnRaU2twSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JpQWdiV1Z0YjJsNlpYSmJkWE5sVG1GdFpWMGdQU0IwY25WbE8xeHVYRzRnSUhaaGNpQndZWEpsYm5SUGNrOTNibVZ5UVdSa1pXNWtkVzBnUFZ4dUlDQWdJRzkzYm1WeVRtRnRaU0EvSUNoY0lpQkRhR1ZqYXlCMGFHVWdjbVZ1WkdWeUlHMWxkR2h2WkNCdlppQmNJaUFySUc5M2JtVnlUbUZ0WlNBcklGd2lMbHdpS1NBNlhHNGdJQ0FnY0dGeVpXNTBUbUZ0WlNBL0lDaGNJaUJEYUdWamF5QjBhR1VnVW1WaFkzUXVjbVZ1WkdWeUlHTmhiR3dnZFhOcGJtY2dQRndpSUNzZ2NHRnlaVzUwVG1GdFpTQXJJRndpUGk1Y0lpa2dPbHh1SUNBZ0lDY25PMXh1WEc0Z0lDOHZJRlZ6ZFdGc2JIa2dkR2hsSUdOMWNuSmxiblFnYjNkdVpYSWdhWE1nZEdobElHOW1abVZ1WkdWeUxDQmlkWFFnYVdZZ2FYUWdZV05qWlhCMGN5QmphR2xzWkhKbGJpQmhjeUJoWEc0Z0lDOHZJSEJ5YjNCbGNuUjVMQ0JwZENCdFlYa2dZbVVnZEdobElHTnlaV0YwYjNJZ2IyWWdkR2hsSUdOb2FXeGtJSFJvWVhRbmN5QnlaWE53YjI1emFXSnNaU0JtYjNKY2JpQWdMeThnWVhOemFXZHVhVzVuSUdsMElHRWdhMlY1TGx4dUlDQjJZWElnWTJocGJHUlBkMjVsY2tGa1pHVnVaSFZ0SUQwZ0p5YzdYRzRnSUdsbUlDaGxiR1Z0Wlc1MElDWW1YRzRnSUNBZ0lDQmxiR1Z0Wlc1MExsOXZkMjVsY2lBbUpseHVJQ0FnSUNBZ1pXeGxiV1Z1ZEM1ZmIzZHVaWElnSVQwOUlGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUxtTjFjbkpsYm5RcElIdGNiaUFnSUNBdkx5Qk9ZVzFsSUc5bUlIUm9aU0JqYjIxd2IyNWxiblFnZEdoaGRDQnZjbWxuYVc1aGJHeDVJR055WldGMFpXUWdkR2hwY3lCamFHbHNaQzVjYmlBZ0lDQjJZWElnWTJocGJHUlBkMjVsY2s1aGJXVWdQU0JuWlhST1lXMWxLR1ZzWlcxbGJuUXVYMjkzYm1WeUtUdGNibHh1SUNBZ0lHTm9hV3hrVDNkdVpYSkJaR1JsYm1SMWJTQTlJQ2hjSWlCSmRDQjNZWE1nY0dGemMyVmtJR0VnWTJocGJHUWdabkp2YlNCY0lpQXJJR05vYVd4a1QzZHVaWEpPWVcxbElDc2dYQ0l1WENJcE8xeHVJQ0I5WEc1Y2JpQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lIZGhjbTVwYm1jb1hHNGdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ2JXVnpjMkZuWlNBcklDY2xjeVZ6SUZObFpTQm9kSFJ3Y3pvdkwyWmlMbTFsTDNKbFlXTjBMWGRoY201cGJtY3RhMlY1Y3lCbWIzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJpNG5MRnh1SUNBZ0lIQmhjbVZ1ZEU5eVQzZHVaWEpCWkdSbGJtUjFiU3hjYmlBZ0lDQmphR2xzWkU5M2JtVnlRV1JrWlc1a2RXMWNiaUFnS1NBNklHNTFiR3dwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVZ1YzNWeVpTQjBhR0YwSUdWMlpYSjVJR1ZzWlcxbGJuUWdaV2wwYUdWeUlHbHpJSEJoYzNObFpDQnBiaUJoSUhOMFlYUnBZeUJzYjJOaGRHbHZiaXdnYVc0Z1lXNWNiaUFxSUdGeWNtRjVJSGRwZEdnZ1lXNGdaWGh3YkdsamFYUWdhMlY1Y3lCd2NtOXdaWEowZVNCa1pXWnBibVZrTENCdmNpQnBiaUJoYmlCdlltcGxZM1FnYkdsMFpYSmhiRnh1SUNvZ2QybDBhQ0IyWVd4cFpDQnJaWGtnY0hKdmNHVnlkSGt1WEc0Z0tseHVJQ29nUUdsdWRHVnlibUZzWEc0Z0tpQkFjR0Z5WVcwZ2UxSmxZV04wVG05a1pYMGdibTlrWlNCVGRHRjBhV05oYkd4NUlIQmhjM05sWkNCamFHbHNaQ0J2WmlCaGJua2dkSGx3WlM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnY0dGeVpXNTBWSGx3WlNCdWIyUmxKM01nY0dGeVpXNTBKM01nZEhsd1pTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RtRnNhV1JoZEdWRGFHbHNaRXRsZVhNb2JtOWtaU3dnY0dGeVpXNTBWSGx3WlNrZ2UxeHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2h1YjJSbEtTa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dibTlrWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdOb2FXeGtJRDBnYm05a1pWdHBYVHRjYmlBZ0lDQWdJR2xtSUNoU1pXRmpkRVZzWlcxbGJuUXVhWE5XWVd4cFpFVnNaVzFsYm5Rb1kyaHBiR1FwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSbFJYaHdiR2xqYVhSTFpYa29ZMmhwYkdRc0lIQmhjbVZ1ZEZSNWNHVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJR2xtSUNoU1pXRmpkRVZzWlcxbGJuUXVhWE5XWVd4cFpFVnNaVzFsYm5Rb2JtOWtaU2twSUh0Y2JpQWdJQ0F2THlCVWFHbHpJR1ZzWlcxbGJuUWdkMkZ6SUhCaGMzTmxaQ0JwYmlCaElIWmhiR2xrSUd4dlkyRjBhVzl1TGx4dUlDQWdJRzV2WkdVdVgzTjBiM0psTG5aaGJHbGtZWFJsWkNBOUlIUnlkV1U3WEc0Z0lIMGdaV3h6WlNCcFppQW9ibTlrWlNrZ2UxeHVJQ0FnSUhaaGNpQnBkR1Z5WVhSdmNrWnVJRDBnWjJWMFNYUmxjbUYwYjNKR2JpaHViMlJsS1R0Y2JpQWdJQ0F2THlCRmJuUnllU0JwZEdWeVlYUnZjbk1nY0hKdmRtbGtaU0JwYlhCc2FXTnBkQ0JyWlhsekxseHVJQ0FnSUdsbUlDaHBkR1Z5WVhSdmNrWnVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FYUmxjbUYwYjNKR2JpQWhQVDBnYm05a1pTNWxiblJ5YVdWektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGRHVnlZWFJ2Y2lBOUlHbDBaWEpoZEc5eVJtNHVZMkZzYkNodWIyUmxLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITjBaWEE3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2doS0hOMFpYQWdQU0JwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1VtVmhZM1JGYkdWdFpXNTBMbWx6Vm1Gc2FXUkZiR1Z0Wlc1MEtITjBaWEF1ZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3hwWkdGMFpVVjRjR3hwWTJsMFMyVjVLSE4wWlhBdWRtRnNkV1VzSUhCaGNtVnVkRlI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JRzV2WkdVZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1puSmhaMjFsYm5RZ1BTQlNaV0ZqZEVaeVlXZHRaVzUwTG1WNGRISmhZM1JKWmtaeVlXZHRaVzUwS0c1dlpHVXBPMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHWnlZV2R0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobWNtRm5iV1Z1ZEM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2FXUmhkR1ZRY205d1pYSjBlVXRsZVNoclpYa3NJR1p5WVdkdFpXNTBXMnRsZVYwc0lIQmhjbVZ1ZEZSNWNHVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVhOelpYSjBJSFJvWVhRZ2RHaGxJSEJ5YjNCeklHRnlaU0IyWVd4cFpGeHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCamIyMXdiMjVsYm5ST1lXMWxJRTVoYldVZ2IyWWdkR2hsSUdOdmJYQnZibVZ1ZENCbWIzSWdaWEp5YjNJZ2JXVnpjMkZuWlhNdVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdjSEp2Y0ZSNWNHVnpJRTFoY0NCdlppQndjbTl3SUc1aGJXVWdkRzhnWVNCU1pXRmpkRkJ5YjNCVWVYQmxYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnY0hKdmNITmNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JzYjJOaGRHbHZiaUJsTG1jdUlGd2ljSEp2Y0Z3aUxDQmNJbU52Ym5SbGVIUmNJaXdnWENKamFHbHNaQ0JqYjI1MFpYaDBYQ0pjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdOb1pXTnJVSEp2Y0ZSNWNHVnpLR052YlhCdmJtVnVkRTVoYldVc0lIQnliM0JVZVhCbGN5d2djSEp2Y0hNc0lHeHZZMkYwYVc5dUtTQjdYRzRnSUdadmNpQW9kbUZ5SUhCeWIzQk9ZVzFsSUdsdUlIQnliM0JVZVhCbGN5a2dlMXh1SUNBZ0lHbG1JQ2h3Y205d1ZIbHdaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29jSEp2Y0U1aGJXVXBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pYSnliM0k3WEc0Z0lDQWdJQ0F2THlCUWNtOXdJSFI1Y0dVZ2RtRnNhV1JoZEdsdmJpQnRZWGtnZEdoeWIzY3VJRWx1SUdOaGMyVWdkR2hsZVNCa2J5d2dkMlVnWkc5dUozUWdkMkZ1ZENCMGIxeHVJQ0FnSUNBZ0x5OGdabUZwYkNCMGFHVWdjbVZ1WkdWeUlIQm9ZWE5sSUhkb1pYSmxJR2wwSUdScFpHNG5kQ0JtWVdsc0lHSmxabTl5WlM0Z1UyOGdkMlVnYkc5bklHbDBMbHh1SUNBZ0lDQWdMeThnUVdaMFpYSWdkR2hsYzJVZ2FHRjJaU0JpWldWdUlHTnNaV0Z1WldRZ2RYQXNJSGRsSjJ4c0lHeGxkQ0IwYUdWdElIUm9jbTkzTGx4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnVkdocGN5QnBjeUJwYm5SbGJuUnBiMjVoYkd4NUlHRnVJR2x1ZG1GeWFXRnVkQ0IwYUdGMElHZGxkSE1nWTJGMVoyaDBMaUJKZENkeklIUm9aU0J6WVcxbFhHNGdJQ0FnSUNBZ0lDOHZJR0psYUdGMmFXOXlJR0Z6SUhkcGRHaHZkWFFnZEdocGN5QnpkR0YwWlcxbGJuUWdaWGhqWlhCMElIZHBkR2dnWVNCaVpYUjBaWElnYldWemMyRm5aUzVjYmlBZ0lDQWdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxiMllnY0hKdmNGUjVjR1Z6VzNCeWIzQk9ZVzFsWFNBOVBUMGdKMloxYm1OMGFXOXVKeXhjYmlBZ0lDQWdJQ0FnSUNBbkpYTTZJQ1Z6SUhSNWNHVWdZQ1Z6WUNCcGN5QnBiblpoYkdsa095QnBkQ0J0ZFhOMElHSmxJR0VnWm5WdVkzUnBiMjRzSUhWemRXRnNiSGtnWm5KdmJTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBblVtVmhZM1F1VUhKdmNGUjVjR1Z6TGljc1hHNGdJQ0FnSUNBZ0lDQWdZMjl0Y0c5dVpXNTBUbUZ0WlNCOGZDQW5VbVZoWTNRZ1kyeGhjM01uTEZ4dUlDQWdJQ0FnSUNBZ0lGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZiazVoYldWelcyeHZZMkYwYVc5dVhTeGNiaUFnSUNBZ0lDQWdJQ0J3Y205d1RtRnRaVnh1SUNBZ0lDQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtIUjVjR1Z2WmlCd2NtOXdWSGx3WlhOYmNISnZjRTVoYldWZElEMDlQU0FuWm5WdVkzUnBiMjRuS1NrN1hHNGdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2NISnZjRlI1Y0dWelczQnliM0JPWVcxbFhTaHdjbTl3Y3l3Z2NISnZjRTVoYldVc0lHTnZiWEJ2Ym1WdWRFNWhiV1VzSUd4dlkyRjBhVzl1S1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWNEtTQjdYRzRnSUNBZ0lDQWdJR1Z5Y205eUlEMGdaWGc3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb1pYSnliM0lnYVc1emRHRnVZMlZ2WmlCRmNuSnZjaUFtSmlBaEtHVnljbTl5TG0xbGMzTmhaMlVnYVc0Z2JHOW5aMlZrVkhsd1pVWmhhV3gxY21WektTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCUGJteDVJRzF2Ym1sMGIzSWdkR2hwY3lCbVlXbHNkWEpsSUc5dVkyVWdZbVZqWVhWelpTQjBhR1Z5WlNCMFpXNWtjeUIwYnlCaVpTQmhJR3h2ZENCdlppQjBhR1ZjYmlBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdiRzluWjJWa1ZIbHdaVVpoYVd4MWNtVnpXMlZ5Y205eUxtMWxjM05oWjJWZElEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnWVdSa1pXNWtkVzBnUFNCblpYUkVaV05zWVhKaGRHbHZia1Z5Y205eVFXUmtaVzVrZFcwb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LR1poYkhObExDQW5SbUZwYkdWa0lIQnliM0JVZVhCbE9pQWxjeVZ6Snl3Z1pYSnliM0l1YldWemMyRm5aU3dnWVdSa1pXNWtkVzBwSURvZ2JuVnNiQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm5aaGNpQjNZWEp1WldSUWNtOXdjMDExZEdGMGFXOXVjeUE5SUh0OU8xeHVYRzR2S2lwY2JpQXFJRmRoY200Z1lXSnZkWFFnYlhWMFlYUnBibWNnY0hKdmNITWdkMmhsYmlCelpYUjBhVzVuSUdCd2NtOXdUbUZ0WldBZ2IyNGdZR1ZzWlcxbGJuUmdMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQndjbTl3VG1GdFpTQlVhR1VnYzNSeWFXNW5JR3RsZVNCM2FYUm9hVzRnY0hKdmNITWdkR2hoZENCM1lYTWdjMlYwWEc0Z0tpQkFjR0Z5WVcwZ2UxSmxZV04wUld4bGJXVnVkSDBnWld4bGJXVnVkRnh1SUNvdlhHNW1kVzVqZEdsdmJpQjNZWEp1Um05eVVISnZjSE5OZFhSaGRHbHZiaWh3Y205d1RtRnRaU3dnWld4bGJXVnVkQ2tnZTF4dUlDQjJZWElnZEhsd1pTQTlJR1ZzWlcxbGJuUXVkSGx3WlR0Y2JpQWdkbUZ5SUdWc1pXMWxiblJPWVcxbElEMGdkSGx3Wlc5bUlIUjVjR1VnUFQwOUlDZHpkSEpwYm1jbklEOGdkSGx3WlNBNklIUjVjR1V1WkdsemNHeGhlVTVoYldVN1hHNGdJSFpoY2lCdmQyNWxjazVoYldVZ1BTQmxiR1Z0Wlc1MExsOXZkMjVsY2lBL1hHNGdJQ0FnWld4bGJXVnVkQzVmYjNkdVpYSXVaMlYwVUhWaWJHbGpTVzV6ZEdGdVkyVW9LUzVqYjI1emRISjFZM1J2Y2k1a2FYTndiR0Y1VG1GdFpTQTZJRzUxYkd3N1hHNWNiaUFnZG1GeUlIZGhjbTVwYm1kTFpYa2dQU0J3Y205d1RtRnRaU0FySUNkOEp5QXJJR1ZzWlcxbGJuUk9ZVzFsSUNzZ0ozd25JQ3NnYjNkdVpYSk9ZVzFsTzF4dUlDQnBaaUFvZDJGeWJtVmtVSEp2Y0hOTmRYUmhkR2x2Ym5NdWFHRnpUM2R1VUhKdmNHVnlkSGtvZDJGeWJtbHVaMHRsZVNrcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNiaUFnZDJGeWJtVmtVSEp2Y0hOTmRYUmhkR2x2Ym5OYmQyRnlibWx1WjB0bGVWMGdQU0IwY25WbE8xeHVYRzRnSUhaaGNpQmxiR1Z0Wlc1MFNXNW1ieUE5SUNjbk8xeHVJQ0JwWmlBb1pXeGxiV1Z1ZEU1aGJXVXBJSHRjYmlBZ0lDQmxiR1Z0Wlc1MFNXNW1ieUE5SUNjZ1BDY2dLeUJsYkdWdFpXNTBUbUZ0WlNBcklDY2dMejRuTzF4dUlDQjlYRzRnSUhaaGNpQnZkMjVsY2tsdVptOGdQU0FuSnp0Y2JpQWdhV1lnS0c5M2JtVnlUbUZ0WlNrZ2UxeHVJQ0FnSUc5M2JtVnlTVzVtYnlBOUlDY2dWR2hsSUdWc1pXMWxiblFnZDJGeklHTnlaV0YwWldRZ1lua2dKeUFySUc5M2JtVnlUbUZ0WlNBcklDY3VKenRjYmlBZ2ZWeHVYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ2RFYjI1Y1hDZDBJSE5sZENBdWNISnZjSE11SlhNZ2IyWWdkR2hsSUZKbFlXTjBJR052YlhCdmJtVnVkQ1Z6TGlCSmJuTjBaV0ZrTENCemNHVmphV1o1SUhSb1pTQW5JQ3RjYmlBZ0lDQW5ZMjl5Y21WamRDQjJZV3gxWlNCM2FHVnVJR2x1YVhScFlXeHNlU0JqY21WaGRHbHVaeUIwYUdVZ1pXeGxiV1Z1ZENCdmNpQjFjMlVnSnlBclhHNGdJQ0FnSjFKbFlXTjBMbU5zYjI1bFJXeGxiV1Z1ZENCMGJ5QnRZV3RsSUdFZ2JtVjNJR1ZzWlcxbGJuUWdkMmwwYUNCMWNHUmhkR1ZrSUhCeWIzQnpMaVZ6Snl4Y2JpQWdJQ0J3Y205d1RtRnRaU3hjYmlBZ0lDQmxiR1Z0Wlc1MFNXNW1ieXhjYmlBZ0lDQnZkMjVsY2tsdVptOWNiaUFnS1NBNklHNTFiR3dwTzF4dWZWeHVYRzR2THlCSmJteHBibVVnVDJKcVpXTjBMbWx6SUhCdmJIbG1hV3hzWEc1bWRXNWpkR2x2YmlCcGN5aGhMQ0JpS1NCN1hHNGdJR2xtSUNoaElDRTlQU0JoS1NCN1hHNGdJQ0FnTHk4Z1RtRk9YRzRnSUNBZ2NtVjBkWEp1SUdJZ0lUMDlJR0k3WEc0Z0lIMWNiaUFnYVdZZ0tHRWdQVDA5SURBZ0ppWWdZaUE5UFQwZ01Da2dlMXh1SUNBZ0lDOHZJQ3N0TUZ4dUlDQWdJSEpsZEhWeWJpQXhJQzhnWVNBOVBUMGdNU0F2SUdJN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdFZ1BUMDlJR0k3WEc1OVhHNWNiaThxS2x4dUlDb2dSMmwyWlc0Z1lXNGdaV3hsYldWdWRDd2dZMmhsWTJzZ2FXWWdhWFJ6SUhCeWIzQnpJR2hoZG1VZ1ltVmxiaUJ0ZFhSaGRHVmtJSE5wYm1ObElHVnNaVzFsYm5SY2JpQXFJR055WldGMGFXOXVJQ2h2Y2lCMGFHVWdiR0Z6ZENCallXeHNJSFJ2SUhSb2FYTWdablZ1WTNScGIyNHBMaUJKYmlCd1lYSjBhV04xYkdGeUxDQmphR1ZqYXlCcFppQmhibmxjYmlBcUlHNWxkeUJ3Y205d2N5Qm9ZWFpsSUdKbFpXNGdZV1JrWldRc0lIZG9hV05vSUhkbElHTmhiaWQwSUdScGNtVmpkR3g1SUdOaGRHTm9JR0o1SUdSbFptbHVhVzVuSUhkaGNtNXBibWRjYmlBcUlIQnliM0JsY25ScFpYTWdiMjRnZEdobElIQnliM0J6SUc5aWFtVmpkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ1pXeGxiV1Z1ZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYUdWamEwRnVaRmRoY201R2IzSk5kWFJoZEdWa1VISnZjSE1vWld4bGJXVnVkQ2tnZTF4dUlDQnBaaUFvSVdWc1pXMWxiblF1WDNOMGIzSmxLU0I3WEc0Z0lDQWdMeThnUld4bGJXVnVkQ0IzWVhNZ1kzSmxZWFJsWkNCMWMybHVaeUJnYm1WM0lGSmxZV04wUld4bGJXVnVkR0FnWkdseVpXTjBiSGtnYjNJZ2QybDBhRnh1SUNBZ0lDOHZJR0JTWldGamRFVnNaVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkR0E3SUhOcmFYQWdiWFYwWVhScGIyNGdZMmhsWTJ0cGJtZGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCMllYSWdiM0pwWjJsdVlXeFFjbTl3Y3lBOUlHVnNaVzFsYm5RdVgzTjBiM0psTG05eWFXZHBibUZzVUhKdmNITTdYRzRnSUhaaGNpQndjbTl3Y3lBOUlHVnNaVzFsYm5RdWNISnZjSE03WEc1Y2JpQWdabTl5SUNoMllYSWdjSEp2Y0U1aGJXVWdhVzRnY0hKdmNITXBJSHRjYmlBZ0lDQnBaaUFvY0hKdmNITXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NISnZjRTVoYldVcEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVc5eWFXZHBibUZzVUhKdmNITXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NISnZjRTVoYldVcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSVdsektHOXlhV2RwYm1Gc1VISnZjSE5iY0hKdmNFNWhiV1ZkTENCd2NtOXdjMXR3Y205d1RtRnRaVjBwS1NCN1hHNGdJQ0FnSUNBZ0lIZGhjbTVHYjNKUWNtOXdjMDExZEdGMGFXOXVLSEJ5YjNCT1lXMWxMQ0JsYkdWdFpXNTBLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkRiM0I1SUc5MlpYSWdkR2hsSUc1bGR5QjJZV3gxWlNCemJ5QjBhR0YwSUhSb1pTQjBkMjhnY0hKdmNITWdiMkpxWldOMGN5QnRZWFJqYUNCaFoyRnBibHh1SUNBZ0lDQWdJQ0J2Y21sbmFXNWhiRkJ5YjNCelczQnliM0JPWVcxbFhTQTlJSEJ5YjNCelczQnliM0JPWVcxbFhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkhhWFpsYmlCaGJpQmxiR1Z0Wlc1MExDQjJZV3hwWkdGMFpTQjBhR0YwSUdsMGN5QndjbTl3Y3lCbWIyeHNiM2NnZEdobElIQnliM0JVZVhCbGN5QmtaV1pwYm1sMGFXOXVMRnh1SUNvZ2NISnZkbWxrWldRZ1lua2dkR2hsSUhSNWNHVXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdFNaV0ZqZEVWc1pXMWxiblI5SUdWc1pXMWxiblJjYmlBcUwxeHVablZ1WTNScGIyNGdkbUZzYVdSaGRHVlFjbTl3Vkhsd1pYTW9aV3hsYldWdWRDa2dlMXh1SUNCcFppQW9aV3hsYldWdWRDNTBlWEJsSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0F2THlCVWFHbHpJR2hoY3lCaGJISmxZV1I1SUhkaGNtNWxaQzRnUkc5dUozUWdkR2h5YjNjdVhHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNGdJQzh2SUVWNGRISmhZM1FnZEdobElHTnZiWEJ2Ym1WdWRDQmpiR0Z6Y3lCbWNtOXRJSFJvWlNCbGJHVnRaVzUwTGlCRGIyNTJaWEowY3lCemRISnBibWNnZEhsd1pYTmNiaUFnTHk4Z2RHOGdZU0JqYjIxd2IzTnBkR1VnWTJ4aGMzTWdkMmhwWTJnZ2JXRjVJR2hoZG1VZ2NISnZjRlI1Y0dWekxseHVJQ0F2THlCVVQwUlBPaUJXWVd4cFpHRjBhVzVuSUdFZ2MzUnlhVzVuSjNNZ2NISnZjRlI1Y0dWeklHbHpJRzV2ZENCa1pXTnZkWEJzWldRZ1puSnZiU0IwYUdWY2JpQWdMeThnY21WdVpHVnlhVzVuSUhSaGNtZGxkQ0IzYUdsamFDQnBjeUJ3Y205aWJHVnRZWFJwWXk1Y2JpQWdkbUZ5SUdOdmJYQnZibVZ1ZEVOc1lYTnpJRDBnVW1WaFkzUk9ZWFJwZG1WRGIyMXdiMjVsYm5RdVoyVjBRMjl0Y0c5dVpXNTBRMnhoYzNOR2IzSkZiR1Z0Wlc1MEtGeHVJQ0FnSUdWc1pXMWxiblJjYmlBZ0tUdGNiaUFnZG1GeUlHNWhiV1VnUFNCamIyMXdiMjVsYm5SRGJHRnpjeTVrYVhOd2JHRjVUbUZ0WlNCOGZDQmpiMjF3YjI1bGJuUkRiR0Z6Y3k1dVlXMWxPMXh1SUNCcFppQW9ZMjl0Y0c5dVpXNTBRMnhoYzNNdWNISnZjRlI1Y0dWektTQjdYRzRnSUNBZ1kyaGxZMnRRY205d1ZIbHdaWE1vWEc0Z0lDQWdJQ0J1WVcxbExGeHVJQ0FnSUNBZ1kyOXRjRzl1Wlc1MFEyeGhjM011Y0hKdmNGUjVjR1Z6TEZ4dUlDQWdJQ0FnWld4bGJXVnVkQzV3Y205d2N5eGNiaUFnSUNBZ0lGSmxZV04wVUhKdmNGUjVjR1ZNYjJOaGRHbHZibk11Y0hKdmNGeHVJQ0FnSUNrN1hHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQmpiMjF3YjI1bGJuUkRiR0Z6Y3k1blpYUkVaV1poZFd4MFVISnZjSE1nUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2QyRnlibWx1WnloY2JpQWdJQ0FnSUdOdmJYQnZibVZ1ZEVOc1lYTnpMbWRsZEVSbFptRjFiSFJRY205d2N5NXBjMUpsWVdOMFEyeGhjM05CY0hCeWIzWmxaQ3hjYmlBZ0lDQWdJQ2RuWlhSRVpXWmhkV3gwVUhKdmNITWdhWE1nYjI1c2VTQjFjMlZrSUc5dUlHTnNZWE56YVdNZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNNZ0p5QXJYRzRnSUNBZ0lDQW5aR1ZtYVc1cGRHbHZibk11SUZWelpTQmhJSE4wWVhScFl5QndjbTl3WlhKMGVTQnVZVzFsWkNCZ1pHVm1ZWFZzZEZCeWIzQnpZQ0JwYm5OMFpXRmtMaWRjYmlBZ0lDQXBJRG9nYm5Wc2JDazdYRzRnSUgxY2JuMWNibHh1ZG1GeUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaUE5SUh0Y2JseHVJQ0JqYUdWamEwRnVaRmRoY201R2IzSk5kWFJoZEdWa1VISnZjSE02SUdOb1pXTnJRVzVrVjJGeWJrWnZjazExZEdGMFpXUlFjbTl3Y3l4Y2JseHVJQ0JqY21WaGRHVkZiR1Z0Wlc1ME9pQm1kVzVqZEdsdmJpaDBlWEJsTENCd2NtOXdjeXdnWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0F2THlCWFpTQjNZWEp1SUdsdUlIUm9hWE1nWTJGelpTQmlkWFFnWkc5dUozUWdkR2h5YjNjdUlGZGxJR1Y0Y0dWamRDQjBhR1VnWld4bGJXVnVkQ0JqY21WaGRHbHZiaUIwYjF4dUlDQWdJQzh2SUhOMVkyTmxaV1FnWVc1a0lIUm9aWEpsSUhkcGJHd2diR2xyWld4NUlHSmxJR1Z5Y205eWN5QnBiaUJ5Wlc1a1pYSXVYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUhkaGNtNXBibWNvWEc0Z0lDQWdJQ0IwZVhCbElDRTlJRzUxYkd3c1hHNGdJQ0FnSUNBblVtVmhZM1F1WTNKbFlYUmxSV3hsYldWdWREb2dkSGx3WlNCemFHOTFiR1FnYm05MElHSmxJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtMaUJKZENCemFHOTFiR1FnSnlBclhHNGdJQ0FnSUNBZ0lDZGlaU0JoSUhOMGNtbHVaeUFvWm05eUlFUlBUU0JsYkdWdFpXNTBjeWtnYjNJZ1lTQlNaV0ZqZEVOc1lYTnpJQ2htYjNJZ1kyOXRjRzl6YVhSbElDY2dLMXh1SUNBZ0lDQWdJQ0FuWTI5dGNHOXVaVzUwY3lrdUoxeHVJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JseHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdVbVZoWTNSRmJHVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JseHVJQ0FnSUM4dklGUm9aU0J5WlhOMWJIUWdZMkZ1SUdKbElHNTFiR3hwYzJnZ2FXWWdZU0J0YjJOcklHOXlJR0VnWTNWemRHOXRJR1oxYm1OMGFXOXVJR2x6SUhWelpXUXVYRzRnSUNBZ0x5OGdWRTlFVHpvZ1JISnZjQ0IwYUdseklIZG9aVzRnZEdobGMyVWdZWEpsSUc1dklHeHZibWRsY2lCaGJHeHZkMlZrSUdGeklIUm9aU0IwZVhCbElHRnlaM1Z0Wlc1MExseHVJQ0FnSUdsbUlDaGxiR1Z0Wlc1MElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbGJHVnRaVzUwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeU95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZV3hwWkdGMFpVTm9hV3hrUzJWNWN5aGhjbWQxYldWdWRITmJhVjBzSUhSNWNHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhiR2xrWVhSbFVISnZjRlI1Y0dWektHVnNaVzFsYm5RcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblE3WEc0Z0lIMHNYRzVjYmlBZ1kzSmxZWFJsUm1GamRHOXllVG9nWm5WdVkzUnBiMjRvZEhsd1pTa2dlMXh1SUNBZ0lIWmhjaUIyWVd4cFpHRjBaV1JHWVdOMGIzSjVJRDBnVW1WaFkzUkZiR1Z0Wlc1MFZtRnNhV1JoZEc5eUxtTnlaV0YwWlVWc1pXMWxiblF1WW1sdVpDaGNiaUFnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0IwZVhCbFhHNGdJQ0FnS1R0Y2JpQWdJQ0F2THlCTVpXZGhZM2tnYUc5dmF5QlVUMFJQT2lCWFlYSnVJR2xtSUhSb2FYTWdhWE1nWVdOalpYTnpaV1JjYmlBZ0lDQjJZV3hwWkdGMFpXUkdZV04wYjNKNUxuUjVjR1VnUFNCMGVYQmxPMXh1WEc0Z0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRnh1SUNBZ0lDQWdJQ0FnSUhaaGJHbGtZWFJsWkVaaFkzUnZjbmtzWEc0Z0lDQWdJQ0FnSUNBZ0ozUjVjR1VuTEZ4dUlDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUhkaGNtNXBibWNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMFpoWTNSdmNua3VkSGx3WlNCcGN5QmtaWEJ5WldOaGRHVmtMaUJCWTJObGMzTWdkR2hsSUdOc1lYTnpJR1JwY21WamRHeDVJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkaVpXWnZjbVVnY0dGemMybHVaeUJwZENCMGJ5QmpjbVZoZEdWR1lXTjBiM0o1TGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NBNklHNTFiR3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSjNSNWNHVW5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFI1Y0dWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwZVhCbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLSGdwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdTVVVnZDJsc2JDQm1ZV2xzSUc5dUlHUmxabWx1WlZCeWIzQmxjblI1SUNobGN6VXRjMmhwYlM5emFHRnRJSFJ2YnlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUhKbGRIVnliaUIyWVd4cFpHRjBaV1JHWVdOMGIzSjVPMXh1SUNCOUxGeHVYRzRnSUdOc2IyNWxSV3hsYldWdWREb2dablZ1WTNScGIyNG9aV3hsYldWdWRDd2djSEp2Y0hNc0lHTm9hV3hrY21WdUtTQjdYRzRnSUNBZ2RtRnlJRzVsZDBWc1pXMWxiblFnUFNCU1pXRmpkRVZzWlcxbGJuUXVZMnh2Ym1WRmJHVnRaVzUwTG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREk3SUdrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGJHbGtZWFJsUTJocGJHUkxaWGx6S0dGeVozVnRaVzUwYzF0cFhTd2dibVYzUld4bGJXVnVkQzUwZVhCbEtUdGNiaUFnSUNCOVhHNGdJQ0FnZG1Gc2FXUmhkR1ZRY205d1ZIbHdaWE1vYm1WM1JXeGxiV1Z1ZENrN1hHNGdJQ0FnY21WMGRYSnVJRzVsZDBWc1pXMWxiblE3WEc0Z0lIMWNibHh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0k3WEc0aVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaWQpe251bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF09ITB9ZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCl7ZGVsZXRlIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF19ZnVuY3Rpb24gaXNOdWxsQ29tcG9uZW50SUQoaWQpe3JldHVybiEhbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXX12YXIgUmVhY3RFbGVtZW50PXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKSxSZWFjdEluc3RhbmNlTWFwPXJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxjb21wb25lbnQsbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5PXt9LFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb249e2luamVjdEVtcHR5Q29tcG9uZW50OmZ1bmN0aW9uKGVtcHR5Q29tcG9uZW50KXtjb21wb25lbnQ9UmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoZW1wdHlDb21wb25lbnQpfX0sUmVhY3RFbXB0eUNvbXBvbmVudFR5cGU9ZnVuY3Rpb24oKXt9O1JlYWN0RW1wdHlDb21wb25lbnRUeXBlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbigpe3ZhciBpbnRlcm5hbEluc3RhbmNlPVJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpO2ludGVybmFsSW5zdGFuY2UmJnJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGludGVybmFsSW5zdGFuY2UuX3Jvb3ROb2RlSUQpfSxSZWFjdEVtcHR5Q29tcG9uZW50VHlwZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgaW50ZXJuYWxJbnN0YW5jZT1SZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKTtpbnRlcm5hbEluc3RhbmNlJiZkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGludGVybmFsSW5zdGFuY2UuX3Jvb3ROb2RlSUQpfSxSZWFjdEVtcHR5Q29tcG9uZW50VHlwZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoY29tcG9uZW50LFwiVHJ5aW5nIHRvIHJldHVybiBudWxsIGZyb20gYSByZW5kZXIsIGJ1dCBubyBudWxsIHBsYWNlaG9sZGVyIGNvbXBvbmVudCB3YXMgaW5qZWN0ZWQuXCIpOmludmFyaWFudChjb21wb25lbnQpLGNvbXBvbmVudCgpfTt2YXIgZW1wdHlFbGVtZW50PVJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50KFJlYWN0RW1wdHlDb21wb25lbnRUeXBlKSxSZWFjdEVtcHR5Q29tcG9uZW50PXtlbXB0eUVsZW1lbnQ6ZW1wdHlFbGVtZW50LGluamVjdGlvbjpSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uLGlzTnVsbENvbXBvbmVudElEOmlzTnVsbENvbXBvbmVudElEfTttb2R1bGUuZXhwb3J0cz1SZWFjdEVtcHR5Q29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJWMEVzV1VGeFJFRXNVMEZCVXl4NVFrRkJkMElzU1VGREwwSXNlVUpCUVhsQ0xFdEJRVTBzUlVGUGFrTXNVVUZCVXl3eVFrRkJNRUlzVlVGRE1VSXNNRUpCUVhsQ0xFbEJUMnhETEZGQlFWTXNiVUpCUVd0Q0xFbEJRM3BDTEZGQlFWTXNlVUpCUVhsQ0xFbEJjRVZ3UXl4SFFVRkpMR05CUVdVc1VVRkJVU3hyUWtGRGRrSXNhVUpCUVcxQ0xGRkJRVkVzYzBKQlJUTkNMRlZCUVZrc1VVRkJVU3hsUVVWd1FpeFZRVWRCTERSQ1FVVkJMRGhDUVVOR0xIRkNRVUZ6UWl4VFFVRlRMR2RDUVVNM1FpeFZRVUZaTEdGQlFXRXNZMEZCWXl4clFrRkpka01zZDBKQlFUQkNMRmxCUXpsQ0xIbENRVUYzUWl4VlFVRlZMR3RDUVVGdlFpeFhRVU53UkN4SFFVRkpMR3RDUVVGdFFpeHBRa0ZCYVVJc1NVRkJTU3hMUVV0MlF5eHRRa0ZIVEN4M1FrRkJkMElzYVVKQlFXbENMR05CUlRORExIZENRVUYzUWl4VlFVRlZMSEZDUVVGMVFpeFhRVU4yUkN4SFFVRkpMR3RDUVVGdFFpeHBRa0ZCYVVJc1NVRkJTU3hMUVVWMlF5eHRRa0ZIVEN3d1FrRkJNRUlzYVVKQlFXbENMR05CUlRkRExIZENRVUYzUWl4VlFVRlZMRTlCUVZNc1YwRk5la01zVFVGTVF5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eFZRVU5CTEhkR1FVVkZMRlZCUVZVc1YwRkRVQ3haUVVkVUxFbEJRVWtzWTBGQlpTeGhRVUZoTEdOQlFXTXNlVUpCTUVJeFF5eHhRa0ZEUml4aFFVRmpMR0ZCUTJRc1ZVRkJWeXcyUWtGRFdDeHJRa0ZCYlVJc2EwSkJSM0pDTEZGQlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TkMweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBSVzF3ZEhsRGIyMXdiMjVsYm5SY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQlNaV0ZqZEVWc1pXMWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVWc1pXMWxiblJjSWlrN1hHNTJZWElnVW1WaFkzUkpibk4wWVc1alpVMWhjQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wU1c1emRHRnVZMlZOWVhCY0lpazdYRzVjYm5aaGNpQnBiblpoY21saGJuUWdQU0J5WlhGMWFYSmxLRndpTGk5cGJuWmhjbWxoYm5SY0lpazdYRzVjYm5aaGNpQmpiMjF3YjI1bGJuUTdYRzR2THlCVWFHbHpJSEpsWjJsemRISjVJR3RsWlhCeklIUnlZV05ySUc5bUlIUm9aU0JTWldGamRDQkpSSE1nYjJZZ2RHaGxJR052YlhCdmJtVnVkSE1nZEdoaGRDQnlaVzVrWlhKbFpDQjBiMXh1THk4Z1lHNTFiR3hnSUNocGJpQnlaV0ZzYVhSNUlHRWdjR3hoWTJWb2IyeGtaWElnYzNWamFDQmhjeUJnYm05elkzSnBjSFJnS1Z4dWRtRnlJRzUxYkd4RGIyMXdiMjVsYm5SSlJITlNaV2RwYzNSeWVTQTlJSHQ5TzF4dVhHNTJZWElnVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZEVsdWFtVmpkR2x2YmlBOUlIdGNiaUFnYVc1cVpXTjBSVzF3ZEhsRGIyMXdiMjVsYm5RNklHWjFibU4wYVc5dUtHVnRjSFI1UTI5dGNHOXVaVzUwS1NCN1hHNGdJQ0FnWTI5dGNHOXVaVzUwSUQwZ1VtVmhZM1JGYkdWdFpXNTBMbU55WldGMFpVWmhZM1J2Y25rb1pXMXdkSGxEYjIxd2IyNWxiblFwTzF4dUlDQjlYRzU5TzF4dVhHNTJZWElnVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZEZSNWNHVWdQU0JtZFc1amRHbHZiaWdwSUh0OU8xeHVVbVZoWTNSRmJYQjBlVU52YlhCdmJtVnVkRlI1Y0dVdWNISnZkRzkwZVhCbExtTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lIWmhjaUJwYm5SbGNtNWhiRWx1YzNSaGJtTmxJRDBnVW1WaFkzUkpibk4wWVc1alpVMWhjQzVuWlhRb2RHaHBjeWs3WEc0Z0lDOHZJRlJQUkU4NklFMWhhMlVnYzNWeVpTQjNaU0J5ZFc0Z2RHaGxjMlVnYldWMGFHOWtjeUJwYmlCMGFHVWdZMjl5Y21WamRDQnZjbVJsY2l3Z2QyVWdjMmh2ZFd4a2JpZDBYRzRnSUM4dklHNWxaV1FnZEdocGN5QmphR1ZqYXk0Z1YyVW5jbVVnWjI5cGJtY2dkRzhnWVhOemRXMWxJR2xtSUhkbEozSmxJR2hsY21VZ2FYUWdiV1ZoYm5NZ2QyVWdjbUZ1WEc0Z0lDOHZJR052YlhCdmJtVnVkRmRwYkd4VmJtMXZkVzUwSUdGc2NtVmhaSGtnYzI4Z2RHaGxjbVVnYVhNZ2JtOGdhVzUwWlhKdVlXd2dhVzV6ZEdGdVkyVWdLR2wwSUdkbGRITmNiaUFnTHk4Z2NtVnRiM1psWkNCaGN5QndZWEowSUc5bUlIUm9aU0IxYm0xdmRXNTBhVzVuSUhCeWIyTmxjM01wTGx4dUlDQnBaaUFvSVdsdWRHVnlibUZzU1c1emRHRnVZMlVwSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JpQWdjbVZuYVhOMFpYSk9kV3hzUTI5dGNHOXVaVzUwU1VRb2FXNTBaWEp1WVd4SmJuTjBZVzVqWlM1ZmNtOXZkRTV2WkdWSlJDazdYRzU5TzF4dVVtVmhZM1JGYlhCMGVVTnZiWEJ2Ym1WdWRGUjVjR1V1Y0hKdmRHOTBlWEJsTG1OdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1MElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lIWmhjaUJwYm5SbGNtNWhiRWx1YzNSaGJtTmxJRDBnVW1WaFkzUkpibk4wWVc1alpVMWhjQzVuWlhRb2RHaHBjeWs3WEc0Z0lDOHZJRlJQUkU4NklFZGxkQ0J5YVdRZ2IyWWdkR2hwY3lCamFHVmpheTRnVTJWbElGUlBSRThnYVc0Z1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5RdVhHNGdJR2xtSUNnaGFXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVJQ0JrWlhKbFoybHpkR1Z5VG5Wc2JFTnZiWEJ2Ym1WdWRFbEVLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0p2YjNST2IyUmxTVVFwTzF4dWZUdGNibEpsWVdOMFJXMXdkSGxEYjIxd2IyNWxiblJVZVhCbExuQnliM1J2ZEhsd1pTNXlaVzVrWlhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0JqYjIxd2IyNWxiblFzWEc0Z0lDQWdKMVJ5ZVdsdVp5QjBieUJ5WlhSMWNtNGdiblZzYkNCbWNtOXRJR0VnY21WdVpHVnlMQ0JpZFhRZ2JtOGdiblZzYkNCd2JHRmpaV2h2YkdSbGNpQmpiMjF3YjI1bGJuUWdKeUFyWEc0Z0lDQWdKM2RoY3lCcGJtcGxZM1JsWkM0blhHNGdJQ2tnT2lCcGJuWmhjbWxoYm5Rb1kyOXRjRzl1Wlc1MEtTazdYRzRnSUhKbGRIVnliaUJqYjIxd2IyNWxiblFvS1R0Y2JuMDdYRzVjYm5aaGNpQmxiWEIwZVVWc1pXMWxiblFnUFNCU1pXRmpkRVZzWlcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoU1pXRmpkRVZ0Y0hSNVEyOXRjRzl1Wlc1MFZIbHdaU2s3WEc1Y2JpOHFLbHh1SUNvZ1RXRnlheUIwYUdVZ1kyOXRjRzl1Wlc1MElHRnpJR2hoZG1sdVp5QnlaVzVrWlhKbFpDQjBieUJ1ZFd4c0xseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUVOdmJYQnZibVZ1ZENkeklHQmZjbTl2ZEU1dlpHVkpSR0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEpsWjJsemRHVnlUblZzYkVOdmJYQnZibVZ1ZEVsRUtHbGtLU0I3WEc0Z0lHNTFiR3hEYjIxd2IyNWxiblJKUkhOU1pXZHBjM1J5ZVZ0cFpGMGdQU0IwY25WbE8xeHVmVnh1WEc0dktpcGNiaUFxSUZWdWJXRnlheUIwYUdVZ1kyOXRjRzl1Wlc1MElHRnpJR2hoZG1sdVp5QnlaVzVrWlhKbFpDQjBieUJ1ZFd4c09pQnBkQ0J5Wlc1a1pYSnpJSFJ2SUhOdmJXVjBhR2x1WnlCdWIzY3VYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYVdRZ1EyOXRjRzl1Wlc1MEozTWdZRjl5YjI5MFRtOWtaVWxFWUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWkdWeVpXZHBjM1JsY2s1MWJHeERiMjF3YjI1bGJuUkpSQ2hwWkNrZ2UxeHVJQ0JrWld4bGRHVWdiblZzYkVOdmJYQnZibVZ1ZEVsRWMxSmxaMmx6ZEhKNVcybGtYVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FXUWdRMjl0Y0c5dVpXNTBKM01nWUY5eWIyOTBUbTlrWlVsRVlDNWNiaUFxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZEdobElHTnZiWEJ2Ym1WdWRDQnBjeUJ5Wlc1a1pYSmxaQ0IwYnlCdWRXeHNMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMDUxYkd4RGIyMXdiMjVsYm5SSlJDaHBaQ2tnZTF4dUlDQnlaWFIxY200Z0lTRnVkV3hzUTI5dGNHOXVaVzUwU1VSelVtVm5hWE4wY25sYmFXUmRPMXh1ZlZ4dVhHNTJZWElnVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZENBOUlIdGNiaUFnWlcxd2RIbEZiR1Z0Wlc1ME9pQmxiWEIwZVVWc1pXMWxiblFzWEc0Z0lHbHVhbVZqZEdsdmJqb2dVbVZoWTNSRmJYQjBlVU52YlhCdmJtVnVkRWx1YW1WamRHbHZiaXhjYmlBZ2FYTk9kV3hzUTI5dGNHOXVaVzUwU1VRNklHbHpUblZzYkVOdmJYQnZibVZ1ZEVsRVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBSVzF3ZEhsRGIyMXdiMjVsYm5RN1hHNGlYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXJyb3JVdGlsc1xuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBndWFyZGVkIHZlcnNpb24gb2YgYSBmdW5jdGlvbi4gVGhpcyBpcyBzdXBwb3NlZCB0byBtYWtlIGRlYnVnZ2luZ1xuICAgKiBvZiBldmVudCBoYW5kbGVycyBlYXNpZXIuIFRvIGFpZCBkZWJ1Z2dpbmcgd2l0aCB0aGUgYnJvd3NlcidzIGRlYnVnZ2VyLFxuICAgKiB0aGlzIGN1cnJlbnRseSBzaW1wbHkgcmV0dXJucyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGd1YXJkXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgKi9cbiAgZ3VhcmQ6IGZ1bmN0aW9uKGZ1bmMsIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuYztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVycm9yVXRpbHM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFdmVudEVtaXR0ZXJNaXhpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKCk7XG59XG5cbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0ge1xuXG4gIC8qKlxuICAgKiBTdHJlYW1zIGEgZmlyZWQgdG9wLWxldmVsIGV2ZW50IHRvIGBFdmVudFBsdWdpbkh1YmAgd2hlcmUgcGx1Z2lucyBoYXZlIHRoZVxuICAgKiBvcHBvcnR1bml0eSB0byBjcmVhdGUgYFJlYWN0RXZlbnRgcyB0byBiZSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgZW52aXJvbm1lbnQgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIHZhciBldmVudHMgPSBFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuXG4gICAgcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50RW1pdHRlck1peGluO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZShcIi4vRXZlbnRMaXN0ZW5lclwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRUYXJnZXRcIik7XG52YXIgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKFwiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiKTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgcGFyZW50IFJlYWN0IGNvbXBvbmVudCBvZiBgbm9kZWAuXG4gKlxuICogQHBhcmFtIHsqfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9IFBhcmVudCBjb250YWluZXIsIG9yIGBudWxsYCBpZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IG5lc3RlZC5cbiAqL1xuZnVuY3Rpb24gZmluZFBhcmVudChub2RlKSB7XG4gIC8vIFRPRE86IEl0IG1heSBiZSBhIGdvb2QgaWRlYSB0byBjYWNoZSB0aGlzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgRE9NXG4gIC8vIHRyYXZlcnNhbCwgYnV0IGNhY2hpbmcgaXMgZGlmZmljdWx0IHRvIGRvIGNvcnJlY3RseSB3aXRob3V0IHVzaW5nIGFcbiAgLy8gbXV0YXRpb24gb2JzZXJ2ZXIgdG8gbGlzdGVuIGZvciBhbGwgRE9NIGNoYW5nZXMuXG4gIHZhciBub2RlSUQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICB2YXIgcm9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKHJvb3RJRCk7XG4gIHZhciBwYXJlbnQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oY29udGFpbmVyKTtcbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuLy8gVXNlZCB0byBzdG9yZSBhbmNlc3RvciBoaWVyYXJjaHkgaW4gdG9wIGxldmVsIGNhbGxiYWNrXG5mdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICB0aGlzLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xufVxuYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUsIHtcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuYW5jZXN0b3JzLmxlbmd0aCA9IDA7XG4gIH1cbn0pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFxuICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcsXG4gIFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyXG4pO1xuXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgdmFyIHRvcExldmVsVGFyZ2V0ID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NKFxuICAgIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KVxuICApIHx8IHdpbmRvdztcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdG9wTGV2ZWxUYXJnZXQ7XG4gIHdoaWxlIChhbmNlc3Rvcikge1xuICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICBhbmNlc3RvciA9IGZpbmRQYXJlbnQoYW5jZXN0b3IpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdG9wTGV2ZWxUYXJnZXQgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgdmFyIHRvcExldmVsVGFyZ2V0SUQgPSBSZWFjdE1vdW50LmdldElEKHRvcExldmVsVGFyZ2V0KSB8fCAnJztcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKFxuICAgICAgYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgYm9va0tlZXBpbmcubmF0aXZlRXZlbnRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpO1xuICBjYihzY3JvbGxQb3NpdGlvbik7XG59XG5cbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG4gIF9lbmFibGVkOiB0cnVlLFxuICBfaGFuZGxlVG9wTGV2ZWw6IG51bGwsXG5cbiAgV0lORE9XX0hBTkRMRTogRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93IDogbnVsbCxcblxuICBzZXRIYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24oaGFuZGxlVG9wTGV2ZWwpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gIH0sXG5cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCA9ICEhZW5hYmxlZDtcbiAgfSxcblxuICBpc0VuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQ7XG4gIH0sXG5cblxuICAvKipcbiAgICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5saXN0ZW4oXG4gICAgICBlbGVtZW50LFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJhcHMgYSB0b3AtbGV2ZWwgZXZlbnQgYnkgdXNpbmcgZXZlbnQgY2FwdHVyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGVyQmFzZU5hbWUgRXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlIEVsZW1lbnQgb24gd2hpY2ggdG8gYXR0YWNoIGxpc3RlbmVyLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5jYXB0dXJlKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKVxuICAgICk7XG4gIH0sXG5cbiAgbW9uaXRvclNjcm9sbFZhbHVlOiBmdW5jdGlvbihyZWZyZXNoKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gc2Nyb2xsVmFsdWVNb25pdG9yLmJpbmQobnVsbCwgcmVmcmVzaCk7XG4gICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAnc2Nyb2xsJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoIVJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBib29rS2VlcGluZyA9IFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5nZXRQb29sZWQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEV2ZW50IHF1ZXVlIGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgc2FtZSBjeWNsZSBhbGxvd3NcbiAgICAgIC8vIGBwcmV2ZW50RGVmYXVsdGAuXG4gICAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLCBib29rS2VlcGluZyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5yZWxlYXNlKGJvb2tLZWVwaW5nKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudExpc3RlbmVyO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgZnJhZ21lbnRLZXk9XCJfcmVhY3RGcmFnbWVudFwiLGRpZFdhcm5LZXk9XCJfcmVhY3REaWRXYXJuXCIsY2FuV2FybkZvclJlYWN0RnJhZ21lbnQ9ITE7dHJ5e3ZhciBkdW1teT1mdW5jdGlvbigpe3JldHVybiAxfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sZnJhZ21lbnRLZXkse2VudW1lcmFibGU6ITEsdmFsdWU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJrZXlcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZHVtbXl9KSxjYW5XYXJuRm9yUmVhY3RGcmFnbWVudD0hMH1jYXRjaCh4KXt9dmFyIHByb3h5UHJvcGVydHlBY2Nlc3NXaXRoV2FybmluZz1mdW5jdGlvbihvYmosa2V5KXtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcodGhpc1tkaWRXYXJuS2V5XSxcIkEgUmVhY3RGcmFnbWVudCBpcyBhbiBvcGFxdWUgdHlwZS4gQWNjZXNzaW5nIGFueSBvZiBpdHMgcHJvcGVydGllcyBpcyBkZXByZWNhdGVkLiBQYXNzIGl0IHRvIG9uZSBvZiB0aGUgUmVhY3QuQ2hpbGRyZW4gaGVscGVycy5cIik6bnVsbCx0aGlzW2RpZFdhcm5LZXldPSEwLHRoaXNbZnJhZ21lbnRLZXldW2tleV19LHNldDpmdW5jdGlvbih2YWx1ZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKHRoaXNbZGlkV2FybktleV0sXCJBIFJlYWN0RnJhZ21lbnQgaXMgYW4gaW1tdXRhYmxlIG9wYXF1ZSB0eXBlLiBNdXRhdGluZyBpdHMgcHJvcGVydGllcyBpcyBkZXByZWNhdGVkLlwiKTpudWxsLHRoaXNbZGlkV2FybktleV09ITAsdGhpc1tmcmFnbWVudEtleV1ba2V5XT12YWx1ZX19KX0saXNzdWVkV2FybmluZ3M9e30sZGlkV2FybkZvckZyYWdtZW50PWZ1bmN0aW9uKGZyYWdtZW50KXt2YXIgZnJhZ21lbnRDYWNoZUtleT1cIlwiO2Zvcih2YXIga2V5IGluIGZyYWdtZW50KWZyYWdtZW50Q2FjaGVLZXkrPWtleStcIjpcIit0eXBlb2YgZnJhZ21lbnRba2V5XStcIixcIjt2YXIgYWxyZWFkeVdhcm5lZE9uY2U9ISFpc3N1ZWRXYXJuaW5nc1tmcmFnbWVudENhY2hlS2V5XTtyZXR1cm4gaXNzdWVkV2FybmluZ3NbZnJhZ21lbnRDYWNoZUtleV09ITAsYWxyZWFkeVdhcm5lZE9uY2V9fXZhciBSZWFjdEZyYWdtZW50PXtjcmVhdGU6ZnVuY3Rpb24ob2JqZWN0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXtpZihcIm9iamVjdFwiIT10eXBlb2Ygb2JqZWN0fHwhb2JqZWN0fHxBcnJheS5pc0FycmF5KG9iamVjdCkpcmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwiUmVhY3QuYWRkb25zLmNyZWF0ZUZyYWdtZW50IG9ubHkgYWNjZXB0cyBhIHNpbmdsZSBvYmplY3QuXCIsb2JqZWN0KTpudWxsLG9iamVjdDtpZihSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQob2JqZWN0KSlyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoITEsXCJSZWFjdC5hZGRvbnMuY3JlYXRlRnJhZ21lbnQgZG9lcyBub3QgYWNjZXB0IGEgUmVhY3RFbGVtZW50IHdpdGhvdXQgYSB3cmFwcGVyIG9iamVjdC5cIik6bnVsbCxvYmplY3Q7aWYoY2FuV2FybkZvclJlYWN0RnJhZ21lbnQpe3ZhciBwcm94eT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkocHJveHksZnJhZ21lbnRLZXkse2VudW1lcmFibGU6ITEsdmFsdWU6b2JqZWN0fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LGRpZFdhcm5LZXkse3dyaXRhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6ITF9KTtmb3IodmFyIGtleSBpbiBvYmplY3QpcHJveHlQcm9wZXJ0eUFjY2Vzc1dpdGhXYXJuaW5nKHByb3h5LGtleSk7cmV0dXJuIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhwcm94eSkscHJveHl9fXJldHVybiBvYmplY3R9LGV4dHJhY3Q6ZnVuY3Rpb24oZnJhZ21lbnQpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmNhbldhcm5Gb3JSZWFjdEZyYWdtZW50P2ZyYWdtZW50W2ZyYWdtZW50S2V5XT9mcmFnbWVudFtmcmFnbWVudEtleV06KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhkaWRXYXJuRm9yRnJhZ21lbnQoZnJhZ21lbnQpLFwiQW55IHVzZSBvZiBhIGtleWVkIG9iamVjdCBzaG91bGQgYmUgd3JhcHBlZCBpbiBSZWFjdC5hZGRvbnMuY3JlYXRlRnJhZ21lbnQob2JqZWN0KSBiZWZvcmUgYmVpbmcgcGFzc2VkIGFzIGEgY2hpbGQuXCIpOm51bGwsZnJhZ21lbnQpOmZyYWdtZW50fSxleHRyYWN0SWZGcmFnbWVudDpmdW5jdGlvbihmcmFnbWVudCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmY2FuV2FybkZvclJlYWN0RnJhZ21lbnQpe2lmKGZyYWdtZW50W2ZyYWdtZW50S2V5XSlyZXR1cm4gZnJhZ21lbnRbZnJhZ21lbnRLZXldO2Zvcih2YXIga2V5IGluIGZyYWdtZW50KWlmKGZyYWdtZW50Lmhhc093blByb3BlcnR5KGtleSkmJlJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChmcmFnbWVudFtrZXldKSlyZXR1cm4gUmVhY3RGcmFnbWVudC5leHRyYWN0KGZyYWdtZW50KX1yZXR1cm4gZnJhZ21lbnR9fTttb2R1bGUuZXhwb3J0cz1SZWFjdEZyYWdtZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUkdjbUZuYldWdWRDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCVjBFc1dVRkZRU3hKUVVGSkxHTkJRV1VzVVVGQlVTeHJRa0ZGZGtJc1VVRkJWU3hSUVVGUkxGbEJWWFJDTEVsQlFVa3NaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVlVzUTBGRGVrTXNSMEZCU1N4aFFVRmpMR2xDUVVOa0xGZEJRV0VzWjBKQlEySXNlVUpCUVRCQ0xFTkJSVGxDTEV0QlNVVXNSMEZCU1N4UFFVRlJMRmRCUTFZc1RVRkJUeXhIUVVkVUxGRkJRVThzYTBKQlJVd3NZVUZEUXl4WlFVRlpMRVZCUVU4c1QwRkJUeXhKUVVjM1FpeFBRVUZQTEd0Q1FVVk1MRTlCUTBNc1dVRkJXU3hGUVVGTkxFbEJRVXNzVVVGSE1VSXNlVUpCUVRCQ0xFVkJRekZDTEUxQlFVOHNTVUZGVkN4SFFVRkpMR2REUVVGcFF5eFRRVUZUTEVsQlFVc3NTMEZEYWtRc1QwRkJUeXhsUVVGbExFbEJRVXNzUzBGRGVrSXNXVUZCV1N4RlFVTmFMRWxCUVVzc1YwRlJTQ3hOUVZCRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRkZCUTNaRExFdEJRVXNzV1VGRFRDeHRTVUZIUlN4TFFVTktMRXRCUVVzc1lVRkJZeXhGUVVOYUxFdEJRVXNzWVVGQllTeE5RVVV6UWl4SlFVRkxMRk5CUVZNc1QwRkRXQ3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4UlFVTjJReXhMUVVGTExGbEJRMHdzZFVaQlJVVXNTMEZEU2l4TFFVRkxMR0ZCUVdNc1JVRkRia0lzUzBGQlN5eGhRVUZoTEV0QlFVOHNWVUZMTTBJc2EwSkJSVUVzYlVKQlFYRkNMRk5CUVZNc1ZVRkhhRU1zUjBGQlNTeHJRa0ZCYlVJc1JVRkRka0lzUzBGQlN5eEhRVUZKTEU5QlFVOHNWVUZEWkN4clFrRkJiMElzU1VGQlRTeFZRVUZqTEZWQlFWTXNTMEZCVVN4SFFVVXpSQ3hKUVVGSkxIRkNRVUZ6UWl4bFFVRmxMR2xDUVVWNlF5eFBRVVJCTEdkQ1FVRmxMRzFDUVVGdlFpeEZRVU0xUWl4dFFrRkpXQ3hIUVVGSkxHZENRVWRHTEU5QlFWRXNVMEZCVXl4UlFVTm1MRWRCUVVrc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWVXNRMEZEZWtNc1IwRkJjMElzWjBKQlFWZ3NWVUZCZDBJc1VVRkJWU3hOUVVGTkxGRkJRVkVzVVVGTmVrUXNUVUZNUXl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFRRVU4yUXl4RlFVTkJMRFJFUVVOQkxGRkJRMFVzUzBGRFJ5eE5RVVZVTEVsQlFVa3NZVUZCWVN4bFFVRmxMRkZCVFRsQ0xFMUJURU1zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1UwRkRka01zUlVGRFFTeDNSa0ZGUlN4TFFVTkhMRTFCUlZRc1NVRkJTU3gzUWtGQmVVSXNRMEZETTBJc1IwRkJTU3hUUVVOS0xGRkJRVThzWlVGQlpTeE5RVUZQTEdGQlF6TkNMRmxCUVZrc1JVRkRXaXhOUVVGUExGTkJSVlFzVDBGQlR5eGxRVUZsTEUxQlFVOHNXVUZETTBJc1ZVRkJWU3hGUVVOV0xGbEJRVmtzUlVGRFdpeFBRVUZQTEVkQlJWUXNTMEZCU3l4SFFVRkpMRTlCUVU4c1VVRkRaQ3dyUWtGQkswSXNUVUZCVHl4SlFVZDRReXhQUVVSQkxGRkJRVThzYTBKQlFXdENMRTlCUTJ4Q0xFOUJSMWdzVFVGQlR5eFRRVWxVTEZGQlFWTXNVMEZCVXl4VlFVTm9RaXhOUVVGSkxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VlFVTXpRaXgzUWtGRFJ5eFRRVUZUTEdGQlUxQXNVMEZCVXl4alFWSmlMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZGQlEzWkRMRzFDUVVGdFFpeFZRVU51UWl4elNFRkhSU3hMUVVOSExGVkJTMDRzVlVGTFZDeHJRa0ZCYlVJc1UwRkJVeXhWUVVNeFFpeEhRVUZKTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hWUVVNelFpeDNRa0ZCZVVJc1EwRkZNMElzUjBGQlNTeFRRVUZUTEdGQlExZ3NUVUZCVHl4VlFVRlRMRmxCUzJ4Q0xFdEJRVXNzUjBGQlNTeFBRVUZQTEZWQlEyUXNSMEZCU1N4VFFVRlRMR1ZCUVdVc1RVRkRlRUlzWVVGQllTeGxRVUZsTEZOQlFWTXNUVUZIZGtNc1RVRkJUeXhsUVVGakxGRkJRVkVzVlVGTGNrTXNUVUZCVHl4WFFVbFlMRkZCUVU4c1VVRkJWU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBSbkpoWjIxbGJuUmNiaW92WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFJXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJXeGxiV1Z1ZEZ3aUtUdGNibHh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtGd2lMaTkzWVhKdWFXNW5YQ0lwTzF4dVhHNHZLaXBjYmlBcUlGZGxJSFZ6WldRZ2RHOGdZV3hzYjNjZ2EyVjVaV1FnYjJKcVpXTjBjeUIwYnlCelpYSjJaU0JoY3lCaElHTnZiR3hsWTNScGIyNGdiMllnVW1WaFkzUkZiR1Z0Wlc1MGN5eGNiaUFxSUc5eUlHNWxjM1JsWkNCelpYUnpMaUJVYUdseklHRnNiRzkzWldRZ2RYTWdZU0IzWVhrZ2RHOGdaWGh3YkdsamFYUnNlU0JyWlhrZ1lTQnpaWFFnWVNCbWNtRm5iV1Z1ZENCdlpseHVJQ29nWTI5dGNHOXVaVzUwY3k0Z1ZHaHBjeUJwY3lCdWIzY2dZbVZwYm1jZ2NtVndiR0ZqWldRZ2QybDBhQ0JoYmlCdmNHRnhkV1VnWkdGMFlTQnpkSEoxWTNSMWNtVXVYRzRnS2lCVWFHVWdkWEJuY21Ga1pTQndZWFJvSUdseklIUnZJR05oYkd3Z1VtVmhZM1F1WVdSa2IyNXpMbU55WldGMFpVWnlZV2R0Wlc1MEtIc2dhMlY1T2lCMllXeDFaU0I5S1NCMGIxeHVJQ29nWTNKbFlYUmxJR0VnYTJWNVpXUWdabkpoWjIxbGJuUXVJRlJvWlNCeVpYTjFiSFJwYm1jZ1pHRjBZU0J6ZEhKMVkzUjFjbVVnYVhNZ2IzQmhjWFZsTENCbWIzSWdibTkzTGx4dUlDb3ZYRzVjYm1sbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdkbUZ5SUdaeVlXZHRaVzUwUzJWNUlEMGdKMTl5WldGamRFWnlZV2R0Wlc1MEp6dGNiaUFnZG1GeUlHUnBaRmRoY201TFpYa2dQU0FuWDNKbFlXTjBSR2xrVjJGeWJpYzdYRzRnSUhaaGNpQmpZVzVYWVhKdVJtOXlVbVZoWTNSR2NtRm5iV1Z1ZENBOUlHWmhiSE5sTzF4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnTHk4Z1JtVmhkSFZ5WlNCMFpYTjBMaUJFYjI0bmRDQmxkbVZ1SUhSeWVTQjBieUJwYzNOMVpTQjBhR2x6SUhkaGNtNXBibWNnYVdZZ2QyVWdZMkZ1SjNRZ2RYTmxYRzRnSUNBZ0x5OGdaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXVYRzVjYmlBZ0lDQjJZWElnWkhWdGJYa2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF4TzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1hHNGdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lHWnlZV2R0Wlc1MFMyVjVMRnh1SUNBZ0lDQWdlMlZ1ZFcxbGNtRmliR1U2SUdaaGJITmxMQ0IyWVd4MVpUb2dkSEoxWlgxY2JpQWdJQ0FwTzF4dVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGeHVJQ0FnSUNBZ2UzMHNYRzRnSUNBZ0lDQW5hMlY1Snl4Y2JpQWdJQ0FnSUh0bGJuVnRaWEpoWW14bE9pQjBjblZsTENCblpYUTZJR1IxYlcxNWZWeHVJQ0FnSUNrN1hHNWNiaUFnSUNCallXNVhZWEp1Um05eVVtVmhZM1JHY21GbmJXVnVkQ0E5SUhSeWRXVTdYRzRnSUgwZ1kyRjBZMmdnS0hncElIc2dmVnh1WEc0Z0lIWmhjaUJ3Y205NGVWQnliM0JsY25SNVFXTmpaWE56VjJsMGFGZGhjbTVwYm1jZ1BTQm1kVzVqZEdsdmJpaHZZbW9zSUd0bGVTa2dlMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2WW1vc0lHdGxlU3dnZTF4dUlDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhOYlpHbGtWMkZ5Ymt0bGVWMHNYRzRnSUNBZ0lDQWdJQ0FnSjBFZ1VtVmhZM1JHY21GbmJXVnVkQ0JwY3lCaGJpQnZjR0Z4ZFdVZ2RIbHdaUzRnUVdOalpYTnphVzVuSUdGdWVTQnZaaUJwZEhNZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSjNCeWIzQmxjblJwWlhNZ2FYTWdaR1Z3Y21WallYUmxaQzRnVUdGemN5QnBkQ0IwYnlCdmJtVWdiMllnZEdobElGSmxZV04wTGtOb2FXeGtjbVZ1SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2RvWld4d1pYSnpMaWRjYmlBZ0lDQWdJQ0FnS1NBNklHNTFiR3dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpXMlJwWkZkaGNtNUxaWGxkSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhOYlpuSmhaMjFsYm5STFpYbGRXMnRsZVYwN1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0IwYUdselcyUnBaRmRoY201TFpYbGRMRnh1SUNBZ0lDQWdJQ0FnSUNkQklGSmxZV04wUm5KaFoyMWxiblFnYVhNZ1lXNGdhVzF0ZFhSaFlteGxJRzl3WVhGMVpTQjBlWEJsTGlCTmRYUmhkR2x1WnlCcGRITWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0ozQnliM0JsY25ScFpYTWdhWE1nWkdWd2NtVmpZWFJsWkM0blhHNGdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdkR2hwYzF0a2FXUlhZWEp1UzJWNVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE5iWm5KaFoyMWxiblJMWlhsZFcydGxlVjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdhWE56ZFdWa1YyRnlibWx1WjNNZ1BTQjdmVHRjYmx4dUlDQjJZWElnWkdsa1YyRnlia1p2Y2taeVlXZHRaVzUwSUQwZ1puVnVZM1JwYjI0b1puSmhaMjFsYm5RcElIdGNiaUFnSUNBdkx5QlhaU0IxYzJVZ2RHaGxJR3RsZVhNZ1lXNWtJSFJvWlNCMGVYQmxJRzltSUhSb1pTQjJZV3gxWlNCaGN5QmhJR2hsZFhKcGMzUnBZeUIwYnlCa1pXUjFjR1VnZEdobFhHNGdJQ0FnTHk4Z2QyRnlibWx1WnlCMGJ5QmhkbTlwWkNCemNHRnRiV2x1WnlCMGIyOGdiWFZqYUM1Y2JpQWdJQ0IyWVhJZ1puSmhaMjFsYm5SRFlXTm9aVXRsZVNBOUlDY25PMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCbWNtRm5iV1Z1ZENrZ2UxeHVJQ0FnSUNBZ1puSmhaMjFsYm5SRFlXTm9aVXRsZVNBclBTQnJaWGtnS3lBbk9pY2dLeUFvZEhsd1pXOW1JR1p5WVdkdFpXNTBXMnRsZVYwcElDc2dKeXduTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnWVd4eVpXRmtlVmRoY201bFpFOXVZMlVnUFNBaElXbHpjM1ZsWkZkaGNtNXBibWR6VzJaeVlXZHRaVzUwUTJGamFHVkxaWGxkTzF4dUlDQWdJR2x6YzNWbFpGZGhjbTVwYm1kelcyWnlZV2R0Wlc1MFEyRmphR1ZMWlhsZElEMGdkSEoxWlR0Y2JpQWdJQ0J5WlhSMWNtNGdZV3h5WldGa2VWZGhjbTVsWkU5dVkyVTdYRzRnSUgwN1hHNTlYRzVjYm5aaGNpQlNaV0ZqZEVaeVlXZHRaVzUwSUQwZ2UxeHVJQ0F2THlCWGNtRndJR0VnYTJWNVpXUWdiMkpxWldOMElHbHVJR0Z1SUc5d1lYRjFaU0J3Y205NGVTQjBhR0YwSUhkaGNtNXpJSGx2ZFNCcFppQjViM1VnWVdOalpYTnpJR0Z1ZVZ4dUlDQXZMeUJ2WmlCcGRITWdjSEp2Y0dWeWRHbGxjeTVjYmlBZ1kzSmxZWFJsT2lCbWRXNWpkR2x2YmlodlltcGxZM1FwSUh0Y2JpQWdJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFtVmpkQ0FoUFQwZ0oyOWlhbVZqZENjZ2ZId2dJVzlpYW1WamRDQjhmQ0JCY25KaGVTNXBjMEZ5Y21GNUtHOWlhbVZqZENrcElIdGNiaUFnSUNBZ0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lIZGhjbTVwYm1jb1hHNGdJQ0FnSUNBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdKMUpsWVdOMExtRmtaRzl1Y3k1amNtVmhkR1ZHY21GbmJXVnVkQ0J2Ym14NUlHRmpZMlZ3ZEhNZ1lTQnphVzVuYkdVZ2IySnFaV04wTGljc1hHNGdJQ0FnSUNBZ0lDQWdiMkpxWldOMFhHNGdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaFNaV0ZqZEVWc1pXMWxiblF1YVhOV1lXeHBaRVZzWlcxbGJuUW9iMkpxWldOMEtTa2dlMXh1SUNBZ0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FuVW1WaFkzUXVZV1JrYjI1ekxtTnlaV0YwWlVaeVlXZHRaVzUwSUdSdlpYTWdibTkwSUdGalkyVndkQ0JoSUZKbFlXTjBSV3hsYldWdWRDQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBbmQybDBhRzkxZENCaElIZHlZWEJ3WlhJZ2IySnFaV04wTGlkY2JpQWdJQ0FnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2IySnFaV04wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tHTmhibGRoY201R2IzSlNaV0ZqZEVaeVlXZHRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3Y205NGVTQTlJSHQ5TzF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29jSEp2ZUhrc0lHWnlZV2R0Wlc1MFMyVjVMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hCeWIzaDVMQ0JrYVdSWFlYSnVTMlY1TENCN1hHNGdJQ0FnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1poYkhObFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdiMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY0hKdmVIbFFjbTl3WlhKMGVVRmpZMlZ6YzFkcGRHaFhZWEp1YVc1bktIQnliM2g1TENCclpYa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzV3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWh3Y205NGVTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbTk0ZVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JpQWdmU3hjYmlBZ0x5OGdSWGgwY21GamRDQjBhR1VnYjNKcFoybHVZV3dnYTJWNVpXUWdiMkpxWldOMElHWnliMjBnZEdobElHWnlZV2R0Wlc1MElHOXdZWEYxWlNCMGVYQmxMaUJYWVhKdUlHbG1YRzRnSUM4dklHRWdjR3hoYVc0Z2IySnFaV04wSUdseklIQmhjM05sWkNCb1pYSmxMbHh1SUNCbGVIUnlZV04wT2lCbWRXNWpkR2x2YmlobWNtRm5iV1Z1ZENrZ2UxeHVJQ0FnSUdsbUlDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlwSUh0Y2JpQWdJQ0FnSUdsbUlDaGpZVzVYWVhKdVJtOXlVbVZoWTNSR2NtRm5iV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdaeVlXZHRaVzUwVzJaeVlXZHRaVzUwUzJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbGtWMkZ5YmtadmNrWnlZV2R0Wlc1MEtHWnlZV2R0Wlc1MEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkQmJua2dkWE5sSUc5bUlHRWdhMlY1WldRZ2IySnFaV04wSUhOb2IzVnNaQ0JpWlNCM2NtRndjR1ZrSUdsdUlDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0oxSmxZV04wTG1Ga1pHOXVjeTVqY21WaGRHVkdjbUZuYldWdWRDaHZZbXBsWTNRcElHSmxabTl5WlNCaVpXbHVaeUJ3WVhOelpXUWdZWE1nWVNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNkamFHbHNaQzRuWEc0Z0lDQWdJQ0FnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1jbUZuYldWdWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabkpoWjIxbGJuUmJabkpoWjIxbGJuUkxaWGxkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1puSmhaMjFsYm5RN1hHNGdJSDBzWEc0Z0lDOHZJRU5vWldOcklHbG1JSFJvYVhNZ2FYTWdZU0JtY21GbmJXVnVkQ0JoYm1RZ2FXWWdjMjhzSUdWNGRISmhZM1FnZEdobElHdGxlV1ZrSUc5aWFtVmpkQzRnU1dZZ2FYUmNiaUFnTHk4Z2FYTWdZU0JtY21GbmJXVnVkQzFzYVd0bElHOWlhbVZqZEN3Z2QyRnliaUIwYUdGMElHbDBJSE5vYjNWc1pDQmlaU0IzY21Gd2NHVmtMaUJKWjI1dmNtVWdhV1lnZDJWY2JpQWdMeThnWTJGdUozUWdaR1YwWlhKdGFXNWxJSGRvWVhRZ2EybHVaQ0J2WmlCdlltcGxZM1FnZEdocGN5QnBjeTVjYmlBZ1pYaDBjbUZqZEVsbVJuSmhaMjFsYm5RNklHWjFibU4wYVc5dUtHWnlZV2R0Wlc1MEtTQjdYRzRnSUNBZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUNBZ2FXWWdLR05oYmxkaGNtNUdiM0pTWldGamRFWnlZV2R0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlHbDBJR2x6SUhSb1pTQnZjR0Z4ZFdVZ2RIbHdaU3dnY21WMGRYSnVJSFJvWlNCclpYbGxaQ0J2WW1wbFkzUXVYRzRnSUNBZ0lDQWdJR2xtSUNobWNtRm5iV1Z1ZEZ0bWNtRm5iV1Z1ZEV0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5KaFoyMWxiblJiWm5KaFoyMWxiblJMWlhsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUU5MGFHVnlkMmx6WlN3Z1kyaGxZMnNnWldGamFDQndjbTl3WlhKMGVTQnBaaUJwZENCb1lYTWdZVzRnWld4bGJXVnVkQ3dnYVdZZ2FYUWdaRzlsYzF4dUlDQWdJQ0FnSUNBdkx5QnBkQ0JwY3lCd2NtOWlZV0pzZVNCdFpXRnVkQ0JoY3lCaElHWnlZV2R0Wlc1MExDQnpieUIzWlNCallXNGdkMkZ5YmlCbFlYSnNlUzRnUkdWbVpYSXNYRzRnSUNBZ0lDQWdJQzh2SUhSb1pTQjNZWEp1YVc1bklIUnZJR1Y0ZEhKaFkzUXVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQm1jbUZuYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG1jbUZuYldWdWRDNW9ZWE5QZDI1UWNtOXdaWEowZVNoclpYa3BJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRkpsWVdOMFJXeGxiV1Z1ZEM1cGMxWmhiR2xrUld4bGJXVnVkQ2htY21GbmJXVnVkRnRyWlhsZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCc2IyOXJjeUJzYVd0bElHRWdabkpoWjIxbGJuUWdiMkpxWldOMExDQjNaU0J6YUc5MWJHUWdjSEp2ZG1sa1pTQmhibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaV0Z5YkhrZ2QyRnlibWx1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlNaV0ZqZEVaeVlXZHRaVzUwTG1WNGRISmhZM1FvWm5KaFoyMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm5KaFoyMWxiblE3WEc0Z0lIMWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VtVmhZM1JHY21GbmJXVnVkRHRjYmlKZGZRPT0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbmplY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9SZWFjdFJvb3RJbmRleFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBSZWFjdEluamVjdGlvbiA9IHtcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LmluamVjdGlvbixcbiAgQ2xhc3M6IFJlYWN0Q2xhc3MuaW5qZWN0aW9uLFxuICBET01Db21wb25lbnQ6IFJlYWN0RE9NQ29tcG9uZW50LmluamVjdGlvbixcbiAgRE9NUHJvcGVydHk6IERPTVByb3BlcnR5LmluamVjdGlvbixcbiAgRW1wdHlDb21wb25lbnQ6IFJlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uLFxuICBFdmVudFBsdWdpbkh1YjogRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLFxuICBFdmVudEVtaXR0ZXI6IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pbmplY3Rpb24sXG4gIE5hdGl2ZUNvbXBvbmVudDogUmVhY3ROYXRpdmVDb21wb25lbnQuaW5qZWN0aW9uLFxuICBQZXJmOiBSZWFjdFBlcmYuaW5qZWN0aW9uLFxuICBSb290SW5kZXg6IFJlYWN0Um9vdEluZGV4LmluamVjdGlvbixcbiAgVXBkYXRlczogUmVhY3RVcGRhdGVzLmluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluamVjdGlvbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdElucHV0U2VsZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERPTVNlbGVjdGlvblwiKTtcblxudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKFwiLi9mb2N1c05vZGVcIik7XG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoXCIuL2dldEFjdGl2ZUVsZW1lbnRcIik7XG5cbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuLyoqXG4gKiBAUmVhY3RJbnB1dFNlbGVjdGlvbjogUmVhY3QgaW5wdXQgc2VsZWN0aW9uIG1vZHVsZS4gQmFzZWQgb24gU2VsZWN0aW9uLmpzLFxuICogYnV0IG1vZGlmaWVkIHRvIGJlIHN1aXRhYmxlIGZvciByZWFjdCBhbmQgaGFzIGEgY291cGxlIG9mIGJ1ZyBmaXhlcyAoZG9lc24ndFxuICogYXNzdW1lIGJ1dHRvbnMgaGF2ZSByYW5nZSBzZWxlY3Rpb25zIGFsbG93ZWQpLlxuICogSW5wdXQgc2VsZWN0aW9uIG1vZHVsZSBmb3IgUmVhY3QuXG4gKi9cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuXG4gIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24oZWxlbSkge1xuICAgIHJldHVybiBlbGVtICYmIChcbiAgICAgICgoZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtLnR5cGUgPT09ICd0ZXh0JykgfHxcbiAgICAgIGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJylcbiAgICApO1xuICB9LFxuXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOlxuICAgICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGZvY3VzZWRFbGVtKSA/XG4gICAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDpcbiAgICAgICAgICBudWxsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gICAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICAgKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICovXG4gIHJlc3RvcmVTZWxlY3Rpb246IGZ1bmN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pIHtcbiAgICB2YXIgY3VyRm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICAgIHZhciBwcmlvclNlbGVjdGlvblJhbmdlID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZWxlY3Rpb25SYW5nZTtcbiAgICBpZiAoY3VyRm9jdXNlZEVsZW0gIT09IHByaW9yRm9jdXNlZEVsZW0gJiZcbiAgICAgICAgaXNJbkRvY3VtZW50KHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICBpZiAoUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5zZXRTZWxlY3Rpb24oXG4gICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcbiAgICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBmb2N1c05vZGUocHJpb3JGb2N1c2VkRWxlbSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAZ2V0U2VsZWN0aW9uOiBHZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgZm9jdXNlZCB0ZXh0YXJlYSwgaW5wdXQgb3JcbiAgICogY29udGVudEVkaXRhYmxlIG5vZGUuXG4gICAqIC1AaW5wdXQ6IExvb2sgdXAgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0XG4gICAqIC1AcmV0dXJuIHtzdGFydDogc2VsZWN0aW9uU3RhcnQsIGVuZDogc2VsZWN0aW9uRW5kfVxuICAgKi9cbiAgZ2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIHZhciBzZWxlY3Rpb247XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgLy8gSUU4IGlucHV0LlxuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgc2VsZWN0aW9uIHBlciBkb2N1bWVudCBpbiBJRSwgc28gaXQgbXVzdFxuICAgICAgLy8gYmUgaW4gb3VyIGVsZW1lbnQuXG4gICAgICBpZiAocmFuZ2UucGFyZW50RWxlbWVudCgpID09PSBpbnB1dCkge1xuICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIGVuZDogLXJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0gUmVhY3RET01TZWxlY3Rpb24uZ2V0T2Zmc2V0cyhpbnB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7c3RhcnQ6IDAsIGVuZDogMH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzZXRTZWxlY3Rpb246IFNldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSB0ZXh0YXJlYSBvciBpbnB1dCBhbmQgZm9jdXNlc1xuICAgKiB0aGUgaW5wdXQuXG4gICAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAgICogLUBvZmZzZXRzICAgT2JqZWN0IG9mIHNhbWUgZm9ybSB0aGF0IGlzIHJldHVybmVkIGZyb20gZ2V0KlxuICAgKi9cbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgIHZhciByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERPTVNlbGVjdGlvbi5zZXRPZmZzZXRzKGlucHV0LCBvZmZzZXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnB1dFNlbGVjdGlvbjtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXRSZWFjdFJvb3RJRFN0cmluZyhpbmRleCl7cmV0dXJuIFNFUEFSQVRPUitpbmRleC50b1N0cmluZygzNil9ZnVuY3Rpb24gaXNCb3VuZGFyeShpZCxpbmRleCl7cmV0dXJuIGlkLmNoYXJBdChpbmRleCk9PT1TRVBBUkFUT1J8fGluZGV4PT09aWQubGVuZ3RofWZ1bmN0aW9uIGlzVmFsaWRJRChpZCl7cmV0dXJuXCJcIj09PWlkfHxpZC5jaGFyQXQoMCk9PT1TRVBBUkFUT1ImJmlkLmNoYXJBdChpZC5sZW5ndGgtMSkhPT1TRVBBUkFUT1J9ZnVuY3Rpb24gaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCxkZXNjZW5kYW50SUQpe3JldHVybiAwPT09ZGVzY2VuZGFudElELmluZGV4T2YoYW5jZXN0b3JJRCkmJmlzQm91bmRhcnkoZGVzY2VuZGFudElELGFuY2VzdG9ySUQubGVuZ3RoKX1mdW5jdGlvbiBnZXRQYXJlbnRJRChpZCl7cmV0dXJuIGlkP2lkLnN1YnN0cigwLGlkLmxhc3RJbmRleE9mKFNFUEFSQVRPUikpOlwiXCJ9ZnVuY3Rpb24gZ2V0TmV4dERlc2NlbmRhbnRJRChhbmNlc3RvcklELGRlc3RpbmF0aW9uSUQpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGlzVmFsaWRJRChhbmNlc3RvcklEKSYmaXNWYWxpZElEKGRlc3RpbmF0aW9uSUQpLFwiZ2V0TmV4dERlc2NlbmRhbnRJRCglcywgJXMpOiBSZWNlaXZlZCBhbiBpbnZhbGlkIFJlYWN0IERPTSBJRC5cIixhbmNlc3RvcklELGRlc3RpbmF0aW9uSUQpOmludmFyaWFudChpc1ZhbGlkSUQoYW5jZXN0b3JJRCkmJmlzVmFsaWRJRChkZXN0aW5hdGlvbklEKSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCxkZXN0aW5hdGlvbklEKSxcImdldE5leHREZXNjZW5kYW50SUQoLi4uKTogUmVhY3QgaGFzIG1hZGUgYW4gaW52YWxpZCBhc3N1bXB0aW9uIGFib3V0IHRoZSBET00gaGllcmFyY2h5LiBFeHBlY3RlZCBgJXNgIHRvIGJlIGFuIGFuY2VzdG9yIG9mIGAlc2AuXCIsYW5jZXN0b3JJRCxkZXN0aW5hdGlvbklEKTppbnZhcmlhbnQoaXNBbmNlc3RvcklET2YoYW5jZXN0b3JJRCxkZXN0aW5hdGlvbklEKSksYW5jZXN0b3JJRD09PWRlc3RpbmF0aW9uSUQpcmV0dXJuIGFuY2VzdG9ySUQ7dmFyIGksc3RhcnQ9YW5jZXN0b3JJRC5sZW5ndGgrU0VQQVJBVE9SX0xFTkdUSDtmb3IoaT1zdGFydDtpPGRlc3RpbmF0aW9uSUQubGVuZ3RoJiYhaXNCb3VuZGFyeShkZXN0aW5hdGlvbklELGkpO2krKyk7cmV0dXJuIGRlc3RpbmF0aW9uSUQuc3Vic3RyKDAsaSl9ZnVuY3Rpb24gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKG9uZUlELHR3b0lEKXt2YXIgbWluTGVuZ3RoPU1hdGgubWluKG9uZUlELmxlbmd0aCx0d29JRC5sZW5ndGgpO2lmKDA9PT1taW5MZW5ndGgpcmV0dXJuXCJcIjtmb3IodmFyIGxhc3RDb21tb25NYXJrZXJJbmRleD0wLGk9MDttaW5MZW5ndGg+PWk7aSsrKWlmKGlzQm91bmRhcnkob25lSUQsaSkmJmlzQm91bmRhcnkodHdvSUQsaSkpbGFzdENvbW1vbk1hcmtlckluZGV4PWk7ZWxzZSBpZihvbmVJRC5jaGFyQXQoaSkhPT10d29JRC5jaGFyQXQoaSkpYnJlYWs7dmFyIGxvbmdlc3RDb21tb25JRD1vbmVJRC5zdWJzdHIoMCxsYXN0Q29tbW9uTWFya2VySW5kZXgpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGlzVmFsaWRJRChsb25nZXN0Q29tbW9uSUQpLFwiZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKCVzLCAlcyk6IEV4cGVjdGVkIGEgdmFsaWQgUmVhY3QgRE9NIElEOiAlc1wiLG9uZUlELHR3b0lELGxvbmdlc3RDb21tb25JRCk6aW52YXJpYW50KGlzVmFsaWRJRChsb25nZXN0Q29tbW9uSUQpKSxsb25nZXN0Q29tbW9uSUR9ZnVuY3Rpb24gdHJhdmVyc2VQYXJlbnRQYXRoKHN0YXJ0LHN0b3AsY2IsYXJnLHNraXBGaXJzdCxza2lwTGFzdCl7c3RhcnQ9c3RhcnR8fFwiXCIsc3RvcD1zdG9wfHxcIlwiLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KHN0YXJ0IT09c3RvcCxcInRyYXZlcnNlUGFyZW50UGF0aCguLi4pOiBDYW5ub3QgdHJhdmVyc2UgZnJvbSBhbmQgdG8gdGhlIHNhbWUgSUQsIGAlc2AuXCIsc3RhcnQpOmludmFyaWFudChzdGFydCE9PXN0b3ApO3ZhciB0cmF2ZXJzZVVwPWlzQW5jZXN0b3JJRE9mKHN0b3Asc3RhcnQpO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KHRyYXZlcnNlVXB8fGlzQW5jZXN0b3JJRE9mKHN0YXJ0LHN0b3ApLFwidHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gdHdvIElEcyB0aGF0IGRvIG5vdCBoYXZlIGEgcGFyZW50IHBhdGguXCIsc3RhcnQsc3RvcCk6aW52YXJpYW50KHRyYXZlcnNlVXB8fGlzQW5jZXN0b3JJRE9mKHN0YXJ0LHN0b3ApKTtmb3IodmFyIGRlcHRoPTAsdHJhdmVyc2U9dHJhdmVyc2VVcD9nZXRQYXJlbnRJRDpnZXROZXh0RGVzY2VuZGFudElELGlkPXN0YXJ0OztpZD10cmF2ZXJzZShpZCxzdG9wKSl7dmFyIHJldDtpZihza2lwRmlyc3QmJmlkPT09c3RhcnR8fHNraXBMYXN0JiZpZD09PXN0b3B8fChyZXQ9Y2IoaWQsdHJhdmVyc2VVcCxhcmcpKSxyZXQ9PT0hMXx8aWQ9PT1zdG9wKWJyZWFrO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGRlcHRoKys8TUFYX1RSRUVfREVQVEgsXCJ0cmF2ZXJzZVBhcmVudFBhdGgoJXMsICVzLCAuLi4pOiBEZXRlY3RlZCBhbiBpbmZpbml0ZSBsb29wIHdoaWxlIHRyYXZlcnNpbmcgdGhlIFJlYWN0IERPTSBJRCB0cmVlLiBUaGlzIG1heSBiZSBkdWUgdG8gbWFsZm9ybWVkIElEczogJXNcIixzdGFydCxzdG9wKTppbnZhcmlhbnQoZGVwdGgrKzxNQVhfVFJFRV9ERVBUSCl9fXZhciBSZWFjdFJvb3RJbmRleD1yZXF1aXJlKFwiLi9SZWFjdFJvb3RJbmRleFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLFNFUEFSQVRPUj1cIi5cIixTRVBBUkFUT1JfTEVOR1RIPVNFUEFSQVRPUi5sZW5ndGgsTUFYX1RSRUVfREVQVEg9MTAwLFJlYWN0SW5zdGFuY2VIYW5kbGVzPXtjcmVhdGVSZWFjdFJvb3RJRDpmdW5jdGlvbigpe3JldHVybiBnZXRSZWFjdFJvb3RJRFN0cmluZyhSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCgpKX0sY3JlYXRlUmVhY3RJRDpmdW5jdGlvbihyb290SUQsbmFtZSl7cmV0dXJuIHJvb3RJRCtuYW1lfSxnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQ6ZnVuY3Rpb24oaWQpe2lmKGlkJiZpZC5jaGFyQXQoMCk9PT1TRVBBUkFUT1ImJmlkLmxlbmd0aD4xKXt2YXIgaW5kZXg9aWQuaW5kZXhPZihTRVBBUkFUT1IsMSk7cmV0dXJuIGluZGV4Pi0xP2lkLnN1YnN0cigwLGluZGV4KTppZH1yZXR1cm4gbnVsbH0sdHJhdmVyc2VFbnRlckxlYXZlOmZ1bmN0aW9uKGxlYXZlSUQsZW50ZXJJRCxjYix1cEFyZyxkb3duQXJnKXt2YXIgYW5jZXN0b3JJRD1nZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQobGVhdmVJRCxlbnRlcklEKTthbmNlc3RvcklEIT09bGVhdmVJRCYmdHJhdmVyc2VQYXJlbnRQYXRoKGxlYXZlSUQsYW5jZXN0b3JJRCxjYix1cEFyZywhMSwhMCksYW5jZXN0b3JJRCE9PWVudGVySUQmJnRyYXZlcnNlUGFyZW50UGF0aChhbmNlc3RvcklELGVudGVySUQsY2IsZG93bkFyZywhMCwhMSl9LHRyYXZlcnNlVHdvUGhhc2U6ZnVuY3Rpb24odGFyZ2V0SUQsY2IsYXJnKXt0YXJnZXRJRCYmKHRyYXZlcnNlUGFyZW50UGF0aChcIlwiLHRhcmdldElELGNiLGFyZywhMCwhMSksdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELFwiXCIsY2IsYXJnLCExLCEwKSl9LHRyYXZlcnNlQW5jZXN0b3JzOmZ1bmN0aW9uKHRhcmdldElELGNiLGFyZyl7dHJhdmVyc2VQYXJlbnRQYXRoKFwiXCIsdGFyZ2V0SUQsY2IsYXJnLCEwLCExKX0sX2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRDpnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQsX2dldE5leHREZXNjZW5kYW50SUQ6Z2V0TmV4dERlc2NlbmRhbnRJRCxpc0FuY2VzdG9ySURPZjppc0FuY2VzdG9ySURPZixTRVBBUkFUT1I6U0VQQVJBVE9SfTttb2R1bGUuZXhwb3J0cz1SZWFjdEluc3RhbmNlSGFuZGxlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JKYm5OMFlXNWpaVWhoYm1Sc1pYTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVZsQkxGbEJjVUpCTEZOQlFWTXNjMEpCUVhGQ0xFOUJRelZDTEUxQlFVOHNWMEZCV1N4TlFVRk5MRk5CUVZNc1NVRlhjRU1zVVVGQlV5eFpRVUZYTEVkQlFVa3NUMEZEZEVJc1RVRkJUeXhKUVVGSExFOUJRVThzVTBGQlZ5eFhRVUZoTEZGQlFWVXNSMEZCUnl4UFFWVjRSQ3hSUVVGVExGZEJRVlVzU1VGRGFrSXNUVUZCWXl4TFFVRlFMRWxCUTB3c1IwRkJSeXhQUVVGUExFdEJRVThzVjBGQllTeEhRVUZITEU5QlFVOHNSMEZCUnl4UFFVRlRMRXRCUVU4c1ZVRlpMMFFzVVVGQlV5eG5Ra0ZCWlN4WFFVRlpMR05CUTJ4RExFMUJRM1ZETEV0QlFYSkRMR0ZCUVdFc1VVRkJVU3hoUVVOeVFpeFhRVUZYTEdGQlFXTXNWMEZCVnl4UlFWZDRReXhSUVVGVExHRkJRVmtzU1VGRGJrSXNUVUZCVHl4SlFVRkxMRWRCUVVjc1QwRkJUeXhGUVVGSExFZEJRVWNzV1VGQldTeFpRVUZqTEVkQldYaEVMRkZCUVZNc2NVSkJRVzlDTEZkQlFWa3NaVUZqZGtNc1IwRmlReXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTjJReXhWUVVGVkxHRkJRV1VzVlVGQlZTeGxRVU51UXl4cFJVRkRRU3hYUVVOQkxHVkJRMFVzVlVGQlZTeFZRVUZWTEdGQlFXVXNWVUZCVlN4blFrRkRhRVFzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkRka01zWlVGQlpTeFhRVUZaTEdWQlF6TkNMRzFKUVVWQkxGZEJRMEVzWlVGRFJTeFZRVUZWTEdWQlFXVXNWMEZCV1N4blFrRkRja01zWVVGQlpTeGpRVU5xUWl4TlFVRlBMRmRCU1ZRc1NVRkRTU3hIUVVSQkxFMUJRVkVzVjBGQlZ5eFBRVUZUTEdkQ1FVVm9ReXhMUVVGTExFVkJRVWtzVFVGQlR5eEZRVUZKTEdOQlFXTXNVMEZETlVJc1YwRkJWeXhqUVVGbExFZEJSRlVzUzBGTE1VTXNUVUZCVHl4bFFVRmpMRTlCUVU4c1JVRkJSeXhIUVdOcVF5eFJRVUZUTERCQ1FVRjVRaXhOUVVGUExFOUJRM1pETEVkQlFVa3NWMEZCV1N4TFFVRkxMRWxCUVVrc1RVRkJUU3hQUVVGUkxFMUJRVTBzVDBGRE4wTXNTVUZCYTBJc1NVRkJaQ3hWUVVOR0xFMUJRVThzUlVGSlZDeExRVUZMTEVkQlJrUXNkVUpCUVhkQ0xFVkJSVzVDTEVWQlFVa3NSVUZCVVN4WFFVRk1MRVZCUVdkQ0xFbEJRemxDTEVkQlFVa3NWMEZCVnl4TlFVRlBMRWxCUVUwc1YwRkJWeXhOUVVGUExFZEJRelZETEhOQ1FVRjNRaXhOUVVOdVFpeEpRVUZKTEUxQlFVMHNUMEZCVHl4TFFVRlBMRTFCUVUwc1QwRkJUeXhIUVVNeFF5eExRVWRLTEVsQlFVa3NhVUpCUVd0Q0xFMUJRVTBzVDBGQlR5eEZRVUZITEhOQ1FWRjBReXhQUVZCRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExGVkJRVlVzYVVKQlExWXNjMFZCUTBFc1RVRkRRU3hOUVVOQkxHbENRVU5GTEZWQlFWVXNWVUZCVlN4clFrRkRha0lzWjBKQlpWUXNVVUZCVXl4dlFrRkJiVUlzVFVGQlR5eExRVUZOTEVkQlFVa3NTVUZCU3l4VlFVRlhMRlZCUXpORUxFMUJRVkVzVDBGQlV5eEhRVU5xUWl4TFFVRlBMRTFCUVZFc1IwRkRaQ3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTjJReXhSUVVGVkxFdEJRMVlzTUVWQlEwRXNUMEZEUlN4VlFVRlZMRkZCUVZVc1MwRkRlRUlzU1VGQlNTeFpRVUZoTEdWQlFXVXNTMEZCVFN4TlFVTnlReXhuUWtGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkRka01zV1VGQll5eGxRVUZsTEUxQlFVOHNUVUZEY0VNc1owZEJSVUVzVFVGRFFTeE5RVU5GTEZWQlFWVXNXVUZCWXl4bFFVRmxMRTFCUVU4c1RVRkpiRVFzUzBGQlN5eEhRVVpFTEU5QlFWRXNSVUZEVWl4VFFVRlhMRmRCUVdFc1dVRkJZeXh2UWtGRGFrTXNSMEZCU3l4UFFVRXdRaXhIUVVGTExGTkJRVk1zUjBGQlNTeE5RVUZQTEVOQlF5OUVMRWRCUVVrc1NVRkpTaXhKUVVoTkxGZEJRV0VzUzBGQlR5eFBRVUZaTEZWQlFWa3NTMEZCVHl4UFFVTjJSQ3hKUVVGTkxFZEJRVWNzUjBGQlNTeFhRVUZaTEUxQlJYWkNMRTlCUVZFc1IwRkJVeXhMUVVGUExFdEJSVEZDTEV0QlJVUXNaMEpCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEzWkRMRkZCUVZVc1pVRkRWaXd3U1VGRlFTeE5RVUZQTEUxQlEwd3NWVUZCVlN4UlFVRlZMR2xDUVdwTk5VSXNSMEZCU1N4blFrRkJhVUlzVVVGQlVTeHZRa0ZGZWtJc1ZVRkJXU3hSUVVGUkxHVkJSWEJDTEZWQlFWa3NTVUZEV2l4cFFrRkJiVUlzVlVGQlZTeFBRVXMzUWl4bFFVRnBRaXhKUVd0TmFrSXNjMEpCVFVZc2EwSkJRVzFDTEZkQlEycENMRTFCUVU4c2MwSkJRWEZDTEdWQlFXVXNlVUpCVnpkRExHTkJRV1VzVTBGQlV5eFBRVUZSTEUxQlF6bENMRTFCUVU4c1VVRkJVeXhOUVZkc1FpeDVRa0ZCTUVJc1UwRkJVeXhKUVVOcVF5eEhRVUZKTEVsQlFVMHNSMEZCUnl4UFFVRlBMRXRCUVU4c1YwRkJZU3hIUVVGSExFOUJRVk1zUlVGQlJ5eERRVU55UkN4SFFVRkpMRTlCUVZFc1IwRkJSeXhSUVVGUkxGVkJRVmNzUlVGRGJFTXNUMEZCVHl4UFFVRlJMRWRCUVVzc1IwRkJSeXhQUVVGUExFVkJRVWNzVDBGQlV5eEhRVVUxUXl4TlFVRlBMRTlCYVVKVUxHMUNRVUZ2UWl4VFFVRlRMRkZCUVZNc1VVRkJVeXhIUVVGSkxFMUJRVThzVTBGRGVFUXNSMEZCU1N4WlFVRmhMSGxDUVVGNVFpeFJRVUZUTEZGQlF5OURMR05CUVdVc1UwRkRha0lzYlVKQlFXMUNMRkZCUVZNc1YwRkJXU3hIUVVGSkxFOUJRVThzUjBGQlR5eEhRVVY0UkN4aFFVRmxMRk5CUTJwQ0xHMUNRVUZ0UWl4WFFVRlpMRkZCUVZNc1IwRkJTU3hUUVVGVExFZEJRVTBzU1VGakwwUXNhVUpCUVd0Q0xGTkJRVk1zVTBGQlZTeEhRVUZKTEV0QlEyNURMRmRCUTBZc2JVSkJRVzFDTEVkQlFVa3NVMEZCVlN4SFFVRkpMRXRCUVVzc1IwRkJUU3hIUVVOb1JDeHRRa0ZCYlVJc1UwRkJWU3hIUVVGSkxFZEJRVWtzUzBGQlN5eEhRVUZQTEV0QlowSnlSQ3hyUWtGQmJVSXNVMEZCVXl4VFFVRlZMRWRCUVVrc1MwRkRlRU1zYlVKQlFXMUNMRWRCUVVrc1UwRkJWU3hIUVVGSkxFdEJRVXNzUjBGQlRTeEpRVTlzUkN3d1FrRkJNa0lzZVVKQlRUTkNMSEZDUVVGelFpeHZRa0ZGZEVJc1pVRkJaMElzWlVGRmFFSXNWVUZCVnl4VlFVbGlMRkZCUVU4c1VVRkJWU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhNeTB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6WEc0Z0tpQkFkSGx3WldOb1pXTnJjeUJ6ZEdGMGFXTXRiMjVzZVZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGSmxZV04wVW05dmRFbHVaR1Y0SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSU2IyOTBTVzVrWlhoY0lpazdYRzVjYm5aaGNpQnBiblpoY21saGJuUWdQU0J5WlhGMWFYSmxLRndpTGk5cGJuWmhjbWxoYm5SY0lpazdYRzVjYm5aaGNpQlRSVkJCVWtGVVQxSWdQU0FuTGljN1hHNTJZWElnVTBWUVFWSkJWRTlTWDB4RlRrZFVTQ0E5SUZORlVFRlNRVlJQVWk1c1pXNW5kR2c3WEc1Y2JpOHFLbHh1SUNvZ1RXRjRhVzExYlNCa1pYQjBhQ0J2WmlCMGNtRjJaWEp6WVd4eklHSmxabTl5WlNCM1pTQmpiMjV6YVdSbGNpQjBhR1VnY0c5emMybGlhV3hwZEhrZ2IyWWdZU0JpWVdRZ1NVUXVYRzRnS2k5Y2JuWmhjaUJOUVZoZlZGSkZSVjlFUlZCVVNDQTlJREV3TUR0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdSRTlOSUVsRUlIQnlaV1pwZUNCMGJ5QjFjMlVnZDJobGJpQnRiM1Z1ZEdsdVp5QlNaV0ZqZENCamIyMXdiMjVsYm5SekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCcGJtUmxlQ0JCSUhWdWFYRjFaU0JwYm5SbFoyVnlYRzRnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUZKbFlXTjBJSEp2YjNRZ1NVUXVYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFVtVmhZM1JTYjI5MFNVUlRkSEpwYm1jb2FXNWtaWGdwSUh0Y2JpQWdjbVYwZFhKdUlGTkZVRUZTUVZSUFVpQXJJR2x1WkdWNExuUnZVM1J5YVc1bktETTJLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZU0JqYUdGeVlXTjBaWElnYVc0Z2RHaGxJSE4xY0hCc2FXVmtJRWxFSUdseklHRWdjMlZ3WVhKaGRHOXlJRzl5SUhSb1pTQmxibVF1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR2xrSUVFZ1VtVmhZM1FnUkU5TklFbEVMbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdsdVpHVjRJRWx1WkdWNElHOW1JSFJvWlNCamFHRnlZV04wWlhJZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFJvWlNCamFHRnlZV04wWlhJZ2FYTWdZU0J6WlhCaGNtRjBiM0lnYjNJZ1pXNWtJRzltSUhSb1pTQkpSQzVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselFtOTFibVJoY25rb2FXUXNJR2x1WkdWNEtTQjdYRzRnSUhKbGRIVnliaUJwWkM1amFHRnlRWFFvYVc1a1pYZ3BJRDA5UFNCVFJWQkJVa0ZVVDFJZ2ZId2dhVzVrWlhnZ1BUMDlJR2xrTG14bGJtZDBhRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdkR2hsSUhOMWNIQnNhV1ZrSUhOMGNtbHVaeUJwY3lCaElIWmhiR2xrSUZKbFlXTjBJRVJQVFNCSlJDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FXUWdRU0JTWldGamRDQkVUMDBnU1VRc0lHMWhlV0psTGx4dUlDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjBhR1VnYzNSeWFXNW5JR2x6SUdFZ2RtRnNhV1FnVW1WaFkzUWdSRTlOSUVsRUxseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5XWVd4cFpFbEVLR2xrS1NCN1hHNGdJSEpsZEhWeWJpQnBaQ0E5UFQwZ0p5Y2dmSHdnS0Z4dUlDQWdJR2xrTG1Ob1lYSkJkQ2d3S1NBOVBUMGdVMFZRUVZKQlZFOVNJQ1ltSUdsa0xtTm9ZWEpCZENocFpDNXNaVzVuZEdnZ0xTQXhLU0FoUFQwZ1UwVlFRVkpCVkU5U1hHNGdJQ2s3WEc1OVhHNWNiaThxS2x4dUlDb2dRMmhsWTJ0eklHbG1JSFJvWlNCbWFYSnpkQ0JKUkNCcGN5QmhiaUJoYm1ObGMzUnZjaUJ2WmlCdmNpQmxjWFZoYkNCMGJ5QjBhR1VnYzJWamIyNWtJRWxFTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JoYm1ObGMzUnZja2xFWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1pHVnpZMlZ1WkdGdWRFbEVYRzRnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUdCaGJtTmxjM1J2Y2tsRVlDQnBjeUJoYmlCaGJtTmxjM1J2Y2lCdlppQmdaR1Z6WTJWdVpHRnVkRWxFWUM1Y2JpQXFJRUJwYm5SbGNtNWhiRnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMEZ1WTJWemRHOXlTVVJQWmloaGJtTmxjM1J2Y2tsRUxDQmtaWE5qWlc1a1lXNTBTVVFwSUh0Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNCa1pYTmpaVzVrWVc1MFNVUXVhVzVrWlhoUFppaGhibU5sYzNSdmNrbEVLU0E5UFQwZ01DQW1KbHh1SUNBZ0lHbHpRbTkxYm1SaGNua29aR1Z6WTJWdVpHRnVkRWxFTENCaGJtTmxjM1J2Y2tsRUxteGxibWQwYUNsY2JpQWdLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkhaWFJ6SUhSb1pTQndZWEpsYm5RZ1NVUWdiMllnZEdobElITjFjSEJzYVdWa0lGSmxZV04wSUVSUFRTQkpSQ3dnWUdsa1lDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2FXUWdTVVFnYjJZZ1lTQmpiMjF3YjI1bGJuUXVYRzRnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUVsRUlHOW1JSFJvWlNCd1lYSmxiblFzSUc5eUlHRnVJR1Z0Y0hSNUlITjBjbWx1Wnk1Y2JpQXFJRUJ3Y21sMllYUmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRkJoY21WdWRFbEVLR2xrS1NCN1hHNGdJSEpsZEhWeWJpQnBaQ0EvSUdsa0xuTjFZbk4wY2lnd0xDQnBaQzVzWVhOMFNXNWtaWGhQWmloVFJWQkJVa0ZVVDFJcEtTQTZJQ2NuTzF4dWZWeHVYRzR2S2lwY2JpQXFJRWRsZEhNZ2RHaGxJRzVsZUhRZ1JFOU5JRWxFSUc5dUlIUm9aU0IwY21WbElIQmhkR2dnWm5KdmJTQjBhR1VnYzNWd2NHeHBaV1FnWUdGdVkyVnpkRzl5U1VSZ0lIUnZJSFJvWlZ4dUlDb2djM1Z3Y0d4cFpXUWdZR1JsYzNScGJtRjBhVzl1U1VSZ0xpQkpaaUIwYUdWNUlHRnlaU0JsY1hWaGJDd2dkR2hsSUVsRUlHbHpJSEpsZEhWeWJtVmtMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibU5sYzNSdmNrbEVJRWxFSUc5bUlHRnVJR0Z1WTJWemRHOXlJRzV2WkdVZ2IyWWdZR1JsYzNScGJtRjBhVzl1U1VSZ0xseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR1JsYzNScGJtRjBhVzl1U1VRZ1NVUWdiMllnZEdobElHUmxjM1JwYm1GMGFXOXVJRzV2WkdVdVhHNGdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJRTVsZUhRZ1NVUWdiMjRnZEdobElIQmhkR2dnWm5KdmJTQmdZVzVqWlhOMGIzSkpSR0FnZEc4Z1lHUmxjM1JwYm1GMGFXOXVTVVJnTGx4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBUbVY0ZEVSbGMyTmxibVJoYm5SSlJDaGhibU5sYzNSdmNrbEVMQ0JrWlhOMGFXNWhkR2x2YmtsRUtTQjdYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdhWE5XWVd4cFpFbEVLR0Z1WTJWemRHOXlTVVFwSUNZbUlHbHpWbUZzYVdSSlJDaGtaWE4wYVc1aGRHbHZia2xFS1N4Y2JpQWdJQ0FuWjJWMFRtVjRkRVJsYzJObGJtUmhiblJKUkNnbGN5d2dKWE1wT2lCU1pXTmxhWFpsWkNCaGJpQnBiblpoYkdsa0lGSmxZV04wSUVSUFRTQkpSQzRuTEZ4dUlDQWdJR0Z1WTJWemRHOXlTVVFzWEc0Z0lDQWdaR1Z6ZEdsdVlYUnBiMjVKUkZ4dUlDQXBJRG9nYVc1MllYSnBZVzUwS0dselZtRnNhV1JKUkNoaGJtTmxjM1J2Y2tsRUtTQW1KaUJwYzFaaGJHbGtTVVFvWkdWemRHbHVZWFJwYjI1SlJDa3BLVHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0JwYzBGdVkyVnpkRzl5U1VSUFppaGhibU5sYzNSdmNrbEVMQ0JrWlhOMGFXNWhkR2x2YmtsRUtTeGNiaUFnSUNBbloyVjBUbVY0ZEVSbGMyTmxibVJoYm5SSlJDZ3VMaTRwT2lCU1pXRmpkQ0JvWVhNZ2JXRmtaU0JoYmlCcGJuWmhiR2xrSUdGemMzVnRjSFJwYjI0Z1lXSnZkWFFnSnlBclhHNGdJQ0FnSjNSb1pTQkVUMDBnYUdsbGNtRnlZMmg1TGlCRmVIQmxZM1JsWkNCZ0pYTmdJSFJ2SUdKbElHRnVJR0Z1WTJWemRHOXlJRzltSUdBbGMyQXVKeXhjYmlBZ0lDQmhibU5sYzNSdmNrbEVMRnh1SUNBZ0lHUmxjM1JwYm1GMGFXOXVTVVJjYmlBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hwYzBGdVkyVnpkRzl5U1VSUFppaGhibU5sYzNSdmNrbEVMQ0JrWlhOMGFXNWhkR2x2YmtsRUtTa3BPMXh1SUNCcFppQW9ZVzVqWlhOMGIzSkpSQ0E5UFQwZ1pHVnpkR2x1WVhScGIyNUpSQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmhibU5sYzNSdmNrbEVPMXh1SUNCOVhHNGdJQzh2SUZOcmFYQWdiM1psY2lCMGFHVWdZVzVqWlhOMGIzSWdZVzVrSUhSb1pTQnBiVzFsWkdsaGRHVWdjMlZ3WVhKaGRHOXlMaUJVY21GMlpYSnpaU0IxYm5ScGJDQjNaU0JvYVhSY2JpQWdMeThnWVc1dmRHaGxjaUJ6WlhCaGNtRjBiM0lnYjNJZ2QyVWdjbVZoWTJnZ2RHaGxJR1Z1WkNCdlppQmdaR1Z6ZEdsdVlYUnBiMjVKUkdBdVhHNGdJSFpoY2lCemRHRnlkQ0E5SUdGdVkyVnpkRzl5U1VRdWJHVnVaM1JvSUNzZ1UwVlFRVkpCVkU5U1gweEZUa2RVU0R0Y2JpQWdkbUZ5SUdrN1hHNGdJR1p2Y2lBb2FTQTlJSE4wWVhKME95QnBJRHdnWkdWemRHbHVZWFJwYjI1SlJDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNocGMwSnZkVzVrWVhKNUtHUmxjM1JwYm1GMGFXOXVTVVFzSUdrcEtTQjdYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1JsYzNScGJtRjBhVzl1U1VRdWMzVmljM1J5S0RBc0lHa3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFZGxkSE1nZEdobElHNWxZWEpsYzNRZ1kyOXRiVzl1SUdGdVkyVnpkRzl5SUVsRUlHOW1JSFIzYnlCSlJITXVYRzRnS2x4dUlDb2dWWE5wYm1jZ2RHaHBjeUJKUkNCelkyaGxiV1VzSUhSb1pTQnVaV0Z5WlhOMElHTnZiVzF2YmlCaGJtTmxjM1J2Y2lCSlJDQnBjeUIwYUdVZ2JHOXVaMlZ6ZENCamIyMXRiMjVjYmlBcUlIQnlaV1pwZUNCdlppQjBhR1VnZEhkdklFbEVjeUIwYUdGMElHbHRiV1ZrYVdGMFpXeDVJSEJ5WldObFpHVmtJR0VnWENKdFlYSnJaWEpjSWlCcGJpQmliM1JvSUhOMGNtbHVaM011WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzl1WlVsRVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkSGR2U1VSY2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdUbVZoY21WemRDQmpiMjF0YjI0Z1lXNWpaWE4wYjNJZ1NVUXNJRzl5SUhSb1pTQmxiWEIwZVNCemRISnBibWNnYVdZZ2JtOXVaUzVjYmlBcUlFQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFWnBjbk4wUTI5dGJXOXVRVzVqWlhOMGIzSkpSQ2h2Ym1WSlJDd2dkSGR2U1VRcElIdGNiaUFnZG1GeUlHMXBia3hsYm1kMGFDQTlJRTFoZEdndWJXbHVLRzl1WlVsRUxteGxibWQwYUN3Z2RIZHZTVVF1YkdWdVozUm9LVHRjYmlBZ2FXWWdLRzFwYmt4bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlBbkp6dGNiaUFnZlZ4dUlDQjJZWElnYkdGemRFTnZiVzF2YmsxaGNtdGxja2x1WkdWNElEMGdNRHRjYmlBZ0x5OGdWWE5sSUdBOFBXQWdkRzhnZEhKaGRtVnljMlVnZFc1MGFXd2dkR2hsSUZ3aVJVOU1YQ0lnYjJZZ2RHaGxJSE5vYjNKMFpYSWdjM1J5YVc1bkxseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4UFNCdGFXNU1aVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNocGMwSnZkVzVrWVhKNUtHOXVaVWxFTENCcEtTQW1KaUJwYzBKdmRXNWtZWEo1S0hSM2IwbEVMQ0JwS1NrZ2UxeHVJQ0FnSUNBZ2JHRnpkRU52YlcxdmJrMWhjbXRsY2tsdVpHVjRJRDBnYVR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c5dVpVbEVMbU5vWVhKQmRDaHBLU0FoUFQwZ2RIZHZTVVF1WTJoaGNrRjBLR2twS1NCN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdkbUZ5SUd4dmJtZGxjM1JEYjIxdGIyNUpSQ0E5SUc5dVpVbEVMbk4xWW5OMGNpZ3dMQ0JzWVhOMFEyOXRiVzl1VFdGeWEyVnlTVzVrWlhncE8xeHVJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lHbHpWbUZzYVdSSlJDaHNiMjVuWlhOMFEyOXRiVzl1U1VRcExGeHVJQ0FnSUNkblpYUkdhWEp6ZEVOdmJXMXZia0Z1WTJWemRHOXlTVVFvSlhNc0lDVnpLVG9nUlhod1pXTjBaV1FnWVNCMllXeHBaQ0JTWldGamRDQkVUMDBnU1VRNklDVnpKeXhjYmlBZ0lDQnZibVZKUkN4Y2JpQWdJQ0IwZDI5SlJDeGNiaUFnSUNCc2IyNW5aWE4wUTI5dGJXOXVTVVJjYmlBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hwYzFaaGJHbGtTVVFvYkc5dVoyVnpkRU52YlcxdmJrbEVLU2twTzF4dUlDQnlaWFIxY200Z2JHOXVaMlZ6ZEVOdmJXMXZia2xFTzF4dWZWeHVYRzR2S2lwY2JpQXFJRlJ5WVhabGNuTmxjeUIwYUdVZ2NHRnlaVzUwSUhCaGRHZ2dZbVYwZDJWbGJpQjBkMjhnU1VSeklDaGxhWFJvWlhJZ2RYQWdiM0lnWkc5M2Jpa3VJRlJvWlNCSlJITWdiWFZ6ZEZ4dUlDb2dibTkwSUdKbElIUm9aU0J6WVcxbExDQmhibVFnZEdobGNtVWdiWFZ6ZENCbGVHbHpkQ0JoSUhCaGNtVnVkQ0J3WVhSb0lHSmxkSGRsWlc0Z2RHaGxiUzRnU1dZZ2RHaGxYRzRnS2lCallXeHNZbUZqYXlCeVpYUjFjbTV6SUdCbVlXeHpaV0FzSUhSeVlYWmxjbk5oYkNCcGN5QnpkRzl3Y0dWa0xseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1AzTjBjbWx1WjMwZ2MzUmhjblFnU1VRZ1lYUWdkMmhwWTJnZ2RHOGdjM1JoY25RZ2RISmhkbVZ5YzJGc0xseHVJQ29nUUhCaGNtRnRJSHMvYzNSeWFXNW5mU0J6ZEc5d0lFbEVJR0YwSUhkb2FXTm9JSFJ2SUdWdVpDQjBjbUYyWlhKellXd3VYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCallpQkRZV3hzWW1GamF5QjBieUJwYm5admEyVWdaV0ZqYUNCSlJDQjNhWFJvTGx4dUlDb2dRSEJoY21GdElIcy9ZbTl2YkdWaGJuMGdjMnRwY0VacGNuTjBJRmRvWlhSb1pYSWdiM0lnYm05MElIUnZJSE5yYVhBZ2RHaGxJR1pwY25OMElHNXZaR1V1WEc0Z0tpQkFjR0Z5WVcwZ2V6OWliMjlzWldGdWZTQnphMmx3VEdGemRDQlhhR1YwYUdWeUlHOXlJRzV2ZENCMGJ5QnphMmx3SUhSb1pTQnNZWE4wSUc1dlpHVXVYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUIwY21GMlpYSnpaVkJoY21WdWRGQmhkR2dvYzNSaGNuUXNJSE4wYjNBc0lHTmlMQ0JoY21jc0lITnJhWEJHYVhKemRDd2djMnRwY0V4aGMzUXBJSHRjYmlBZ2MzUmhjblFnUFNCemRHRnlkQ0I4ZkNBbkp6dGNiaUFnYzNSdmNDQTlJSE4wYjNBZ2ZId2dKeWM3WEc0Z0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnYzNSaGNuUWdJVDA5SUhOMGIzQXNYRzRnSUNBZ0ozUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDZ3VMaTRwT2lCRFlXNXViM1FnZEhKaGRtVnljMlVnWm5KdmJTQmhibVFnZEc4Z2RHaGxJSE5oYldVZ1NVUXNJR0FsYzJBdUp5eGNiaUFnSUNCemRHRnlkRnh1SUNBcElEb2dhVzUyWVhKcFlXNTBLSE4wWVhKMElDRTlQU0J6ZEc5d0tTazdYRzRnSUhaaGNpQjBjbUYyWlhKelpWVndJRDBnYVhOQmJtTmxjM1J2Y2tsRVQyWW9jM1J2Y0N3Z2MzUmhjblFwTzF4dUlDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUhSeVlYWmxjbk5sVlhBZ2ZId2dhWE5CYm1ObGMzUnZja2xFVDJZb2MzUmhjblFzSUhOMGIzQXBMRnh1SUNBZ0lDZDBjbUYyWlhKelpWQmhjbVZ1ZEZCaGRHZ29KWE1zSUNWekxDQXVMaTRwT2lCRFlXNXViM1FnZEhKaGRtVnljMlVnWm5KdmJTQjBkMjhnU1VSeklIUm9ZWFFnWkc4Z0p5QXJYRzRnSUNBZ0oyNXZkQ0JvWVhabElHRWdjR0Z5Wlc1MElIQmhkR2d1Snl4Y2JpQWdJQ0J6ZEdGeWRDeGNiaUFnSUNCemRHOXdYRzRnSUNrZ09pQnBiblpoY21saGJuUW9kSEpoZG1WeWMyVlZjQ0I4ZkNCcGMwRnVZMlZ6ZEc5eVNVUlBaaWh6ZEdGeWRDd2djM1J2Y0NrcEtUdGNiaUFnTHk4Z1ZISmhkbVZ5YzJVZ1puSnZiU0JnYzNSaGNuUmdJSFJ2SUdCemRHOXdZQ0J2Ym1VZ1pHVndkR2dnWVhRZ1lTQjBhVzFsTGx4dUlDQjJZWElnWkdWd2RHZ2dQU0F3TzF4dUlDQjJZWElnZEhKaGRtVnljMlVnUFNCMGNtRjJaWEp6WlZWd0lEOGdaMlYwVUdGeVpXNTBTVVFnT2lCblpYUk9aWGgwUkdWelkyVnVaR0Z1ZEVsRU8xeHVJQ0JtYjNJZ0tIWmhjaUJwWkNBOUlITjBZWEowT3lBdktpQjFiblJwYkNCaWNtVmhheUFxTHpzZ2FXUWdQU0IwY21GMlpYSnpaU2hwWkN3Z2MzUnZjQ2twSUh0Y2JpQWdJQ0IyWVhJZ2NtVjBPMXh1SUNBZ0lHbG1JQ2dvSVhOcmFYQkdhWEp6ZENCOGZDQnBaQ0FoUFQwZ2MzUmhjblFwSUNZbUlDZ2hjMnRwY0V4aGMzUWdmSHdnYVdRZ0lUMDlJSE4wYjNBcEtTQjdYRzRnSUNBZ0lDQnlaWFFnUFNCallpaHBaQ3dnZEhKaGRtVnljMlZWY0N3Z1lYSm5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEpsZENBOVBUMGdabUZzYzJVZ2ZId2dhV1FnUFQwOUlITjBiM0FwSUh0Y2JpQWdJQ0FnSUM4dklFOXViSGtnWW5KbFlXc2dMeTloWm5SbGNpOHZJSFpwYzJsMGFXNW5JR0J6ZEc5d1lDNWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJSDFjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ1pHVndkR2dyS3lBOElFMUJXRjlVVWtWRlgwUkZVRlJJTEZ4dUlDQWdJQ0FnSjNSeVlYWmxjbk5sVUdGeVpXNTBVR0YwYUNnbGN5d2dKWE1zSUM0dUxpazZJRVJsZEdWamRHVmtJR0Z1SUdsdVptbHVhWFJsSUd4dmIzQWdkMmhwYkdVZ0p5QXJYRzRnSUNBZ0lDQW5kSEpoZG1WeWMybHVaeUIwYUdVZ1VtVmhZM1FnUkU5TklFbEVJSFJ5WldVdUlGUm9hWE1nYldGNUlHSmxJR1IxWlNCMGJ5QnRZV3htYjNKdFpXUWdTVVJ6T2lBbGN5Y3NYRzRnSUNBZ0lDQnpkR0Z5ZEN3Z2MzUnZjRnh1SUNBZ0lDa2dPaUJwYm5aaGNtbGhiblFvWkdWd2RHZ3JLeUE4SUUxQldGOVVVa1ZGWDBSRlVGUklLU2s3WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCTllXNWhaMlZ6SUhSb1pTQkpSSE1nWVhOemFXZHVaV1FnZEc4Z1JFOU5JSEpsY0hKbGMyVnVkR0YwYVc5dWN5QnZaaUJTWldGamRDQmpiMjF3YjI1bGJuUnpMaUJVYUdselhHNGdLaUIxYzJWeklHRWdjM0JsWTJsbWFXTWdjMk5vWlcxbElHbHVJRzl5WkdWeUlIUnZJSFJ5WVhabGNuTmxJSFJvWlNCRVQwMGdaV1ptYVdOcFpXNTBiSGtnS0dVdVp5NGdhVzVjYmlBcUlHOXlaR1Z5SUhSdklITnBiWFZzWVhSbElHVjJaVzUwY3lrdVhHNGdLbHh1SUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdLaTljYm5aaGNpQlNaV0ZqZEVsdWMzUmhibU5sU0dGdVpHeGxjeUE5SUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTI5dWMzUnlkV04wY3lCaElGSmxZV04wSUhKdmIzUWdTVVJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQkJJRkpsWVdOMElISnZiM1FnU1VRdVhHNGdJQ0FxTDF4dUlDQmpjbVZoZEdWU1pXRmpkRkp2YjNSSlJEb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxkRkpsWVdOMFVtOXZkRWxFVTNSeWFXNW5LRkpsWVdOMFVtOXZkRWx1WkdWNExtTnlaV0YwWlZKbFlXTjBVbTl2ZEVsdVpHVjRLQ2twTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiMjV6ZEhKMVkzUnpJR0VnVW1WaFkzUWdTVVFnWW5rZ2FtOXBibWx1WnlCaElISnZiM1FnU1VRZ2QybDBhQ0JoSUc1aGJXVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J5YjI5MFNVUWdVbTl2ZENCSlJDQnZaaUJoSUhCaGNtVnVkQ0JqYjIxd2IyNWxiblF1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUVFZ1kyOXRjRzl1Wlc1MEozTWdibUZ0WlNBb1lYTWdabXhoZEhSbGJtVmtJR05vYVd4a2NtVnVLUzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQkJJRkpsWVdOMElFbEVMbHh1SUNBZ0tpQkFhVzUwWlhKdVlXeGNiaUFnSUNvdlhHNGdJR055WldGMFpWSmxZV04wU1VRNklHWjFibU4wYVc5dUtISnZiM1JKUkN3Z2JtRnRaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnliMjkwU1VRZ0t5QnVZVzFsTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQkVUMDBnU1VRZ2IyWWdkR2hsSUZKbFlXTjBJR052YlhCdmJtVnVkQ0IwYUdGMElHbHpJSFJvWlNCeWIyOTBJRzltSUhSb1pTQjBjbVZsSUhSb1lYUmNiaUFnSUNvZ1kyOXVkR0ZwYm5NZ2RHaGxJRkpsWVdOMElHTnZiWEJ2Ym1WdWRDQjNhWFJvSUhSb1pTQnpkWEJ3YkdsbFpDQkVUMDBnU1VRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnBaQ0JFVDAwZ1NVUWdiMllnWVNCU1pXRmpkQ0JqYjIxd2IyNWxiblF1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlejl6ZEhKcGJtZDlJRVJQVFNCSlJDQnZaaUIwYUdVZ1VtVmhZM1FnWTI5dGNHOXVaVzUwSUhSb1lYUWdhWE1nZEdobElISnZiM1F1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnWjJWMFVtVmhZM1JTYjI5MFNVUkdjbTl0VG05a1pVbEVPaUJtZFc1amRHbHZiaWhwWkNrZ2UxeHVJQ0FnSUdsbUlDaHBaQ0FtSmlCcFpDNWphR0Z5UVhRb01Da2dQVDA5SUZORlVFRlNRVlJQVWlBbUppQnBaQzVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQnBaQzVwYm1SbGVFOW1LRk5GVUVGU1FWUlBVaXdnTVNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYVc1a1pYZ2dQaUF0TVNBL0lHbGtMbk4xWW5OMGNpZ3dMQ0JwYm1SbGVDa2dPaUJwWkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUnlZWFpsY25ObGN5QjBhR1VnU1VRZ2FHbGxjbUZ5WTJoNUlHRnVaQ0JwYm5admEyVnpJSFJvWlNCemRYQndiR2xsWkNCZ1kySmdJRzl1SUdGdWVTQkpSSE1nZEdoaGRGeHVJQ0FnS2lCemFHOTFiR1FnZDI5MWJHUWdjbVZqWldsMlpTQmhJR0J0YjNWelpVVnVkR1Z5WUNCdmNpQmdiVzkxYzJWTVpXRjJaV0FnWlhabGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUU1UFZFVTZJRVJ2WlhNZ2JtOTBJR2x1ZG05clpTQjBhR1VnWTJGc2JHSmhZMnNnYjI0Z2RHaGxJRzVsWVhKbGMzUWdZMjl0Ylc5dUlHRnVZMlZ6ZEc5eUlHSmxZMkYxYzJWY2JpQWdJQ29nYm05MGFHbHVaeUJjSW1WdWRHVnlaV1JjSWlCdmNpQmNJbXhsWm5SY0lpQjBhR0YwSUdWc1pXMWxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCc1pXRjJaVWxFSUVsRUlHSmxhVzVuSUd4bFpuUXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbGJuUmxja2xFSUVsRUlHSmxhVzVuSUdWdWRHVnlaV1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR05pSUVOaGJHeGlZV05ySUhSdklHbHVkbTlyWlNCdmJpQmxZV05vSUdWdWRHVnlaV1F2YkdWbWRDQkpSQzVjYmlBZ0lDb2dRSEJoY21GdElIc3FmU0IxY0VGeVp5QkJjbWQxYldWdWRDQjBieUJwYm5admEyVWdkR2hsSUdOaGJHeGlZV05ySUhkcGRHZ2diMjRnYkdWbWRDQkpSSE11WEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnWkc5M2JrRnlaeUJCY21kMWJXVnVkQ0IwYnlCcGJuWnZhMlVnZEdobElHTmhiR3hpWVdOcklIZHBkR2dnYjI0Z1pXNTBaWEpsWkNCSlJITXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdkSEpoZG1WeWMyVkZiblJsY2t4bFlYWmxPaUJtZFc1amRHbHZiaWhzWldGMlpVbEVMQ0JsYm5SbGNrbEVMQ0JqWWl3Z2RYQkJjbWNzSUdSdmQyNUJjbWNwSUh0Y2JpQWdJQ0IyWVhJZ1lXNWpaWE4wYjNKSlJDQTlJR2RsZEVacGNuTjBRMjl0Ylc5dVFXNWpaWE4wYjNKSlJDaHNaV0YyWlVsRUxDQmxiblJsY2tsRUtUdGNiaUFnSUNCcFppQW9ZVzVqWlhOMGIzSkpSQ0FoUFQwZ2JHVmhkbVZKUkNrZ2UxeHVJQ0FnSUNBZ2RISmhkbVZ5YzJWUVlYSmxiblJRWVhSb0tHeGxZWFpsU1VRc0lHRnVZMlZ6ZEc5eVNVUXNJR05pTENCMWNFRnlaeXdnWm1Gc2MyVXNJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1lXNWpaWE4wYjNKSlJDQWhQVDBnWlc1MFpYSkpSQ2tnZTF4dUlDQWdJQ0FnZEhKaGRtVnljMlZRWVhKbGJuUlFZWFJvS0dGdVkyVnpkRzl5U1VRc0lHVnVkR1Z5U1VRc0lHTmlMQ0JrYjNkdVFYSm5MQ0IwY25WbExDQm1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRhVzExYkdGMFpYTWdkR2hsSUhSeVlYWmxjbk5oYkNCdlppQmhJSFIzYnkxd2FHRnpaU3dnWTJGd2RIVnlaUzlpZFdKaWJHVWdaWFpsYm5RZ1pHbHpjR0YwWTJndVhHNGdJQ0FxWEc0Z0lDQXFJRTVQVkVVNklGUm9hWE1nZEhKaGRtVnljMkZzSUdoaGNIQmxibk1nYjI0Z1NVUnpJSGRwZEdodmRYUWdkRzkxWTJocGJtY2dkR2hsSUVSUFRTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFJoY21kbGRFbEVJRWxFSUc5bUlIUm9aU0IwWVhKblpYUWdibTlrWlM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnWTJJZ1EyRnNiR0poWTJzZ2RHOGdhVzUyYjJ0bExseHVJQ0FnS2lCQWNHRnlZVzBnZXlwOUlHRnlaeUJCY21kMWJXVnVkQ0IwYnlCcGJuWnZhMlVnZEdobElHTmhiR3hpWVdOcklIZHBkR2d1WEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnZEhKaGRtVnljMlZVZDI5UWFHRnpaVG9nWm5WdVkzUnBiMjRvZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNwSUh0Y2JpQWdJQ0JwWmlBb2RHRnlaMlYwU1VRcElIdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDZ25KeXdnZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNzSUhSeWRXVXNJR1poYkhObEtUdGNiaUFnSUNBZ0lIUnlZWFpsY25ObFVHRnlaVzUwVUdGMGFDaDBZWEpuWlhSSlJDd2dKeWNzSUdOaUxDQmhjbWNzSUdaaGJITmxMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ5WVhabGNuTmxJR0VnYm05a1pTQkpSQ3dnWTJGc2JHbHVaeUIwYUdVZ2MzVndjR3hwWldRZ1lHTmlZQ0JtYjNJZ1pXRmphQ0JoYm1ObGMzUnZjaUJKUkM0Z1JtOXlYRzRnSUNBcUlHVjRZVzF3YkdVc0lIQmhjM05wYm1jZ1lDNHdMaVJ5YjNjdE1DNHhZQ0IzYjNWc1pDQnlaWE4xYkhRZ2FXNGdZR05pWUNCblpYUjBhVzVuSUdOaGJHeGxaRnh1SUNBZ0tpQjNhWFJvSUdBdU1HQXNJR0F1TUM0a2NtOTNMVEJnTENCaGJtUWdZQzR3TGlSeWIzY3RNQzR4WUM1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1ZHaHBjeUIwY21GMlpYSnpZV3dnYUdGd2NHVnVjeUJ2YmlCSlJITWdkMmwwYUc5MWRDQjBiM1ZqYUdsdVp5QjBhR1VnUkU5TkxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkR0Z5WjJWMFNVUWdTVVFnYjJZZ2RHaGxJSFJoY21kbGRDQnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JqWWlCRFlXeHNZbUZqYXlCMGJ5QnBiblp2YTJVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3S24wZ1lYSm5JRUZ5WjNWdFpXNTBJSFJ2SUdsdWRtOXJaU0IwYUdVZ1kyRnNiR0poWTJzZ2QybDBhQzVjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0IwY21GMlpYSnpaVUZ1WTJWemRHOXljem9nWm5WdVkzUnBiMjRvZEdGeVoyVjBTVVFzSUdOaUxDQmhjbWNwSUh0Y2JpQWdJQ0IwY21GMlpYSnpaVkJoY21WdWRGQmhkR2dvSnljc0lIUmhjbWRsZEVsRUxDQmpZaXdnWVhKbkxDQjBjblZsTENCbVlXeHpaU2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVjRjRzl6WldRZ1ptOXlJSFZ1YVhRZ2RHVnpkR2x1Wnk1Y2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUY5blpYUkdhWEp6ZEVOdmJXMXZia0Z1WTJWemRHOXlTVVE2SUdkbGRFWnBjbk4wUTI5dGJXOXVRVzVqWlhOMGIzSkpSQ3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSWGh3YjNObFpDQm1iM0lnZFc1cGRDQjBaWE4wYVc1bkxseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaTljYmlBZ1gyZGxkRTVsZUhSRVpYTmpaVzVrWVc1MFNVUTZJR2RsZEU1bGVIUkVaWE5qWlc1a1lXNTBTVVFzWEc1Y2JpQWdhWE5CYm1ObGMzUnZja2xFVDJZNklHbHpRVzVqWlhOMGIzSkpSRTltTEZ4dVhHNGdJRk5GVUVGU1FWUlBVam9nVTBWUVFWSkJWRTlTWEc1Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNN1hHNGlYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5zdGFuY2VNYXBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogYFJlYWN0SW5zdGFuY2VNYXBgIG1haW50YWlucyBhIG1hcHBpbmcgZnJvbSBhIHB1YmxpYyBmYWNpbmcgc3RhdGVmdWxcbiAqIGluc3RhbmNlIChrZXkpIGFuZCB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gKHZhbHVlKS4gVGhpcyBhbGxvd3MgcHVibGljXG4gKiBtZXRob2RzIHRvIGFjY2VwdCB0aGUgdXNlciBmYWNpbmcgaW5zdGFuY2UgYXMgYW4gYXJndW1lbnQgYW5kIG1hcCB0aGVtIGJhY2tcbiAqIHRvIGludGVybmFsIG1ldGhvZHMuXG4gKi9cblxuLy8gVE9ETzogUmVwbGFjZSB0aGlzIHdpdGggRVM2OiB2YXIgUmVhY3RJbnN0YW5jZU1hcCA9IG5ldyBNYXAoKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0ge1xuXG4gIC8qKlxuICAgKiBUaGlzIEFQSSBzaG91bGQgYmUgY2FsbGVkIGBkZWxldGVgIGJ1dCB3ZSdkIGhhdmUgdG8gbWFrZSBzdXJlIHRvIGFsd2F5c1xuICAgKiB0cmFuc2Zvcm0gdGhlc2UgdG8gc3RyaW5ncyBmb3IgSUUgc3VwcG9ydC4gV2hlbiB0aGlzIHRyYW5zZm9ybSBpcyBmdWxseVxuICAgKiBzdXBwb3J0ZWQgd2UgY2FuIHJlbmFtZSBpdC5cbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2U7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT09IHVuZGVmaW5lZDtcbiAgfSxcblxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RMaWZlQ3ljbGVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgbWFuYWdlcyB0aGUgYm9va2tlZXBpbmcgd2hlbiBhIGNvbXBvbmVudCBpcyBpbiB0aGUgcHJvY2Vzc1xuICogb2YgYmVpbmcgbW91bnRlZCBvciBiZWluZyB1bm1vdW50ZWQuIFRoaXMgaXMgdXNlZCBhcyBhIHdheSB0byBlbmZvcmNlXG4gKiBpbnZhcmlhbnRzIChvciB3YXJuaW5ncykgd2hlbiBpdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gY2FsbFxuICogc2V0U3RhdGUvZm9yY2VVcGRhdGUuXG4gKlxuICogY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZTogRHVyaW5nIHRoZSBjb25zdHJ1Y3Rpb24gcGhhc2UsIGl0IGlzIG5vdCBwb3NzaWJsZVxuICogdG8gdHJpZ2dlciBhbiB1cGRhdGUgc2luY2UgdGhlIGluc3RhbmNlIGlzIG5vdCBmdWxseSBtb3VudGVkIHlldC4gSG93ZXZlciwgd2VcbiAqIGN1cnJlbnRseSBhbGxvdyB0aGlzIGFzIGEgY29udmVuaWVuY2UgZm9yIG11dGF0aW5nIHRoZSBpbml0aWFsIHN0YXRlLlxuICpcbiAqIGN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZTogRHVyaW5nIHRoZSB1bm1vdW50aW5nIHBoYXNlLCB0aGUgaW5zdGFuY2UgaXNcbiAqIHN0aWxsIG1vdW50ZWQgYW5kIGNhbiB0aGVyZWZvcmUgc2NoZWR1bGUgYW4gdXBkYXRlLiBIb3dldmVyLCB0aGlzIGlzIG5vdFxuICogcmVjb21tZW5kZWQgYW5kIHByb2JhYmx5IGFuIGVycm9yIHNpbmNlIGl0J3MgYWJvdXQgdG8gYmUgdW5tb3VudGVkLlxuICogVGhlcmVmb3JlIHdlIHN0aWxsIHdhbnQgdG8gdHJpZ2dlciBpbiBhbiBlcnJvciBmb3IgdGhhdCBjYXNlLlxuICovXG5cbnZhciBSZWFjdExpZmVDeWNsZSA9IHtcbiAgY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZTogbnVsbCxcbiAgY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlOiBudWxsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TGlmZUN5Y2xlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TWFya3VwQ2hlY2tzdW1cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhZGxlcjMyID0gcmVxdWlyZShcIi4vYWRsZXIzMlwiKTtcblxudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSB7XG4gIENIRUNLU1VNX0FUVFJfTkFNRTogJ2RhdGEtcmVhY3QtY2hlY2tzdW0nLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCBzdHJpbmdcbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nIHdpdGggY2hlY2tzdW0gYXR0cmlidXRlIGF0dGFjaGVkXG4gICAqL1xuICBhZGRDaGVja3N1bVRvTWFya3VwOiBmdW5jdGlvbihtYXJrdXApIHtcbiAgICB2YXIgY2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cC5yZXBsYWNlKFxuICAgICAgJz4nLFxuICAgICAgJyAnICsgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUgKyAnPVwiJyArIGNoZWNrc3VtICsgJ1wiPidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIHRvIHVzZVxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgcm9vdCBSZWFjdCBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCB0aGUgbWFya3VwIGlzIHRoZSBzYW1lXG4gICAqL1xuICBjYW5SZXVzZU1hcmt1cDogZnVuY3Rpb24obWFya3VwLCBlbGVtZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nQ2hlY2tzdW0gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcbiAgICAgIFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FXG4gICAgKTtcbiAgICBleGlzdGluZ0NoZWNrc3VtID0gZXhpc3RpbmdDaGVja3N1bSAmJiBwYXJzZUludChleGlzdGluZ0NoZWNrc3VtLCAxMCk7XG4gICAgdmFyIG1hcmt1cENoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGZpcnN0RGlmZmVyZW5jZUluZGV4KHN0cmluZzEsc3RyaW5nMil7Zm9yKHZhciBtaW5MZW49TWF0aC5taW4oc3RyaW5nMS5sZW5ndGgsc3RyaW5nMi5sZW5ndGgpLGk9MDttaW5MZW4+aTtpKyspaWYoc3RyaW5nMS5jaGFyQXQoaSkhPT1zdHJpbmcyLmNoYXJBdChpKSlyZXR1cm4gaTtyZXR1cm4gc3RyaW5nMS5sZW5ndGg9PT1zdHJpbmcyLmxlbmd0aD8tMTptaW5MZW59ZnVuY3Rpb24gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKXt2YXIgcm9vdEVsZW1lbnQ9Z2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7cmV0dXJuIHJvb3RFbGVtZW50JiZSZWFjdE1vdW50LmdldElEKHJvb3RFbGVtZW50KX1mdW5jdGlvbiBnZXRJRChub2RlKXt2YXIgaWQ9aW50ZXJuYWxHZXRJRChub2RlKTtpZihpZClpZihub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKXt2YXIgY2FjaGVkPW5vZGVDYWNoZVtpZF07Y2FjaGVkIT09bm9kZSYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCFpc1ZhbGlkKGNhY2hlZCxpZCksXCJSZWFjdE1vdW50OiBUd28gdmFsaWQgYnV0IHVuZXF1YWwgbm9kZXMgd2l0aCB0aGUgc2FtZSBgJXNgOiAlc1wiLEFUVFJfTkFNRSxpZCk6aW52YXJpYW50KCFpc1ZhbGlkKGNhY2hlZCxpZCkpLG5vZGVDYWNoZVtpZF09bm9kZSl9ZWxzZSBub2RlQ2FjaGVbaWRdPW5vZGU7cmV0dXJuIGlkfWZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSl7cmV0dXJuIG5vZGUmJm5vZGUuZ2V0QXR0cmlidXRlJiZub2RlLmdldEF0dHJpYnV0ZShBVFRSX05BTUUpfHxcIlwifWZ1bmN0aW9uIHNldElEKG5vZGUsaWQpe3ZhciBvbGRJRD1pbnRlcm5hbEdldElEKG5vZGUpO29sZElEIT09aWQmJmRlbGV0ZSBub2RlQ2FjaGVbb2xkSURdLG5vZGUuc2V0QXR0cmlidXRlKEFUVFJfTkFNRSxpZCksbm9kZUNhY2hlW2lkXT1ub2RlfWZ1bmN0aW9uIGdldE5vZGUoaWQpe3JldHVybiBub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpJiZpc1ZhbGlkKG5vZGVDYWNoZVtpZF0saWQpfHwobm9kZUNhY2hlW2lkXT1SZWFjdE1vdW50LmZpbmRSZWFjdE5vZGVCeUlEKGlkKSksbm9kZUNhY2hlW2lkXX1mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3RhbmNlKXt2YXIgaWQ9UmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdGFuY2UpLl9yb290Tm9kZUlEO3JldHVybiBSZWFjdEVtcHR5Q29tcG9uZW50LmlzTnVsbENvbXBvbmVudElEKGlkKT9udWxsOihub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpJiZpc1ZhbGlkKG5vZGVDYWNoZVtpZF0saWQpfHwobm9kZUNhY2hlW2lkXT1SZWFjdE1vdW50LmZpbmRSZWFjdE5vZGVCeUlEKGlkKSksbm9kZUNhY2hlW2lkXSl9ZnVuY3Rpb24gaXNWYWxpZChub2RlLGlkKXtpZihub2RlKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChpbnRlcm5hbEdldElEKG5vZGUpPT09aWQsXCJSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgXCIsQVRUUl9OQU1FKTppbnZhcmlhbnQoaW50ZXJuYWxHZXRJRChub2RlKT09PWlkKTt2YXIgY29udGFpbmVyPVJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO2lmKGNvbnRhaW5lciYmY29udGFpbnNOb2RlKGNvbnRhaW5lcixub2RlKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBwdXJnZUlEKGlkKXtkZWxldGUgbm9kZUNhY2hlW2lkXX1mdW5jdGlvbiBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbChhbmNlc3RvcklEKXt2YXIgYW5jZXN0b3I9bm9kZUNhY2hlW2FuY2VzdG9ySURdO3JldHVybiBhbmNlc3RvciYmaXNWYWxpZChhbmNlc3RvcixhbmNlc3RvcklEKT92b2lkKGRlZXBlc3ROb2RlU29GYXI9YW5jZXN0b3IpOiExfWZ1bmN0aW9uIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpe2RlZXBlc3ROb2RlU29GYXI9bnVsbCxSZWFjdEluc3RhbmNlSGFuZGxlcy50cmF2ZXJzZUFuY2VzdG9ycyh0YXJnZXRJRCxmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbCk7dmFyIGZvdW5kTm9kZT1kZWVwZXN0Tm9kZVNvRmFyO3JldHVybiBkZWVwZXN0Tm9kZVNvRmFyPW51bGwsZm91bmROb2RlfWZ1bmN0aW9uIG1vdW50Q29tcG9uZW50SW50b05vZGUoY29tcG9uZW50SW5zdGFuY2Uscm9vdElELGNvbnRhaW5lcix0cmFuc2FjdGlvbixzaG91bGRSZXVzZU1hcmt1cCl7dmFyIG1hcmt1cD1SZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2Uscm9vdElELHRyYW5zYWN0aW9uLGVtcHR5T2JqZWN0KTtjb21wb25lbnRJbnN0YW5jZS5faXNUb3BMZXZlbD0hMCxSZWFjdE1vdW50Ll9tb3VudEltYWdlSW50b05vZGUobWFya3VwLGNvbnRhaW5lcixzaG91bGRSZXVzZU1hcmt1cCl9ZnVuY3Rpb24gYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUoY29tcG9uZW50SW5zdGFuY2Uscm9vdElELGNvbnRhaW5lcixzaG91bGRSZXVzZU1hcmt1cCl7dmFyIHRyYW5zYWN0aW9uPVJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO3RyYW5zYWN0aW9uLnBlcmZvcm0obW91bnRDb21wb25lbnRJbnRvTm9kZSxudWxsLGNvbXBvbmVudEluc3RhbmNlLHJvb3RJRCxjb250YWluZXIsdHJhbnNhY3Rpb24sc2hvdWxkUmV1c2VNYXJrdXApLFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pfXZhciBET01Qcm9wZXJ0eT1yZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKSxSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI9cmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpLFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpLFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksUmVhY3RFbGVtZW50VmFsaWRhdG9yPXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKSxSZWFjdEVtcHR5Q29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIiksUmVhY3RJbnN0YW5jZUhhbmRsZXM9cmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIiksUmVhY3RJbnN0YW5jZU1hcD1yZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpLFJlYWN0TWFya3VwQ2hlY2tzdW09cmVxdWlyZShcIi4vUmVhY3RNYXJrdXBDaGVja3N1bVwiKSxSZWFjdFBlcmY9cmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpLFJlYWN0UmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIiksUmVhY3RVcGRhdGVRdWV1ZT1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZVF1ZXVlXCIpLFJlYWN0VXBkYXRlcz1yZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIiksZW1wdHlPYmplY3Q9cmVxdWlyZShcIi4vZW1wdHlPYmplY3RcIiksY29udGFpbnNOb2RlPXJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKSxnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXI9cmVxdWlyZShcIi4vZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXCIpLGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ9cmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHNldElubmVySFRNTD1yZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIiksc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ9cmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIiksd2FybmluZz1yZXF1aXJlKFwiLi93YXJuaW5nXCIpLFNFUEFSQVRPUj1SZWFjdEluc3RhbmNlSGFuZGxlcy5TRVBBUkFUT1IsQVRUUl9OQU1FPURPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FLG5vZGVDYWNoZT17fSxFTEVNRU5UX05PREVfVFlQRT0xLERPQ19OT0RFX1RZUEU9OSxpbnN0YW5jZXNCeVJlYWN0Um9vdElEPXt9LGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEPXt9O2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpdmFyIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SUQ9e307dmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheT1bXSxkZWVwZXN0Tm9kZVNvRmFyPW51bGwsUmVhY3RNb3VudD17X2luc3RhbmNlc0J5UmVhY3RSb290SUQ6aW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxzY3JvbGxNb25pdG9yOmZ1bmN0aW9uKGNvbnRhaW5lcixyZW5kZXJDYWxsYmFjayl7cmVuZGVyQ2FsbGJhY2soKX0sX3VwZGF0ZVJvb3RDb21wb25lbnQ6ZnVuY3Rpb24ocHJldkNvbXBvbmVudCxuZXh0RWxlbWVudCxjb250YWluZXIsY2FsbGJhY2spe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMobmV4dEVsZW1lbnQpLFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihjb250YWluZXIsZnVuY3Rpb24oKXtSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVFbGVtZW50SW50ZXJuYWwocHJldkNvbXBvbmVudCxuZXh0RWxlbWVudCksY2FsbGJhY2smJlJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwocHJldkNvbXBvbmVudCxjYWxsYmFjayl9KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYocm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXT1nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKSkscHJldkNvbXBvbmVudH0sX3JlZ2lzdGVyQ29tcG9uZW50OmZ1bmN0aW9uKG5leHRDb21wb25lbnQsY29udGFpbmVyKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChjb250YWluZXImJihjb250YWluZXIubm9kZVR5cGU9PT1FTEVNRU5UX05PREVfVFlQRXx8Y29udGFpbmVyLm5vZGVUeXBlPT09RE9DX05PREVfVFlQRSksXCJfcmVnaXN0ZXJDb21wb25lbnQoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC5cIik6aW52YXJpYW50KGNvbnRhaW5lciYmKGNvbnRhaW5lci5ub2RlVHlwZT09PUVMRU1FTlRfTk9ERV9UWVBFfHxjb250YWluZXIubm9kZVR5cGU9PT1ET0NfTk9ERV9UWVBFKSksUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO3ZhciByZWFjdFJvb3RJRD1SZWFjdE1vdW50LnJlZ2lzdGVyQ29udGFpbmVyKGNvbnRhaW5lcik7cmV0dXJuIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdPW5leHRDb21wb25lbnQscmVhY3RSb290SUR9LF9yZW5kZXJOZXdSb290Q29tcG9uZW50OmZ1bmN0aW9uKG5leHRFbGVtZW50LGNvbnRhaW5lcixzaG91bGRSZXVzZU1hcmt1cCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKG51bGw9PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXCJfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiBjb21wb25lbnREaWRVcGRhdGUuXCIpOm51bGw7dmFyIGNvbXBvbmVudEluc3RhbmNlPWluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsbnVsbCkscmVhY3RSb290SUQ9UmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsY29udGFpbmVyKTtyZXR1cm4gUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGJhdGNoZWRNb3VudENvbXBvbmVudEludG9Ob2RlLGNvbXBvbmVudEluc3RhbmNlLHJlYWN0Um9vdElELGNvbnRhaW5lcixzaG91bGRSZXVzZU1hcmt1cCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdPWdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpKSxjb21wb25lbnRJbnN0YW5jZX0scmVuZGVyOmZ1bmN0aW9uKG5leHRFbGVtZW50LGNvbnRhaW5lcixjYWxsYmFjayl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSxcIlJlYWN0LnJlbmRlcigpOiBJbnZhbGlkIGNvbXBvbmVudCBlbGVtZW50LiVzXCIsXCJzdHJpbmdcIj09dHlwZW9mIG5leHRFbGVtZW50P1wiIEluc3RlYWQgb2YgcGFzc2luZyBhbiBlbGVtZW50IHN0cmluZywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlIGl0IGJ5IHBhc3NpbmcgaXQgdG8gUmVhY3QuY3JlYXRlRWxlbWVudC5cIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBuZXh0RWxlbWVudD9cIiBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjb21wb25lbnQgY2xhc3MsIG1ha2Ugc3VyZSB0byBpbnN0YW50aWF0ZSBpdCBieSBwYXNzaW5nIGl0IHRvIFJlYWN0LmNyZWF0ZUVsZW1lbnQuXCI6bnVsbCE9bmV4dEVsZW1lbnQmJnZvaWQgMCE9PW5leHRFbGVtZW50LnByb3BzP1wiIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgY29waWVzIG9mIFJlYWN0LlwiOlwiXCIpOmludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobmV4dEVsZW1lbnQpKTt2YXIgcHJldkNvbXBvbmVudD1pbnN0YW5jZXNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildO2lmKHByZXZDb21wb25lbnQpe3ZhciBwcmV2RWxlbWVudD1wcmV2Q29tcG9uZW50Ll9jdXJyZW50RWxlbWVudDtpZihzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCxuZXh0RWxlbWVudCkpcmV0dXJuIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQocHJldkNvbXBvbmVudCxuZXh0RWxlbWVudCxjb250YWluZXIsY2FsbGJhY2spLmdldFB1YmxpY0luc3RhbmNlKCk7UmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcil9dmFyIHJlYWN0Um9vdEVsZW1lbnQ9Z2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lciksY29udGFpbmVySGFzUmVhY3RNYXJrdXA9cmVhY3RSb290RWxlbWVudCYmUmVhY3RNb3VudC5pc1JlbmRlcmVkQnlSZWFjdChyZWFjdFJvb3RFbGVtZW50KTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoIWNvbnRhaW5lckhhc1JlYWN0TWFya3VwfHxyZWFjdFJvb3RFbGVtZW50Lm5leHRTaWJsaW5nKSlmb3IodmFyIHJvb3RFbGVtZW50U2libGluZz1yZWFjdFJvb3RFbGVtZW50O3Jvb3RFbGVtZW50U2libGluZzspe2lmKFJlYWN0TW91bnQuaXNSZW5kZXJlZEJ5UmVhY3Qocm9vdEVsZW1lbnRTaWJsaW5nKSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKCExLFwicmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSBhcmUgdW5yZWxhdGVkIG5vZGVzIGFzIHdlbGwuIFRoaXMgaXMgbW9zdCBjb21tb25seSBjYXVzZWQgYnkgd2hpdGUtc3BhY2UgaW5zZXJ0ZWQgYXJvdW5kIHNlcnZlci1yZW5kZXJlZCBtYXJrdXAuXCIpOm51bGw7YnJlYWt9cm9vdEVsZW1lbnRTaWJsaW5nPXJvb3RFbGVtZW50U2libGluZy5uZXh0U2libGluZ312YXIgc2hvdWxkUmV1c2VNYXJrdXA9Y29udGFpbmVySGFzUmVhY3RNYXJrdXAmJiFwcmV2Q29tcG9uZW50LGNvbXBvbmVudD1SZWFjdE1vdW50Ll9yZW5kZXJOZXdSb290Q29tcG9uZW50KG5leHRFbGVtZW50LGNvbnRhaW5lcixzaG91bGRSZXVzZU1hcmt1cCkuZ2V0UHVibGljSW5zdGFuY2UoKTtyZXR1cm4gY2FsbGJhY2smJmNhbGxiYWNrLmNhbGwoY29tcG9uZW50KSxjb21wb25lbnR9LGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudDpmdW5jdGlvbihjb25zdHJ1Y3Rvcixwcm9wcyxjb250YWluZXIpe3ZhciBlbGVtZW50PVJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50KGNvbnN0cnVjdG9yLHByb3BzKTtyZXR1cm4gUmVhY3RNb3VudC5yZW5kZXIoZWxlbWVudCxjb250YWluZXIpfSxjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlEOmZ1bmN0aW9uKGNvbnN0cnVjdG9yLHByb3BzLGlkKXt2YXIgZG9tTm9kZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoZG9tTm9kZSwnVHJpZWQgdG8gZ2V0IGVsZW1lbnQgd2l0aCBpZCBvZiBcIiVzXCIgYnV0IGl0IGlzIG5vdCBwcmVzZW50IG9uIHRoZSBwYWdlLicsaWQpOmludmFyaWFudChkb21Ob2RlKSxSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudChjb25zdHJ1Y3Rvcixwcm9wcyxkb21Ob2RlKX0scmVnaXN0ZXJDb250YWluZXI6ZnVuY3Rpb24oY29udGFpbmVyKXt2YXIgcmVhY3RSb290SUQ9Z2V0UmVhY3RSb290SUQoY29udGFpbmVyKTtyZXR1cm4gcmVhY3RSb290SUQmJihyZWFjdFJvb3RJRD1SZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQocmVhY3RSb290SUQpKSxyZWFjdFJvb3RJRHx8KHJlYWN0Um9vdElEPVJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCkpLGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXT1jb250YWluZXIscmVhY3RSb290SUR9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oY29udGFpbmVyKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcobnVsbD09UmVhY3RDdXJyZW50T3duZXIuY3VycmVudCxcInVubW91bnRDb21wb25lbnRBdE5vZGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gY29tcG9uZW50RGlkVXBkYXRlLlwiKTpudWxsLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGNvbnRhaW5lciYmKGNvbnRhaW5lci5ub2RlVHlwZT09PUVMRU1FTlRfTk9ERV9UWVBFfHxjb250YWluZXIubm9kZVR5cGU9PT1ET0NfTk9ERV9UWVBFKSxcInVubW91bnRDb21wb25lbnRBdE5vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC5cIik6aW52YXJpYW50KGNvbnRhaW5lciYmKGNvbnRhaW5lci5ub2RlVHlwZT09PUVMRU1FTlRfTk9ERV9UWVBFfHxjb250YWluZXIubm9kZVR5cGU9PT1ET0NfTk9ERV9UWVBFKSk7dmFyIHJlYWN0Um9vdElEPWdldFJlYWN0Um9vdElEKGNvbnRhaW5lciksY29tcG9uZW50PWluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO3JldHVybiBjb21wb25lbnQ/KFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEZyb21Ob2RlKGNvbXBvbmVudCxjb250YWluZXIpLGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSxkZWxldGUgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmRlbGV0ZSByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSwhMCk6ITF9LHVubW91bnRDb21wb25lbnRGcm9tTm9kZTpmdW5jdGlvbihpbnN0YW5jZSxjb250YWluZXIpe2ZvcihSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChpbnN0YW5jZSksY29udGFpbmVyLm5vZGVUeXBlPT09RE9DX05PREVfVFlQRSYmKGNvbnRhaW5lcj1jb250YWluZXIuZG9jdW1lbnRFbGVtZW50KTtjb250YWluZXIubGFzdENoaWxkOyljb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmxhc3RDaGlsZCl9LGZpbmRSZWFjdENvbnRhaW5lckZvcklEOmZ1bmN0aW9uKGlkKXt2YXIgcmVhY3RSb290SUQ9UmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGlkKSxjb250YWluZXI9Y29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciByb290RWxlbWVudD1yb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtpZihyb290RWxlbWVudCYmcm9vdEVsZW1lbnQucGFyZW50Tm9kZSE9PWNvbnRhaW5lcil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoaW50ZXJuYWxHZXRJRChyb290RWxlbWVudCk9PT1yZWFjdFJvb3RJRCxcIlJlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBJRCBkaWZmZXJlZCBmcm9tIHJlYWN0Um9vdElELlwiKTppbnZhcmlhbnQoaW50ZXJuYWxHZXRJRChyb290RWxlbWVudCk9PT1yZWFjdFJvb3RJRCk7dmFyIGNvbnRhaW5lckNoaWxkPWNvbnRhaW5lci5maXJzdENoaWxkO2NvbnRhaW5lckNoaWxkJiZyZWFjdFJvb3RJRD09PWludGVybmFsR2V0SUQoY29udGFpbmVyQ2hpbGQpP3Jvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdPWNvbnRhaW5lckNoaWxkOlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyghMSxcIlJlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkIGZyb20gaXRzIG9yaWdpbmFsIGNvbnRhaW5lci4gTmV3IGNvbnRhaW5lcjpcIixyb290RWxlbWVudC5wYXJlbnROb2RlKTpudWxsfX1yZXR1cm4gY29udGFpbmVyfSxmaW5kUmVhY3ROb2RlQnlJRDpmdW5jdGlvbihpZCl7dmFyIHJlYWN0Um9vdD1SZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtyZXR1cm4gUmVhY3RNb3VudC5maW5kQ29tcG9uZW50Um9vdChyZWFjdFJvb3QsaWQpfSxpc1JlbmRlcmVkQnlSZWFjdDpmdW5jdGlvbihub2RlKXtpZigxIT09bm9kZS5ub2RlVHlwZSlyZXR1cm4hMTt2YXIgaWQ9UmVhY3RNb3VudC5nZXRJRChub2RlKTtyZXR1cm4gaWQ/aWQuY2hhckF0KDApPT09U0VQQVJBVE9SOiExfSxnZXRGaXJzdFJlYWN0RE9NOmZ1bmN0aW9uKG5vZGUpe2Zvcih2YXIgY3VycmVudD1ub2RlO2N1cnJlbnQmJmN1cnJlbnQucGFyZW50Tm9kZSE9PWN1cnJlbnQ7KXtpZihSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KGN1cnJlbnQpKXJldHVybiBjdXJyZW50O2N1cnJlbnQ9Y3VycmVudC5wYXJlbnROb2RlfXJldHVybiBudWxsfSxmaW5kQ29tcG9uZW50Um9vdDpmdW5jdGlvbihhbmNlc3Rvck5vZGUsdGFyZ2V0SUQpe3ZhciBmaXJzdENoaWxkcmVuPWZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSxjaGlsZEluZGV4PTAsZGVlcGVzdEFuY2VzdG9yPWZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpfHxhbmNlc3Rvck5vZGU7Zm9yKGZpcnN0Q2hpbGRyZW5bMF09ZGVlcGVzdEFuY2VzdG9yLmZpcnN0Q2hpbGQsZmlyc3RDaGlsZHJlbi5sZW5ndGg9MTtjaGlsZEluZGV4PGZpcnN0Q2hpbGRyZW4ubGVuZ3RoOyl7Zm9yKHZhciB0YXJnZXRDaGlsZCxjaGlsZD1maXJzdENoaWxkcmVuW2NoaWxkSW5kZXgrK107Y2hpbGQ7KXt2YXIgY2hpbGRJRD1SZWFjdE1vdW50LmdldElEKGNoaWxkKTtjaGlsZElEP3RhcmdldElEPT09Y2hpbGRJRD90YXJnZXRDaGlsZD1jaGlsZDpSZWFjdEluc3RhbmNlSGFuZGxlcy5pc0FuY2VzdG9ySURPZihjaGlsZElELHRhcmdldElEKSYmKGZpcnN0Q2hpbGRyZW4ubGVuZ3RoPWNoaWxkSW5kZXg9MCxmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCkpOmZpcnN0Q2hpbGRyZW4ucHVzaChjaGlsZC5maXJzdENoaWxkKSxjaGlsZD1jaGlsZC5uZXh0U2libGluZ31pZih0YXJnZXRDaGlsZClyZXR1cm4gZmlyc3RDaGlsZHJlbi5sZW5ndGg9MCx0YXJnZXRDaGlsZH1maXJzdENoaWxkcmVuLmxlbmd0aD0wLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCExLFwiZmluZENvbXBvbmVudFJvb3QoLi4uLCAlcyk6IFVuYWJsZSB0byBmaW5kIGVsZW1lbnQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSBicm93c2VyKSwgdXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsIG5lc3RpbmcgdGFncyBsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgd2l0aCBSZWFjdCBJRCBgJXNgLlwiLHRhcmdldElELFJlYWN0TW91bnQuZ2V0SUQoYW5jZXN0b3JOb2RlKSk6aW52YXJpYW50KCExKX0sX21vdW50SW1hZ2VJbnRvTm9kZTpmdW5jdGlvbihtYXJrdXAsY29udGFpbmVyLHNob3VsZFJldXNlTWFya3VwKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChjb250YWluZXImJihjb250YWluZXIubm9kZVR5cGU9PT1FTEVNRU5UX05PREVfVFlQRXx8Y29udGFpbmVyLm5vZGVUeXBlPT09RE9DX05PREVfVFlQRSksXCJtb3VudENvbXBvbmVudEludG9Ob2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IHZhbGlkLlwiKTppbnZhcmlhbnQoY29udGFpbmVyJiYoY29udGFpbmVyLm5vZGVUeXBlPT09RUxFTUVOVF9OT0RFX1RZUEV8fGNvbnRhaW5lci5ub2RlVHlwZT09PURPQ19OT0RFX1RZUEUpKSxzaG91bGRSZXVzZU1hcmt1cCl7dmFyIHJvb3RFbGVtZW50PWdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO2lmKFJlYWN0TWFya3VwQ2hlY2tzdW0uY2FuUmV1c2VNYXJrdXAobWFya3VwLHJvb3RFbGVtZW50KSlyZXR1cm47dmFyIGNoZWNrc3VtPXJvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7cm9vdEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTt2YXIgcm9vdE1hcmt1cD1yb290RWxlbWVudC5vdXRlckhUTUw7cm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FLGNoZWNrc3VtKTt2YXIgZGlmZkluZGV4PWZpcnN0RGlmZmVyZW5jZUluZGV4KG1hcmt1cCxyb290TWFya3VwKSxkaWZmZXJlbmNlPVwiIChjbGllbnQpIFwiK21hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4LTIwLGRpZmZJbmRleCsyMCkrXCJcXG4gKHNlcnZlcikgXCIrcm9vdE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4LTIwLGRpZmZJbmRleCsyMCk7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoY29udGFpbmVyLm5vZGVUeXBlIT09RE9DX05PREVfVFlQRSxcIllvdSdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGJ1dCB0aGUgY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgdXN1YWxseSBtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gdGhlIGNsaWVudCBmcm9tIHRoZSBvbmUgb24gdGhlIHNlcnZlciwgb3IgeW91ciByZW5kZXIoKSBtZXRob2RzIGFyZSBpbXB1cmUuIFJlYWN0IGNhbm5vdCBoYW5kbGUgdGhpcyBjYXNlIGR1ZSB0byBjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSBzaG91bGQgbG9vayBmb3IgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNvZGUgaW4geW91ciBjb21wb25lbnRzIGFuZCBlbnN1cmUgdGhlIHByb3BzIGFyZSB0aGUgc2FtZSBjbGllbnQgYW5kIHNlcnZlciBzaWRlOlxcbiVzXCIsZGlmZmVyZW5jZSk6aW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSE9PURPQ19OT0RFX1RZUEUpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoITEsXCJSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgeW91IGFyZSB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGFuZCB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkIG5ldyBtYXJrdXAgdG8gY29tcGVuc2F0ZSB3aGljaCB3b3JrcyBidXQgeW91IGhhdmUgbG9zdCBtYW55IG9mIHRoZSBiZW5lZml0cyBvZiBzZXJ2ZXIgcmVuZGVyaW5nLiBJbnN0ZWFkLCBmaWd1cmUgb3V0IHdoeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCBvciBzZXJ2ZXI6XFxuJXNcIixkaWZmZXJlbmNlKTpudWxsKX1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChjb250YWluZXIubm9kZVR5cGUhPT1ET0NfTk9ERV9UWVBFLFwiWW91J3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCB5b3UgZGlkbid0IHVzZSBzZXJ2ZXIgcmVuZGVyaW5nLiBXZSBjYW4ndCBkbyB0aGlzIHdpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuIFNlZSBSZWFjdC5yZW5kZXJUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlwiKTppbnZhcmlhbnQoY29udGFpbmVyLm5vZGVUeXBlIT09RE9DX05PREVfVFlQRSksc2V0SW5uZXJIVE1MKGNvbnRhaW5lcixtYXJrdXApfSxnZXRSZWFjdFJvb3RJRDpnZXRSZWFjdFJvb3RJRCxnZXRJRDpnZXRJRCxzZXRJRDpzZXRJRCxnZXROb2RlOmdldE5vZGUsZ2V0Tm9kZUZyb21JbnN0YW5jZTpnZXROb2RlRnJvbUluc3RhbmNlLHB1cmdlSUQ6cHVyZ2VJRH07UmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0TW91bnQsXCJSZWFjdE1vdW50XCIse19yZW5kZXJOZXdSb290Q29tcG9uZW50OlwiX3JlbmRlck5ld1Jvb3RDb21wb25lbnRcIixfbW91bnRJbWFnZUludG9Ob2RlOlwiX21vdW50SW1hZ2VJbnRvTm9kZVwifSksbW9kdWxlLmV4cG9ydHM9UmVhY3RNb3VudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JOYjNWdWRDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCVjBFc1dVRnhSRUVzVTBGQlV5eHpRa0ZCY1VJc1VVRkJVeXhUUVVWeVF5eEpRVUZMTEVkQlJFUXNVVUZCVXl4TFFVRkxMRWxCUVVrc1VVRkJVU3hQUVVGUkxGRkJRVkVzVVVGRGNrTXNSVUZCU1N4RlFVRlBMRTlCUVVvc1JVRkJXU3hKUVVNeFFpeEhRVUZKTEZGQlFWRXNUMEZCVHl4TFFVRlBMRkZCUVZFc1QwRkJUeXhIUVVOMlF5eE5RVUZQTEVWQlIxZ3NUMEZCVHl4VFFVRlJMRk5CUVZjc1VVRkJVU3hQUVVGVExFZEJRVXNzVDBGUGJFUXNVVUZCVXl4blFrRkJaU3hYUVVOMFFpeEhRVUZKTEdGQlFXTXNLMEpCUVN0Q0xGVkJRMnBFTEU5QlFVOHNZMEZCWlN4WFFVRlhMRTFCUVUwc1lVRmhla01zVVVGQlV5eFBRVUZOTEUxQlEySXNSMEZCU1N4SlFVRkxMR05CUVdNc1MwRkRka0lzU1VGQlNTeEhRVU5HTEVkQlFVa3NWVUZCVlN4bFFVRmxMRWxCUVVzc1EwRkRhRU1zUjBGQlNTeFJRVUZUTEZWQlFWVXNSMEZEYmtJc1ZVRkJWeXhQUVVOYUxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRmRCUTNSRExGRkJRVkVzVDBGQlVTeEpRVU5xUWl4cFJVRkRRU3hWUVVGWExFbEJRMVFzVjBGQlZ5eFJRVUZSTEU5QlFWRXNTMEZGTDBJc1ZVRkJWU3hKUVVGTkxGVkJSMnhDTEZkQlFWVXNTVUZCVFN4SlFVbHdRaXhQUVVGUExFbEJSMVFzVVVGQlV5eGxRVUZqTEUxQlNYSkNMRTFCUVU4c1QwRkJVU3hMUVVGTExHTkJRV2RDTEV0QlFVc3NZVUZCWVN4WlFVRmpMRWRCVTNSRkxGRkJRVk1zVDBGQlRTeExRVUZOTEVsQlEyNUNMRWRCUVVrc1QwRkJVU3hqUVVGakxFdEJRM1JDTEZOQlFWVXNWVUZEVEN4WFFVRlZMRTlCUlc1Q0xFdEJRVXNzWVVGQllTeFZRVUZYTEVsQlF6ZENMRlZCUVZVc1NVRkJUU3hMUVZWc1FpeFJRVUZUTEZOQlFWRXNTVUZKWml4TlFVaExMRmRCUVZVc1pVRkJaU3hMUVVGUkxGRkJRVkVzVlVGQlZTeEpRVUZMTEUxQlF6TkVMRlZCUVZVc1NVRkJUU3hYUVVGWExHdENRVUZyUWl4TFFVVjRReXhWUVVGVkxFbEJWVzVDTEZGQlFWTXNjVUpCUVc5Q0xGVkJRek5DTEVkQlFVa3NTVUZCU3l4cFFrRkJhVUlzU1VGQlNTeFZRVUZWTEZkQlEzaERMRTlCUVVrc2NVSkJRVzlDTEd0Q1FVRnJRaXhKUVVOcVF5eE5RVVZLTEZWQlFWVXNaVUZCWlN4TFFVRlJMRkZCUVZFc1ZVRkJWU3hKUVVGTExFMUJRek5FTEZWQlFWVXNTVUZCVFN4WFFVRlhMR3RDUVVGclFpeExRVVY0UXl4VlFVRlZMRXRCWVc1Q0xGRkJRVk1zVTBGQlVTeExRVUZOTEVsQlEzSkNMRWRCUVVrc1MwRkJUU3hEUVVOUUxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExHTkJRV01zVVVGQlZTeEhRVU40UWl3NFEwRkRRU3hYUVVORkxGVkJRVlVzWTBGQll5eFJRVUZWTEVkQlJYUkRMRWxCUVVrc1YwRkJXU3hYUVVGWExIZENRVUYzUWl4SFFVTnVSQ3hKUVVGSkxGZEJRV0VzWVVGQllTeFZRVUZYTEUxQlEzWkRMRTlCUVU4c1JVRkpXQ3hQUVVGUExFVkJVVlFzVVVGQlV5eFRRVUZSTEZWQlExSXNWMEZCVlN4SlFVbHVRaXhSUVVGVExDdENRVUU0UWl4WlFVTnlReXhIUVVGSkxGVkJRVmNzVlVGQlZTeFhRVU42UWl4UFFVRkpMRmRCUVZrc1VVRkJVU3hUUVVGVkxHbENRVU5vUXl4cFFrRkJiVUlzVjBGSldpeEZRVTlZTEZGQlFWTXNNa0pCUVRCQ0xGVkJRMnBETEdsQ1FVRnRRaXhMUVVOdVFpeHhRa0ZCY1VJc2EwSkJRMjVDTEZOQlEwRXNPRUpCUjBZc1NVRkJTU3hYUVVGWkxHZENRVVZvUWl4UFFVUkJMR3RDUVVGdFFpeExRVU5hTEZWQldWUXNVVUZCVXl4M1FrRkRUQ3hyUWtGRFFTeFBRVU5CTEZWQlEwRXNXVUZEUVN4dFFrRkRSaXhIUVVGSkxGRkJRVk1zWjBKQlFXZENMR1ZCUXpOQ0xHdENRVUZ0UWl4UFFVRlJMRmxCUVdFc1dVRkZNVU1zYlVKQlFXdENMR0ZCUVdNc1JVRkRhRU1zVjBGQlZ5eHZRa0ZCYjBJc1QwRkJVU3hWUVVGWExHMUNRVmR3UkN4UlFVRlRMQ3RDUVVOTUxHdENRVU5CTEU5QlEwRXNWVUZEUVN4dFFrRkRSaXhIUVVGSkxHRkJRV01zWVVGQllTd3dRa0ZCTUVJc1YwRkRla1FzWVVGQldTeFJRVU5XTEhWQ1FVTkJMRXRCUTBFc2EwSkJRMEVzVDBGRFFTeFZRVU5CTEZsQlEwRXNiVUpCUlVZc1lVRkJZU3d3UWtGQk1FSXNVVUZCVVN4aFFYaFJha1FzUjBGQlNTeGhRVUZqTEZGQlFWRXNhVUpCUTNSQ0xIbENRVUV5UWl4UlFVRlJMRGhDUVVOdVF5eHJRa0ZCYjBJc1VVRkJVU3gxUWtGRE5VSXNZVUZCWlN4UlFVRlJMR3RDUVVOMlFpeHpRa0ZCZDBJc1VVRkJVU3d5UWtGRGFFTXNiMEpCUVhOQ0xGRkJRVkVzZVVKQlF6bENMSEZDUVVGMVFpeFJRVUZSTERCQ1FVTXZRaXhwUWtGQmJVSXNVVUZCVVN4elFrRkRNMElzYjBKQlFYTkNMRkZCUVZFc2VVSkJRemxDTEZWQlFWa3NVVUZCVVN4bFFVTndRaXhuUWtGQmEwSXNVVUZCVVN4eFFrRkRNVUlzYVVKQlFXMUNMRkZCUVZFc2MwSkJRek5DTEdGQlFXVXNVVUZCVVN4clFrRkZka0lzV1VGQll5eFJRVUZSTEdsQ1FVTjBRaXhoUVVGbExGRkJRVkVzYTBKQlEzWkNMQ3RDUVVGcFF5eFJRVUZSTEc5RFFVTjZReXd3UWtGQk5FSXNVVUZCVVN3clFrRkRjRU1zVlVGQldTeFJRVUZSTEdWQlEzQkNMR0ZCUVdVc1VVRkJVU3hyUWtGRGRrSXNNa0pCUVRaQ0xGRkJRVkVzWjBOQlEzSkRMRkZCUVZVc1VVRkJVU3hoUVVWc1FpeFZRVUZaTEhGQ1FVRnhRaXhWUVVWcVF5eFZRVUZaTEZsQlFWa3NhMEpCUTNoQ0xHRkJSVUVzYTBKQlFXOUNMRVZCUTNCQ0xHTkJRV2RDTEVWQlIyaENMREJDUVVkQkxEQkNRVVZLTEVsQlFVa3NaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJSUzlDTEVkQlFVa3NOa0pCU1U0c1NVRkJTU3h0UTBGeFNrRXNhVUpCUVcxQ0xFdEJOa1p1UWl4WlFVVkdMSGRDUVVGNVFpeDFRa0ZWZWtJc1kwRkJaU3hUUVVGVExGVkJRVmNzWjBKQlEycERMR3RDUVZWR0xIRkNRVUZ6UWl4VFFVTnNRaXhqUVVOQkxGbEJRMEVzVlVGRFFTeFZRV3RDUml4TlFXcENTU3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NWVUZETDBJc2MwSkJRWE5DTERSQ1FVRTBRaXhoUVVkd1JDeFhRVUZYTEdOQlFXTXNWVUZCVnl4WFFVTnNReXhwUWtGQmFVSXNkVUpCUVhWQ0xHTkJRV1VzWVVGRGJrUXNWVUZEUml4cFFrRkJhVUlzZDBKQlFYZENMR05CUVdVc1dVRkplRVFzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRmRCUlM5Q0xEQkNRVUV3UWl4bFFVRmxMRmxCUTNaRExDdENRVUVyUWl4WlFVYzFRaXhsUVZWVUxHMUNRVUZ2UWl4VFFVRlRMR05CUVdVc1YwRkRla01zWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkRka01zV1VGRFJ5eFZRVUZWTEZkQlFXRXNiVUpCUVhGQ0xGVkJRVlVzVjBGQllTeGxRVVYwUlN4dFJVRkRSU3hWUVVGVkxGbEJRMWdzVlVGQlZTeFhRVUZoTEcxQ1FVRnhRaXhWUVVGVkxGZEJRV0VzWjBKQlIzUkZMSGxDUVVGNVFpdzJRa0ZGZWtJc1NVRkJTU3hoUVVGakxGZEJRVmNzYTBKQlFXdENMRlZCUlM5RExFOUJSRUVzZDBKQlFYVkNMR0ZCUVdVc1kwRkRMMElzWVVGVlZDeDNRa0ZCZVVJc1UwRkRka0lzV1VGRFFTeFZRVU5CTEcxQ1FVdERMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZGQlExWXNUVUZCTjBJc2EwSkJRV3RDTEZGQlEyeENMSFZPUVVsRkxFbEJSVW9zU1VGQlNTeHRRa0ZCYjBJc01FSkJRVEJDTEZsQlFXRXNUVUZETTBRc1dVRkJZeXhYUVVGWExHMUNRVU16UWl4clFrRkRRU3hWUVhGQ1JpeFBRV1JCTEdOQlFXRXNaVUZEV0N3NFFrRkRRU3hyUWtGRFFTeFpRVU5CTEZWQlEwRXNiVUpCUjBVc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZkQlJTOUNMREJDUVVFd1FpeGhRVU40UWl3clFrRkJLMElzV1VGSE5VSXNiVUpCWlZRc1QwRkJVU3hUUVVGVExGbEJRV0VzVlVGQlZ5eFZRVU4wUXl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU4yUXl4aFFVRmhMR1ZCUVdVc1lVRkROVUlzSzBOQlJYbENMR2RDUVVGb1FpeGhRVU5NTERKSFFVVnhRaXhyUWtGQmFFSXNZVUZEVEN3eVIwRkhZU3hOUVVGbUxHRkJRVFpETEZOQlFYUkNMRmxCUVZrc1RVRkRha01zYTBaQlJVRXNTVUZGUml4VlFVRlZMR0ZCUVdFc1pVRkJaU3hoUVVVeFF5eEpRVUZKTEdWQlFXZENMSFZDUVVGMVFpeGxRVUZsTEZkQlJURkVMRWxCUVVrc1kwRkJaU3hEUVVOcVFpeEhRVUZKTEdGQlFXTXNZMEZCWXl4bFFVTm9ReXhKUVVGSkxESkNRVUV5UWl4WlFVRmhMR0ZCUXpGRExFMUJRVThzV1VGQlZ5eHhRa0ZEYUVJc1kwRkRRU3haUVVOQkxGVkJRMEVzVlVGRFFTeHRRa0ZGUml4WlFVRlhMSFZDUVVGMVFpeFhRVWwwUXl4SFFVRkpMR3RDUVVGdFFpd3JRa0ZCSzBJc1YwRkRiRVFzZDBKQlEwWXNhMEpCUVc5Q0xGZEJRVmNzYTBKQlFXdENMR2xDUVVWdVJDeEpRVUZKTEdWQlFXbENMRkZCUVZFc1NVRkJTU3haUVVNeFFpeDVRa0ZCTWtJc2FVSkJRV2xDTEdGQlJTOURMRWxCUkVFc1IwRkJTU3h2UWtGQmNVSXNhVUpCUTJ4Q0xHOUNRVUZ2UWl4RFFVTjZRaXhIUVVGSkxGZEJRVmNzYTBKQlFXdENMRzlDUVVGeFFpeERRVU51UkN4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFRRVU4yUXl4RlFVTkJMR3RNUVVkRkxFbEJRMG9zVDBGSFJpeHRRa0ZCY1VJc2JVSkJRVzFDTEZsQlN6bERMRWRCUVVrc2JVSkJRVzlDTERCQ1FVRTBRaXhqUVVWb1JDeFZRVUZaTEZkQlFWY3NkMEpCUTNwQ0xGbEJRMEVzVlVGRFFTeHRRa0ZEUVN4dFFrRkpSaXhQUVVoSkxGZEJRMFlzVTBGQlV5eExRVUZMTEZkQlJWUXNWMEZaVkN3MFFrRkJOa0lzVTBGQlV5eFpRVUZoTEUxQlFVOHNWMEZEZUVRc1IwRkJTU3hUUVVGVkxHRkJRV0VzWTBGQll5eFpRVUZoTEUxQlEzUkVMRTlCUVU4c1dVRkJWeXhQUVVGUExGRkJRVk1zV1VGWmNFTXNaME5CUVdsRExGTkJRVk1zV1VGQllTeE5RVUZQTEVsQlF6VkVMRWRCUVVrc1UwRkJWU3hUUVVGVExHVkJRV1VzUjBGTmRFTXNUMEZNUXl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU4yUXl4UlFVTkJMREJGUVVOQkxFbEJRMFVzVlVGQlZTeFRRVU5RTEZkQlFWY3NORUpCUVRSQ0xGbEJRV0VzVFVGQlR5eFZRVmR3UlN4clFrRkJiVUlzVTBGQlV5eFhRVU14UWl4SFFVRkpMR0ZCUVdNc1pVRkJaU3hWUVZWcVF5eFBRVlJKTEdWQlJVWXNXVUZCWXl4eFFrRkJjVUlzZVVKQlFYbENMR05CUlhwRUxHTkJSVWdzV1VGQll5eHhRa0ZCY1VJc2NVSkJSWEpETEhkQ1FVRjNRaXhoUVVGbExGVkJRMmhETEdGQlZWUXNkVUpCUVhkQ0xGTkJRVk1zVjBGTE9VSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVVVGRFZpeE5RVUUzUWl4clFrRkJhMElzVVVGRGJFSXNjMDVCU1VVc1MwRkZTQ3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTjJReXhaUVVOSExGVkJRVlVzVjBGQllTeHRRa0ZCY1VJc1ZVRkJWU3hYUVVGaExHVkJSWFJGTEhWRlFVTkZMRlZCUVZVc1dVRkRXQ3hWUVVGVkxGZEJRV0VzYlVKQlFYRkNMRlZCUVZVc1YwRkJZU3hsUVVkMFJTeEpRVUZKTEdGQlFXTXNaVUZCWlN4WFFVTTNRaXhWUVVGWkxIVkNRVUYxUWl4WlFVTjJReXhQUVVGTExGbEJSMHdzVjBGQlZ5eDVRa0ZCZVVJc1ZVRkJWeXhwUWtGRGVFTXNkMEpCUVhWQ0xHMUNRVU4yUWl4NVFrRkJkMElzWVVGRE0wSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxHZENRVU40UWl3eVFrRkJNRUlzWTBGRk5VSXNTVUZTUlN4SFFXOUNXQ3g1UWtGQk1FSXNVMEZCVXl4VFFVRlZMRmRCVVRORExFbEJVRUVzWjBKQlFXZENMR2xDUVVGcFFpeFZRVVUzUWl4VlFVRlZMRmRCUVdFc1owSkJRM3BDTEZWQlFWa3NWVUZCVlN4cFFrRkpha0lzVlVGQlZTeFhRVU5tTEZWQlFWVXNXVUZCV1N4VlFVRlZMRmxCVjNCRExIZENRVUY1UWl4VFFVRlRMRWxCUTJoRExFZEJRVWtzWVVGQll5eHhRa0ZCY1VJc2VVSkJRWGxDTEVsQlF6VkVMRlZCUVZrc2QwSkJRWGRDTEZsQlJYaERMRWxCUVVrc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWVXNRMEZEZWtNc1IwRkJTU3hoUVVGakxEQkNRVUV3UWl4WlFVTTFReXhKUVVGSkxHRkJRV1VzV1VGQldTeGhRVUZsTEZWQlFWY3NRMEZEZEVRc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZIZGtNc1kwRkJZeXhsUVVGcFFpeFpRVU12UWl3d1JFRkRSU3hWUVVWS0xHTkJRV01zWlVGQmFVSXNXVUZGTDBJc1NVRkJTU3huUWtGQmFVSXNWVUZCVlN4VlFVTXpRaXhwUWtGRFFTeGpRVUZuUWl4alFVRmpMR2RDUVV0b1F5d3dRa0ZCTUVJc1lVRkJaU3hsUVVWNFF5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhUUVVOMlF5eEZRVU5CTEhkR1FVTTJRaXhaUVVGWkxGbEJRM1pETEUxQlMxWXNUVUZCVHl4WlFWTlVMR3RDUVVGdFFpeFRRVUZUTEVsQlF6RkNMRWRCUVVrc1YwRkJXU3hYUVVGWExIZENRVUYzUWl4SFFVTnVSQ3hQUVVGUExGbEJRVmNzYTBKQlFXdENMRlZCUVZjc1MwRlZha1FzYTBKQlFXMUNMRk5CUVZNc1RVRkRNVUlzUjBGQmMwSXNTVUZCYkVJc1MwRkJTeXhUUVVWUUxFOUJRVThzUTBGRlZDeEpRVUZKTEVsQlFVc3NWMEZCVnl4TlFVRk5MRXRCUXpGQ0xFOUJRVThzU1VGQlN5eEhRVUZITEU5QlFVOHNTMEZCVHl4WFFVRlpMRWRCVnpORExHbENRVUZyUWl4VFFVRlRMRTFCUlhwQ0xFbEJSRUVzUjBGQlNTeFRRVUZWTEV0QlExQXNVMEZCVnl4UlFVRlJMR0ZCUVdVc1UwRkJVeXhEUVVOb1JDeEhRVUZKTEZkQlFWY3NhMEpCUVd0Q0xGTkJReTlDTEUxQlFVOHNVVUZGVkN4VFFVRlZMRkZCUVZFc1YwRkZjRUlzVFVGQlR5eFBRV0ZVTEd0Q1FVRnRRaXhUUVVGVExHRkJRV01zVlVGRGVFTXNSMEZCU1N4bFFVRm5RaXdyUWtGRGFFSXNWMEZCWVN4RlFVVmlMR2RDUVVGclFpd3dRa0ZCTUVJc1YwRkJZU3haUVVzM1JDeExRVWhCTEdOQlFXTXNSMEZCU3l4blFrRkJaMElzVjBGRGJrTXNZMEZCWXl4UFFVRlRMRVZCUldoQ0xGZEJRV0VzWTBGQll5eFJRVUZSTEVOQlNYaERMRWxCU0VFc1IwRkRTU3hoUVVSQkxFMUJRVkVzWTBGQll5eGpRVWR1UWl4UFFVRlBMRU5CUTFvc1IwRkJTU3hUUVVGVkxGZEJRVmNzVFVGQlRTeE5RVU16UWl4VFFVMUZMRmRCUVdFc1VVRkRaaXhaUVVGakxFMUJRMHdzY1VKQlFYRkNMR1ZCUVdVc1VVRkJVeXhaUVV0MFJDeGpRVUZqTEU5QlFWTXNWMEZCWVN4RlFVTndReXhqUVVGakxFdEJRVXNzVFVGQlRTeGhRVk16UWl4alFVRmpMRXRCUVVzc1RVRkJUU3haUVVjelFpeE5RVUZSTEUxQlFVMHNXVUZIYUVJc1IwRkJTU3haUVUxR0xFMUJSa0VzWlVGQll5eFBRVUZUTEVWQlJXaENMRmxCU1Znc1kwRkJZeXhQUVVGVExFVkJSWFJDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGZEJRM1pETEVWQlEwRXNhVlpCVFVFc1UwRkRRU3hYUVVGWExFMUJRVTBzWlVGRFppeFhRVUZWTEVsQlIyaENMRzlDUVVGeFFpeFRRVUZUTEU5QlFWRXNWVUZCVnl4dFFrRlZMME1zUjBGVVF5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eFpRVU5ITEZWQlFWVXNWMEZCWVN4dFFrRkJjVUlzVlVGQlZTeFhRVUZoTEdWQlJYUkZMQ3RFUVVORkxGVkJRVlVzV1VGRFdDeFZRVUZWTEZkQlFXRXNiVUpCUVhGQ0xGVkJRVlVzVjBGQllTeG5Ra0ZIYkVVc2EwSkJRVzFDTEVOQlEzSkNMRWRCUVVrc1lVRkJZeXdyUWtGQkswSXNWVUZEYWtRc1NVRkJTU3h2UWtGQmIwSXNaVUZCWlN4UFFVRlJMR0ZCUXpkRExFMUJSVUVzU1VGQlNTeFZRVUZYTEZsQlFWa3NZVUZEZWtJc2IwSkJRVzlDTEcxQ1FVVjBRaXhoUVVGWkxHZENRVUZuUWl4dlFrRkJiMElzYlVKQlJXaEVMRWxCUVVrc1dVRkJZU3haUVVGWkxGTkJRemRDTEdGQlFWa3NZVUZEVml4dlFrRkJiMElzYlVKQlEzQkNMRk5CUjBZc1NVRkJTU3hYUVVGWkxIRkNRVUZ4UWl4UFFVRlJMRmxCUTNwRExGZEJRV0VzWVVGRFppeFBRVUZQTEZWQlFWVXNWVUZCV1N4SFFVRkpMRlZCUVZrc1NVRkROME1zWlVGQmFVSXNWMEZCVnl4VlFVRlZMRlZCUVZrc1IwRkJTU3hWUVVGWkxFZEJSVzVGTEdkQ1FVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU4yUXl4VlFVRlZMRmRCUVdFc1kwRkRka0lzTW1SQlVVRXNXVUZEUlN4VlFVRlZMRlZCUVZVc1YwRkJZU3hsUVVWcVF5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1YwRkRPVUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1UwRkRka01zUlVGRFFTeHRZVUZSUVN4WlFVTkZMRTFCUzFRc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEZGtNc1ZVRkJWU3hYUVVGaExHTkJRM1pDTERCT1FVbEZMRlZCUVZVc1ZVRkJWU3hYUVVGaExHVkJSWEpETEdGQlFXRXNWVUZCVnl4VFFVOHhRaXhsUVVGblFpeGxRVVZvUWl4TlFVRlBMRTFCUlZBc1RVRkJUeXhOUVVWUUxGRkJRVk1zVVVGRlZDeHZRa0ZCY1VJc2IwSkJSWEpDTEZGQlFWTXNVVUZIV0N4WFFVRlZMR1ZCUVdVc1YwRkJXU3hqUVVOdVF5eDNRa0ZCZVVJc01FSkJRM3BDTEc5Q1FVRnhRaXgzUWtGSGRrSXNUMEZCVHl4UlFVRlZJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERXpMVEl3TVRVc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDMXpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR2x1SUhSb1pWeHVJQ29nVEVsRFJVNVRSU0JtYVd4bElHbHVJSFJvWlNCeWIyOTBJR1JwY21WamRHOXllU0J2WmlCMGFHbHpJSE52ZFhKalpTQjBjbVZsTGlCQmJpQmhaR1JwZEdsdmJtRnNJR2R5WVc1MFhHNGdLaUJ2WmlCd1lYUmxiblFnY21sbmFIUnpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnVUVGVVJVNVVVeUJtYVd4bElHbHVJSFJvWlNCellXMWxJR1JwY21WamRHOXllUzVjYmlBcVhHNGdLaUJBY0hKdmRtbGtaWE5OYjJSMWJHVWdVbVZoWTNSTmIzVnVkRnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUVSUFRWQnliM0JsY25SNUlEMGdjbVZ4ZFdseVpTaGNJaTR2UkU5TlVISnZjR1Z5ZEhsY0lpazdYRzUyWVhJZ1VtVmhZM1JDY205M2MyVnlSWFpsYm5SRmJXbDBkR1Z5SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSQ2NtOTNjMlZ5UlhabGJuUkZiV2wwZEdWeVhDSXBPMXh1ZG1GeUlGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUlEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkRkWEp5Wlc1MFQzZHVaWEpjSWlrN1hHNTJZWElnVW1WaFkzUkZiR1Z0Wlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkZiR1Z0Wlc1MFhDSXBPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjbHdpS1R0Y2JuWmhjaUJTWldGamRFVnRjSFI1UTI5dGNHOXVaVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSRmJYQjBlVU52YlhCdmJtVnVkRndpS1R0Y2JuWmhjaUJTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsY3lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6WENJcE8xeHVkbUZ5SUZKbFlXTjBTVzV6ZEdGdVkyVk5ZWEFnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEVsdWMzUmhibU5sVFdGd1hDSXBPMXh1ZG1GeUlGSmxZV04wVFdGeWEzVndRMmhsWTJ0emRXMGdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRTFoY210MWNFTm9aV05yYzNWdFhDSXBPMXh1ZG1GeUlGSmxZV04wVUdWeVppQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBVR1Z5Wmx3aUtUdGNiblpoY2lCU1pXRmpkRkpsWTI5dVkybHNaWElnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEZKbFkyOXVZMmxzWlhKY0lpazdYRzUyWVhJZ1VtVmhZM1JWY0dSaGRHVlJkV1YxWlNBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFZYQmtZWFJsVVhWbGRXVmNJaWs3WEc1MllYSWdVbVZoWTNSVmNHUmhkR1Z6SUQwZ2NtVnhkV2x5WlNoY0lpNHZVbVZoWTNSVmNHUmhkR1Z6WENJcE8xeHVYRzUyWVhJZ1pXMXdkSGxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLRndpTGk5bGJYQjBlVTlpYW1WamRGd2lLVHRjYm5aaGNpQmpiMjUwWVdsdWMwNXZaR1VnUFNCeVpYRjFhWEpsS0Z3aUxpOWpiMjUwWVdsdWMwNXZaR1ZjSWlrN1hHNTJZWElnWjJWMFVtVmhZM1JTYjI5MFJXeGxiV1Z1ZEVsdVEyOXVkR0ZwYm1WeUlEMGdjbVZ4ZFdseVpTaGNJaTR2WjJWMFVtVmhZM1JTYjI5MFJXeGxiV1Z1ZEVsdVEyOXVkR0ZwYm1WeVhDSXBPMXh1ZG1GeUlHbHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm5OMFlXNTBhV0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBYQ0lwTzF4dWRtRnlJR2x1ZG1GeWFXRnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwybHVkbUZ5YVdGdWRGd2lLVHRjYm5aaGNpQnpaWFJKYm01bGNraFVUVXdnUFNCeVpYRjFhWEpsS0Z3aUxpOXpaWFJKYm01bGNraFVUVXhjSWlrN1hHNTJZWElnYzJodmRXeGtWWEJrWVhSbFVtVmhZM1JEYjIxd2IyNWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOXphRzkxYkdSVmNHUmhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRGd2lLVHRjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTaGNJaTR2ZDJGeWJtbHVaMXdpS1R0Y2JseHVkbUZ5SUZORlVFRlNRVlJQVWlBOUlGSmxZV04wU1c1emRHRnVZMlZJWVc1a2JHVnpMbE5GVUVGU1FWUlBVanRjYmx4dWRtRnlJRUZVVkZKZlRrRk5SU0E5SUVSUFRWQnliM0JsY25SNUxrbEVYMEZVVkZKSlFsVlVSVjlPUVUxRk8xeHVkbUZ5SUc1dlpHVkRZV05vWlNBOUlIdDlPMXh1WEc1MllYSWdSVXhGVFVWT1ZGOU9UMFJGWDFSWlVFVWdQU0F4TzF4dWRtRnlJRVJQUTE5T1QwUkZYMVJaVUVVZ1BTQTVPMXh1WEc0dktpb2dUV0Z3Y0dsdVp5Qm1jbTl0SUhKbFlXTjBVbTl2ZEVsRUlIUnZJRkpsWVdOMElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTNGdLaTljYm5aaGNpQnBibk4wWVc1alpYTkNlVkpsWVdOMFVtOXZkRWxFSUQwZ2UzMDdYRzVjYmk4cUtpQk5ZWEJ3YVc1bklHWnliMjBnY21WaFkzUlNiMjkwU1VRZ2RHOGdZR052Ym5SaGFXNWxjbUFnYm05a1pYTXVJQ292WEc1MllYSWdZMjl1ZEdGcGJtVnljMEo1VW1WaFkzUlNiMjkwU1VRZ1BTQjdmVHRjYmx4dWFXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0F2S2lvZ1gxOUVSVlpmWHkxdmJteDVJRzFoY0hCcGJtY2dabkp2YlNCeVpXRmpkRkp2YjNSSlJDQjBieUJ5YjI5MElHVnNaVzFsYm5SekxpQXFMMXh1SUNCMllYSWdjbTl2ZEVWc1pXMWxiblJ6UW5sU1pXRmpkRkp2YjNSSlJDQTlJSHQ5TzF4dWZWeHVYRzR2THlCVmMyVmtJSFJ2SUhOMGIzSmxJR0p5WldGa2RHZ3RabWx5YzNRZ2MyVmhjbU5vSUhOMFlYUmxJR2x1SUdacGJtUkRiMjF3YjI1bGJuUlNiMjkwTGx4dWRtRnlJR1pwYm1SRGIyMXdiMjVsYm5SU2IyOTBVbVYxYzJGaWJHVkJjbkpoZVNBOUlGdGRPMXh1WEc0dktpcGNiaUFxSUVacGJtUnpJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdabWx5YzNRZ1kyaGhjbUZqZEdWeVhHNGdLaUIwYUdGMEozTWdibTkwSUdOdmJXMXZiaUJpWlhSM1pXVnVJSFJvWlNCMGQyOGdaMmwyWlc0Z2MzUnlhVzVuY3k1Y2JpQXFYRzRnS2lCQWNtVjBkWEp1SUh0dWRXMWlaWEo5SUhSb1pTQnBibVJsZUNCdlppQjBhR1VnWTJoaGNtRmpkR1Z5SUhkb1pYSmxJSFJvWlNCemRISnBibWR6SUdScGRtVnlaMlZjYmlBcUwxeHVablZ1WTNScGIyNGdabWx5YzNSRWFXWm1aWEpsYm1ObFNXNWtaWGdvYzNSeWFXNW5NU3dnYzNSeWFXNW5NaWtnZTF4dUlDQjJZWElnYldsdVRHVnVJRDBnVFdGMGFDNXRhVzRvYzNSeWFXNW5NUzVzWlc1bmRHZ3NJSE4wY21sdVp6SXViR1Z1WjNSb0tUdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdGFXNU1aVzQ3SUdrckt5a2dlMXh1SUNBZ0lHbG1JQ2h6ZEhKcGJtY3hMbU5vWVhKQmRDaHBLU0FoUFQwZ2MzUnlhVzVuTWk1amFHRnlRWFFvYVNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnYzNSeWFXNW5NUzVzWlc1bmRHZ2dQVDA5SUhOMGNtbHVaekl1YkdWdVozUm9JRDhnTFRFZ09pQnRhVzVNWlc0N1hHNTlYRzVjYmk4cUtseHVJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCamIyNTBZV2x1WlhJZ1JFOU5JR1ZzWlcxbGJuUWdkR2hoZENCdFlYa2dZMjl1ZEdGcGJpQmhJRkpsWVdOMElHTnZiWEJ2Ym1WdWRDNWNiaUFxSUVCeVpYUjFjbTRnZXo5emRISnBibWQ5SUVFZ1hDSnlaV0ZqZEZKdmIzUmNJaUJKUkN3Z2FXWWdZU0JTWldGamRDQmpiMjF3YjI1bGJuUWdhWE1nY21WdVpHVnlaV1F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEZKbFlXTjBVbTl2ZEVsRUtHTnZiblJoYVc1bGNpa2dlMXh1SUNCMllYSWdjbTl2ZEVWc1pXMWxiblFnUFNCblpYUlNaV0ZqZEZKdmIzUkZiR1Z0Wlc1MFNXNURiMjUwWVdsdVpYSW9ZMjl1ZEdGcGJtVnlLVHRjYmlBZ2NtVjBkWEp1SUhKdmIzUkZiR1Z0Wlc1MElDWW1JRkpsWVdOMFRXOTFiblF1WjJWMFNVUW9jbTl2ZEVWc1pXMWxiblFwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUZqWTJWemMybHVaeUJ1YjJSbFcwRlVWRkpmVGtGTlJWMGdiM0lnWTJGc2JHbHVaeUJuWlhSQmRIUnlhV0oxZEdVb1FWUlVVbDlPUVUxRktTQnZiaUJoSUdadmNtMWNiaUFxSUdWc1pXMWxiblFnWTJGdUlISmxkSFZ5YmlCcGRITWdZMjl1ZEhKdmJDQjNhRzl6WlNCdVlXMWxJRzl5SUVsRUlHVnhkV0ZzY3lCQlZGUlNYMDVCVFVVdUlFRnNiRnh1SUNvZ1JFOU5JRzV2WkdWeklITjFjSEJ2Y25RZ1lHZGxkRUYwZEhKcFluVjBaVTV2WkdWZ0lHSjFkQ0IwYUdseklHTmhiaUJoYkhOdklHZGxkQ0JqWVd4c1pXUWdiMjVjYmlBcUlHOTBhR1Z5SUc5aWFtVmpkSE1nYzI4Z2FuVnpkQ0J5WlhSMWNtNGdKeWNnYVdZZ2QyVW5jbVVnWjJsMlpXNGdjMjl0WlhSb2FXNW5JRzkwYUdWeUlIUm9ZVzRnWVZ4dUlDb2dSRTlOSUc1dlpHVWdLSE4xWTJnZ1lYTWdkMmx1Wkc5M0tTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2V6OUVUMDFGYkdWdFpXNTBmRVJQVFZkcGJtUnZkM3hFVDAxRWIyTjFiV1Z1ZEh4RVQwMVVaWGgwVG05a1pYMGdibTlrWlNCRVQwMGdibTlrWlM1Y2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdTVVFnYjJZZ2RHaGxJSE4xY0hCc2FXVmtJR0JrYjIxT2IyUmxZQzVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwU1VRb2JtOWtaU2tnZTF4dUlDQjJZWElnYVdRZ1BTQnBiblJsY201aGJFZGxkRWxFS0c1dlpHVXBPMXh1SUNCcFppQW9hV1FwSUh0Y2JpQWdJQ0JwWmlBb2JtOWtaVU5oWTJobExtaGhjMDkzYmxCeWIzQmxjblI1S0dsa0tTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdOaFkyaGxaQ0E5SUc1dlpHVkRZV05vWlZ0cFpGMDdYRzRnSUNBZ0lDQnBaaUFvWTJGamFHVmtJQ0U5UFNCdWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lXbHpWbUZzYVdRb1kyRmphR1ZrTENCcFpDa3NYRzRnSUNBZ0lDQWdJQ0FnSjFKbFlXTjBUVzkxYm5RNklGUjNieUIyWVd4cFpDQmlkWFFnZFc1bGNYVmhiQ0J1YjJSbGN5QjNhWFJvSUhSb1pTQnpZVzFsSUdBbGMyQTZJQ1Z6Snl4Y2JpQWdJQ0FnSUNBZ0lDQkJWRlJTWDA1QlRVVXNJR2xrWEc0Z0lDQWdJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9JV2x6Vm1Gc2FXUW9ZMkZqYUdWa0xDQnBaQ2twS1R0Y2JseHVJQ0FnSUNBZ0lDQnViMlJsUTJGamFHVmJhV1JkSUQwZ2JtOWtaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JtOWtaVU5oWTJobFcybGtYU0E5SUc1dlpHVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHbGtPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBiblJsY201aGJFZGxkRWxFS0c1dlpHVXBJSHRjYmlBZ0x5OGdTV1lnYm05a1pTQnBjeUJ6YjIxbGRHaHBibWNnYkdsclpTQmhJSGRwYm1SdmR5d2daRzlqZFcxbGJuUXNJRzl5SUhSbGVIUWdibTlrWlN3Z2JtOXVaU0J2Wmx4dUlDQXZMeUIzYUdsamFDQnpkWEJ3YjNKMElHRjBkSEpwWW5WMFpYTWdiM0lnWVNBdVoyVjBRWFIwY21saWRYUmxJRzFsZEdodlpDd2daM0poWTJWbWRXeHNlU0J5WlhSMWNtNWNiaUFnTHk4Z2RHaGxJR1Z0Y0hSNUlITjBjbWx1Wnl3Z1lYTWdhV1lnZEdobElHRjBkSEpwWW5WMFpTQjNaWEpsSUcxcGMzTnBibWN1WEc0Z0lISmxkSFZ5YmlCdWIyUmxJQ1ltSUc1dlpHVXVaMlYwUVhSMGNtbGlkWFJsSUNZbUlHNXZaR1V1WjJWMFFYUjBjbWxpZFhSbEtFRlVWRkpmVGtGTlJTa2dmSHdnSnljN1hHNTlYRzVjYmk4cUtseHVJQ29nVTJWMGN5QjBhR1VnVW1WaFkzUXRjM0JsWTJsbWFXTWdTVVFnYjJZZ2RHaGxJR2RwZG1WdUlHNXZaR1V1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCdWIyUmxJRlJvWlNCRVQwMGdibTlrWlNCM2FHOXpaU0JKUkNCM2FXeHNJR0psSUhObGRDNWNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JwWkNCVWFHVWdkbUZzZFdVZ2IyWWdkR2hsSUVsRUlHRjBkSEpwWW5WMFpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2MyVjBTVVFvYm05a1pTd2dhV1FwSUh0Y2JpQWdkbUZ5SUc5c1pFbEVJRDBnYVc1MFpYSnVZV3hIWlhSSlJDaHViMlJsS1R0Y2JpQWdhV1lnS0c5c1pFbEVJQ0U5UFNCcFpDa2dlMXh1SUNBZ0lHUmxiR1YwWlNCdWIyUmxRMkZqYUdWYmIyeGtTVVJkTzF4dUlDQjlYRzRnSUc1dlpHVXVjMlYwUVhSMGNtbGlkWFJsS0VGVVZGSmZUa0ZOUlN3Z2FXUXBPMXh1SUNCdWIyUmxRMkZqYUdWYmFXUmRJRDBnYm05a1pUdGNibjFjYmx4dUx5b3FYRzRnS2lCR2FXNWtjeUIwYUdVZ2JtOWtaU0IzYVhSb0lIUm9aU0J6ZFhCd2JHbGxaQ0JTWldGamRDMW5aVzVsY21GMFpXUWdSRTlOSUVsRUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQkJJRkpsWVdOMExXZGxibVZ5WVhSbFpDQkVUMDBnU1VRdVhHNGdLaUJBY21WMGRYSnVJSHRFVDAxRmJHVnRaVzUwZlNCRVQwMGdibTlrWlNCM2FYUm9JSFJvWlNCemRYQndiR1ZrSUdCcFpHQXVYRzRnS2lCQWFXNTBaWEp1WVd4Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFRtOWtaU2hwWkNrZ2UxeHVJQ0JwWmlBb0lXNXZaR1ZEWVdOb1pTNW9ZWE5QZDI1UWNtOXdaWEowZVNocFpDa2dmSHdnSVdselZtRnNhV1FvYm05a1pVTmhZMmhsVzJsa1hTd2dhV1FwS1NCN1hHNGdJQ0FnYm05a1pVTmhZMmhsVzJsa1hTQTlJRkpsWVdOMFRXOTFiblF1Wm1sdVpGSmxZV04wVG05a1pVSjVTVVFvYVdRcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdWIyUmxRMkZqYUdWYmFXUmRPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFWnBibVJ6SUhSb1pTQnViMlJsSUhkcGRHZ2dkR2hsSUhOMWNIQnNhV1ZrSUhCMVlteHBZeUJTWldGamRDQnBibk4wWVc1alpTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJR2x1YzNSaGJtTmxJRUVnY0hWaWJHbGpJRkpsWVdOMElHbHVjM1JoYm1ObExseHVJQ29nUUhKbGRIVnliaUI3UDBSUFRVVnNaVzFsYm5SOUlFUlBUU0J1YjJSbElIZHBkR2dnZEdobElITjFjSEJzWldRZ1lHbGtZQzVjYmlBcUlFQnBiblJsY201aGJGeHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUk9iMlJsUm5KdmJVbHVjM1JoYm1ObEtHbHVjM1JoYm1ObEtTQjdYRzRnSUhaaGNpQnBaQ0E5SUZKbFlXTjBTVzV6ZEdGdVkyVk5ZWEF1WjJWMEtHbHVjM1JoYm1ObEtTNWZjbTl2ZEU1dlpHVkpSRHRjYmlBZ2FXWWdLRkpsWVdOMFJXMXdkSGxEYjIxd2IyNWxiblF1YVhOT2RXeHNRMjl0Y0c5dVpXNTBTVVFvYVdRcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JpQWdhV1lnS0NGdWIyUmxRMkZqYUdVdWFHRnpUM2R1VUhKdmNHVnlkSGtvYVdRcElIeDhJQ0ZwYzFaaGJHbGtLRzV2WkdWRFlXTm9aVnRwWkYwc0lHbGtLU2tnZTF4dUlDQWdJRzV2WkdWRFlXTm9aVnRwWkYwZ1BTQlNaV0ZqZEUxdmRXNTBMbVpwYm1SU1pXRmpkRTV2WkdWQ2VVbEVLR2xrS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYm05a1pVTmhZMmhsVzJsa1hUdGNibjFjYmx4dUx5b3FYRzRnS2lCQklHNXZaR1VnYVhNZ1hDSjJZV3hwWkZ3aUlHbG1JR2wwSUdseklHTnZiblJoYVc1bFpDQmllU0JoSUdOMWNuSmxiblJzZVNCdGIzVnVkR1ZrSUdOdmJuUmhhVzVsY2k1Y2JpQXFYRzRnS2lCVWFHbHpJRzFsWVc1eklIUm9ZWFFnZEdobElHNXZaR1VnWkc5bGN5QnViM1FnYUdGMlpTQjBieUJpWlNCamIyNTBZV2x1WldRZ1lua2dZU0JrYjJOMWJXVnVkQ0JwYmx4dUlDb2diM0prWlhJZ2RHOGdZbVVnWTI5dWMybGtaWEpsWkNCMllXeHBaQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlejlFVDAxRmJHVnRaVzUwZlNCdWIyUmxJRlJvWlNCallXNWthV1JoZEdVZ1JFOU5JRzV2WkdVdVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnVkdobElHVjRjR1ZqZEdWa0lFbEVJRzltSUhSb1pTQnViMlJsTGx4dUlDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWMmhsZEdobGNpQjBhR1VnYm05a1pTQnBjeUJqYjI1MFlXbHVaV1FnWW5rZ1lTQnRiM1Z1ZEdWa0lHTnZiblJoYVc1bGNpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTldZV3hwWkNodWIyUmxMQ0JwWkNrZ2UxeHVJQ0JwWmlBb2JtOWtaU2tnZTF4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQnBiblJsY201aGJFZGxkRWxFS0c1dlpHVXBJRDA5UFNCcFpDeGNiaUFnSUNBZ0lDZFNaV0ZqZEUxdmRXNTBPaUJWYm1WNGNHVmpkR1ZrSUcxdlpHbG1hV05oZEdsdmJpQnZaaUJnSlhOZ0p5eGNiaUFnSUNBZ0lFRlVWRkpmVGtGTlJWeHVJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9hVzUwWlhKdVlXeEhaWFJKUkNodWIyUmxLU0E5UFQwZ2FXUXBLVHRjYmx4dUlDQWdJSFpoY2lCamIyNTBZV2x1WlhJZ1BTQlNaV0ZqZEUxdmRXNTBMbVpwYm1SU1pXRmpkRU52Ym5SaGFXNWxja1p2Y2tsRUtHbGtLVHRjYmlBZ0lDQnBaaUFvWTI5dWRHRnBibVZ5SUNZbUlHTnZiblJoYVc1elRtOWtaU2hqYjI1MFlXbHVaWElzSUc1dlpHVXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyRjFjMlZ6SUhSb1pTQmpZV05vWlNCMGJ5Qm1iM0puWlhRZ1lXSnZkWFFnYjI1bElGSmxZV04wTFhOd1pXTnBabWxqSUVsRUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQlVhR1VnU1VRZ2RHOGdabTl5WjJWMExseHVJQ292WEc1bWRXNWpkR2x2YmlCd2RYSm5aVWxFS0dsa0tTQjdYRzRnSUdSbGJHVjBaU0J1YjJSbFEyRmphR1ZiYVdSZE8xeHVmVnh1WEc1MllYSWdaR1ZsY0dWemRFNXZaR1ZUYjBaaGNpQTlJRzUxYkd3N1hHNW1kVzVqZEdsdmJpQm1hVzVrUkdWbGNHVnpkRU5oWTJobFpFRnVZMlZ6ZEc5eVNXMXdiQ2hoYm1ObGMzUnZja2xFS1NCN1hHNGdJSFpoY2lCaGJtTmxjM1J2Y2lBOUlHNXZaR1ZEWVdOb1pWdGhibU5sYzNSdmNrbEVYVHRjYmlBZ2FXWWdLR0Z1WTJWemRHOXlJQ1ltSUdselZtRnNhV1FvWVc1alpYTjBiM0lzSUdGdVkyVnpkRzl5U1VRcEtTQjdYRzRnSUNBZ1pHVmxjR1Z6ZEU1dlpHVlRiMFpoY2lBOUlHRnVZMlZ6ZEc5eU8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJRlJvYVhNZ2JtOWtaU0JwYzI0bmRDQndiM0IxYkdGMFpXUWdhVzRnZEdobElHTmhZMmhsTENCemJ5QndjbVZ6ZFcxaFlteDVJRzV2Ym1VZ2IyWWdhWFJ6WEc0Z0lDQWdMeThnWkdWelkyVnVaR0Z1ZEhNZ1lYSmxMaUJDY21WaGF5QnZkWFFnYjJZZ2RHaGxJR3h2YjNBdVhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dVbVYwZFhKdUlIUm9aU0JrWldWd1pYTjBJR05oWTJobFpDQnViMlJsSUhkb2IzTmxJRWxFSUdseklHRWdjSEpsWm1sNElHOW1JR0IwWVhKblpYUkpSR0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1pwYm1SRVpXVndaWE4wUTJGamFHVmtRVzVqWlhOMGIzSW9kR0Z5WjJWMFNVUXBJSHRjYmlBZ1pHVmxjR1Z6ZEU1dlpHVlRiMFpoY2lBOUlHNTFiR3c3WEc0Z0lGSmxZV04wU1c1emRHRnVZMlZJWVc1a2JHVnpMblJ5WVhabGNuTmxRVzVqWlhOMGIzSnpLRnh1SUNBZ0lIUmhjbWRsZEVsRUxGeHVJQ0FnSUdacGJtUkVaV1Z3WlhOMFEyRmphR1ZrUVc1alpYTjBiM0pKYlhCc1hHNGdJQ2s3WEc1Y2JpQWdkbUZ5SUdadmRXNWtUbTlrWlNBOUlHUmxaWEJsYzNST2IyUmxVMjlHWVhJN1hHNGdJR1JsWlhCbGMzUk9iMlJsVTI5R1lYSWdQU0J1ZFd4c08xeHVJQ0J5WlhSMWNtNGdabTkxYm1ST2IyUmxPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFMXZkVzUwY3lCMGFHbHpJR052YlhCdmJtVnVkQ0JoYm1RZ2FXNXpaWEowY3lCcGRDQnBiblJ2SUhSb1pTQkVUMDB1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdWR2hsSUdsdWMzUmhibU5sSUhSdklHMXZkVzUwTGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISnZiM1JKUkNCRVQwMGdTVVFnYjJZZ2RHaGxJSEp2YjNRZ2JtOWtaUzVjYmlBcUlFQndZWEpoYlNCN1JFOU5SV3hsYldWdWRIMGdZMjl1ZEdGcGJtVnlJRVJQVFNCbGJHVnRaVzUwSUhSdklHMXZkVzUwSUdsdWRHOHVYRzRnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJSE5vYjNWc1pGSmxkWE5sVFdGeWEzVndJRWxtSUhSeWRXVXNJR1J2SUc1dmRDQnBibk5sY25RZ2JXRnlhM1Z3WEc0Z0tpOWNibVoxYm1OMGFXOXVJRzF2ZFc1MFEyOXRjRzl1Wlc1MFNXNTBiMDV2WkdVb1hHNGdJQ0FnWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVzWEc0Z0lDQWdjbTl2ZEVsRUxGeHVJQ0FnSUdOdmJuUmhhVzVsY2l4Y2JpQWdJQ0IwY21GdWMyRmpkR2x2Yml4Y2JpQWdJQ0J6YUc5MWJHUlNaWFZ6WlUxaGNtdDFjQ2tnZTF4dUlDQjJZWElnYldGeWEzVndJRDBnVW1WaFkzUlNaV052Ym1OcGJHVnlMbTF2ZFc1MFEyOXRjRzl1Wlc1MEtGeHVJQ0FnSUdOdmJYQnZibVZ1ZEVsdWMzUmhibU5sTENCeWIyOTBTVVFzSUhSeVlXNXpZV04wYVc5dUxDQmxiWEIwZVU5aWFtVmpkRnh1SUNBcE8xeHVJQ0JqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzVmYVhOVWIzQk1aWFpsYkNBOUlIUnlkV1U3WEc0Z0lGSmxZV04wVFc5MWJuUXVYMjF2ZFc1MFNXMWhaMlZKYm5SdlRtOWtaU2h0WVhKcmRYQXNJR052Ym5SaGFXNWxjaXdnYzJodmRXeGtVbVYxYzJWTllYSnJkWEFwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUpoZEdOb1pXUWdiVzkxYm5RdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRU52YlhCdmJtVnVkSDBnWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVnVkdobElHbHVjM1JoYm1ObElIUnZJRzF2ZFc1MExseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEp2YjNSSlJDQkVUMDBnU1VRZ2IyWWdkR2hsSUhKdmIzUWdibTlrWlM1Y2JpQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnWTI5dWRHRnBibVZ5SUVSUFRTQmxiR1Z0Wlc1MElIUnZJRzF2ZFc1MElHbHVkRzh1WEc0Z0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlITm9iM1ZzWkZKbGRYTmxUV0Z5YTNWd0lFbG1JSFJ5ZFdVc0lHUnZJRzV2ZENCcGJuTmxjblFnYldGeWEzVndYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSmhkR05vWldSTmIzVnVkRU52YlhCdmJtVnVkRWx1ZEc5T2IyUmxLRnh1SUNBZ0lHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExGeHVJQ0FnSUhKdmIzUkpSQ3hjYmlBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ2MyaHZkV3hrVW1WMWMyVk5ZWEpyZFhBcElIdGNiaUFnZG1GeUlIUnlZVzV6WVdOMGFXOXVJRDBnVW1WaFkzUlZjR1JoZEdWekxsSmxZV04wVW1WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0dVoyVjBVRzl2YkdWa0tDazdYRzRnSUhSeVlXNXpZV04wYVc5dUxuQmxjbVp2Y20wb1hHNGdJQ0FnYlc5MWJuUkRiMjF3YjI1bGJuUkpiblJ2VG05a1pTeGNiaUFnSUNCdWRXeHNMRnh1SUNBZ0lHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObExGeHVJQ0FnSUhKdmIzUkpSQ3hjYmlBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ2RISmhibk5oWTNScGIyNHNYRzRnSUNBZ2MyaHZkV3hrVW1WMWMyVk5ZWEpyZFhCY2JpQWdLVHRjYmlBZ1VtVmhZM1JWY0dSaGRHVnpMbEpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNHVjbVZzWldGelpTaDBjbUZ1YzJGamRHbHZiaWs3WEc1OVhHNWNiaThxS2x4dUlDb2dUVzkxYm5ScGJtY2dhWE1nZEdobElIQnliMk5sYzNNZ2IyWWdhVzVwZEdsaGJHbDZhVzVuSUdFZ1VtVmhZM1FnWTI5dGNHOXVaVzUwSUdKNUlHTnlaV0YwYVc1bklHbDBjMXh1SUNvZ2NtVndjbVZ6Wlc1MFlYUnBkbVVnUkU5TklHVnNaVzFsYm5SeklHRnVaQ0JwYm5ObGNuUnBibWNnZEdobGJTQnBiblJ2SUdFZ2MzVndjR3hwWldRZ1lHTnZiblJoYVc1bGNtQXVYRzRnS2lCQmJua2djSEpwYjNJZ1kyOXVkR1Z1ZENCcGJuTnBaR1VnWUdOdmJuUmhhVzVsY21BZ2FYTWdaR1Z6ZEhKdmVXVmtJR2x1SUhSb1pTQndjbTlqWlhOekxseHVJQ3BjYmlBcUlDQWdVbVZoWTNSTmIzVnVkQzV5Wlc1a1pYSW9YRzRnS2lBZ0lDQWdZMjl0Y0c5dVpXNTBMRnh1SUNvZ0lDQWdJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZGpiMjUwWVdsdVpYSW5LVnh1SUNvZ0lDQXBPMXh1SUNwY2JpQXFJQ0FnUEdScGRpQnBaRDFjSW1OdmJuUmhhVzVsY2x3aVBpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMUzBnVTNWd2NHeHBaV1FnWUdOdmJuUmhhVzVsY21BdVhHNGdLaUFnSUNBZ1BHUnBkaUJrWVhSaExYSmxZV04wYVdROVhDSXVNMXdpUGlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzB0SUZKbGJtUmxjbVZrSUhKbFlXTjBVbTl2ZENCdlppQlNaV0ZqZEZ4dUlDb2dJQ0FnSUNBZ0x5OGdMaTR1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl0Y0c5dVpXNTBMbHh1SUNvZ0lDQWdJRHd2WkdsMlBseHVJQ29nSUNBOEwyUnBkajVjYmlBcVhHNGdLaUJKYm5OcFpHVWdiMllnWUdOdmJuUmhhVzVsY21Bc0lIUm9aU0JtYVhKemRDQmxiR1Z0Wlc1MElISmxibVJsY21Wa0lHbHpJSFJvWlNCY0luSmxZV04wVW05dmRGd2lMbHh1SUNvdlhHNTJZWElnVW1WaFkzUk5iM1Z1ZENBOUlIdGNiaUFnTHlvcUlFVjRjRzl6WldRZ1ptOXlJR1JsWW5WbloybHVaeUJ3ZFhKd2IzTmxjeUFxS2k5Y2JpQWdYMmx1YzNSaGJtTmxjMEo1VW1WaFkzUlNiMjkwU1VRNklHbHVjM1JoYm1ObGMwSjVVbVZoWTNSU2IyOTBTVVFzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvYVhNZ2FYTWdZU0JvYjI5cklIQnliM1pwWkdWa0lIUnZJSE4xY0hCdmNuUWdjbVZ1WkdWeWFXNW5JRkpsWVdOMElHTnZiWEJ2Ym1WdWRITWdkMmhwYkdWY2JpQWdJQ29nWlc1emRYSnBibWNnZEdoaGRDQjBhR1VnWVhCd1lYSmxiblFnYzJOeWIyeHNJSEJ2YzJsMGFXOXVJRzltSUdsMGN5QmdZMjl1ZEdGcGJtVnlZQ0JrYjJWeklHNXZkRnh1SUNBZ0tpQmphR0Z1WjJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnWTI5dWRHRnBibVZ5SUZSb1pTQmdZMjl1ZEdGcGJtVnlZQ0JpWldsdVp5QnlaVzVrWlhKbFpDQnBiblJ2TGx4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0J5Wlc1a1pYSkRZV3hzWW1GamF5QlVhR2x6SUcxMWMzUWdZbVVnWTJGc2JHVmtJRzl1WTJVZ2RHOGdaRzhnZEdobElISmxibVJsY2k1Y2JpQWdJQ292WEc0Z0lITmpjbTlzYkUxdmJtbDBiM0k2SUdaMWJtTjBhVzl1S0dOdmJuUmhhVzVsY2l3Z2NtVnVaR1Z5UTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0J5Wlc1a1pYSkRZV3hzWW1GamF5Z3BPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVVlXdGxJR0VnWTI5dGNHOXVaVzUwSUhSb1lYUW5jeUJoYkhKbFlXUjVJRzF2ZFc1MFpXUWdhVzUwYnlCMGFHVWdSRTlOSUdGdVpDQnlaWEJzWVdObElHbDBjeUJ3Y205d2MxeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBRMjl0Y0c5dVpXNTBmU0J3Y21WMlEyOXRjRzl1Wlc1MElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTQmhiSEpsWVdSNUlHbHVJSFJvWlNCRVQwMWNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJRzVsZUhSRmJHVnRaVzUwSUdOdmJYQnZibVZ1ZENCcGJuTjBZVzVqWlNCMGJ5QnlaVzVrWlhKY2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCamIyNTBZV2x1WlhJZ1kyOXVkR0ZwYm1WeUlIUnZJSEpsYm1SbGNpQnBiblJ2WEc0Z0lDQXFJRUJ3WVhKaGJTQjdQMloxYm1OMGFXOXVmU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIwY21sbloyVnlaV1FnYjI0Z1kyOXRjR3hsZEdsdmJseHVJQ0FnS2k5Y2JpQWdYM1Z3WkdGMFpWSnZiM1JEYjIxd2IyNWxiblE2SUdaMWJtTjBhVzl1S0Z4dUlDQWdJQ0FnY0hKbGRrTnZiWEJ2Ym1WdWRDeGNiaUFnSUNBZ0lHNWxlSFJGYkdWdFpXNTBMRnh1SUNBZ0lDQWdZMjl1ZEdGcGJtVnlMRnh1SUNBZ0lDQWdZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQlNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0l1WTJobFkydEJibVJYWVhKdVJtOXlUWFYwWVhSbFpGQnliM0J6S0c1bGVIUkZiR1Z0Wlc1MEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCU1pXRmpkRTF2ZFc1MExuTmpjbTlzYkUxdmJtbDBiM0lvWTI5dWRHRnBibVZ5TENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lGSmxZV04wVlhCa1lYUmxVWFZsZFdVdVpXNXhkV1YxWlVWc1pXMWxiblJKYm5SbGNtNWhiQ2h3Y21WMlEyOXRjRzl1Wlc1MExDQnVaWGgwUld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0JwWmlBb1kyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdVbVZoWTNSVmNHUmhkR1ZSZFdWMVpTNWxibkYxWlhWbFEyRnNiR0poWTJ0SmJuUmxjbTVoYkNod2NtVjJRMjl0Y0c5dVpXNTBMQ0JqWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdJQ0F2THlCU1pXTnZjbVFnZEdobElISnZiM1FnWld4bGJXVnVkQ0JwYmlCallYTmxJR2wwSUd4aGRHVnlJR2RsZEhNZ2RISmhibk53YkdGdWRHVmtMbHh1SUNBZ0lDQWdjbTl2ZEVWc1pXMWxiblJ6UW5sU1pXRmpkRkp2YjNSSlJGdG5aWFJTWldGamRGSnZiM1JKUkNoamIyNTBZV2x1WlhJcFhTQTlYRzRnSUNBZ0lDQWdJR2RsZEZKbFlXTjBVbTl2ZEVWc1pXMWxiblJKYmtOdmJuUmhhVzVsY2loamIyNTBZV2x1WlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ3Y21WMlEyOXRjRzl1Wlc1ME8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldkcGMzUmxjaUJoSUdOdmJYQnZibVZ1ZENCcGJuUnZJSFJvWlNCcGJuTjBZVzVqWlNCdFlYQWdZVzVrSUhOMFlYSjBjeUJ6WTNKdmJHd2dkbUZzZFdWY2JpQWdJQ29nYlc5dWFYUnZjbWx1WjF4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZTQnVaWGgwUTI5dGNHOXVaVzUwSUdOdmJYQnZibVZ1ZENCcGJuTjBZVzVqWlNCMGJ5QnlaVzVrWlhKY2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCamIyNTBZV2x1WlhJZ1kyOXVkR0ZwYm1WeUlIUnZJSEpsYm1SbGNpQnBiblJ2WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdjbVZoWTNSU2IyOTBJRWxFSUhCeVpXWnBlRnh1SUNBZ0tpOWNiaUFnWDNKbFoybHpkR1Z5UTI5dGNHOXVaVzUwT2lCbWRXNWpkR2x2YmlodVpYaDBRMjl0Y0c5dVpXNTBMQ0JqYjI1MFlXbHVaWElwSUh0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdZMjl1ZEdGcGJtVnlJQ1ltSUNoY2JpQWdJQ0FnSUNBZ0tHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUlV4RlRVVk9WRjlPVDBSRlgxUlpVRVVnZkh3Z1kyOXVkR0ZwYm1WeUxtNXZaR1ZVZVhCbElEMDlQU0JFVDBOZlRrOUVSVjlVV1ZCRktWeHVJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lDZGZjbVZuYVhOMFpYSkRiMjF3YjI1bGJuUW9MaTR1S1RvZ1ZHRnlaMlYwSUdOdmJuUmhhVzVsY2lCcGN5QnViM1FnWVNCRVQwMGdaV3hsYldWdWRDNG5YRzRnSUNBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hqYjI1MFlXbHVaWElnSmlZZ0tGeHVJQ0FnSUNBZ0tHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUlV4RlRVVk9WRjlPVDBSRlgxUlpVRVVnZkh3Z1kyOXVkR0ZwYm1WeUxtNXZaR1ZVZVhCbElEMDlQU0JFVDBOZlRrOUVSVjlVV1ZCRktWeHVJQ0FnSUNrcEtUdGNibHh1SUNBZ0lGSmxZV04wUW5KdmQzTmxja1YyWlc1MFJXMXBkSFJsY2k1bGJuTjFjbVZUWTNKdmJHeFdZV3gxWlUxdmJtbDBiM0pwYm1jb0tUdGNibHh1SUNBZ0lIWmhjaUJ5WldGamRGSnZiM1JKUkNBOUlGSmxZV04wVFc5MWJuUXVjbVZuYVhOMFpYSkRiMjUwWVdsdVpYSW9ZMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQnBibk4wWVc1alpYTkNlVkpsWVdOMFVtOXZkRWxFVzNKbFlXTjBVbTl2ZEVsRVhTQTlJRzVsZUhSRGIyMXdiMjVsYm5RN1hHNGdJQ0FnY21WMGRYSnVJSEpsWVdOMFVtOXZkRWxFTzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzVrWlhJZ1lTQnVaWGNnWTI5dGNHOXVaVzUwSUdsdWRHOGdkR2hsSUVSUFRTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJRzVsZUhSRmJHVnRaVzUwSUdWc1pXMWxiblFnZEc4Z2NtVnVaR1Z5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnWTI5dWRHRnBibVZ5SUdOdmJuUmhhVzVsY2lCMGJ5QnlaVzVrWlhJZ2FXNTBiMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlITm9iM1ZzWkZKbGRYTmxUV0Z5YTNWd0lHbG1JSGRsSUhOb2IzVnNaQ0J6YTJsd0lIUm9aU0J0WVhKcmRYQWdhVzV6WlhKMGFXOXVYRzRnSUNBcUlFQnlaWFIxY200Z2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCdVpYaDBRMjl0Y0c5dVpXNTBYRzRnSUNBcUwxeHVJQ0JmY21WdVpHVnlUbVYzVW05dmRFTnZiWEJ2Ym1WdWREb2dablZ1WTNScGIyNG9YRzRnSUNBZ2JtVjRkRVZzWlcxbGJuUXNYRzRnSUNBZ1kyOXVkR0ZwYm1WeUxGeHVJQ0FnSUhOb2IzVnNaRkpsZFhObFRXRnlhM1Z3WEc0Z0lDa2dlMXh1SUNBZ0lDOHZJRlpoY21sdmRYTWdjR0Z5ZEhNZ2IyWWdiM1Z5SUdOdlpHVWdLSE4xWTJnZ1lYTWdVbVZoWTNSRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5RbmMxeHVJQ0FnSUM4dklGOXlaVzVrWlhKV1lXeHBaR0YwWldSRGIyMXdiMjVsYm5RcElHRnpjM1Z0WlNCMGFHRjBJR05oYkd4eklIUnZJSEpsYm1SbGNpQmhjbVZ1SjNRZ2JtVnpkR1ZrTzF4dUlDQWdJQzh2SUhabGNtbG1lU0IwYUdGMElIUm9ZWFFuY3lCMGFHVWdZMkZ6WlM1Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUxtTjFjbkpsYm5RZ1BUMGdiblZzYkN4Y2JpQWdJQ0FnSUNkZmNtVnVaR1Z5VG1WM1VtOXZkRU52YlhCdmJtVnVkQ2dwT2lCU1pXNWtaWElnYldWMGFHOWtjeUJ6YUc5MWJHUWdZbVVnWVNCd2RYSmxJR1oxYm1OMGFXOXVJQ2NnSzF4dUlDQWdJQ0FnSjI5bUlIQnliM0J6SUdGdVpDQnpkR0YwWlRzZ2RISnBaMmRsY21sdVp5QnVaWE4wWldRZ1kyOXRjRzl1Wlc1MElIVndaR0YwWlhNZ1puSnZiU0FuSUN0Y2JpQWdJQ0FnSUNkeVpXNWtaWElnYVhNZ2JtOTBJR0ZzYkc5M1pXUXVJRWxtSUc1bFkyVnpjMkZ5ZVN3Z2RISnBaMmRsY2lCdVpYTjBaV1FnZFhCa1lYUmxjeUJwYmlBbklDdGNiaUFnSUNBZ0lDZGpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVXVKMXh1SUNBZ0lDa2dPaUJ1ZFd4c0tUdGNibHh1SUNBZ0lIWmhjaUJqYjIxd2IyNWxiblJKYm5OMFlXNWpaU0E5SUdsdWMzUmhiblJwWVhSbFVtVmhZM1JEYjIxd2IyNWxiblFvYm1WNGRFVnNaVzFsYm5Rc0lHNTFiR3dwTzF4dUlDQWdJSFpoY2lCeVpXRmpkRkp2YjNSSlJDQTlJRkpsWVdOMFRXOTFiblF1WDNKbFoybHpkR1Z5UTI5dGNHOXVaVzUwS0Z4dUlDQWdJQ0FnWTI5dGNHOXVaVzUwU1c1emRHRnVZMlVzWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWEpjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdMeThnVkdobElHbHVhWFJwWVd3Z2NtVnVaR1Z5SUdseklITjVibU5vY205dWIzVnpJR0oxZENCaGJua2dkWEJrWVhSbGN5QjBhR0YwSUdoaGNIQmxiaUJrZFhKcGJtZGNiaUFnSUNBdkx5QnlaVzVrWlhKcGJtY3NJR2x1SUdOdmJYQnZibVZ1ZEZkcGJHeE5iM1Z1ZENCdmNpQmpiMjF3YjI1bGJuUkVhV1JOYjNWdWRDd2dkMmxzYkNCaVpTQmlZWFJqYUdWa1hHNGdJQ0FnTHk4Z1lXTmpiM0prYVc1bklIUnZJSFJvWlNCamRYSnlaVzUwSUdKaGRHTm9hVzVuSUhOMGNtRjBaV2Q1TGx4dVhHNGdJQ0FnVW1WaFkzUlZjR1JoZEdWekxtSmhkR05vWldSVmNHUmhkR1Z6S0Z4dUlDQWdJQ0FnWW1GMFkyaGxaRTF2ZFc1MFEyOXRjRzl1Wlc1MFNXNTBiMDV2WkdVc1hHNGdJQ0FnSUNCamIyMXdiMjVsYm5SSmJuTjBZVzVqWlN4Y2JpQWdJQ0FnSUhKbFlXTjBVbTl2ZEVsRUxGeHVJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxGeHVJQ0FnSUNBZ2MyaHZkV3hrVW1WMWMyVk5ZWEpyZFhCY2JpQWdJQ0FwTzF4dVhHNGdJQ0FnYVdZZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaWtnZTF4dUlDQWdJQ0FnTHk4Z1VtVmpiM0prSUhSb1pTQnliMjkwSUdWc1pXMWxiblFnYVc0Z1kyRnpaU0JwZENCc1lYUmxjaUJuWlhSeklIUnlZVzV6Y0d4aGJuUmxaQzVjYmlBZ0lDQWdJSEp2YjNSRmJHVnRaVzUwYzBKNVVtVmhZM1JTYjI5MFNVUmJjbVZoWTNSU2IyOTBTVVJkSUQxY2JpQWdJQ0FnSUNBZ1oyVjBVbVZoWTNSU2IyOTBSV3hsYldWdWRFbHVRMjl1ZEdGcGJtVnlLR052Ym5SaGFXNWxjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlc1a1pYSnpJR0VnVW1WaFkzUWdZMjl0Y0c5dVpXNTBJR2x1ZEc4Z2RHaGxJRVJQVFNCcGJpQjBhR1VnYzNWd2NHeHBaV1FnWUdOdmJuUmhhVzVsY21BdVhHNGdJQ0FxWEc0Z0lDQXFJRWxtSUhSb1pTQlNaV0ZqZENCamIyMXdiMjVsYm5RZ2QyRnpJSEJ5WlhacGIzVnpiSGtnY21WdVpHVnlaV1FnYVc1MGJ5QmdZMjl1ZEdGcGJtVnlZQ3dnZEdocGN5QjNhV3hzWEc0Z0lDQXFJSEJsY21admNtMGdZVzRnZFhCa1lYUmxJRzl1SUdsMElHRnVaQ0J2Ym14NUlHMTFkR0YwWlNCMGFHVWdSRTlOSUdGeklHNWxZMlZ6YzJGeWVTQjBieUJ5Wldac1pXTjBJSFJvWlZ4dUlDQWdLaUJzWVhSbGMzUWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ2JtVjRkRVZzWlcxbGJuUWdRMjl0Y0c5dVpXNTBJR1ZzWlcxbGJuUWdkRzhnY21WdVpHVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwUlBUVVZzWlcxbGJuUjlJR052Ym5SaGFXNWxjaUJFVDAwZ1pXeGxiV1Z1ZENCMGJ5QnlaVzVrWlhJZ2FXNTBieTVjYmlBZ0lDb2dRSEJoY21GdElIcy9ablZ1WTNScGIyNTlJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVJSFJ5YVdkblpYSmxaQ0J2YmlCamIyMXdiR1YwYVc5dVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFKbFlXTjBRMjl0Y0c5dVpXNTBmU0JEYjIxd2IyNWxiblFnYVc1emRHRnVZMlVnY21WdVpHVnlaV1FnYVc0Z1lHTnZiblJoYVc1bGNtQXVYRzRnSUNBcUwxeHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVLRzVsZUhSRmJHVnRaVzUwTENCamIyNTBZV2x1WlhJc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUZKbFlXTjBSV3hsYldWdWRDNXBjMVpoYkdsa1JXeGxiV1Z1ZENodVpYaDBSV3hsYldWdWRDa3NYRzRnSUNBZ0lDQW5VbVZoWTNRdWNtVnVaR1Z5S0NrNklFbHVkbUZzYVdRZ1kyOXRjRzl1Wlc1MElHVnNaVzFsYm5RdUpYTW5MRnh1SUNBZ0lDQWdLRnh1SUNBZ0lDQWdJQ0IwZVhCbGIyWWdibVY0ZEVWc1pXMWxiblFnUFQwOUlDZHpkSEpwYm1jbklEOWNiaUFnSUNBZ0lDQWdJQ0FuSUVsdWMzUmxZV1FnYjJZZ2NHRnpjMmx1WnlCaGJpQmxiR1Z0Wlc1MElITjBjbWx1Wnl3Z2JXRnJaU0J6ZFhKbElIUnZJR2x1YzNSaGJuUnBZWFJsSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2RwZENCaWVTQndZWE56YVc1bklHbDBJSFJ2SUZKbFlXTjBMbU55WldGMFpVVnNaVzFsYm5RdUp5QTZYRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQnVaWGgwUld4bGJXVnVkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QS9YRzRnSUNBZ0lDQWdJQ0FnSnlCSmJuTjBaV0ZrSUc5bUlIQmhjM05wYm1jZ1lTQmpiMjF3YjI1bGJuUWdZMnhoYzNNc0lHMWhhMlVnYzNWeVpTQjBieUJwYm5OMFlXNTBhV0YwWlNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuYVhRZ1lua2djR0Z6YzJsdVp5QnBkQ0IwYnlCU1pXRmpkQzVqY21WaGRHVkZiR1Z0Wlc1MExpY2dPbHh1SUNBZ0lDQWdJQ0F2THlCRGFHVmpheUJwWmlCcGRDQnhkV0ZqYTNNZ2JHbHJaU0JoYmlCbGJHVnRaVzUwWEc0Z0lDQWdJQ0FnSUc1bGVIUkZiR1Z0Wlc1MElDRTlJRzUxYkd3Z0ppWWdibVY0ZEVWc1pXMWxiblF1Y0hKdmNITWdJVDA5SUhWdVpHVm1hVzVsWkNBL1hHNGdJQ0FnSUNBZ0lDQWdKeUJVYUdseklHMWhlU0JpWlNCallYVnpaV1FnWW5rZ2RXNXBiblJsYm5ScGIyNWhiR3g1SUd4dllXUnBibWNnZEhkdklHbHVaR1Z3Wlc1a1pXNTBJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZGpiM0JwWlhNZ2IyWWdVbVZoWTNRdUp5QTZYRzRnSUNBZ0lDQWdJQ0FnSnlkY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtGSmxZV04wUld4bGJXVnVkQzVwYzFaaGJHbGtSV3hsYldWdWRDaHVaWGgwUld4bGJXVnVkQ2twS1R0Y2JseHVJQ0FnSUhaaGNpQndjbVYyUTI5dGNHOXVaVzUwSUQwZ2FXNXpkR0Z1WTJWelFubFNaV0ZqZEZKdmIzUkpSRnRuWlhSU1pXRmpkRkp2YjNSSlJDaGpiMjUwWVdsdVpYSXBYVHRjYmx4dUlDQWdJR2xtSUNod2NtVjJRMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NISmxka1ZzWlcxbGJuUWdQU0J3Y21WMlEyOXRjRzl1Wlc1MExsOWpkWEp5Wlc1MFJXeGxiV1Z1ZER0Y2JpQWdJQ0FnSUdsbUlDaHphRzkxYkdSVmNHUmhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDaHdjbVYyUld4bGJXVnVkQ3dnYm1WNGRFVnNaVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlNaV0ZqZEUxdmRXNTBMbDkxY0dSaGRHVlNiMjkwUTI5dGNHOXVaVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lIQnlaWFpEYjIxd2IyNWxiblFzWEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkRVZzWlcxbGJuUXNYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOclhHNGdJQ0FnSUNBZ0lDa3VaMlYwVUhWaWJHbGpTVzV6ZEdGdVkyVW9LVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRkpsWVdOMFRXOTFiblF1ZFc1dGIzVnVkRU52YlhCdmJtVnVkRUYwVG05a1pTaGpiMjUwWVdsdVpYSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5WldGamRGSnZiM1JGYkdWdFpXNTBJRDBnWjJWMFVtVmhZM1JTYjI5MFJXeGxiV1Z1ZEVsdVEyOXVkR0ZwYm1WeUtHTnZiblJoYVc1bGNpazdYRzRnSUNBZ2RtRnlJR052Ym5SaGFXNWxja2hoYzFKbFlXTjBUV0Z5YTNWd0lEMWNiaUFnSUNBZ0lISmxZV04wVW05dmRFVnNaVzFsYm5RZ0ppWWdVbVZoWTNSTmIzVnVkQzVwYzFKbGJtUmxjbVZrUW5sU1pXRmpkQ2h5WldGamRGSnZiM1JGYkdWdFpXNTBLVHRjYmx4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJR2xtSUNnaFkyOXVkR0ZwYm1WeVNHRnpVbVZoWTNSTllYSnJkWEFnZkh3Z2NtVmhZM1JTYjI5MFJXeGxiV1Z1ZEM1dVpYaDBVMmxpYkdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtOXZkRVZzWlcxbGJuUlRhV0pzYVc1bklEMGdjbVZoWTNSU2IyOTBSV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tISnZiM1JGYkdWdFpXNTBVMmxpYkdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaFNaV0ZqZEUxdmRXNTBMbWx6VW1WdVpHVnlaV1JDZVZKbFlXTjBLSEp2YjNSRmJHVnRaVzUwVTJsaWJHbHVaeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdKM0psYm1SbGNpZ3BPaUJVWVhKblpYUWdibTlrWlNCb1lYTWdiV0Z5YTNWd0lISmxibVJsY21Wa0lHSjVJRkpsWVdOMExDQmlkWFFnZEdobGNtVWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2RoY21VZ2RXNXlaV3hoZEdWa0lHNXZaR1Z6SUdGeklIZGxiR3d1SUZSb2FYTWdhWE1nYlc5emRDQmpiMjF0YjI1c2VTQmpZWFZ6WldRZ1lua2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2QzYUdsMFpTMXpjR0ZqWlNCcGJuTmxjblJsWkNCaGNtOTFibVFnYzJWeWRtVnlMWEpsYm1SbGNtVmtJRzFoY210MWNDNG5YRzRnSUNBZ0lDQWdJQ0FnSUNBcElEb2diblZzYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnliMjkwUld4bGJXVnVkRk5wWW14cGJtY2dQU0J5YjI5MFJXeGxiV1Z1ZEZOcFlteHBibWN1Ym1WNGRGTnBZbXhwYm1jN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdjMmh2ZFd4a1VtVjFjMlZOWVhKcmRYQWdQU0JqYjI1MFlXbHVaWEpJWVhOU1pXRmpkRTFoY210MWNDQW1KaUFoY0hKbGRrTnZiWEJ2Ym1WdWREdGNibHh1SUNBZ0lIWmhjaUJqYjIxd2IyNWxiblFnUFNCU1pXRmpkRTF2ZFc1MExsOXlaVzVrWlhKT1pYZFNiMjkwUTI5dGNHOXVaVzUwS0Z4dUlDQWdJQ0FnYm1WNGRFVnNaVzFsYm5Rc1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJc1hHNGdJQ0FnSUNCemFHOTFiR1JTWlhWelpVMWhjbXQxY0Z4dUlDQWdJQ2t1WjJWMFVIVmliR2xqU1c1emRHRnVZMlVvS1R0Y2JpQWdJQ0JwWmlBb1kyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lHTmhiR3hpWVdOckxtTmhiR3dvWTI5dGNHOXVaVzUwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHTnZiWEJ2Ym1WdWREdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTI5dWMzUnlkV04wY3lCaElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTQnZaaUJnWTI5dWMzUnlkV04wYjNKZ0lIZHBkR2dnWUdsdWFYUnBZV3hRY205d2MyQWdZVzVrWEc0Z0lDQXFJSEpsYm1SbGNuTWdhWFFnYVc1MGJ5QjBhR1VnYzNWd2NHeHBaV1FnWUdOdmJuUmhhVzVsY21BdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR052Ym5OMGNuVmpkRzl5SUZKbFlXTjBJR052YlhCdmJtVnVkQ0JqYjI1emRISjFZM1J2Y2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHMvYjJKcVpXTjBmU0J3Y205d2N5QkpibWwwYVdGc0lIQnliM0J6SUc5bUlIUm9aU0JqYjIxd2IyNWxiblFnYVc1emRHRnVZMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSRTlOUld4bGJXVnVkSDBnWTI5dWRHRnBibVZ5SUVSUFRTQmxiR1Z0Wlc1MElIUnZJSEpsYm1SbGNpQnBiblJ2TGx4dUlDQWdLaUJBY21WMGRYSnVJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdRMjl0Y0c5dVpXNTBJR2x1YzNSaGJtTmxJSEpsYm1SbGNtVmtJR2x1SUdCamIyNTBZV2x1WlhKZ0xseHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBRVzVrVW1WdVpHVnlRMjl0Y0c5dVpXNTBPaUJtZFc1amRHbHZiaWhqYjI1emRISjFZM1J2Y2l3Z2NISnZjSE1zSUdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdVbVZoWTNSRmJHVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9ZMjl1YzNSeWRXTjBiM0lzSUhCeWIzQnpLVHRjYmlBZ0lDQnlaWFIxY200Z1VtVmhZM1JOYjNWdWRDNXlaVzVrWlhJb1pXeGxiV1Z1ZEN3Z1kyOXVkR0ZwYm1WeUtUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUTI5dWMzUnlkV04wY3lCaElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTQnZaaUJnWTI5dWMzUnlkV04wYjNKZ0lIZHBkR2dnWUdsdWFYUnBZV3hRY205d2MyQWdZVzVrWEc0Z0lDQXFJSEpsYm1SbGNuTWdhWFFnYVc1MGJ5QmhJR052Ym5SaGFXNWxjaUJ1YjJSbElHbGtaVzUwYVdacFpXUWdZbmtnYzNWd2NHeHBaV1FnWUdsa1lDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZibjBnWTI5dGNHOXVaVzUwUTI5dWMzUnlkV04wYjNJZ1VtVmhZM1FnWTI5dGNHOXVaVzUwSUdOdmJuTjBjblZqZEc5eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UDI5aWFtVmpkSDBnY0hKdmNITWdTVzVwZEdsaGJDQndjbTl3Y3lCdlppQjBhR1VnWTI5dGNHOXVaVzUwSUdsdWMzUmhibU5sTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnU1VRZ2IyWWdkR2hsSUVSUFRTQmxiR1Z0Wlc1MElIUnZJSEpsYm1SbGNpQnBiblJ2TGx4dUlDQWdLaUJBY21WMGRYSnVJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdRMjl0Y0c5dVpXNTBJR2x1YzNSaGJtTmxJSEpsYm1SbGNtVmtJR2x1SUhSb1pTQmpiMjUwWVdsdVpYSWdibTlrWlM1Y2JpQWdJQ292WEc0Z0lHTnZibk4wY25WamRFRnVaRkpsYm1SbGNrTnZiWEJ2Ym1WdWRFSjVTVVE2SUdaMWJtTjBhVzl1S0dOdmJuTjBjblZqZEc5eUxDQndjbTl3Y3l3Z2FXUXBJSHRjYmlBZ0lDQjJZWElnWkc5dFRtOWtaU0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLR2xrS1R0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdaRzl0VG05a1pTeGNiaUFnSUNBZ0lDZFVjbWxsWkNCMGJ5Qm5aWFFnWld4bGJXVnVkQ0IzYVhSb0lHbGtJRzltSUZ3aUpYTmNJaUJpZFhRZ2FYUWdhWE1nYm05MElIQnlaWE5sYm5RZ2IyNGdkR2hsSUhCaFoyVXVKeXhjYmlBZ0lDQWdJR2xrWEc0Z0lDQWdLU0E2SUdsdWRtRnlhV0Z1ZENoa2IyMU9iMlJsS1NrN1hHNGdJQ0FnY21WMGRYSnVJRkpsWVdOMFRXOTFiblF1WTI5dWMzUnlkV04wUVc1a1VtVnVaR1Z5UTI5dGNHOXVaVzUwS0dOdmJuTjBjblZqZEc5eUxDQndjbTl3Y3l3Z1pHOXRUbTlrWlNrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsWjJsemRHVnljeUJoSUdOdmJuUmhhVzVsY2lCdWIyUmxJR2x1ZEc4Z2QyaHBZMmdnVW1WaFkzUWdZMjl0Y0c5dVpXNTBjeUIzYVd4c0lHSmxJSEpsYm1SbGNtVmtMbHh1SUNBZ0tpQlVhR2x6SUdGc2MyOGdZM0psWVhSbGN5QjBhR1VnWENKeVpXRmpkRkp2YjNSY0lpQkpSQ0IwYUdGMElIZHBiR3dnWW1VZ1lYTnphV2R1WldRZ2RHOGdkR2hsSUdWc1pXMWxiblJjYmlBZ0lDb2djbVZ1WkdWeVpXUWdkMmwwYUdsdUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFJQVFVWc1pXMWxiblI5SUdOdmJuUmhhVzVsY2lCRVQwMGdaV3hsYldWdWRDQjBieUJ5WldkcGMzUmxjaUJoY3lCaElHTnZiblJoYVc1bGNpNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNCVWFHVWdYQ0p5WldGamRGSnZiM1JjSWlCSlJDQnZaaUJsYkdWdFpXNTBjeUJ5Wlc1a1pYSmxaQ0IzYVhSb2FXNHVYRzRnSUNBcUwxeHVJQ0J5WldkcGMzUmxja052Ym5SaGFXNWxjam9nWm5WdVkzUnBiMjRvWTI5dWRHRnBibVZ5S1NCN1hHNGdJQ0FnZG1GeUlISmxZV04wVW05dmRFbEVJRDBnWjJWMFVtVmhZM1JTYjI5MFNVUW9ZMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQnBaaUFvY21WaFkzUlNiMjkwU1VRcElIdGNiaUFnSUNBZ0lDOHZJRWxtSUc5dVpTQmxlR2x6ZEhNc0lHMWhhMlVnYzNWeVpTQnBkQ0JwY3lCaElIWmhiR2xrSUZ3aWNtVmhZM1JTYjI5MFhDSWdTVVF1WEc0Z0lDQWdJQ0J5WldGamRGSnZiM1JKUkNBOUlGSmxZV04wU1c1emRHRnVZMlZJWVc1a2JHVnpMbWRsZEZKbFlXTjBVbTl2ZEVsRVJuSnZiVTV2WkdWSlJDaHlaV0ZqZEZKdmIzUkpSQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2doY21WaFkzUlNiMjkwU1VRcElIdGNiaUFnSUNBZ0lDOHZJRTV2SUhaaGJHbGtJRndpY21WaFkzUlNiMjkwWENJZ1NVUWdabTkxYm1Rc0lHTnlaV0YwWlNCdmJtVXVYRzRnSUNBZ0lDQnlaV0ZqZEZKdmIzUkpSQ0E5SUZKbFlXTjBTVzV6ZEdGdVkyVklZVzVrYkdWekxtTnlaV0YwWlZKbFlXTjBVbTl2ZEVsRUtDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuUmhhVzVsY25OQ2VWSmxZV04wVW05dmRFbEVXM0psWVdOMFVtOXZkRWxFWFNBOUlHTnZiblJoYVc1bGNqdGNiaUFnSUNCeVpYUjFjbTRnY21WaFkzUlNiMjkwU1VRN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ1Ylc5MWJuUnpJR0Z1WkNCa1pYTjBjbTk1Y3lCMGFHVWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MElISmxibVJsY21Wa0lHbHVJSFJvWlNCZ1kyOXVkR0ZwYm1WeVlDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRFVDAxRmJHVnRaVzUwZlNCamIyNTBZV2x1WlhJZ1JFOU5JR1ZzWlcxbGJuUWdZMjl1ZEdGcGJtbHVaeUJoSUZKbFlXTjBJR052YlhCdmJtVnVkQzVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQmhJR052YlhCdmJtVnVkQ0IzWVhNZ1ptOTFibVFnYVc0Z1lXNWtJSFZ1Ylc5MWJuUmxaQ0JtY205dFhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCamIyNTBZV2x1WlhKZ1hHNGdJQ0FxTDF4dUlDQjFibTF2ZFc1MFEyOXRjRzl1Wlc1MFFYUk9iMlJsT2lCbWRXNWpkR2x2YmloamIyNTBZV2x1WlhJcElIdGNiaUFnSUNBdkx5QldZWEpwYjNWeklIQmhjblJ6SUc5bUlHOTFjaUJqYjJSbElDaHpkV05vSUdGeklGSmxZV04wUTI5dGNHOXphWFJsUTI5dGNHOXVaVzUwSjNOY2JpQWdJQ0F2THlCZmNtVnVaR1Z5Vm1Gc2FXUmhkR1ZrUTI5dGNHOXVaVzUwS1NCaGMzTjFiV1VnZEdoaGRDQmpZV3hzY3lCMGJ5QnlaVzVrWlhJZ1lYSmxiaWQwSUc1bGMzUmxaRHRjYmlBZ0lDQXZMeUIyWlhKcFpua2dkR2hoZENCMGFHRjBKM01nZEdobElHTmhjMlV1SUNoVGRISnBZM1JzZVNCemNHVmhhMmx1Wnl3Z2RXNXRiM1Z1ZEdsdVp5QjNiMjRuZENCallYVnpaU0JoWEc0Z0lDQWdMeThnY21WdVpHVnlJR0oxZENCM1pTQnpkR2xzYkNCa2IyNG5kQ0JsZUhCbFkzUWdkRzhnWW1VZ2FXNGdZU0J5Wlc1a1pYSWdZMkZzYkNCb1pYSmxMaWxjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2QyRnlibWx1WnloY2JpQWdJQ0FnSUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5TG1OMWNuSmxiblFnUFQwZ2JuVnNiQ3hjYmlBZ0lDQWdJQ2QxYm0xdmRXNTBRMjl0Y0c5dVpXNTBRWFJPYjJSbEtDazZJRkpsYm1SbGNpQnRaWFJvYjJSeklITm9iM1ZzWkNCaVpTQmhJSEIxY21VZ1puVnVZM1JwYjI0Z2IyWWdKeUFyWEc0Z0lDQWdJQ0FuY0hKdmNITWdZVzVrSUhOMFlYUmxPeUIwY21sbloyVnlhVzVuSUc1bGMzUmxaQ0JqYjIxd2IyNWxiblFnZFhCa1lYUmxjeUJtY205dElISmxibVJsY2lCcGN5QW5JQ3RjYmlBZ0lDQWdJQ2R1YjNRZ1lXeHNiM2RsWkM0Z1NXWWdibVZqWlhOellYSjVMQ0IwY21sbloyVnlJRzVsYzNSbFpDQjFjR1JoZEdWeklHbHVJQ2NnSzF4dUlDQWdJQ0FnSjJOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlM0blhHNGdJQ0FnS1NBNklHNTFiR3dwTzF4dVhHNGdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQWdJR052Ym5SaGFXNWxjaUFtSmlBb1hHNGdJQ0FnSUNBZ0lDaGpiMjUwWVdsdVpYSXVibTlrWlZSNWNHVWdQVDA5SUVWTVJVMUZUbFJmVGs5RVJWOVVXVkJGSUh4OElHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUkU5RFgwNVBSRVZmVkZsUVJTbGNiaUFnSUNBZ0lDa3NYRzRnSUNBZ0lDQW5kVzV0YjNWdWRFTnZiWEJ2Ym1WdWRFRjBUbTlrWlNndUxpNHBPaUJVWVhKblpYUWdZMjl1ZEdGcGJtVnlJR2x6SUc1dmRDQmhJRVJQVFNCbGJHVnRaVzUwTGlkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtHTnZiblJoYVc1bGNpQW1KaUFvWEc0Z0lDQWdJQ0FvWTI5dWRHRnBibVZ5TG01dlpHVlVlWEJsSUQwOVBTQkZURVZOUlU1VVgwNVBSRVZmVkZsUVJTQjhmQ0JqYjI1MFlXbHVaWEl1Ym05a1pWUjVjR1VnUFQwOUlFUlBRMTlPVDBSRlgxUlpVRVVwWEc0Z0lDQWdLU2twTzF4dVhHNGdJQ0FnZG1GeUlISmxZV04wVW05dmRFbEVJRDBnWjJWMFVtVmhZM1JTYjI5MFNVUW9ZMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQjJZWElnWTI5dGNHOXVaVzUwSUQwZ2FXNXpkR0Z1WTJWelFubFNaV0ZqZEZKdmIzUkpSRnR5WldGamRGSnZiM1JKUkYwN1hHNGdJQ0FnYVdZZ0tDRmpiMjF3YjI1bGJuUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdVbVZoWTNSTmIzVnVkQzUxYm0xdmRXNTBRMjl0Y0c5dVpXNTBSbkp2YlU1dlpHVW9ZMjl0Y0c5dVpXNTBMQ0JqYjI1MFlXbHVaWElwTzF4dUlDQWdJR1JsYkdWMFpTQnBibk4wWVc1alpYTkNlVkpsWVdOMFVtOXZkRWxFVzNKbFlXTjBVbTl2ZEVsRVhUdGNiaUFnSUNCa1pXeGxkR1VnWTI5dWRHRnBibVZ5YzBKNVVtVmhZM1JTYjI5MFNVUmJjbVZoWTNSU2IyOTBTVVJkTzF4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJR1JsYkdWMFpTQnliMjkwUld4bGJXVnVkSE5DZVZKbFlXTjBVbTl2ZEVsRVczSmxZV04wVW05dmRFbEVYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWdWJXOTFiblJ6SUdFZ1kyOXRjRzl1Wlc1MElHRnVaQ0J5WlcxdmRtVnpJR2wwSUdaeWIyMGdkR2hsSUVSUFRTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdhVzV6ZEdGdVkyVWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MElHbHVjM1JoYm1ObExseHVJQ0FnS2lCQWNHRnlZVzBnZTBSUFRVVnNaVzFsYm5SOUlHTnZiblJoYVc1bGNpQkVUMDBnWld4bGJXVnVkQ0IwYnlCMWJtMXZkVzUwSUdaeWIyMHVYRzRnSUNBcUlFQm1hVzVoYkZ4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb2dRSE5sWlNCN1VtVmhZM1JOYjNWdWRDNTFibTF2ZFc1MFEyOXRjRzl1Wlc1MFFYUk9iMlJsZlZ4dUlDQWdLaTljYmlBZ2RXNXRiM1Z1ZEVOdmJYQnZibVZ1ZEVaeWIyMU9iMlJsT2lCbWRXNWpkR2x2YmlocGJuTjBZVzVqWlN3Z1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ1VtVmhZM1JTWldOdmJtTnBiR1Z5TG5WdWJXOTFiblJEYjIxd2IyNWxiblFvYVc1emRHRnVZMlVwTzF4dVhHNGdJQ0FnYVdZZ0tHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQTlQVDBnUkU5RFgwNVBSRVZmVkZsUVJTa2dlMXh1SUNBZ0lDQWdZMjl1ZEdGcGJtVnlJRDBnWTI5dWRHRnBibVZ5TG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJvZEhSd09pOHZhbk53WlhKbUxtTnZiUzlsYlhCMGVXbHVaeTFoTFc1dlpHVmNiaUFnSUNCM2FHbHNaU0FvWTI5dWRHRnBibVZ5TG14aGMzUkRhR2xzWkNrZ2UxeHVJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxuSmxiVzkyWlVOb2FXeGtLR052Ym5SaGFXNWxjaTVzWVhOMFEyaHBiR1FwTzF4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1JtbHVaSE1nZEdobElHTnZiblJoYVc1bGNpQkVUMDBnWld4bGJXVnVkQ0IwYUdGMElHTnZiblJoYVc1eklGSmxZV04wSUdOdmJYQnZibVZ1ZENCMGJ5QjNhR2xqYUNCMGFHVmNiaUFnSUNvZ2MzVndjR3hwWldRZ1JFOU5JR0JwWkdBZ1ltVnNiMjVuY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHbGtJRlJvWlNCSlJDQnZaaUJoYmlCbGJHVnRaVzUwSUhKbGJtUmxjbVZrSUdKNUlHRWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2lCQWNtVjBkWEp1SUhzL1JFOU5SV3hsYldWdWRIMGdSRTlOSUdWc1pXMWxiblFnZEdoaGRDQmpiMjUwWVdsdWN5QjBhR1VnWUdsa1lDNWNiaUFnSUNvdlhHNGdJR1pwYm1SU1pXRmpkRU52Ym5SaGFXNWxja1p2Y2tsRU9pQm1kVzVqZEdsdmJpaHBaQ2tnZTF4dUlDQWdJSFpoY2lCeVpXRmpkRkp2YjNSSlJDQTlJRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6TG1kbGRGSmxZV04wVW05dmRFbEVSbkp2YlU1dlpHVkpSQ2hwWkNrN1hHNGdJQ0FnZG1GeUlHTnZiblJoYVc1bGNpQTlJR052Ym5SaGFXNWxjbk5DZVZKbFlXTjBVbTl2ZEVsRVczSmxZV04wVW05dmRFbEVYVHRjYmx4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJSFpoY2lCeWIyOTBSV3hsYldWdWRDQTlJSEp2YjNSRmJHVnRaVzUwYzBKNVVtVmhZM1JTYjI5MFNVUmJjbVZoWTNSU2IyOTBTVVJkTzF4dUlDQWdJQ0FnYVdZZ0tISnZiM1JGYkdWdFpXNTBJQ1ltSUhKdmIzUkZiR1Z0Wlc1MExuQmhjbVZ1ZEU1dlpHVWdJVDA5SUdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ0lDQWdJQzh2SUVOaGJHd2dhVzUwWlhKdVlXeEhaWFJKUkNCb1pYSmxJR0psWTJGMWMyVWdaMlYwU1VRZ1kyRnNiSE1nYVhOV1lXeHBaQ0IzYUdsamFDQmpZV3hzYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR1pwYm1SU1pXRmpkRU52Ym5SaGFXNWxja1p2Y2tsRUlDaDBhR2x6SUdaMWJtTjBhVzl1S1M1Y2JpQWdJQ0FnSUNBZ0lDQnBiblJsY201aGJFZGxkRWxFS0hKdmIzUkZiR1Z0Wlc1MEtTQTlQVDBnY21WaFkzUlNiMjkwU1VRc1hHNGdJQ0FnSUNBZ0lDQWdKMUpsWVdOMFRXOTFiblE2SUZKdmIzUWdaV3hsYldWdWRDQkpSQ0JrYVdabVpYSmxaQ0JtY205dElISmxZV04wVW05dmRFbEVMaWRjYmlBZ0lDQWdJQ0FnS1NBNklHbHVkbUZ5YVdGdWRDZ3ZMeUJEWVd4c0lHbHVkR1Z5Ym1Gc1IyVjBTVVFnYUdWeVpTQmlaV05oZFhObElHZGxkRWxFSUdOaGJHeHpJR2x6Vm1Gc2FXUWdkMmhwWTJnZ1kyRnNiSE5jYmlBZ0lDQWdJQ0FnTHk4Z1ptbHVaRkpsWVdOMFEyOXVkR0ZwYm1WeVJtOXlTVVFnS0hSb2FYTWdablZ1WTNScGIyNHBMbHh1SUNBZ0lDQWdJQ0JwYm5SbGNtNWhiRWRsZEVsRUtISnZiM1JGYkdWdFpXNTBLU0E5UFQwZ2NtVmhZM1JTYjI5MFNVUXBLVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdZMjl1ZEdGcGJtVnlRMmhwYkdRZ1BTQmpiMjUwWVdsdVpYSXVabWx5YzNSRGFHbHNaRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJoYVc1bGNrTm9hV3hrSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldGamRGSnZiM1JKUkNBOVBUMGdhVzUwWlhKdVlXeEhaWFJKUkNoamIyNTBZV2x1WlhKRGFHbHNaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVWdZMjl1ZEdGcGJtVnlJR2hoY3lCaElHNWxkeUJqYUdsc1pDQjNhWFJvSUhSb1pTQnpZVzFsSUVsRUlHRnpJSFJvWlNCdmJHUmNiaUFnSUNBZ0lDQWdJQ0F2THlCeWIyOTBJR1ZzWlcxbGJuUXNJSFJvWlc0Z2NtOXZkRVZzWlcxbGJuUnpRbmxTWldGamRGSnZiM1JKUkZ0eVpXRmpkRkp2YjNSSlJGMGdhWE5jYmlBZ0lDQWdJQ0FnSUNBdkx5QnFkWE4wSUhOMFlXeGxJR0Z1WkNCdVpXVmtjeUIwYnlCaVpTQjFjR1JoZEdWa0xpQlVhR1VnWTJGelpTQjBhR0YwSUdSbGMyVnlkbVZ6SUdGY2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWVhKdWFXNW5JR2x6SUhkb1pXNGdkR2hsSUdOdmJuUmhhVzVsY2lCcGN5QmxiWEIwZVM1Y2JpQWdJQ0FnSUNBZ0lDQnliMjkwUld4bGJXVnVkSE5DZVZKbFlXTjBVbTl2ZEVsRVczSmxZV04wVW05dmRFbEVYU0E5SUdOdmJuUmhhVzVsY2tOb2FXeGtPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VbVZoWTNSTmIzVnVkRG9nVW05dmRDQmxiR1Z0Wlc1MElHaGhjeUJpWldWdUlISmxiVzkyWldRZ1puSnZiU0JwZEhNZ2IzSnBaMmx1WVd3Z0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBblkyOXVkR0ZwYm1WeUxpQk9aWGNnWTI5dWRHRnBibVZ5T2ljc0lISnZiM1JGYkdWdFpXNTBMbkJoY21WdWRFNXZaR1ZjYmlBZ0lDQWdJQ0FnSUNBcElEb2diblZzYkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWTI5dWRHRnBibVZ5TzF4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkdhVzVrY3lCaGJpQmxiR1Z0Wlc1MElISmxibVJsY21Wa0lHSjVJRkpsWVdOMElIZHBkR2dnZEdobElITjFjSEJzYVdWa0lFbEVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYVdRZ1NVUWdiMllnWVNCRVQwMGdibTlrWlNCcGJpQjBhR1VnVW1WaFkzUWdZMjl0Y0c5dVpXNTBMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdEVUMDFGYkdWdFpXNTBmU0JTYjI5MElFUlBUU0J1YjJSbElHOW1JSFJvWlNCU1pXRmpkQ0JqYjIxd2IyNWxiblF1WEc0Z0lDQXFMMXh1SUNCbWFXNWtVbVZoWTNST2IyUmxRbmxKUkRvZ1puVnVZM1JwYjI0b2FXUXBJSHRjYmlBZ0lDQjJZWElnY21WaFkzUlNiMjkwSUQwZ1VtVmhZM1JOYjNWdWRDNW1hVzVrVW1WaFkzUkRiMjUwWVdsdVpYSkdiM0pKUkNocFpDazdYRzRnSUNBZ2NtVjBkWEp1SUZKbFlXTjBUVzkxYm5RdVptbHVaRU52YlhCdmJtVnVkRkp2YjNRb2NtVmhZM1JTYjI5MExDQnBaQ2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUnlkV1VnYVdZZ2RHaGxJSE4xY0hCc2FXVmtJR0J1YjJSbFlDQnBjeUJ5Wlc1a1pYSmxaQ0JpZVNCU1pXRmpkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQnViMlJsSUVSUFRTQkZiR1Z0Wlc1MElIUnZJR05vWldOckxseHVJQ0FnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhSb1pTQkVUMDBnUld4bGJXVnVkQ0JoY0hCbFlYSnpJSFJ2SUdKbElISmxibVJsY21Wa0lHSjVJRkpsWVdOMExseHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lHbHpVbVZ1WkdWeVpXUkNlVkpsWVdOME9pQm1kVzVqZEdsdmJpaHViMlJsS1NCN1hHNGdJQ0FnYVdZZ0tHNXZaR1V1Ym05a1pWUjVjR1VnSVQwOUlERXBJSHRjYmlBZ0lDQWdJQzh2SUU1dmRDQmhJRVJQVFVWc1pXMWxiblFzSUhSb1pYSmxabTl5WlNCdWIzUWdZU0JTWldGamRDQmpiMjF3YjI1bGJuUmNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR2xrSUQwZ1VtVmhZM1JOYjNWdWRDNW5aWFJKUkNodWIyUmxLVHRjYmlBZ0lDQnlaWFIxY200Z2FXUWdQeUJwWkM1amFHRnlRWFFvTUNrZ1BUMDlJRk5GVUVGU1FWUlBVaUE2SUdaaGJITmxPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWNtRjJaWEp6WlhNZ2RYQWdkR2hsSUdGdVkyVnpkRzl5Y3lCdlppQjBhR1VnYzNWd2NHeHBaV1FnYm05a1pTQjBieUJtYVc1a0lHRWdibTlrWlNCMGFHRjBJR2x6SUdGY2JpQWdJQ29nUkU5TklISmxjSEpsYzJWdWRHRjBhVzl1SUc5bUlHRWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdleXA5SUc1dlpHVmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AwUlBUVVYyWlc1MFZHRnlaMlYwZlZ4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdkbGRFWnBjbk4wVW1WaFkzUkVUMDA2SUdaMWJtTjBhVzl1S0c1dlpHVXBJSHRjYmlBZ0lDQjJZWElnWTNWeWNtVnVkQ0E5SUc1dlpHVTdYRzRnSUNBZ2QyaHBiR1VnS0dOMWNuSmxiblFnSmlZZ1kzVnljbVZ1ZEM1d1lYSmxiblJPYjJSbElDRTlQU0JqZFhKeVpXNTBLU0I3WEc0Z0lDQWdJQ0JwWmlBb1VtVmhZM1JOYjNWdWRDNXBjMUpsYm1SbGNtVmtRbmxTWldGamRDaGpkWEp5Wlc1MEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZM1Z5Y21WdWREdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTjFjbkpsYm5RZ1BTQmpkWEp5Wlc1MExuQmhjbVZ1ZEU1dlpHVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJHYVc1a2N5QmhJRzV2WkdVZ2QybDBhQ0IwYUdVZ2MzVndjR3hwWldRZ1lIUmhjbWRsZEVsRVlDQnBibk5wWkdVZ2IyWWdkR2hsSUhOMWNIQnNhV1ZrWEc0Z0lDQXFJR0JoYm1ObGMzUnZjazV2WkdWZ0xpQWdSWGh3Ykc5cGRITWdkR2hsSUVsRUlHNWhiV2x1WnlCelkyaGxiV1VnZEc4Z2NHVnlabTl5YlNCMGFHVWdjMlZoY21Ob1hHNGdJQ0FxSUhGMWFXTnJiSGt1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JFOU5SWFpsYm5SVVlYSm5aWFI5SUdGdVkyVnpkRzl5VG05a1pTQlRaV0Z5WTJnZ1puSnZiU0IwYUdseklISnZiM1F1WEc0Z0lDQXFJRUJ3WVhKaGNtMGdlM04wY21sdVozMGdkR0Z5WjJWMFNVUWdTVVFnYjJZZ2RHaGxJRVJQVFNCeVpYQnlaWE5sYm5SaGRHbHZiaUJ2WmlCMGFHVWdZMjl0Y0c5dVpXNTBMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdEVUMDFGZG1WdWRGUmhjbWRsZEgwZ1JFOU5JRzV2WkdVZ2QybDBhQ0IwYUdVZ2MzVndjR3hwWldRZ1lIUmhjbWRsZEVsRVlDNWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQm1hVzVrUTI5dGNHOXVaVzUwVW05dmREb2dablZ1WTNScGIyNG9ZVzVqWlhOMGIzSk9iMlJsTENCMFlYSm5aWFJKUkNrZ2UxeHVJQ0FnSUhaaGNpQm1hWEp6ZEVOb2FXeGtjbVZ1SUQwZ1ptbHVaRU52YlhCdmJtVnVkRkp2YjNSU1pYVnpZV0pzWlVGeWNtRjVPMXh1SUNBZ0lIWmhjaUJqYUdsc1pFbHVaR1Y0SUQwZ01EdGNibHh1SUNBZ0lIWmhjaUJrWldWd1pYTjBRVzVqWlhOMGIzSWdQU0JtYVc1a1JHVmxjR1Z6ZEVOaFkyaGxaRUZ1WTJWemRHOXlLSFJoY21kbGRFbEVLU0I4ZkNCaGJtTmxjM1J2Y2s1dlpHVTdYRzVjYmlBZ0lDQm1hWEp6ZEVOb2FXeGtjbVZ1V3pCZElEMGdaR1ZsY0dWemRFRnVZMlZ6ZEc5eUxtWnBjbk4wUTJocGJHUTdYRzRnSUNBZ1ptbHljM1JEYUdsc1pISmxiaTVzWlc1bmRHZ2dQU0F4TzF4dVhHNGdJQ0FnZDJocGJHVWdLR05vYVd4a1NXNWtaWGdnUENCbWFYSnpkRU5vYVd4a2NtVnVMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdOb2FXeGtJRDBnWm1seWMzUkRhR2xzWkhKbGJsdGphR2xzWkVsdVpHVjRLeXRkTzF4dUlDQWdJQ0FnZG1GeUlIUmhjbWRsZEVOb2FXeGtPMXh1WEc0Z0lDQWdJQ0IzYUdsc1pTQW9ZMmhwYkdRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOb2FXeGtTVVFnUFNCU1pXRmpkRTF2ZFc1MExtZGxkRWxFS0dOb2FXeGtLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTm9hV3hrU1VRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRmRtVnVJR2xtSUhkbElHWnBibVFnZEdobElHNXZaR1VnZDJVbmNtVWdiRzl2YTJsdVp5Qm1iM0lzSUhkbElHWnBibWx6YUNCc2IyOXdhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkR2h5YjNWbmFDQnBkSE1nYzJsaWJHbHVaM01nZEc4Z1pXNXpkWEpsSUhSb1pYa25jbVVnWTJGamFHVmtJSE52SUhSb1lYUWdkMlVnWkc5dUozUWdhR0YyWlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJ2SUhKbGRtbHphWFFnZEdocGN5QnViMlJsSUdGbllXbHVMaUJQZEdobGNuZHBjMlVzSUhkbElHMWhhMlVnYmw0eUlHTmhiR3h6SUhSdklHZGxkRWxFWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCMmFYTnBkR2x1WnlCMGFHVWdiV0Z1ZVNCamFHbHNaSEpsYmlCdlppQmhJSE5wYm1kc1pTQnViMlJsSUdsdUlHOXlaR1Z5TGx4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkRWxFSUQwOVBTQmphR2xzWkVsRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJEYUdsc1pDQTlJR05vYVd4a08xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNdWFYTkJibU5sYzNSdmNrbEVUMllvWTJocGJHUkpSQ3dnZEdGeVoyVjBTVVFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjNaU0JtYVc1a0lHRWdZMmhwYkdRZ2QyaHZjMlVnU1VRZ2FYTWdZVzRnWVc1alpYTjBiM0lnYjJZZ2RHaGxJR2RwZG1WdUlFbEVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hsYmlCM1pTQmpZVzRnWW1VZ2MzVnlaU0IwYUdGMElIZGxJRzl1YkhrZ2QyRnVkQ0IwYnlCelpXRnlZMmdnZEdobElITjFZblJ5WldWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKdmIzUmxaQ0JoZENCMGFHbHpJR05vYVd4a0xDQnpieUIzWlNCallXNGdkR2h5YjNjZ2IzVjBJSFJvWlNCeVpYTjBJRzltSUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyVmhjbU5vSUhOMFlYUmxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHljM1JEYUdsc1pISmxiaTVzWlc1bmRHZ2dQU0JqYUdsc1pFbHVaR1Y0SUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGNuTjBRMmhwYkdSeVpXNHVjSFZ6YUNoamFHbHNaQzVtYVhKemRFTm9hV3hrS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIwYUdseklHTm9hV3hrSUdoaFpDQnVieUJKUkN3Z2RHaGxiaUIwYUdWeVpTZHpJR0VnWTJoaGJtTmxJSFJvWVhRZ2FYUWdkMkZ6WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhVzVxWldOMFpXUWdZWFYwYjIxaGRHbGpZV3hzZVNCaWVTQjBhR1VnWW5KdmQzTmxjaXdnWVhNZ2QyaGxiaUJoSUdBOGRHRmliR1UrWUZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR1ZzWlcxbGJuUWdjM0J5YjNWMGN5QmhiaUJsZUhSeVlTQmdQSFJpYjJSNVBtQWdZMmhwYkdRZ1lYTWdZU0J6YVdSbElHVm1abVZqZENCdlpseHVJQ0FnSUNBZ0lDQWdJQzh2SUdBdWFXNXVaWEpJVkUxTVlDQndZWEp6YVc1bkxpQlBjSFJwYldsemRHbGpZV3hzZVNCamIyNTBhVzUxWlNCa2IzZHVJSFJvYVhOY2JpQWdJQ0FnSUNBZ0lDQXZMeUJpY21GdVkyZ3NJR0oxZENCdWIzUWdZbVZtYjNKbElHVjRZVzFwYm1sdVp5QjBhR1VnYjNSb1pYSWdjMmxpYkdsdVozTXVYRzRnSUNBZ0lDQWdJQ0FnWm1seWMzUkRhR2xzWkhKbGJpNXdkWE5vS0dOb2FXeGtMbVpwY25OMFEyaHBiR1FwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMmhwYkdRZ1BTQmphR2xzWkM1dVpYaDBVMmxpYkdsdVp6dGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hSaGNtZGxkRU5vYVd4a0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUVWdGNIUjVhVzVuSUdacGNuTjBRMmhwYkdSeVpXNHZabWx1WkVOdmJYQnZibVZ1ZEZKdmIzUlNaWFZ6WVdKc1pVRnljbUY1SUdselhHNGdJQ0FnSUNBZ0lDOHZJRzV2ZENCdVpXTmxjM05oY25rZ1ptOXlJR052Y25KbFkzUnVaWE56TENCaWRYUWdhWFFnYUdWc2NITWdkR2hsSUVkRElISmxZMnhoYVcxY2JpQWdJQ0FnSUNBZ0x5OGdZVzU1SUc1dlpHVnpJSFJvWVhRZ2QyVnlaU0JzWldaMElHRjBJSFJvWlNCbGJtUWdiMllnZEdobElITmxZWEpqYUM1Y2JpQWdJQ0FnSUNBZ1ptbHljM1JEYUdsc1pISmxiaTVzWlc1bmRHZ2dQU0F3TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFJEYUdsc1pEdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCbWFYSnpkRU5vYVd4a2NtVnVMbXhsYm1kMGFDQTlJREE3WEc1Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBblptbHVaRU52YlhCdmJtVnVkRkp2YjNRb0xpNHVMQ0FsY3lrNklGVnVZV0pzWlNCMGJ5Qm1hVzVrSUdWc1pXMWxiblF1SUZSb2FYTWdjSEp2WW1GaWJIa2dKeUFyWEc0Z0lDQWdJQ0FuYldWaGJuTWdkR2hsSUVSUFRTQjNZWE1nZFc1bGVIQmxZM1JsWkd4NUlHMTFkR0YwWldRZ0tHVXVaeTRzSUdKNUlIUm9aU0JpY205M2MyVnlLU3dnSnlBclhHNGdJQ0FnSUNBbmRYTjFZV3hzZVNCa2RXVWdkRzhnWm05eVoyVjBkR2x1WnlCaElEeDBZbTlrZVQ0Z2QyaGxiaUIxYzJsdVp5QjBZV0pzWlhNc0lHNWxjM1JwYm1jZ2RHRm5jeUFuSUN0Y2JpQWdJQ0FnSUNkc2FXdGxJRHhtYjNKdFBpd2dQSEErTENCdmNpQThZVDRzSUc5eUlIVnphVzVuSUc1dmJpMVRWa2NnWld4bGJXVnVkSE1nYVc0Z1lXNGdQSE4yWno0Z0p5QXJYRzRnSUNBZ0lDQW5jR0Z5Wlc1MExpQW5JQ3RjYmlBZ0lDQWdJQ2RVY25rZ2FXNXpjR1ZqZEdsdVp5QjBhR1VnWTJocGJHUWdibTlrWlhNZ2IyWWdkR2hsSUdWc1pXMWxiblFnZDJsMGFDQlNaV0ZqZENCSlJDQmdKWE5nTGljc1hHNGdJQ0FnSUNCMFlYSm5aWFJKUkN4Y2JpQWdJQ0FnSUZKbFlXTjBUVzkxYm5RdVoyVjBTVVFvWVc1alpYTjBiM0pPYjJSbEtWeHVJQ0FnSUNrZ09pQnBiblpoY21saGJuUW9abUZzYzJVcEtUdGNiaUFnZlN4Y2JseHVJQ0JmYlc5MWJuUkpiV0ZuWlVsdWRHOU9iMlJsT2lCbWRXNWpkR2x2YmlodFlYSnJkWEFzSUdOdmJuUmhhVzVsY2l3Z2MyaHZkV3hrVW1WMWMyVk5ZWEpyZFhBcElIdGNiaUFnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5SUNZbUlDaGNiaUFnSUNBZ0lDQWdLR052Ym5SaGFXNWxjaTV1YjJSbFZIbHdaU0E5UFQwZ1JVeEZUVVZPVkY5T1QwUkZYMVJaVUVVZ2ZId2dZMjl1ZEdGcGJtVnlMbTV2WkdWVWVYQmxJRDA5UFNCRVQwTmZUazlFUlY5VVdWQkZLVnh1SUNBZ0lDQWdLU3hjYmlBZ0lDQWdJQ2R0YjNWdWRFTnZiWEJ2Ym1WdWRFbHVkRzlPYjJSbEtDNHVMaWs2SUZSaGNtZGxkQ0JqYjI1MFlXbHVaWElnYVhNZ2JtOTBJSFpoYkdsa0xpZGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLR052Ym5SaGFXNWxjaUFtSmlBb1hHNGdJQ0FnSUNBb1kyOXVkR0ZwYm1WeUxtNXZaR1ZVZVhCbElEMDlQU0JGVEVWTlJVNVVYMDVQUkVWZlZGbFFSU0I4ZkNCamIyNTBZV2x1WlhJdWJtOWtaVlI1Y0dVZ1BUMDlJRVJQUTE5T1QwUkZYMVJaVUVVcFhHNGdJQ0FnS1NrcE8xeHVYRzRnSUNBZ2FXWWdLSE5vYjNWc1pGSmxkWE5sVFdGeWEzVndLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2NtOXZkRVZzWlcxbGJuUWdQU0JuWlhSU1pXRmpkRkp2YjNSRmJHVnRaVzUwU1c1RGIyNTBZV2x1WlhJb1kyOXVkR0ZwYm1WeUtUdGNiaUFnSUNBZ0lHbG1JQ2hTWldGamRFMWhjbXQxY0VOb1pXTnJjM1Z0TG1OaGJsSmxkWE5sVFdGeWEzVndLRzFoY210MWNDd2djbTl2ZEVWc1pXMWxiblFwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmphR1ZqYTNOMWJTQTlJSEp2YjNSRmJHVnRaVzUwTG1kbGRFRjBkSEpwWW5WMFpTaGNiaUFnSUNBZ0lDQWdJQ0JTWldGamRFMWhjbXQxY0VOb1pXTnJjM1Z0TGtOSVJVTkxVMVZOWDBGVVZGSmZUa0ZOUlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnliMjkwUld4bGJXVnVkQzV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9VbVZoWTNSTllYSnJkWEJEYUdWamEzTjFiUzVEU0VWRFMxTlZUVjlCVkZSU1gwNUJUVVVwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjI5MFRXRnlhM1Z3SUQwZ2NtOXZkRVZzWlcxbGJuUXViM1YwWlhKSVZFMU1PMXh1SUNBZ0lDQWdJQ0J5YjI5MFJXeGxiV1Z1ZEM1elpYUkJkSFJ5YVdKMWRHVW9YRzRnSUNBZ0lDQWdJQ0FnVW1WaFkzUk5ZWEpyZFhCRGFHVmphM04xYlM1RFNFVkRTMU5WVFY5QlZGUlNYMDVCVFVVc1hHNGdJQ0FnSUNBZ0lDQWdZMmhsWTJ0emRXMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdaR2xtWmtsdVpHVjRJRDBnWm1seWMzUkVhV1ptWlhKbGJtTmxTVzVrWlhnb2JXRnlhM1Z3TENCeWIyOTBUV0Z5YTNWd0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdScFptWmxjbVZ1WTJVZ1BTQW5JQ2hqYkdsbGJuUXBJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lHMWhjbXQxY0M1emRXSnpkSEpwYm1jb1pHbG1aa2x1WkdWNElDMGdNakFzSUdScFptWkpibVJsZUNBcklESXdLU0FyWEc0Z0lDQWdJQ0FnSUNBZ0oxeGNiaUFvYzJWeWRtVnlLU0FuSUNzZ2NtOXZkRTFoY210MWNDNXpkV0p6ZEhKcGJtY29aR2xtWmtsdVpHVjRJQzBnTWpBc0lHUnBabVpKYm1SbGVDQXJJREl3S1R0Y2JseHVJQ0FnSUNBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTV1YjJSbFZIbHdaU0FoUFQwZ1JFOURYMDVQUkVWZlZGbFFSU3hjYmlBZ0lDQWdJQ0FnSUNBbldXOTFYRnduY21VZ2RISjVhVzVuSUhSdklISmxibVJsY2lCaElHTnZiWEJ2Ym1WdWRDQjBieUIwYUdVZ1pHOWpkVzFsYm5RZ2RYTnBibWNnSnlBclhHNGdJQ0FnSUNBZ0lDQWdKM05sY25abGNpQnlaVzVrWlhKcGJtY2dZblYwSUhSb1pTQmphR1ZqYTNOMWJTQjNZWE1nYVc1MllXeHBaQzRnVkdocGN5QjFjM1ZoYkd4NUlDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNkdFpXRnVjeUI1YjNVZ2NtVnVaR1Z5WldRZ1lTQmthV1ptWlhKbGJuUWdZMjl0Y0c5dVpXNTBJSFI1Y0dVZ2IzSWdjSEp2Y0hNZ2IyNGdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0ozUm9aU0JqYkdsbGJuUWdabkp2YlNCMGFHVWdiMjVsSUc5dUlIUm9aU0J6WlhKMlpYSXNJRzl5SUhsdmRYSWdjbVZ1WkdWeUtDa2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0oyMWxkR2h2WkhNZ1lYSmxJR2x0Y0hWeVpTNGdVbVZoWTNRZ1kyRnVibTkwSUdoaGJtUnNaU0IwYUdseklHTmhjMlVnWkhWbElIUnZJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDZGpjbTl6Y3kxaWNtOTNjMlZ5SUhGMWFYSnJjeUJpZVNCeVpXNWtaWEpwYm1jZ1lYUWdkR2hsSUdSdlkzVnRaVzUwSUhKdmIzUXVJRmx2ZFNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FuYzJodmRXeGtJR3h2YjJzZ1ptOXlJR1Z1ZG1seWIyNXRaVzUwSUdSbGNHVnVaR1Z1ZENCamIyUmxJR2x1SUhsdmRYSWdZMjl0Y0c5dVpXNTBjeUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5ZVzVrSUdWdWMzVnlaU0IwYUdVZ2NISnZjSE1nWVhKbElIUm9aU0J6WVcxbElHTnNhV1Z1ZENCaGJtUWdjMlZ5ZG1WeUlITnBaR1U2WEZ4dUpYTW5MRnh1SUNBZ0lDQWdJQ0FnSUdScFptWmxjbVZ1WTJWY2JpQWdJQ0FnSUNBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hqYjI1MFlXbHVaWEl1Ym05a1pWUjVjR1VnSVQwOUlFUlBRMTlPVDBSRlgxUlpVRVVwS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQWdJQ0FnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JSGRoY201cGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFNaV0ZqZENCaGRIUmxiWEIwWldRZ2RHOGdjbVYxYzJVZ2JXRnlhM1Z3SUdsdUlHRWdZMjl1ZEdGcGJtVnlJR0oxZENCMGFHVWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5ZMmhsWTJ0emRXMGdkMkZ6SUdsdWRtRnNhV1F1SUZSb2FYTWdaMlZ1WlhKaGJHeDVJRzFsWVc1eklIUm9ZWFFnZVc5MUlHRnlaU0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2QxYzJsdVp5QnpaWEoyWlhJZ2NtVnVaR1Z5YVc1bklHRnVaQ0IwYUdVZ2JXRnlhM1Z3SUdkbGJtVnlZWFJsWkNCdmJpQjBhR1VnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FuYzJWeWRtVnlJSGRoY3lCdWIzUWdkMmhoZENCMGFHVWdZMnhwWlc1MElIZGhjeUJsZUhCbFkzUnBibWN1SUZKbFlXTjBJR2x1YW1WamRHVmtJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdKMjVsZHlCdFlYSnJkWEFnZEc4Z1kyOXRjR1Z1YzJGMFpTQjNhR2xqYUNCM2IzSnJjeUJpZFhRZ2VXOTFJR2hoZG1VZ2JHOXpkQ0J0WVc1NUlDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0oyOW1JSFJvWlNCaVpXNWxabWwwY3lCdlppQnpaWEoyWlhJZ2NtVnVaR1Z5YVc1bkxpQkpibk4wWldGa0xDQm1hV2QxY21VZ2IzVjBJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdKM2RvZVNCMGFHVWdiV0Z5YTNWd0lHSmxhVzVuSUdkbGJtVnlZWFJsWkNCcGN5QmthV1ptWlhKbGJuUWdiMjRnZEdobElHTnNhV1Z1ZENBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNkdmNpQnpaWEoyWlhJNlhGeHVKWE1uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR2xtWm1WeVpXNWpaVnh1SUNBZ0lDQWdJQ0FnSUNrZ09pQnVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWEl1Ym05a1pWUjVjR1VnSVQwOUlFUlBRMTlPVDBSRlgxUlpVRVVzWEc0Z0lDQWdJQ0FuV1c5MVhGd25jbVVnZEhKNWFXNW5JSFJ2SUhKbGJtUmxjaUJoSUdOdmJYQnZibVZ1ZENCMGJ5QjBhR1VnWkc5amRXMWxiblFnWW5WMElDY2dLMXh1SUNBZ0lDQWdJQ0FuZVc5MUlHUnBaRzVjWENkMElIVnpaU0J6WlhKMlpYSWdjbVZ1WkdWeWFXNW5MaUJYWlNCallXNWNYQ2QwSUdSdklIUm9hWE1nSnlBclhHNGdJQ0FnSUNBZ0lDZDNhWFJvYjNWMElIVnphVzVuSUhObGNuWmxjaUJ5Wlc1a1pYSnBibWNnWkhWbElIUnZJR055YjNOekxXSnliM2R6WlhJZ2NYVnBjbXR6TGlBbklDdGNiaUFnSUNBZ0lDQWdKMU5sWlNCU1pXRmpkQzV5Wlc1a1pYSlViMU4wY21sdVp5Z3BJR1p2Y2lCelpYSjJaWElnY21WdVpHVnlhVzVuTGlkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtHTnZiblJoYVc1bGNpNXViMlJsVkhsd1pTQWhQVDBnUkU5RFgwNVBSRVZmVkZsUVJTa3BPMXh1WEc0Z0lDQWdjMlYwU1c1dVpYSklWRTFNS0dOdmJuUmhhVzVsY2l3Z2JXRnlhM1Z3S1R0Y2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZoWTNRZ1NVUWdkWFJwYkdsMGFXVnpMbHh1SUNBZ0tpOWNibHh1SUNCblpYUlNaV0ZqZEZKdmIzUkpSRG9nWjJWMFVtVmhZM1JTYjI5MFNVUXNYRzVjYmlBZ1oyVjBTVVE2SUdkbGRFbEVMRnh1WEc0Z0lITmxkRWxFT2lCelpYUkpSQ3hjYmx4dUlDQm5aWFJPYjJSbE9pQm5aWFJPYjJSbExGeHVYRzRnSUdkbGRFNXZaR1ZHY205dFNXNXpkR0Z1WTJVNklHZGxkRTV2WkdWR2NtOXRTVzV6ZEdGdVkyVXNYRzVjYmlBZ2NIVnlaMlZKUkRvZ2NIVnlaMlZKUkZ4dWZUdGNibHh1VW1WaFkzUlFaWEptTG0xbFlYTjFjbVZOWlhSb2IyUnpLRkpsWVdOMFRXOTFiblFzSUNkU1pXRmpkRTF2ZFc1MEp5d2dlMXh1SUNCZmNtVnVaR1Z5VG1WM1VtOXZkRU52YlhCdmJtVnVkRG9nSjE5eVpXNWtaWEpPWlhkU2IyOTBRMjl0Y0c5dVpXNTBKeXhjYmlBZ1gyMXZkVzUwU1cxaFoyVkpiblJ2VG05a1pUb2dKMTl0YjNWdWRFbHRZV2RsU1c1MGIwNXZaR1VuWEc1OUtUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRFMXZkVzUwTzF4dUlsMTkiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIik7XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RDaGlsZFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkUmVjb25jaWxlclwiKTtcblxuLyoqXG4gKiBVcGRhdGluZyBjaGlsZHJlbiBvZiBhIGNvbXBvbmVudCBtYXkgdHJpZ2dlciByZWN1cnNpdmUgdXBkYXRlcy4gVGhlIGRlcHRoIGlzXG4gKiB1c2VkIHRvIGJhdGNoIHJlY3Vyc2l2ZSB1cGRhdGVzIHRvIHJlbmRlciBtYXJrdXAgbW9yZSBlZmZpY2llbnRseS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZURlcHRoID0gMDtcblxuLyoqXG4gKiBRdWV1ZSBvZiB1cGRhdGUgY29uZmlndXJhdGlvbiBvYmplY3RzLlxuICpcbiAqIEVhY2ggb2JqZWN0IGhhcyBhIGB0eXBlYCBwcm9wZXJ0eSB0aGF0IGlzIGluIGBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc2AuXG4gKlxuICogQHR5cGUge2FycmF5PG9iamVjdD59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdXBkYXRlUXVldWUgPSBbXTtcblxuLyoqXG4gKiBRdWV1ZSBvZiBtYXJrdXAgdG8gYmUgcmVuZGVyZWQuXG4gKlxuICogQHR5cGUge2FycmF5PHN0cmluZz59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbWFya3VwUXVldWUgPSBbXTtcblxuLyoqXG4gKiBFbnF1ZXVlcyBtYXJrdXAgdG8gYmUgcmVuZGVyZWQgYW5kIGluc2VydGVkIGF0IGEgc3VwcGxpZWQgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZU1hcmt1cChwYXJlbnRJRCwgbWFya3VwLCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUCxcbiAgICBtYXJrdXBJbmRleDogbWFya3VwUXVldWUucHVzaChtYXJrdXApIC0gMSxcbiAgICB0ZXh0Q29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBtb3ZpbmcgYW4gZXhpc3RpbmcgZWxlbWVudCB0byBhbm90aGVyIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggU291cmNlIGluZGV4IG9mIHRoZSBleGlzdGluZyBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlTW92ZShwYXJlbnRJRCwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICB0ZXh0Q29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGZyb21JbmRleCxcbiAgICB0b0luZGV4OiB0b0luZGV4XG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHJlbW92aW5nIGFuIGVsZW1lbnQgYXQgYW4gaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCB0byByZW1vdmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlUmVtb3ZlKHBhcmVudElELCBmcm9tSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERSxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICB0ZXh0Q29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGZyb21JbmRleCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIHNldHRpbmcgdGhlIHRleHQgY29udGVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dENvbnRlbnQgVGV4dCBjb250ZW50IHRvIHNldC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVUZXh0Q29udGVudChwYXJlbnRJRCwgdGV4dENvbnRlbnQpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IHRleHRDb250ZW50LFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIFByb2Nlc3NlcyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcm9jZXNzUXVldWUoKSB7XG4gIGlmICh1cGRhdGVRdWV1ZS5sZW5ndGgpIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXMoXG4gICAgICB1cGRhdGVRdWV1ZSxcbiAgICAgIG1hcmt1cFF1ZXVlXG4gICAgKTtcbiAgICBjbGVhclF1ZXVlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJRdWV1ZSgpIHtcbiAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcbiAgbWFya3VwUXVldWUubGVuZ3RoID0gMDtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKFxuICAgICAgICBuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICB2YXIgbW91bnRJbWFnZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW25hbWVdO1xuICAgICAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgICAgICB2YXIgbW91bnRJbWFnZSA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgcm9vdElELFxuICAgICAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgIG1vdW50SW1hZ2VzLnB1c2gobW91bnRJbWFnZSk7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uKG5leHRDb250ZW50KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuKTtcbiAgICAgICAgLy8gVE9ETzogVGhlIHNldFRleHRDb250ZW50IG9wZXJhdGlvbiBzaG91bGQgYmUgZW5vdWdoXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50KG5leHRDb250ZW50KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbXByb3ZlIHBlcmZvcm1hbmNlIGJ5IGlzb2xhdGluZyB0aGlzIGhvdCBjb2RlIHBhdGggZnJvbSB0aGUgdHJ5L2NhdGNoXG4gICAgICogYmxvY2sgaW4gYHVwZGF0ZUNoaWxkcmVuYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3VwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihcbiAgICAgICAgcHJldkNoaWxkcmVuLCBuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICAgICApO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG5leHRDaGlsZHJlbjtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5hbWU7XG4gICAgICAvLyBgbmV4dEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBjaGlsZCBpbiBgbmV4dENoaWxkcmVuYCwgYnV0XG4gICAgICAvLyBgbGFzdEluZGV4YCB3aWxsIGJlIHRoZSBsYXN0IGluZGV4IHZpc2l0ZWQgaW4gYHByZXZDaGlsZHJlbmAuXG4gICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSAwO1xuICAgICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgICBpZiAocHJldkNoaWxkID09PSBuZXh0Q2hpbGQpIHtcbiAgICAgICAgICB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIG5leHRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgcHJldkNoaWxkLl9tb3VudEluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBgbGFzdEluZGV4YCBiZWZvcmUgYF9tb3VudEluZGV4YCBnZXRzIHVuc2V0IGJ5IHVubW91bnRpbmcuXG4gICAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGRCeU5hbWUocHJldkNoaWxkLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgICAgdGhpcy5fbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXgoXG4gICAgICAgICAgICBuZXh0Q2hpbGQsIG5hbWUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgICAgZm9yIChuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgICAhKG5leHRDaGlsZHJlbiAmJiBuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpKSB7XG4gICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHJlbmRlcmVkQ2hpbGRyZW4pO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBzdXBwbGllZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3ZlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0SW5kZXggTGFzdCBpbmRleCB2aXNpdGVkIG9mIHRoZSBzaWJsaW5ncyBvZiBgY2hpbGRgLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBtb3ZlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCB0b0luZGV4LCBsYXN0SW5kZXgpIHtcbiAgICAgIC8vIElmIHRoZSBpbmRleCBvZiBgY2hpbGRgIGlzIGxlc3MgdGhhbiBgbGFzdEluZGV4YCwgdGhlbiBpdCBuZWVkcyB0b1xuICAgICAgLy8gYmUgbW92ZWQuIE90aGVyd2lzZSwgd2UgZG8gbm90IG5lZWQgdG8gbW92ZSBpdCBiZWNhdXNlIGEgY2hpbGQgd2lsbCBiZVxuICAgICAgLy8gaW5zZXJ0ZWQgb3IgbW92ZWQgYmVmb3JlIGBjaGlsZGAuXG4gICAgICBpZiAoY2hpbGQuX21vdW50SW5kZXggPCBsYXN0SW5kZXgpIHtcbiAgICAgICAgZW5xdWV1ZU1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgsIHRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW91bnRJbWFnZSBNYXJrdXAgdG8gaW5zZXJ0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBjcmVhdGVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIG1vdW50SW1hZ2UpIHtcbiAgICAgIGVucXVldWVNYXJrdXAodGhpcy5fcm9vdE5vZGVJRCwgbW91bnRJbWFnZSwgY2hpbGQuX21vdW50SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgY2hpbGQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ2hpbGQgdG8gcmVtb3ZlLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIGVucXVldWVSZW1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoaXMgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzZXRUZXh0Q29udGVudDogZnVuY3Rpb24odGV4dENvbnRlbnQpIHtcbiAgICAgIGVucXVldWVUZXh0Q29udGVudCh0aGlzLl9yb290Tm9kZUlELCB0ZXh0Q29udGVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdW50cyBhIGNoaWxkIHdpdGggdGhlIHN1cHBsaWVkIG5hbWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4OiBmdW5jdGlvbihcbiAgICAgIGNoaWxkLFxuICAgICAgbmFtZSxcbiAgICAgIGluZGV4LFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICBjb250ZXh0KSB7XG4gICAgICAvLyBJbmxpbmVkIGZvciBwZXJmb3JtYW5jZSwgc2VlIGBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdElEYC5cbiAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgcm9vdElELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBtb3VudEltYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZCBieSBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIHVubW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQgaW4gYHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5gLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZEJ5TmFtZTogZnVuY3Rpb24oY2hpbGQsIG5hbWUpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBudWxsO1xuICAgIH1cblxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNdWx0aUNoaWxkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQncyBjaGlsZHJlbiBhcmUgdXBkYXRlZCwgYSBzZXJpZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdHMgYXJlIGNyZWF0ZWQgaW4gb3JkZXIgdG8gYmF0Y2ggYW5kIHNlcmlhbGl6ZSB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cbiAqXG4gKiBFbnVtZXJhdGVzIGFsbCB0aGUgcG9zc2libGUgdHlwZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICBJTlNFUlRfTUFSS1VQOiBudWxsLFxuICBNT1ZFX0VYSVNUSU5HOiBudWxsLFxuICBSRU1PVkVfTk9ERTogbnVsbCxcbiAgVEVYVF9DT05URU5UOiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcztcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoZWxlbWVudCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZWxlbWVudC50eXBlKXJldHVybiBlbGVtZW50LnR5cGU7dmFyIHRhZz1lbGVtZW50LnR5cGUsY29tcG9uZW50Q2xhc3M9dGFnVG9Db21wb25lbnRDbGFzc1t0YWddO3JldHVybiBudWxsPT1jb21wb25lbnRDbGFzcyYmKHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXT1jb21wb25lbnRDbGFzcz1hdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3ModGFnKSksY29tcG9uZW50Q2xhc3N9ZnVuY3Rpb24gY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoZ2VuZXJpY0NvbXBvbmVudENsYXNzLFwiVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXNcIixlbGVtZW50LnR5cGUpOmludmFyaWFudChnZW5lcmljQ29tcG9uZW50Q2xhc3MpLG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3MoZWxlbWVudC50eXBlLGVsZW1lbnQucHJvcHMpfWZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlRm9yVGV4dCh0ZXh0KXtyZXR1cm4gbmV3IHRleHRDb21wb25lbnRDbGFzcyh0ZXh0KX1mdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KXtyZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgdGV4dENvbXBvbmVudENsYXNzfXZhciBhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcz1udWxsLGdlbmVyaWNDb21wb25lbnRDbGFzcz1udWxsLHRhZ1RvQ29tcG9uZW50Q2xhc3M9e30sdGV4dENvbXBvbmVudENsYXNzPW51bGwsUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb249e2luamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczpmdW5jdGlvbihjb21wb25lbnRDbGFzcyl7Z2VuZXJpY0NvbXBvbmVudENsYXNzPWNvbXBvbmVudENsYXNzfSxpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6ZnVuY3Rpb24oY29tcG9uZW50Q2xhc3Mpe3RleHRDb21wb25lbnRDbGFzcz1jb21wb25lbnRDbGFzc30saW5qZWN0Q29tcG9uZW50Q2xhc3NlczpmdW5jdGlvbihjb21wb25lbnRDbGFzc2VzKXthc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcyxjb21wb25lbnRDbGFzc2VzKX0saW5qZWN0QXV0b1dyYXBwZXI6ZnVuY3Rpb24od3JhcHBlckZhY3Rvcnkpe2F1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcz13cmFwcGVyRmFjdG9yeX19LFJlYWN0TmF0aXZlQ29tcG9uZW50PXtnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQ6Z2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50LGNyZWF0ZUludGVybmFsQ29tcG9uZW50OmNyZWF0ZUludGVybmFsQ29tcG9uZW50LGNyZWF0ZUluc3RhbmNlRm9yVGV4dDpjcmVhdGVJbnN0YW5jZUZvclRleHQsaXNUZXh0Q29tcG9uZW50OmlzVGV4dENvbXBvbmVudCxpbmplY3Rpb246UmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb259O21vZHVsZS5leHBvcnRzPVJlYWN0TmF0aXZlQ29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUk9ZWFJwZG1WRGIyMXdiMjVsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmRCTEZsQmQwTkJMRk5CUVZNc05rSkJRVFJDTEZOQlEyNURMRWRCUVRSQ0xHdENRVUZxUWl4VFFVRlJMRXRCUTJwQ0xFMUJRVThzVTBGQlVTeEpRVVZxUWl4SlFVRkpMRXRCUVUwc1VVRkJVU3hMUVVOa0xHVkJRV2xDTEc5Q1FVRnZRaXhKUVVsNlF5eFBRVWh6UWl4UFFVRnNRaXhwUWtGRFJpeHZRa0ZCYjBJc1MwRkJUeXhsUVVGcFFpeDVRa0ZCZVVJc1RVRkZhRVVzWlVGVFZDeFJRVUZUTEhsQ1FVRjNRaXhUUVUwdlFpeE5RVXhETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM1pETEhOQ1FVTkJMR3RFUVVOQkxGRkJRVkVzVFVGRFRpeFZRVUZWTEhWQ1FVTlFMRWRCUVVrc2RVSkJRWE5DTEZGQlFWRXNTMEZCVFN4UlFVRlJMRTlCVDNwRUxGRkJRVk1zZFVKQlFYTkNMRTFCUXpkQ0xFMUJRVThzU1VGQlNTeHZRa0ZCYlVJc1RVRlBhRU1zVVVGQlV5eHBRa0ZCWjBJc1YwRkRka0lzVFVGQlR5eHhRa0ZCY1VJc2IwSkJPVVU1UWl4SFFVRkpMRkZCUVZNc1VVRkJVU3h0UWtGRGFrSXNWVUZCV1N4UlFVRlJMR1ZCUlhCQ0xIbENRVUV5UWl4TFFVTXpRaXh6UWtGQmQwSXNTMEZGZUVJc2RVSkJRMEVzYlVKQlFYRkNMRXRCUlhKQ0xDdENRVWRHTERSQ1FVRTJRaXhUUVVGVExHZENRVU53UXl4elFrRkJkMElzWjBKQlNURkNMSGxDUVVFd1FpeFRRVUZUTEdkQ1FVTnFReXh0UWtGQmNVSXNaMEpCU1haQ0xIVkNRVUYzUWl4VFFVRlRMR3RDUVVNdlFpeFBRVUZQTEc5Q1FVRnhRaXh0UWtGSk9VSXNhMEpCUVcxQ0xGTkJRVk1zWjBKQlF6RkNMSGxDUVVFeVFpeHBRa0Z4UkROQ0xITkNRVU5HTERSQ1FVRTJRaXcwUWtGRE4wSXNkMEpCUVhsQ0xIZENRVU42UWl4elFrRkJkVUlzYzBKQlEzWkNMR2RDUVVGcFFpeG5Ra0ZEYWtJc1ZVRkJWeXc0UWtGSFlpeFJRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UUXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlNaV0ZqZEU1aGRHbDJaVU52YlhCdmJtVnVkRnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUdGemMybG5iaUE5SUhKbGNYVnBjbVVvWENJdUwwOWlhbVZqZEM1aGMzTnBaMjVjSWlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZhVzUyWVhKcFlXNTBYQ0lwTzF4dVhHNTJZWElnWVhWMGIwZGxibVZ5WVhSbFYzSmhjSEJsY2tOc1lYTnpJRDBnYm5Wc2JEdGNiblpoY2lCblpXNWxjbWxqUTI5dGNHOXVaVzUwUTJ4aGMzTWdQU0J1ZFd4c08xeHVMeThnVkdocGN5QnlaV2RwYzNSeWVTQnJaV1Z3Y3lCMGNtRmpheUJ2WmlCM2NtRndjR1Z5SUdOc1lYTnpaWE1nWVhKdmRXNWtJRzVoZEdsMlpTQjBZV2R6WEc1MllYSWdkR0ZuVkc5RGIyMXdiMjVsYm5SRGJHRnpjeUE5SUh0OU8xeHVkbUZ5SUhSbGVIUkRiMjF3YjI1bGJuUkRiR0Z6Y3lBOUlHNTFiR3c3WEc1Y2JuWmhjaUJTWldGamRFNWhkR2wyWlVOdmJYQnZibVZ1ZEVsdWFtVmpkR2x2YmlBOUlIdGNiaUFnTHk4Z1ZHaHBjeUJoWTJObGNIUnpJR0VnWTJ4aGMzTWdkR2hoZENCeVpXTmxhWFpsY3lCMGFHVWdkR0ZuSUhOMGNtbHVaeTRnVkdocGN5QnBjeUJoSUdOaGRHTm9JR0ZzYkZ4dUlDQXZMeUIwYUdGMElHTmhiaUJ5Wlc1a1pYSWdZVzU1SUd0cGJtUWdiMllnZEdGbkxseHVJQ0JwYm1wbFkzUkhaVzVsY21salEyOXRjRzl1Wlc1MFEyeGhjM002SUdaMWJtTjBhVzl1S0dOdmJYQnZibVZ1ZEVOc1lYTnpLU0I3WEc0Z0lDQWdaMlZ1WlhKcFkwTnZiWEJ2Ym1WdWRFTnNZWE56SUQwZ1kyOXRjRzl1Wlc1MFEyeGhjM003WEc0Z0lIMHNYRzRnSUM4dklGUm9hWE1nWVdOalpYQjBjeUJoSUhSbGVIUWdZMjl0Y0c5dVpXNTBJR05zWVhOeklIUm9ZWFFnZEdGclpYTWdkR2hsSUhSbGVIUWdjM1J5YVc1bklIUnZJR0psWEc0Z0lDOHZJSEpsYm1SbGNtVmtJR0Z6SUhCeWIzQnpMbHh1SUNCcGJtcGxZM1JVWlhoMFEyOXRjRzl1Wlc1MFEyeGhjM002SUdaMWJtTjBhVzl1S0dOdmJYQnZibVZ1ZEVOc1lYTnpLU0I3WEc0Z0lDQWdkR1Y0ZEVOdmJYQnZibVZ1ZEVOc1lYTnpJRDBnWTI5dGNHOXVaVzUwUTJ4aGMzTTdYRzRnSUgwc1hHNGdJQzh2SUZSb2FYTWdZV05qWlhCMGN5QmhJR3RsZVdWa0lHOWlhbVZqZENCM2FYUm9JR05zWVhOelpYTWdZWE1nZG1Gc2RXVnpMaUJGWVdOb0lHdGxlU0J5WlhCeVpYTmxiblJ6SUdGY2JpQWdMeThnZEdGbkxpQlVhR0YwSUhCaGNuUnBZM1ZzWVhJZ2RHRm5JSGRwYkd3Z2RYTmxJSFJvYVhNZ1kyeGhjM01nYVc1emRHVmhaQ0J2WmlCMGFHVWdaMlZ1WlhKcFl5QnZibVV1WEc0Z0lHbHVhbVZqZEVOdmJYQnZibVZ1ZEVOc1lYTnpaWE02SUdaMWJtTjBhVzl1S0dOdmJYQnZibVZ1ZEVOc1lYTnpaWE1wSUh0Y2JpQWdJQ0JoYzNOcFoyNG9kR0ZuVkc5RGIyMXdiMjVsYm5SRGJHRnpjeXdnWTI5dGNHOXVaVzUwUTJ4aGMzTmxjeWs3WEc0Z0lIMHNYRzRnSUM4dklGUmxiWEJ2Y21GeWVTQm9ZV05ySUhOcGJtTmxJSGRsSUdWNGNHVmpkQ0JFVDAwZ2NtVm1jeUIwYnlCaVpXaGhkbVVnYkdsclpTQmpiMjF3YjNOcGRHVnpMRnh1SUNBdkx5Qm1iM0lnZEdocGN5QnlaV3hsWVhObExseHVJQ0JwYm1wbFkzUkJkWFJ2VjNKaGNIQmxjam9nWm5WdVkzUnBiMjRvZDNKaGNIQmxja1poWTNSdmNua3BJSHRjYmlBZ0lDQmhkWFJ2UjJWdVpYSmhkR1ZYY21Gd2NHVnlRMnhoYzNNZ1BTQjNjbUZ3Y0dWeVJtRmpkRzl5ZVR0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkhaWFFnWVNCamIyMXdiM05wZEdVZ1kyOXRjRzl1Wlc1MElIZHlZWEJ3WlhJZ1kyeGhjM01nWm05eUlHRWdjM0JsWTJsbWFXTWdkR0ZuTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZTQmxiR1Z0Wlc1MElGUm9aU0IwWVdjZ1ptOXlJSGRvYVdOb0lIUnZJR2RsZENCMGFHVWdZMnhoYzNNdVhHNGdLaUJBY21WMGRYSnVJSHRtZFc1amRHbHZibjBnVkdobElGSmxZV04wSUdOc1lYTnpJR052Ym5OMGNuVmpkRzl5SUdaMWJtTjBhVzl1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJuWlhSRGIyMXdiMjVsYm5SRGJHRnpjMFp2Y2tWc1pXMWxiblFvWld4bGJXVnVkQ2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR1ZzWlcxbGJuUXVkSGx3WlNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQmxiR1Z0Wlc1MExuUjVjR1U3WEc0Z0lIMWNiaUFnZG1GeUlIUmhaeUE5SUdWc1pXMWxiblF1ZEhsd1pUdGNiaUFnZG1GeUlHTnZiWEJ2Ym1WdWRFTnNZWE56SUQwZ2RHRm5WRzlEYjIxd2IyNWxiblJEYkdGemMxdDBZV2RkTzF4dUlDQnBaaUFvWTI5dGNHOXVaVzUwUTJ4aGMzTWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lIUmhaMVJ2UTI5dGNHOXVaVzUwUTJ4aGMzTmJkR0ZuWFNBOUlHTnZiWEJ2Ym1WdWRFTnNZWE56SUQwZ1lYVjBiMGRsYm1WeVlYUmxWM0poY0hCbGNrTnNZWE56S0hSaFp5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHTnZiWEJ2Ym1WdWRFTnNZWE56TzF4dWZWeHVYRzR2S2lwY2JpQXFJRWRsZENCaElHNWhkR2wyWlNCcGJuUmxjbTVoYkNCamIyMXdiMjVsYm5RZ1kyeGhjM01nWm05eUlHRWdjM0JsWTJsbWFXTWdkR0ZuTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZTQmxiR1Z0Wlc1MElGUm9aU0JsYkdWdFpXNTBJSFJ2SUdOeVpXRjBaUzVjYmlBcUlFQnlaWFIxY200Z2UyWjFibU4wYVc5dWZTQlVhR1VnYVc1MFpYSnVZV3dnWTJ4aGMzTWdZMjl1YzNSeWRXTjBiM0lnWm5WdVkzUnBiMjR1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR055WldGMFpVbHVkR1Z5Ym1Gc1EyOXRjRzl1Wlc1MEtHVnNaVzFsYm5RcElIdGNiaUFnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQm5aVzVsY21salEyOXRjRzl1Wlc1MFEyeGhjM01zWEc0Z0lDQWdKMVJvWlhKbElHbHpJRzV2SUhKbFoybHpkR1Z5WldRZ1kyOXRjRzl1Wlc1MElHWnZjaUIwYUdVZ2RHRm5JQ1Z6Snl4Y2JpQWdJQ0JsYkdWdFpXNTBMblI1Y0dWY2JpQWdLU0E2SUdsdWRtRnlhV0Z1ZENoblpXNWxjbWxqUTI5dGNHOXVaVzUwUTJ4aGMzTXBLVHRjYmlBZ2NtVjBkWEp1SUc1bGR5Qm5aVzVsY21salEyOXRjRzl1Wlc1MFEyeGhjM01vWld4bGJXVnVkQzUwZVhCbExDQmxiR1Z0Wlc1MExuQnliM0J6S1R0Y2JuMWNibHh1THlvcVhHNGdLaUJBY0dGeVlXMGdlMUpsWVdOMFZHVjRkSDBnZEdWNGRGeHVJQ29nUUhKbGRIVnliaUI3VW1WaFkzUkRiMjF3YjI1bGJuUjlYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVsdWMzUmhibU5sUm05eVZHVjRkQ2gwWlhoMEtTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ2RHVjRkRU52YlhCdmJtVnVkRU5zWVhOektIUmxlSFFwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRGIyMXdiMjVsYm5SOUlHTnZiWEJ2Ym1WdWRGeHVJQ29nUUhKbGRIVnliaUI3WW05dmJHVmhibjFjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5VWlhoMFEyOXRjRzl1Wlc1MEtHTnZiWEJ2Ym1WdWRDa2dlMXh1SUNCeVpYUjFjbTRnWTI5dGNHOXVaVzUwSUdsdWMzUmhibU5sYjJZZ2RHVjRkRU52YlhCdmJtVnVkRU5zWVhOek8xeHVmVnh1WEc1MllYSWdVbVZoWTNST1lYUnBkbVZEYjIxd2IyNWxiblFnUFNCN1hHNGdJR2RsZEVOdmJYQnZibVZ1ZEVOc1lYTnpSbTl5Uld4bGJXVnVkRG9nWjJWMFEyOXRjRzl1Wlc1MFEyeGhjM05HYjNKRmJHVnRaVzUwTEZ4dUlDQmpjbVZoZEdWSmJuUmxjbTVoYkVOdmJYQnZibVZ1ZERvZ1kzSmxZWFJsU1c1MFpYSnVZV3hEYjIxd2IyNWxiblFzWEc0Z0lHTnlaV0YwWlVsdWMzUmhibU5sUm05eVZHVjRkRG9nWTNKbFlYUmxTVzV6ZEdGdVkyVkdiM0pVWlhoMExGeHVJQ0JwYzFSbGVIUkRiMjF3YjI1bGJuUTZJR2x6VkdWNGRFTnZiWEJ2Ym1WdWRDeGNiaUFnYVc1cVpXTjBhVzl1T2lCU1pXRmpkRTVoZEdsMlpVTnZiWEJ2Ym1WdWRFbHVhbVZqZEdsdmJseHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkRTVoZEdsMlpVTnZiWEJ2Ym1WdWREdGNiaUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjt2YXIgaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxSZWFjdE93bmVyPXtpc1ZhbGlkT3duZXI6ZnVuY3Rpb24ob2JqZWN0KXtyZXR1cm4hKCFvYmplY3R8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG9iamVjdC5hdHRhY2hSZWZ8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG9iamVjdC5kZXRhY2hSZWYpfSxhZGRDb21wb25lbnRBc1JlZlRvOmZ1bmN0aW9uKGNvbXBvbmVudCxyZWYsb3duZXIpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSxcImFkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gVGhpcyB1c3VhbGx5IG1lYW5zIHRoYXQgeW91J3JlIHRyeWluZyB0byBhZGQgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCBkb2Vzbid0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QpLiBUcnkgcmVuZGVyaW5nIHRoaXMgY29tcG9uZW50IGluc2lkZSBvZiBhIG5ldyB0b3AtbGV2ZWwgY29tcG9uZW50IHdoaWNoIHdpbGwgaG9sZCB0aGUgcmVmLlwiKTppbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSxvd25lci5hdHRhY2hSZWYocmVmLGNvbXBvbmVudCl9LHJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbTpmdW5jdGlvbihjb21wb25lbnQscmVmLG93bmVyKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXCJyZW1vdmVDb21wb25lbnRBc1JlZkZyb20oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gVGhpcyB1c3VhbGx5IG1lYW5zIHRoYXQgeW91J3JlIHRyeWluZyB0byByZW1vdmUgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCBkb2Vzbid0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QpLiBUcnkgcmVuZGVyaW5nIHRoaXMgY29tcG9uZW50IGluc2lkZSBvZiBhIG5ldyB0b3AtbGV2ZWwgY29tcG9uZW50IHdoaWNoIHdpbGwgaG9sZCB0aGUgcmVmLlwiKTppbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSxvd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnNbcmVmXT09PWNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpJiZvd25lci5kZXRhY2hSZWYocmVmKX19O21vZHVsZS5leHBvcnRzPVJlYWN0T3duZXI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZVbVZoWTNSUGQyNWxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlYwRXNXVUZGUVN4SlFVRkpMRmRCUVZrc1VVRkJVU3hsUVdkRGNFSXNXVUZQUml4aFFVRmpMRk5CUVZNc1VVRkRja0lzVTBGRFJ5eFJRVU15UWl4clFrRkJja0lzVVVGQlR5eFhRVUYzUkN4clFrRkJja0lzVVVGQlR5eFpRV0UxUkN4dlFrRkJjVUlzVTBGQlV5eFZRVUZYTEVsQlFVc3NUMEZETTBNc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NWVUZEZGtNc1YwRkJWeXhoUVVGaExFOUJRM2hDTEN0VVFVdEZMRlZCUVZVc1YwRkJWeXhoUVVGaExGRkJRM1JETEUxQlFVMHNWVUZCVlN4SlFVRkxMRmxCV1haQ0xIbENRVUV3UWl4VFFVRlRMRlZCUVZjc1NVRkJTeXhQUVVOb1JDeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eFhRVUZYTEdGQlFXRXNUMEZEZUVJc2RWVkJTMFVzVlVGQlZTeFhRVUZYTEdGQlFXRXNVVUZIYkVNc1RVRkJUU3h2UWtGQmIwSXNTMEZCU3l4UFFVRlRMRlZCUVZVc2NVSkJRM0JFTEUxQlFVMHNWVUZCVlN4TlFVMTBRaXhSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRFOTNibVZ5WEc0Z0tpOWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVYRzR2S2lwY2JpQXFJRkpsWVdOMFQzZHVaWEp6SUdGeVpTQmpZWEJoWW14bElHOW1JSE4wYjNKcGJtY2djbVZtWlhKbGJtTmxjeUIwYnlCdmQyNWxaQ0JqYjIxd2IyNWxiblJ6TGx4dUlDcGNiaUFxSUVGc2JDQmpiMjF3YjI1bGJuUnpJR0Z5WlNCallYQmhZbXhsSUc5bUlDOHZZbVZwYm1jdkx5QnlaV1psY21WdVkyVmtJR0o1SUc5M2JtVnlJR052YlhCdmJtVnVkSE1zSUdKMWRGeHVJQ29nYjI1c2VTQlNaV0ZqZEU5M2JtVnlJR052YlhCdmJtVnVkSE1nWVhKbElHTmhjR0ZpYkdVZ2IyWWdMeTl5WldabGNtVnVZMmx1Wnk4dklHOTNibVZrSUdOdmJYQnZibVZ1ZEhNdVhHNGdLaUJVYUdVZ2JtRnRaV1FnY21WbVpYSmxibU5sSUdseklHdHViM2R1SUdGeklHRWdYQ0p5WldaY0lpNWNiaUFxWEc0Z0tpQlNaV1p6SUdGeVpTQmhkbUZwYkdGaWJHVWdkMmhsYmlCdGIzVnVkR1ZrSUdGdVpDQjFjR1JoZEdWa0lHUjFjbWx1WnlCeVpXTnZibU5wYkdsaGRHbHZiaTVjYmlBcVhHNGdLaUFnSUhaaGNpQk5lVU52YlhCdmJtVnVkQ0E5SUZKbFlXTjBMbU55WldGMFpVTnNZWE56S0h0Y2JpQXFJQ0FnSUNCeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ29nSUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFxSUNBZ0lDQWdJQ0FnUEdScGRpQnZia05zYVdOclBYdDBhR2x6TG1oaGJtUnNaVU5zYVdOcmZUNWNiaUFxSUNBZ0lDQWdJQ0FnSUNBOFEzVnpkRzl0UTI5dGNHOXVaVzUwSUhKbFpqMWNJbU4xYzNSdmJWd2lJQzgrWEc0Z0tpQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDb2dJQ0FnSUNBZ0tUdGNiaUFxSUNBZ0lDQjlMRnh1SUNvZ0lDQWdJR2hoYm1Sc1pVTnNhV05yT2lCbWRXNWpkR2x2YmlncElIdGNiaUFxSUNBZ0lDQWdJSFJvYVhNdWNtVm1jeTVqZFhOMGIyMHVhR0Z1Wkd4bFEyeHBZMnNvS1R0Y2JpQXFJQ0FnSUNCOUxGeHVJQ29nSUNBZ0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1ME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBcUlDQWdJQ0FnSUhSb2FYTXVjbVZtY3k1amRYTjBiMjB1YVc1cGRHbGhiR2w2WlNncE8xeHVJQ29nSUNBZ0lIMWNiaUFxSUNBZ2ZTazdYRzRnS2x4dUlDb2dVbVZtY3lCemFHOTFiR1FnY21GeVpXeDVJR0psSUhWelpXUXVJRmRvWlc0Z2NtVm1jeUJoY21VZ2RYTmxaQ3dnZEdobGVTQnphRzkxYkdRZ2IyNXNlU0JpWlNCa2IyNWxJSFJ2WEc0Z0tpQmpiMjUwY205c0lHUmhkR0VnZEdoaGRDQnBjeUJ1YjNRZ2FHRnVaR3hsWkNCaWVTQlNaV0ZqZENkeklHUmhkR0VnWm14dmR5NWNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1VtVmhZM1JQZDI1bGNseHVJQ292WEc1MllYSWdVbVZoWTNSUGQyNWxjaUE5SUh0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHMvYjJKcVpXTjBmU0J2WW1wbFkzUmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1ltOXZiR1ZoYm4wZ1ZISjFaU0JwWmlCZ2IySnFaV04wWUNCcGN5QmhJSFpoYkdsa0lHOTNibVZ5TGx4dUlDQWdLaUJBWm1sdVlXeGNiaUFnSUNvdlhHNGdJR2x6Vm1Gc2FXUlBkMjVsY2pvZ1puVnVZM1JwYjI0b2IySnFaV04wS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoS0Z4dUlDQWdJQ0FnS0c5aWFtVmpkQ0FtSmx4dUlDQWdJQ0FnZEhsd1pXOW1JRzlpYW1WamRDNWhkSFJoWTJoU1pXWWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdkSGx3Wlc5bUlHOWlhbVZqZEM1a1pYUmhZMmhTWldZZ1BUMDlJQ2RtZFc1amRHbHZiaWNwWEc0Z0lDQWdLVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1FXUmtjeUJoSUdOdmJYQnZibVZ1ZENCaWVTQnlaV1lnZEc4Z1lXNGdiM2R1WlhJZ1kyOXRjRzl1Wlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZTQmpiMjF3YjI1bGJuUWdRMjl0Y0c5dVpXNTBJSFJ2SUhKbFptVnlaVzVqWlM1Y2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEpsWmlCT1lXMWxJR0o1SUhkb2FXTm9JSFJ2SUhKbFptVnlJSFJ2SUhSb1pTQmpiMjF3YjI1bGJuUXVYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JQZDI1bGNuMGdiM2R1WlhJZ1EyOXRjRzl1Wlc1MElHOXVJSGRvYVdOb0lIUnZJSEpsWTI5eVpDQjBhR1VnY21WbUxseHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0JoWkdSRGIyMXdiMjVsYm5SQmMxSmxabFJ2T2lCbWRXNWpkR2x2YmloamIyMXdiMjVsYm5Rc0lISmxaaXdnYjNkdVpYSXBJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ1VtVmhZM1JQZDI1bGNpNXBjMVpoYkdsa1QzZHVaWElvYjNkdVpYSXBMRnh1SUNBZ0lDQWdKMkZrWkVOdmJYQnZibVZ1ZEVGelVtVm1WRzhvTGk0dUtUb2dUMjVzZVNCaElGSmxZV04wVDNkdVpYSWdZMkZ1SUdoaGRtVWdjbVZtY3k0Z1ZHaHBjeUFuSUN0Y2JpQWdJQ0FnSUNkMWMzVmhiR3g1SUcxbFlXNXpJSFJvWVhRZ2VXOTFYRnduY21VZ2RISjVhVzVuSUhSdklHRmtaQ0JoSUhKbFppQjBieUJoSUdOdmJYQnZibVZ1ZENCMGFHRjBJQ2NnSzF4dUlDQWdJQ0FnSjJSdlpYTnVYRnduZENCb1lYWmxJR0Z1SUc5M2JtVnlJQ2gwYUdGMElHbHpMQ0IzWVhNZ2JtOTBJR055WldGMFpXUWdhVzV6YVdSbElHOW1JR0Z1YjNSb1pYSWdKeUFyWEc0Z0lDQWdJQ0FuWTI5dGNHOXVaVzUwWEZ3bmN5QmdjbVZ1WkdWeVlDQnRaWFJvYjJRcExpQlVjbmtnY21WdVpHVnlhVzVuSUhSb2FYTWdZMjl0Y0c5dVpXNTBJR2x1YzJsa1pTQnZaaUFuSUN0Y2JpQWdJQ0FnSUNkaElHNWxkeUIwYjNBdGJHVjJaV3dnWTI5dGNHOXVaVzUwSUhkb2FXTm9JSGRwYkd3Z2FHOXNaQ0IwYUdVZ2NtVm1MaWRjYmlBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0ZKbFlXTjBUM2R1WlhJdWFYTldZV3hwWkU5M2JtVnlLRzkzYm1WeUtTa3BPMXh1SUNBZ0lHOTNibVZ5TG1GMGRHRmphRkpsWmloeVpXWXNJR052YlhCdmJtVnVkQ2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiVzkyWlhNZ1lTQmpiMjF3YjI1bGJuUWdZbmtnY21WbUlHWnliMjBnWVc0Z2IzZHVaWElnWTI5dGNHOXVaVzUwTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCamIyMXdiMjVsYm5RZ1EyOXRjRzl1Wlc1MElIUnZJR1JsY21WbVpYSmxibU5sTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbVZtSUU1aGJXVWdiMllnZEdobElISmxaaUIwYnlCeVpXMXZkbVV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSUGQyNWxjbjBnYjNkdVpYSWdRMjl0Y0c5dVpXNTBJRzl1SUhkb2FXTm9JSFJvWlNCeVpXWWdhWE1nY21WamIzSmtaV1F1WEc0Z0lDQXFJRUJtYVc1aGJGeHVJQ0FnS2lCQWFXNTBaWEp1WVd4Y2JpQWdJQ292WEc0Z0lISmxiVzkyWlVOdmJYQnZibVZ1ZEVGelVtVm1Sbkp2YlRvZ1puVnVZM1JwYjI0b1kyOXRjRzl1Wlc1MExDQnlaV1lzSUc5M2JtVnlLU0I3WEc0Z0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lGSmxZV04wVDNkdVpYSXVhWE5XWVd4cFpFOTNibVZ5S0c5M2JtVnlLU3hjYmlBZ0lDQWdJQ2R5WlcxdmRtVkRiMjF3YjI1bGJuUkJjMUpsWmtaeWIyMG9MaTR1S1RvZ1QyNXNlU0JoSUZKbFlXTjBUM2R1WlhJZ1kyRnVJR2hoZG1VZ2NtVm1jeTRnVkdocGN5QW5JQ3RjYmlBZ0lDQWdJQ2QxYzNWaGJHeDVJRzFsWVc1eklIUm9ZWFFnZVc5MVhGd25jbVVnZEhKNWFXNW5JSFJ2SUhKbGJXOTJaU0JoSUhKbFppQjBieUJoSUdOdmJYQnZibVZ1ZENCMGFHRjBJQ2NnSzF4dUlDQWdJQ0FnSjJSdlpYTnVYRnduZENCb1lYWmxJR0Z1SUc5M2JtVnlJQ2gwYUdGMElHbHpMQ0IzWVhNZ2JtOTBJR055WldGMFpXUWdhVzV6YVdSbElHOW1JR0Z1YjNSb1pYSWdKeUFyWEc0Z0lDQWdJQ0FuWTI5dGNHOXVaVzUwWEZ3bmN5QmdjbVZ1WkdWeVlDQnRaWFJvYjJRcExpQlVjbmtnY21WdVpHVnlhVzVuSUhSb2FYTWdZMjl0Y0c5dVpXNTBJR2x1YzJsa1pTQnZaaUFuSUN0Y2JpQWdJQ0FnSUNkaElHNWxkeUIwYjNBdGJHVjJaV3dnWTI5dGNHOXVaVzUwSUhkb2FXTm9JSGRwYkd3Z2FHOXNaQ0IwYUdVZ2NtVm1MaWRjYmlBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0ZKbFlXTjBUM2R1WlhJdWFYTldZV3hwWkU5M2JtVnlLRzkzYm1WeUtTa3BPMXh1SUNBZ0lDOHZJRU5vWldOcklIUm9ZWFFnWUdOdmJYQnZibVZ1ZEdBZ2FYTWdjM1JwYkd3Z2RHaGxJR04xY25KbGJuUWdjbVZtSUdKbFkyRjFjMlVnZDJVZ1pHOGdibTkwSUhkaGJuUWdkRzljYmlBZ0lDQXZMeUJrWlhSaFkyZ2dkR2hsSUhKbFppQnBaaUJoYm05MGFHVnlJR052YlhCdmJtVnVkQ0J6ZEc5c1pTQnBkQzVjYmlBZ0lDQnBaaUFvYjNkdVpYSXVaMlYwVUhWaWJHbGpTVzV6ZEdGdVkyVW9LUzV5WldaelczSmxabDBnUFQwOUlHTnZiWEJ2Ym1WdWRDNW5aWFJRZFdKc2FXTkpibk4wWVc1alpTZ3BLU0I3WEc0Z0lDQWdJQ0J2ZDI1bGNpNWtaWFJoWTJoU1pXWW9jbVZtS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEU5M2JtVnlPMXh1SWwxOSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfbm9NZWFzdXJlKG9iak5hbWUsZm5OYW1lLGZ1bmMpe3JldHVybiBmdW5jfXZhciBSZWFjdFBlcmY9e2VuYWJsZU1lYXN1cmU6ITEsc3RvcmVkTWVhc3VyZTpfbm9NZWFzdXJlLG1lYXN1cmVNZXRob2RzOmZ1bmN0aW9uKG9iamVjdCxvYmplY3ROYW1lLG1ldGhvZE5hbWVzKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKWZvcih2YXIga2V5IGluIG1ldGhvZE5hbWVzKW1ldGhvZE5hbWVzLmhhc093blByb3BlcnR5KGtleSkmJihvYmplY3Rba2V5XT1SZWFjdFBlcmYubWVhc3VyZShvYmplY3ROYW1lLG1ldGhvZE5hbWVzW2tleV0sb2JqZWN0W2tleV0pKX0sbWVhc3VyZTpmdW5jdGlvbihvYmpOYW1lLGZuTmFtZSxmdW5jKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbWVhc3VyZWRGdW5jPW51bGwsd3JhcHBlcj1mdW5jdGlvbigpe3JldHVybiBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZT8obWVhc3VyZWRGdW5jfHwobWVhc3VyZWRGdW5jPVJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlKG9iak5hbWUsZm5OYW1lLGZ1bmMpKSxtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcyxhcmd1bWVudHMpKTpmdW5jLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cmV0dXJuIHdyYXBwZXIuZGlzcGxheU5hbWU9b2JqTmFtZStcIl9cIitmbk5hbWUsd3JhcHBlcn1yZXR1cm4gZnVuY30saW5qZWN0aW9uOntpbmplY3RNZWFzdXJlOmZ1bmN0aW9uKG1lYXN1cmUpe1JlYWN0UGVyZi5zdG9yZWRNZWFzdXJlPW1lYXN1cmV9fX07bW9kdWxlLmV4cG9ydHM9UmVhY3RQZXJmO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUlFaWEptTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRlpRU3haUVcxR1FTeFRRVUZUTEZsQlFWY3NVVUZCVXl4UFFVRlJMRTFCUTI1RExFMUJRVThzVFVFNVJWUXNSMEZCU1N4WlFVdEdMR1ZCUVdVc1JVRk5aaXhqUVVGbExGZEJUMllzWlVGQlowSXNVMEZCVXl4UFFVRlJMRmRCUVZrc1lVRkRNME1zUjBGQlNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkRMMElzU1VGQlN5eEhRVUZKTEU5QlFVOHNZVUZEVkN4WlFVRlpMR1ZCUVdVc1QwRkhhRU1zVDBGQlR5eExRVUZQTEZWQlFWVXNVVUZEZEVJc1YwRkRRU3haUVVGWkxFdEJRMW9zVDBGQlR5eFJRV05tTEZGQlFWTXNVMEZCVXl4UlFVRlRMRTlCUVZFc1RVRkRha01zUjBGQlNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWU3hEUVVONlF5eEhRVUZKTEdOQlFXVXNTMEZEWml4UlFVRlZMRmRCUTFvc1RVRkJTU3hYUVVGVkxHVkJRMUFzWlVGRFNDeGhRVUZsTEZWQlFWVXNZMEZCWXl4UlFVRlRMRTlCUVZFc1QwRkZia1FzWVVGQllTeE5RVUZOTEV0QlFVMHNXVUZGTTBJc1MwRkJTeXhOUVVGTkxFdEJRVTBzVjBGSE1VSXNUMEZFUVN4VFFVRlJMRmxCUVdNc1VVRkJWU3hKUVVGTkxFOUJReTlDTEZGQlJWUXNUVUZCVHl4UFFVZFVMRmRCU1VVc1kwRkJaU3hUUVVGVExGTkJRM1JDTEZWQlFWVXNZMEZCWjBJc1ZVRnBRbWhETEZGQlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUZKbFlXTjBVR1Z5Wmx4dUlDb2dRSFI1Y0dWamFHVmphM01nYzNSaGRHbGpMVzl1YkhsY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYmk4cUtseHVJQ29nVW1WaFkzUlFaWEptSUdseklHRWdaMlZ1WlhKaGJDQkJUMUFnYzNsemRHVnRJR1JsYzJsbmJtVmtJSFJ2SUcxbFlYTjFjbVVnY0dWeVptOXliV0Z1WTJVdUlGUm9hWE5jYmlBcUlHMXZaSFZzWlNCdmJteDVJR2hoY3lCMGFHVWdhRzl2YTNNNklITmxaU0JTWldGamRFUmxabUYxYkhSUVpYSm1JR1p2Y2lCMGFHVWdZVzVoYkhsemFYTWdkRzl2YkM1Y2JpQXFMMXh1ZG1GeUlGSmxZV04wVUdWeVppQTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFSnZiMnhsWVc0Z2RHOGdaVzVoWW14bEwyUnBjMkZpYkdVZ2JXVmhjM1Z5WlcxbGJuUXVJRk5sZENCMGJ5Qm1ZV3h6WlNCaWVTQmtaV1poZFd4MElIUnZJSEJ5WlhabGJuUmNiaUFnSUNvZ1lXTmphV1JsYm5SaGJDQnNiMmRuYVc1bklHRnVaQ0J3WlhKbUlHeHZjM011WEc0Z0lDQXFMMXh1SUNCbGJtRmliR1ZOWldGemRYSmxPaUJtWVd4elpTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1NHOXNaSE1nYjI1MGJ5QjBhR1VnYldWaGMzVnlaU0JtZFc1amRHbHZiaUJwYmlCMWMyVXVJRUo1SUdSbFptRjFiSFFzSUdSdmJpZDBJRzFsWVhOMWNtVmNiaUFnSUNvZ1lXNTVkR2hwYm1jc0lHSjFkQ0IzWlNkc2JDQnZkbVZ5Y21sa1pTQjBhR2x6SUdsbUlIZGxJR2x1YW1WamRDQmhJRzFsWVhOMWNtVWdablZ1WTNScGIyNHVYRzRnSUNBcUwxeHVJQ0J6ZEc5eVpXUk5aV0Z6ZFhKbE9pQmZibTlOWldGemRYSmxMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2IySnFaV04wWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnZZbXBsWTNST1lXMWxYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wUEhOMGNtbHVaejU5SUcxbGRHaHZaRTVoYldWelhHNGdJQ0FxTDF4dUlDQnRaV0Z6ZFhKbFRXVjBhRzlrY3pvZ1puVnVZM1JwYjI0b2IySnFaV04wTENCdlltcGxZM1JPWVcxbExDQnRaWFJvYjJST1lXMWxjeWtnZTF4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnRaWFJvYjJST1lXMWxjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzFsZEdodlpFNWhiV1Z6TG1oaGMwOTNibEJ5YjNCbGNuUjVLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdlltcGxZM1JiYTJWNVhTQTlJRkpsWVdOMFVHVnlaaTV0WldGemRYSmxLRnh1SUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRTVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdiV1YwYUc5a1RtRnRaWE5iYTJWNVhTeGNiaUFnSUNBZ0lDQWdJQ0J2WW1wbFkzUmJhMlY1WFZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWWE5sSUhSb2FYTWdkRzhnZDNKaGNDQnRaWFJvYjJSeklIbHZkU0IzWVc1MElIUnZJRzFsWVhOMWNtVXVJRnBsY204Z2IzWmxjbWhsWVdRZ2FXNGdjSEp2WkhWamRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc5aWFrNWhiV1ZjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHWnVUbUZ0WlZ4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JtZFc1alhHNGdJQ0FxSUVCeVpYUjFjbTRnZTJaMWJtTjBhVzl1ZlZ4dUlDQWdLaTljYmlBZ2JXVmhjM1Z5WlRvZ1puVnVZM1JwYjI0b2IySnFUbUZ0WlN3Z1ptNU9ZVzFsTENCbWRXNWpLU0I3WEc0Z0lDQWdhV1lnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1Zpa2dlMXh1SUNBZ0lDQWdkbUZ5SUcxbFlYTjFjbVZrUm5WdVl5QTlJRzUxYkd3N1hHNGdJQ0FnSUNCMllYSWdkM0poY0hCbGNpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9VbVZoWTNSUVpYSm1MbVZ1WVdKc1pVMWxZWE4xY21VcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXMWxZWE4xY21Wa1JuVnVZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV1ZoYzNWeVpXUkdkVzVqSUQwZ1VtVmhZM1JRWlhKbUxuTjBiM0psWkUxbFlYTjFjbVVvYjJKcVRtRnRaU3dnWm01T1lXMWxMQ0JtZFc1aktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxbFlYTjFjbVZrUm5WdVl5NWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2QzSmhjSEJsY2k1a2FYTndiR0Y1VG1GdFpTQTlJRzlpYWs1aGJXVWdLeUFuWHljZ0t5Qm1iazVoYldVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZDNKaGNIQmxjanRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTTdYRzRnSUgwc1hHNWNiaUFnYVc1cVpXTjBhVzl1T2lCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2JXVmhjM1Z5WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x1YW1WamRFMWxZWE4xY21VNklHWjFibU4wYVc5dUtHMWxZWE4xY21VcElIdGNiaUFnSUNBZ0lGSmxZV04wVUdWeVppNXpkRzl5WldSTlpXRnpkWEpsSUQwZ2JXVmhjM1Z5WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1UybHRjR3g1SUhCaGMzTmxjeUIwYUhKdmRXZG9JSFJvWlNCdFpXRnpkWEpsWkNCbWRXNWpkR2x2Yml3Z2QybDBhRzkxZENCdFpXRnpkWEpwYm1jZ2FYUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHOWlhazVoYldWY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQm1iazVoYldWY2JpQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR1oxYm1OY2JpQXFJRUJ5WlhSMWNtNGdlMloxYm1OMGFXOXVmVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmZibTlOWldGemRYSmxLRzlpYWs1aGJXVXNJR1p1VG1GdFpTd2dablZ1WXlrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WXp0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRGQmxjbVk3WEc0aVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzPXt9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcz17cHJvcDpcInByb3BcIixjb250ZXh0OlwiY29udGV4dFwiLGNoaWxkQ29udGV4dDpcImNoaWxkIGNvbnRleHRcIn0pLG1vZHVsZS5leHBvcnRzPVJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUlFjbTl3Vkhsd1pVeHZZMkYwYVc5dVRtRnRaWE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFWZEJMRmxCUlVFc1NVRkJTU3c0UWtGRlFTeG5Ra0ZCYVVJc1VVRkJVU3hKUVVGSkxGZEJReTlDTERSQ1FVTkZMRXRCUVUwc1QwRkRUaXhSUVVGVExGVkJRMVFzWVVGQll5eHJRa0ZKYkVJc1QwRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1VtVmhZM1JRY205d1ZIbHdaVXh2WTJGMGFXOXVUbUZ0WlhOY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjVPWVcxbGN5QTlJSHQ5TzF4dVhHNXBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUZKbFlXTjBVSEp2Y0ZSNWNHVk1iMk5oZEdsdmJrNWhiV1Z6SUQwZ2UxeHVJQ0FnSUhCeWIzQTZJQ2R3Y205d0p5eGNiaUFnSUNCamIyNTBaWGgwT2lBblkyOXVkR1Y0ZENjc1hHNGdJQ0FnWTJocGJHUkRiMjUwWlhoME9pQW5ZMmhwYkdRZ1kyOXVkR1Y0ZENkY2JpQWdmVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlNaV0ZqZEZCeWIzQlVlWEJsVEc5allYUnBiMjVPWVcxbGN6dGNiaUpkZlE9PSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25zXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IGtleU1pcnJvcih7XG4gIHByb3A6IG51bGwsXG4gIGNvbnRleHQ6IG51bGwsXG4gIGNoaWxkQ29udGV4dDogbnVsbFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9ucztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEZyYWdtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RGcmFnbWVudFwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHByb3BUeXBlczoge1xuICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAqXG4gKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gKlxuICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gKiAgICAgfSxcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICogICB9KTtcbiAqXG4gKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gKlxuICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAqXG4gKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKlxuICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAqICAgICAgICAgICk7XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gKiAgfSk7XG4gKlxuICogQGludGVybmFsXG4gKi9cblxudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxudmFyIGVsZW1lbnRUeXBlQ2hlY2tlciA9IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpO1xudmFyIG5vZGVUeXBlQ2hlY2tlciA9IGNyZWF0ZU5vZGVDaGVja2VyKCk7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblxuICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgZWxlbWVudDogZWxlbWVudFR5cGVDaGVja2VyLFxuICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICBub2RlOiBub2RlVHlwZUNoZWNrZXIsXG4gIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgIChcIlJlcXVpcmVkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgd2FzIG5vdCBzcGVjaWZpZWQgaW4gXCIpICtcbiAgICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLlwiKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG4gICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIGBcIiArIHByZWNpc2VUeXBlICsgXCJgIFwiKSArXG4gICAgICAgIChcInN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGBcIiArIGV4cGVjdGVkVHlwZSArIFwiYC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyhudWxsKSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdHlwZSBcIikgK1xuICAgICAgICAoXCJgXCIgKyBwcm9wVHlwZSArIFwiYCBzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgaWYgKCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhIFJlYWN0RWxlbWVudC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIHN1cHBsaWVkIHRvIFwiKSArXG4gICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGluc3RhbmNlIG9mIGBcIiArIGV4cGVjdGVkQ2xhc3NOYW1lICsgXCJgLlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IGV4cGVjdGVkVmFsdWVzW2ldKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHZhbHVlIGBcIiArIHByb3BWYWx1ZSArIFwiYCBcIikgK1xuICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgb25lIG9mIFwiICsgdmFsdWVzU3RyaW5nICsgXCIuXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIFwiKSArXG4gICAgICAgIChcImBcIiArIHByb3BUeXBlICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGFuIG9iamVjdC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJvcFR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcHJvcFZhbHVlID0gUmVhY3RGcmFnbWVudC5leHRyYWN0SWZGcmFnbWVudChwcm9wVmFsdWUpO1xuICAgICAgZm9yICh2YXIgayBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc05vZGUocHJvcFZhbHVlW2tdKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiAnYXJyYXknO1xuICB9XG4gIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgcmV0dXJuICdvYmplY3QnO1xuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxuLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG5mdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlcztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFB1dExpc3RlbmVyUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbmZ1bmN0aW9uIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSgpIHtcbiAgdGhpcy5saXN0ZW5lcnNUb1B1dCA9IFtdO1xufVxuXG5hc3NpZ24oUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLnByb3RvdHlwZSwge1xuICBlbnF1ZXVlUHV0TGlzdGVuZXI6IGZ1bmN0aW9uKHJvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSkge1xuICAgIHRoaXMubGlzdGVuZXJzVG9QdXQucHVzaCh7XG4gICAgICByb290Tm9kZUlEOiByb290Tm9kZUlELFxuICAgICAgcHJvcEtleTogcHJvcEtleSxcbiAgICAgIHByb3BWYWx1ZTogcHJvcFZhbHVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcHV0TGlzdGVuZXJzOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzVG9QdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lclRvUHV0ID0gdGhpcy5saXN0ZW5lcnNUb1B1dFtpXTtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcihcbiAgICAgICAgbGlzdGVuZXJUb1B1dC5yb290Tm9kZUlELFxuICAgICAgICBsaXN0ZW5lclRvUHV0LnByb3BLZXksXG4gICAgICAgIGxpc3RlbmVyVG9QdXQucHJvcFZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNUb1B1dC5sZW5ndGggPSAwO1xuICB9LFxuXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFB1dExpc3RlbmVyUXVldWUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpO1xudmFyIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gKiBpbnB1dCkgaXMgbm90IGRpc3R1cmJlZCBieSBwZXJmb3JtaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge1NlbGVjdGlvbn0gU2VsZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuICAgKi9cbiAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxufTtcblxuLyoqXG4gKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG4gKiBoaWdoIGxldmVsIERPTSBtYW5pcHVsYXRpb25zIChsaWtlIHRlbXBvcmFyaWx5IHJlbW92aW5nIGEgdGV4dCBpbnB1dCBmcm9tIHRoZVxuICogRE9NKS5cbiAqL1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuICAgKiB0aGUgcmVjb25jaWxpYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJldmlvdXNseUVuYWJsZWQgRW5hYmxlZCBzdGF0dXMgb2ZcbiAgICogICBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmUgdGhlIHJlY29uY2lsaWF0aW9uIG9jY3VyZWQuIGBjbG9zZWBcbiAgICogICByZXN0b3JlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24ocHJldmlvdXNseUVuYWJsZWQpIHtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBxdWV1ZSBmb3IgY29sbGVjdGluZyBgY29tcG9uZW50RGlkTW91bnRgIGFuZFxuICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFmdGVyIERPTSBpcyBmbHVzaGVkLCBpbnZva2UgYWxsIHJlZ2lzdGVyZWQgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcy5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5wdXRMaXN0ZW5lcnMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuICBQVVRfTElTVEVORVJfUVVFVUVJTkcsXG4gIFNFTEVDVElPTl9SRVNUT1JBVElPTixcbiAgRVZFTlRfU1VQUFJFU1NJT04sXG4gIE9OX0RPTV9SRUFEWV9RVUVVRUlOR1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHk6XG4gKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuICogLSBTdXBwcmVzc2VzIGV2ZW50cy5cbiAqIC0gUmVzdG9yZXMgc2VsZWN0aW9uIHJhbmdlLlxuICpcbiAqIEZ1dHVyZTpcbiAqIC0gUmVzdG9yZSBkb2N1bWVudC9vdmVyZmxvdyBzY3JvbGwgcG9zaXRpb25zIHRoYXQgd2VyZSB1bmludGVudGlvbmFsbHlcbiAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG4gKiAtIEltcGxlbWVudC9pbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGNvbnN0cmFpbnQgYmFzZWQgbGF5b3V0IHN5c3RlbSBhbmQga2VlcFxuICogICB0cmFjayBvZiB3aGljaCBkaW1lbnNpb25zIG11c3QgYmUgcmVtZWFzdXJlZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICovXG5mdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIC8vIE9ubHkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHJlYWxseSBuZWVkcyB0aGlzIG9wdGlvbiAoc2VlXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbmAgaW5zdGVhZC4gVGhpcyBvcHRpb24gaXMgaGVyZSBzbyB0aGF0IGl0J3NcbiAgLy8gYWNjZXNzaWJsZSBhbmQgZGVmYXVsdHMgdG8gZmFsc2Ugd2hlbiBgUmVhY3RET01Db21wb25lbnRgIGFuZFxuICAvLyBgUmVhY3RUZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBmYWxzZTtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmdldFBvb2xlZCgpO1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXk8b2JqZWN0Pn0gTGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWVkdXJlcy5cbiAgICogICBUT0RPOiBjb252ZXJ0IHRvIGFycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICBnZXRQdXRMaXN0ZW5lclF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wdXRMaXN0ZW5lclF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXN1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMucmVhY3RNb3VudFJlYWR5KTtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG5cbiAgICBSZWFjdFB1dExpc3RlbmVyUXVldWUucmVsZWFzZSh0aGlzLnB1dExpc3RlbmVyUXVldWUpO1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IG51bGw7XG4gIH1cbn07XG5cblxuYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhdHRhY2hSZWZzKCl7UmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLHRoaXMuX2N1cnJlbnRFbGVtZW50KX12YXIgUmVhY3RSZWY9cmVxdWlyZShcIi4vUmVhY3RSZWZcIiksUmVhY3RFbGVtZW50VmFsaWRhdG9yPXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKSxSZWFjdFJlY29uY2lsZXI9e21vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2Uscm9vdElELHRyYW5zYWN0aW9uLGNvbnRleHQpe3ZhciBtYXJrdXA9aW50ZXJuYWxJbnN0YW5jZS5tb3VudENvbXBvbmVudChyb290SUQsdHJhbnNhY3Rpb24sY29udGV4dCk7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyhpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCksdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLGludGVybmFsSW5zdGFuY2UpLG1hcmt1cH0sdW5tb3VudENvbXBvbmVudDpmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKXtSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UsaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQpLGludGVybmFsSW5zdGFuY2UudW5tb3VudENvbXBvbmVudCgpfSxyZWNlaXZlQ29tcG9uZW50OmZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsbmV4dEVsZW1lbnQsdHJhbnNhY3Rpb24sY29udGV4dCl7dmFyIHByZXZFbGVtZW50PWludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O2lmKG5leHRFbGVtZW50IT09cHJldkVsZW1lbnR8fG51bGw9PW5leHRFbGVtZW50Ll9vd25lcil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNoZWNrQW5kV2FybkZvck11dGF0ZWRQcm9wcyhuZXh0RWxlbWVudCk7dmFyIHJlZnNDaGFuZ2VkPVJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMocHJldkVsZW1lbnQsbmV4dEVsZW1lbnQpO3JlZnNDaGFuZ2VkJiZSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UscHJldkVsZW1lbnQpLGludGVybmFsSW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudChuZXh0RWxlbWVudCx0cmFuc2FjdGlvbixjb250ZXh0KSxyZWZzQ2hhbmdlZCYmdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLGludGVybmFsSW5zdGFuY2UpfX0scGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OmZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsdHJhbnNhY3Rpb24pe2ludGVybmFsSW5zdGFuY2UucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uKX19O21vZHVsZS5leHBvcnRzPVJlYWN0UmVjb25jaWxlcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JTWldOdmJtTnBiR1Z5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRlhRU3haUVZOQkxGTkJRVk1zWTBGRFVDeFRRVUZUTEZkQlFWY3NTMEZCVFN4TFFVRkxMR2xDUVZKcVF5eEhRVUZKTEZWQlFWY3NVVUZCVVN4alFVTnVRaXh6UWtGQmQwSXNVVUZCVVN3eVFrRlZhRU1zYVVKQldVWXNaVUZCWjBJc1UwRkJVeXhwUWtGQmEwSXNUMEZCVVN4WlFVRmhMRk5CUXpsRUxFZEJRVWtzVVVGQlV5eHBRa0ZCYVVJc1pVRkJaU3hQUVVGUkxGbEJRV0VzVVVGUGJFVXNUMEZPU1N4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVlVGREwwSXNjMEpCUVhOQ0xEUkNRVU53UWl4cFFrRkJhVUlzYVVKQlIzSkNMRmxCUVZrc2NVSkJRWEZDTEZGQlFWRXNWMEZCV1N4clFrRkRPVU1zVVVGVFZDeHBRa0ZCYTBJc1UwRkJVeXhyUWtGRGVrSXNVMEZCVXl4WFFVRlhMR2xDUVVGclFpeHBRa0ZCYVVJc2FVSkJRM1pFTEdsQ1FVRnBRaXh2UWtGWmJrSXNhVUpCUVd0Q0xGTkJRMmhDTEdsQ1FVRnJRaXhaUVVGaExGbEJRV0VzVTBGRk5VTXNSMEZCU1N4aFFVRmpMR2xDUVVGcFFpeGxRVVZ1UXl4SlFVRkpMR05CUVdkQ0xHRkJRWEZETEUxQlFYUkNMRmxCUVZrc1QwRkJMME1zUTBGWFNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1ZVRkRMMElzYzBKQlFYTkNMRFJDUVVFMFFpeFpRVWR3UkN4SlFVRkpMR0ZCUVdNc1UwRkJVeXhwUWtGRGVrSXNXVUZEUVN4WlFVZEZMR05CUTBZc1UwRkJVeXhYUVVGWExHbENRVUZyUWl4aFFVZDRReXhwUWtGQmFVSXNhVUpCUVdsQ0xGbEJRV0VzV1VGQllTeFRRVVY0UkN4aFFVTkdMRmxCUVZrc2NVSkJRWEZDTEZGQlFWRXNWMEZCV1N4dlFrRlhla1FzZVVKQlFUQkNMRk5CUTNoQ0xHbENRVU5CTEdGQlJVRXNhVUpCUVdsQ0xIbENRVUY1UWl4alFVczVReXhSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JTWldGamRGSmxZMjl1WTJsc1pYSmNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJTWldGamRGSmxaaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wVW1WbVhDSXBPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRlpoYkdsa1lYUnZjbHdpS1R0Y2JseHVMeW9xWEc0Z0tpQklaV3h3WlhJZ2RHOGdZMkZzYkNCU1pXRmpkRkpsWmk1aGRIUmhZMmhTWldaeklIZHBkR2dnZEdocGN5QmpiMjF3YjNOcGRHVWdZMjl0Y0c5dVpXNTBMQ0J6Y0d4cGRDQnZkWFJjYmlBcUlIUnZJR0YyYjJsa0lHRnNiRzlqWVhScGIyNXpJR2x1SUhSb1pTQjBjbUZ1YzJGamRHbHZiaUJ0YjNWdWRDMXlaV0ZrZVNCeGRXVjFaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdZWFIwWVdOb1VtVm1jeWdwSUh0Y2JpQWdVbVZoWTNSU1pXWXVZWFIwWVdOb1VtVm1jeWgwYUdsekxDQjBhR2x6TGw5amRYSnlaVzUwUld4bGJXVnVkQ2s3WEc1OVhHNWNiblpoY2lCU1pXRmpkRkpsWTI5dVkybHNaWElnUFNCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVsdWFYUnBZV3hwZW1WeklIUm9aU0JqYjIxd2IyNWxiblFzSUhKbGJtUmxjbk1nYldGeWEzVndMQ0JoYm1RZ2NtVm5hWE4wWlhKeklHVjJaVzUwSUd4cGMzUmxibVZ5Y3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVOdmJYQnZibVZ1ZEgwZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjbTl2ZEVsRUlFUlBUU0JKUkNCdlppQjBhR1VnY205dmRDQnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMUpsWVdOMFVtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNThVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ym4wZ2RISmhibk5oWTNScGIyNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1AzTjBjbWx1WjMwZ1VtVnVaR1Z5WldRZ2JXRnlhM1Z3SUhSdklHSmxJR2x1YzJWeWRHVmtJR2x1ZEc4Z2RHaGxJRVJQVFM1Y2JpQWdJQ29nUUdacGJtRnNYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdiVzkxYm5SRGIyMXdiMjVsYm5RNklHWjFibU4wYVc5dUtHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVc0lISnZiM1JKUkN3Z2RISmhibk5oWTNScGIyNHNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnYldGeWEzVndJRDBnYVc1MFpYSnVZV3hKYm5OMFlXNWpaUzV0YjNWdWRFTnZiWEJ2Ym1WdWRDaHliMjkwU1VRc0lIUnlZVzV6WVdOMGFXOXVMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQlNaV0ZqZEVWc1pXMWxiblJXWVd4cFpHRjBiM0l1WTJobFkydEJibVJYWVhKdVJtOXlUWFYwWVhSbFpGQnliM0J6S0Z4dUlDQWdJQ0FnSUNCcGJuUmxjbTVoYkVsdWMzUmhibU5sTGw5amRYSnlaVzUwUld4bGJXVnVkRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RISmhibk5oWTNScGIyNHVaMlYwVW1WaFkzUk5iM1Z1ZEZKbFlXUjVLQ2t1Wlc1eGRXVjFaU2hoZEhSaFkyaFNaV1p6TENCcGJuUmxjbTVoYkVsdWMzUmhibU5sS1R0Y2JpQWdJQ0J5WlhSMWNtNGdiV0Z5YTNWd08xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWld4bFlYTmxjeUJoYm5rZ2NtVnpiM1Z5WTJWeklHRnNiRzlqWVhSbFpDQmllU0JnYlc5MWJuUkRiMjF3YjI1bGJuUmdMbHh1SUNBZ0tseHVJQ0FnS2lCQVptbHVZV3hjYmlBZ0lDb2dRR2x1ZEdWeWJtRnNYRzRnSUNBcUwxeHVJQ0IxYm0xdmRXNTBRMjl0Y0c5dVpXNTBPaUJtZFc1amRHbHZiaWhwYm5SbGNtNWhiRWx1YzNSaGJtTmxLU0I3WEc0Z0lDQWdVbVZoWTNSU1pXWXVaR1YwWVdOb1VtVm1jeWhwYm5SbGNtNWhiRWx1YzNSaGJtTmxMQ0JwYm5SbGNtNWhiRWx1YzNSaGJtTmxMbDlqZFhKeVpXNTBSV3hsYldWdWRDazdYRzRnSUNBZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlM1MWJtMXZkVzUwUTI5dGNHOXVaVzUwS0NrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ3WkdGMFpTQmhJR052YlhCdmJtVnVkQ0IxYzJsdVp5QmhJRzVsZHlCbGJHVnRaVzUwTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTI5dGNHOXVaVzUwZlNCcGJuUmxjbTVoYkVsdWMzUmhibU5sWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRmJHVnRaVzUwZlNCdVpYaDBSV3hsYldWdWRGeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JqYjI1MFpYaDBYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdjbVZqWldsMlpVTnZiWEJ2Ym1WdWREb2dablZ1WTNScGIyNG9YRzRnSUNBZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlN3Z2JtVjRkRVZzWlcxbGJuUXNJSFJ5WVc1ellXTjBhVzl1TENCamIyNTBaWGgwWEc0Z0lDa2dlMXh1SUNBZ0lIWmhjaUJ3Y21WMlJXeGxiV1Z1ZENBOUlHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVdVgyTjFjbkpsYm5SRmJHVnRaVzUwTzF4dVhHNGdJQ0FnYVdZZ0tHNWxlSFJGYkdWdFpXNTBJRDA5UFNCd2NtVjJSV3hsYldWdWRDQW1KaUJ1WlhoMFJXeGxiV1Z1ZEM1ZmIzZHVaWElnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnTHk4Z1UybHVZMlVnWld4bGJXVnVkSE1nWVhKbElHbHRiWFYwWVdKc1pTQmhablJsY2lCMGFHVWdiM2R1WlhJZ2FYTWdjbVZ1WkdWeVpXUXNYRzRnSUNBZ0lDQXZMeUIzWlNCallXNGdaRzhnWVNCamFHVmhjQ0JwWkdWdWRHbDBlU0JqYjIxd1lYSmxJR2hsY21VZ2RHOGdaR1YwWlhKdGFXNWxJR2xtSUhSb2FYTWdhWE1nWVZ4dUlDQWdJQ0FnTHk4Z2MzVndaWEptYkhWdmRYTWdjbVZqYjI1amFXeGxMaUJKZENkeklIQnZjM05wWW14bElHWnZjaUJ6ZEdGMFpTQjBieUJpWlNCdGRYUmhZbXhsSUdKMWRDQnpkV05vWEc0Z0lDQWdJQ0F2THlCamFHRnVaMlVnYzJodmRXeGtJSFJ5YVdkblpYSWdZVzRnZFhCa1lYUmxJRzltSUhSb1pTQnZkMjVsY2lCM2FHbGphQ0IzYjNWc1pDQnlaV055WldGMFpWeHVJQ0FnSUNBZ0x5OGdkR2hsSUdWc1pXMWxiblF1SUZkbElHVjRjR3hwWTJsMGJIa2dZMmhsWTJzZ1ptOXlJSFJvWlNCbGVHbHpkR1Z1WTJVZ2IyWWdZVzRnYjNkdVpYSWdjMmx1WTJWY2JpQWdJQ0FnSUM4dklHbDBKM01nY0c5emMybGliR1VnWm05eUlHRnVJR1ZzWlcxbGJuUWdZM0psWVhSbFpDQnZkWFJ6YVdSbElHRWdZMjl0Y0c5emFYUmxJSFJ2SUdKbFhHNGdJQ0FnSUNBdkx5QmtaV1Z3YkhrZ2JYVjBZWFJsWkNCaGJtUWdjbVYxYzJWa0xseHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJRkpsWVdOMFJXeGxiV1Z1ZEZaaGJHbGtZWFJ2Y2k1amFHVmphMEZ1WkZkaGNtNUdiM0pOZFhSaGRHVmtVSEp2Y0hNb2JtVjRkRVZzWlcxbGJuUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5WldaelEyaGhibWRsWkNBOUlGSmxZV04wVW1WbUxuTm9iM1ZzWkZWd1pHRjBaVkpsWm5Nb1hHNGdJQ0FnSUNCd2NtVjJSV3hsYldWdWRDeGNiaUFnSUNBZ0lHNWxlSFJGYkdWdFpXNTBYRzRnSUNBZ0tUdGNibHh1SUNBZ0lHbG1JQ2h5WldaelEyaGhibWRsWkNrZ2UxeHVJQ0FnSUNBZ1VtVmhZM1JTWldZdVpHVjBZV05vVW1WbWN5aHBiblJsY201aGJFbHVjM1JoYm1ObExDQndjbVYyUld4bGJXVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhVzUwWlhKdVlXeEpibk4wWVc1alpTNXlaV05sYVhabFEyOXRjRzl1Wlc1MEtHNWxlSFJGYkdWdFpXNTBMQ0IwY21GdWMyRmpkR2x2Yml3Z1kyOXVkR1Y0ZENrN1hHNWNiaUFnSUNCcFppQW9jbVZtYzBOb1lXNW5aV1FwSUh0Y2JpQWdJQ0FnSUhSeVlXNXpZV04wYVc5dUxtZGxkRkpsWVdOMFRXOTFiblJTWldGa2VTZ3BMbVZ1Y1hWbGRXVW9ZWFIwWVdOb1VtVm1jeXdnYVc1MFpYSnVZV3hKYm5OMFlXNWpaU2s3WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCR2JIVnphQ0JoYm5rZ1pHbHlkSGtnWTJoaGJtZGxjeUJwYmlCaElHTnZiWEJ2Ym1WdWRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdhVzUwWlhKdVlXeEpibk4wWVc1alpWeHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjU5SUhSeVlXNXpZV04wYVc5dVhHNGdJQ0FxSUVCcGJuUmxjbTVoYkZ4dUlDQWdLaTljYmlBZ2NHVnlabTl5YlZWd1pHRjBaVWxtVG1WalpYTnpZWEo1T2lCbWRXNWpkR2x2YmloY2JpQWdJQ0JwYm5SbGNtNWhiRWx1YzNSaGJtTmxMRnh1SUNBZ0lIUnlZVzV6WVdOMGFXOXVYRzRnSUNrZ2UxeHVJQ0FnSUdsdWRHVnlibUZzU1c1emRHRnVZMlV1Y0dWeVptOXliVlZ3WkdGMFpVbG1UbVZqWlhOellYSjVLSFJ5WVc1ellXTjBhVzl1S1R0Y2JpQWdmVnh1WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsWVdOMFVtVmpiMjVqYVd4bGNqdGNiaUpkZlE9PSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlZlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdE93bmVyXCIpO1xuXG52YXIgUmVhY3RSZWYgPSB7fTtcblxuZnVuY3Rpb24gYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyhjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYobnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKGNvbXBvbmVudCwgcmVmLCBvd25lcik7XG4gIH1cbn1cblxuUmVhY3RSZWYuYXR0YWNoUmVmcyA9IGZ1bmN0aW9uKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgYXR0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgfVxufTtcblxuUmVhY3RSZWYuc2hvdWxkVXBkYXRlUmVmcyA9IGZ1bmN0aW9uKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICAvLyBJZiBlaXRoZXIgdGhlIG93bmVyIG9yIGEgYHJlZmAgaGFzIGNoYW5nZWQsIG1ha2Ugc3VyZSB0aGUgbmV3ZXN0IG93bmVyXG4gIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG4gIC8vIGhhcyBmb3Jnb3R0ZW4gdGhlIHJlZmVyZW5jZSB0byBgdGhpc2AuIFdlIHVzZSB0aGUgZWxlbWVudCBpbnN0ZWFkXG4gIC8vIG9mIHRoZSBwdWJsaWMgdGhpcy5wcm9wcyBiZWNhdXNlIHRoZSBwb3N0IHByb2Nlc3NpbmcgY2Fubm90IGRldGVybWluZVxuICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cbiAgLy8gVE9ETzogU2hvdWxkIHRoaXMgZXZlbiBiZSBwb3NzaWJsZT8gVGhlIG93bmVyIGNhbm5vdCBjaGFuZ2UgYmVjYXVzZVxuICAvLyBpdCdzIGZvcmJpZGRlbiBieSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC4gVGhlIHJlZiBjYW4gY2hhbmdlXG4gIC8vIGlmIHlvdSBzd2FwIHRoZSBrZXlzIG9mIGJ1dCBub3QgdGhlIHJlZnMuIFJlY29uc2lkZXIgd2hlcmUgdGhpcyBjaGVja1xuICAvLyBpcyBtYWRlLiBJdCBwcm9iYWJseSBiZWxvbmdzIHdoZXJlIHRoZSBrZXkgY2hlY2tpbmcgYW5kXG4gIC8vIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgaXMgZG9uZS5cblxuICByZXR1cm4gKFxuICAgIG5leHRFbGVtZW50Ll9vd25lciAhPT0gcHJldkVsZW1lbnQuX293bmVyIHx8XG4gICAgbmV4dEVsZW1lbnQucmVmICE9PSBwcmV2RWxlbWVudC5yZWZcbiAgKTtcbn07XG5cblJlYWN0UmVmLmRldGFjaFJlZnMgPSBmdW5jdGlvbihpbnN0YW5jZSwgZWxlbWVudCkge1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChyZWYgIT0gbnVsbCkge1xuICAgIGRldGFjaFJlZihyZWYsIGluc3RhbmNlLCBlbGVtZW50Ll9vd25lcik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWY7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSb290SW5kZXhJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgICovXG4gIGluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbihfY3JlYXRlUmVhY3RSb290SW5kZXgpIHtcbiAgICBSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA9IF9jcmVhdGVSZWFjdFJvb3RJbmRleDtcbiAgfVxufTtcblxudmFyIFJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogbnVsbCxcbiAgaW5qZWN0aW9uOiBSZWFjdFJvb3RJbmRleEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJvb3RJbmRleDtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByZW5kZXJUb1N0cmluZyhlbGVtZW50KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksXCJyZW5kZXJUb1N0cmluZygpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LlwiKTppbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKTt2YXIgdHJhbnNhY3Rpb247dHJ5e3ZhciBpZD1SZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO3JldHVybiB0cmFuc2FjdGlvbj1SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZCghMSksdHJhbnNhY3Rpb24ucGVyZm9ybShmdW5jdGlvbigpe3ZhciBjb21wb25lbnRJbnN0YW5jZT1pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsbnVsbCksbWFya3VwPWNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLHRyYW5zYWN0aW9uLGVtcHR5T2JqZWN0KTtyZXR1cm4gUmVhY3RNYXJrdXBDaGVja3N1bS5hZGRDaGVja3N1bVRvTWFya3VwKG1hcmt1cCl9LG51bGwpfWZpbmFsbHl7UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKX19ZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWNNYXJrdXAoZWxlbWVudCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpLFwicmVuZGVyVG9TdGF0aWNNYXJrdXAoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC5cIik6aW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSk7dmFyIHRyYW5zYWN0aW9uO3RyeXt2YXIgaWQ9UmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtyZXR1cm4gdHJhbnNhY3Rpb249UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQoITApLHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKXt2YXIgY29tcG9uZW50SW5zdGFuY2U9aW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LG51bGwpO3JldHVybiBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCx0cmFuc2FjdGlvbixlbXB0eU9iamVjdCl9LG51bGwpfWZpbmFsbHl7UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKX19dmFyIFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksUmVhY3RJbnN0YW5jZUhhbmRsZXM9cmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIiksUmVhY3RNYXJrdXBDaGVja3N1bT1yZXF1aXJlKFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCIpLFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb249cmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblwiKSxlbXB0eU9iamVjdD1yZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKSxpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50PXJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTttb2R1bGUuZXhwb3J0cz17cmVuZGVyVG9TdHJpbmc6cmVuZGVyVG9TdHJpbmcscmVuZGVyVG9TdGF0aWNNYXJrdXA6cmVuZGVyVG9TdGF0aWNNYXJrdXB9O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUlRaWEoyWlhKU1pXNWtaWEpwYm1jdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmRCTEZsQlowSkJMRk5CUVZNc1owSkJRV1VzVTBGRGNrSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVlVGRGRrTXNZVUZCWVN4bFFVRmxMRk5CUXpWQ0xIbEVRVU5GTEZWQlFWVXNZVUZCWVN4bFFVRmxMRk5CUlRGRExFbEJRVWtzV1VGRFNpeExRVU5GTEVkQlFVa3NTVUZCU3l4eFFrRkJjVUlzYlVKQlJ6bENMRTlCUmtFc1lVRkJZeXhuUTBGQlowTXNWMEZCVlN4SFFVVnFSQ3haUVVGWkxGRkJRVkVzVjBGRGVrSXNSMEZCU1N4dFFrRkJiMElzTUVKQlFUQkNMRkZCUVZNc1RVRkRka1FzVDBGRFJpeHJRa0ZCYTBJc1pVRkJaU3hIUVVGSkxGbEJRV0VzV1VGRGNFUXNUMEZCVHl4eFFrRkJiMElzYjBKQlFXOUNMRk5CUXpsRExFMUJRMGdzVVVGRFFTeG5RMEZCWjBNc1VVRkJVU3hqUVZNMVF5eFJRVUZUTEhOQ1FVRnhRaXhUUVVNelFpeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eGhRVUZoTEdWQlFXVXNVMEZETlVJc0swUkJRMFVzVlVGQlZTeGhRVUZoTEdWQlFXVXNVMEZGTVVNc1NVRkJTU3haUVVOS0xFdEJRMFVzUjBGQlNTeEpRVUZMTEhGQ1FVRnhRaXh0UWtGSE9VSXNUMEZHUVN4aFFVRmpMR2REUVVGblF5eFhRVUZWTEVkQlJXcEVMRmxCUVZrc1VVRkJVU3hYUVVONlFpeEhRVUZKTEcxQ1FVRnZRaXd3UWtGQk1FSXNVVUZCVXl4TFFVTXpSQ3hQUVVGUExHMUNRVUZyUWl4bFFVRmxMRWRCUVVrc1dVRkJZU3hqUVVONFJDeE5RVU5JTEZGQlEwRXNaME5CUVdkRExGRkJRVkVzWTBGNlJEVkRMRWRCUVVrc1kwRkJaU3hSUVVGUkxHdENRVU4yUWl4eFFrRkJkVUlzVVVGQlVTd3dRa0ZETDBJc2IwSkJRWE5DTEZGQlFWRXNlVUpCUXpsQ0xHZERRVU5HTEZGQlFWRXNjVU5CUlU0c1dVRkJZeXhSUVVGUkxHbENRVU4wUWl3d1FrRkJORUlzVVVGQlVTd3JRa0ZEY0VNc1ZVRkJXU3hSUVVGUkxHTkJjVVI0UWl4UlFVRlBMRk5CUTB3c1pVRkJaMElzWlVGRGFFSXNjVUpCUVhOQ0lpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFkSGx3WldOb1pXTnJjeUJ6ZEdGMGFXTXRiMjVzZVZ4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wVTJWeWRtVnlVbVZ1WkdWeWFXNW5YRzRnS2k5Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFJXeGxiV1Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJXeGxiV1Z1ZEZ3aUtUdGNiblpoY2lCU1pXRmpkRWx1YzNSaGJtTmxTR0Z1Wkd4bGN5QTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBTVzV6ZEdGdVkyVklZVzVrYkdWelhDSXBPMXh1ZG1GeUlGSmxZV04wVFdGeWEzVndRMmhsWTJ0emRXMGdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRTFoY210MWNFTm9aV05yYzNWdFhDSXBPMXh1ZG1GeUlGSmxZV04wVTJWeWRtVnlVbVZ1WkdWeWFXNW5WSEpoYm5OaFkzUnBiMjRnUFZ4dUlDQnlaWEYxYVhKbEtGd2lMaTlTWldGamRGTmxjblpsY2xKbGJtUmxjbWx1WjFSeVlXNXpZV04wYVc5dVhDSXBPMXh1WEc1MllYSWdaVzF3ZEhsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0Z3aUxpOWxiWEIwZVU5aWFtVmpkRndpS1R0Y2JuWmhjaUJwYm5OMFlXNTBhV0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmFXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZEZ3aUtUdGNiblpoY2lCcGJuWmhjbWxoYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlwYm5aaGNtbGhiblJjSWlrN1hHNWNiaThxS2x4dUlDb2dRSEJoY21GdElIdFNaV0ZqZEVWc1pXMWxiblI5SUdWc1pXMWxiblJjYmlBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ2RHaGxJRWhVVFV3Z2JXRnlhM1Z3WEc0Z0tpOWNibVoxYm1OMGFXOXVJSEpsYm1SbGNsUnZVM1J5YVc1bktHVnNaVzFsYm5RcElIdGNiaUFnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQlNaV0ZqZEVWc1pXMWxiblF1YVhOV1lXeHBaRVZzWlcxbGJuUW9aV3hsYldWdWRDa3NYRzRnSUNBZ0ozSmxibVJsY2xSdlUzUnlhVzVuS0NrNklGbHZkU0J0ZFhOMElIQmhjM01nWVNCMllXeHBaQ0JTWldGamRFVnNaVzFsYm5RdUoxeHVJQ0FwSURvZ2FXNTJZWEpwWVc1MEtGSmxZV04wUld4bGJXVnVkQzVwYzFaaGJHbGtSV3hsYldWdWRDaGxiR1Z0Wlc1MEtTa3BPMXh1WEc0Z0lIWmhjaUIwY21GdWMyRmpkR2x2Ymp0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IyWVhJZ2FXUWdQU0JTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsY3k1amNtVmhkR1ZTWldGamRGSnZiM1JKUkNncE8xeHVJQ0FnSUhSeVlXNXpZV04wYVc5dUlEMGdVbVZoWTNSVFpYSjJaWEpTWlc1a1pYSnBibWRVY21GdWMyRmpkR2x2Ymk1blpYUlFiMjlzWldRb1ptRnNjMlVwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJ5WVc1ellXTjBhVzl1TG5CbGNtWnZjbTBvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMllYSWdZMjl0Y0c5dVpXNTBTVzV6ZEdGdVkyVWdQU0JwYm5OMFlXNTBhV0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBLR1ZzWlcxbGJuUXNJRzUxYkd3cE8xeHVJQ0FnSUNBZ2RtRnlJRzFoY210MWNDQTlYRzRnSUNBZ0lDQWdJR052YlhCdmJtVnVkRWx1YzNSaGJtTmxMbTF2ZFc1MFEyOXRjRzl1Wlc1MEtHbGtMQ0IwY21GdWMyRmpkR2x2Yml3Z1pXMXdkSGxQWW1wbFkzUXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlGSmxZV04wVFdGeWEzVndRMmhsWTJ0emRXMHVZV1JrUTJobFkydHpkVzFVYjAxaGNtdDFjQ2h0WVhKcmRYQXBPMXh1SUNBZ0lIMHNJRzUxYkd3cE8xeHVJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJRkpsWVdOMFUyVnlkbVZ5VW1WdVpHVnlhVzVuVkhKaGJuTmhZM1JwYjI0dWNtVnNaV0Z6WlNoMGNtRnVjMkZqZEdsdmJpazdYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJBY0dGeVlXMGdlMUpsWVdOMFJXeGxiV1Z1ZEgwZ1pXeGxiV1Z1ZEZ4dUlDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQjBhR1VnU0ZSTlRDQnRZWEpyZFhBc0lIZHBkR2h2ZFhRZ2RHaGxJR1Y0ZEhKaElGSmxZV04wSUVsRUlHRnVaQ0JqYUdWamEzTjFiVnh1SUNvZ0tHWnZjaUJuWlc1bGNtRjBhVzVuSUhOMFlYUnBZeUJ3WVdkbGN5bGNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtVnVaR1Z5Vkc5VGRHRjBhV05OWVhKcmRYQW9aV3hsYldWdWRDa2dlMXh1SUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJRkpsWVdOMFJXeGxiV1Z1ZEM1cGMxWmhiR2xrUld4bGJXVnVkQ2hsYkdWdFpXNTBLU3hjYmlBZ0lDQW5jbVZ1WkdWeVZHOVRkR0YwYVdOTllYSnJkWEFvS1RvZ1dXOTFJRzExYzNRZ2NHRnpjeUJoSUhaaGJHbGtJRkpsWVdOMFJXeGxiV1Z1ZEM0blhHNGdJQ2tnT2lCcGJuWmhjbWxoYm5Rb1VtVmhZM1JGYkdWdFpXNTBMbWx6Vm1Gc2FXUkZiR1Z0Wlc1MEtHVnNaVzFsYm5RcEtTazdYRzVjYmlBZ2RtRnlJSFJ5WVc1ellXTjBhVzl1TzF4dUlDQjBjbmtnZTF4dUlDQWdJSFpoY2lCcFpDQTlJRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6TG1OeVpXRjBaVkpsWVdOMFVtOXZkRWxFS0NrN1hHNGdJQ0FnZEhKaGJuTmhZM1JwYjI0Z1BTQlNaV0ZqZEZObGNuWmxjbEpsYm1SbGNtbHVaMVJ5WVc1ellXTjBhVzl1TG1kbGRGQnZiMnhsWkNoMGNuVmxLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBjbUZ1YzJGamRHbHZiaTV3WlhKbWIzSnRLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHTnZiWEJ2Ym1WdWRFbHVjM1JoYm1ObElEMGdhVzV6ZEdGdWRHbGhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDaGxiR1Z0Wlc1MExDQnVkV3hzS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqYjIxd2IyNWxiblJKYm5OMFlXNWpaUzV0YjNWdWRFTnZiWEJ2Ym1WdWRDaHBaQ3dnZEhKaGJuTmhZM1JwYjI0c0lHVnRjSFI1VDJKcVpXTjBLVHRjYmlBZ0lDQjlMQ0J1ZFd4c0tUdGNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0JTWldGamRGTmxjblpsY2xKbGJtUmxjbWx1WjFSeVlXNXpZV04wYVc5dUxuSmxiR1ZoYzJVb2RISmhibk5oWTNScGIyNHBPMXh1SUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQnlaVzVrWlhKVWIxTjBjbWx1WnpvZ2NtVnVaR1Z5Vkc5VGRISnBibWNzWEc0Z0lISmxibVJsY2xSdlUzUmhkR2xqVFdGeWEzVndPaUJ5Wlc1a1pYSlViMU4wWVhScFkwMWhjbXQxY0Z4dWZUdGNiaUpkZlE9PSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoXCIuL0NhbGxiYWNrUXVldWVcIik7XG52YXIgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RQdXRMaXN0ZW5lclF1ZXVlXCIpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgYENhbGxiYWNrUXVldWVgIHF1ZXVlIGZvciBjb2xsZWN0aW5nIGBvbkRPTVJlYWR5YCBjYWxsYmFja3NcbiAqIGR1cmluZyB0aGUgcGVyZm9ybWluZyBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZW1wdHlGdW5jdGlvblxufTtcblxudmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGVtcHR5RnVuY3Rpb25cbn07XG5cbi8qKlxuICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcbiAqIGJlaW5nIG1lbWJlciBtZXRob2RzLCBidXQgd2l0aCBhbiBpbXBsaWVkIG9yZGVyaW5nIHdoaWxlIGJlaW5nIGlzb2xhdGVkIGZyb21cbiAqIGVhY2ggb3RoZXIuXG4gKi9cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtcbiAgUFVUX0xJU1RFTkVSX1FVRVVFSU5HLFxuICBPTl9ET01fUkVBRFlfUVVFVUVJTkdcbl07XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAqL1xuZnVuY3Rpb24gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbihyZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmdldFBvb2xlZCgpO1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXl9IEVtcHR5IGxpc3Qgb2Ygb3BlcmF0aW9uIHdyYXAgcHJvY2VlZHVyZXMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcyB3aXRoLlxuICAgKi9cbiAgZ2V0UmVhY3RNb3VudFJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgZ2V0UHV0TGlzdGVuZXJRdWV1ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0TGlzdGVuZXJRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmVzdXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuXG4gICAgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLnJlbGVhc2UodGhpcy5wdXRMaXN0ZW5lclF1ZXVlKTtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBudWxsO1xuICB9XG59O1xuXG5cbmFzc2lnbihcbiAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG4gIFRyYW5zYWN0aW9uLk1peGluLFxuICBNaXhpblxuKTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb247XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKXtpbnRlcm5hbEluc3RhbmNlIT09UmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZSYmUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSl9ZnVuY3Rpb24gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLGNhbGxlck5hbWUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG51bGw9PVJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXCIlcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uIChzdWNoIGFzIHdpdGhpbiBgcmVuZGVyYCkuIFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLlwiLGNhbGxlck5hbWUpOmludmFyaWFudChudWxsPT1SZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KTt2YXIgaW50ZXJuYWxJbnN0YW5jZT1SZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7cmV0dXJuIGludGVybmFsSW5zdGFuY2U/aW50ZXJuYWxJbnN0YW5jZT09PVJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZT9udWxsOmludGVybmFsSW5zdGFuY2U6KFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoIWNhbGxlck5hbWUsXCIlcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiBUaGlzIGlzIGEgbm8tb3AuXCIsY2FsbGVyTmFtZSxjYWxsZXJOYW1lKTpudWxsKSxudWxsKX12YXIgUmVhY3RMaWZlQ3ljbGU9cmVxdWlyZShcIi4vUmVhY3RMaWZlQ3ljbGVcIiksUmVhY3RDdXJyZW50T3duZXI9cmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIiksUmVhY3RFbGVtZW50PXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKSxSZWFjdEluc3RhbmNlTWFwPXJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIiksUmVhY3RVcGRhdGVzPXJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKSxhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSxSZWFjdFVwZGF0ZVF1ZXVlPXtlbnF1ZXVlQ2FsbGJhY2s6ZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsY2FsbGJhY2spe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwiZnVuY3Rpb25cIj09dHlwZW9mIGNhbGxiYWNrLFwiZW5xdWV1ZUNhbGxiYWNrKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCwgYHJlcGxhY2VQcm9wc2AsIGBzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0IGlzbid0IGNhbGxhYmxlLlwiKTppbnZhcmlhbnQoXCJmdW5jdGlvblwiPT10eXBlb2YgY2FsbGJhY2spO3ZhciBpbnRlcm5hbEluc3RhbmNlPWdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSk7cmV0dXJuIGludGVybmFsSW5zdGFuY2UmJmludGVybmFsSW5zdGFuY2UhPT1SZWFjdExpZmVDeWNsZS5jdXJyZW50bHlNb3VudGluZ0luc3RhbmNlPyhpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzP2ludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk6aW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcz1bY2FsbGJhY2tdLHZvaWQgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKSk6bnVsbH0sZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6ZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSxjYWxsYmFjayl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoXCJmdW5jdGlvblwiPT10eXBlb2YgY2FsbGJhY2ssXCJlbnF1ZXVlQ2FsbGJhY2soLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgLCBgcmVwbGFjZVByb3BzYCwgYHNldFN0YXRlYCwgYHJlcGxhY2VTdGF0ZWAsIG9yIGBmb3JjZVVwZGF0ZWAgd2l0aCBhIGNhbGxiYWNrIHRoYXQgaXNuJ3QgY2FsbGFibGUuXCIpOmludmFyaWFudChcImZ1bmN0aW9uXCI9PXR5cGVvZiBjYWxsYmFjayksaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcz9pbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spOmludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3M9W2NhbGxiYWNrXSxlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24ocHVibGljSW5zdGFuY2Upe3ZhciBpbnRlcm5hbEluc3RhbmNlPWdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSxcImZvcmNlVXBkYXRlXCIpO2ludGVybmFsSW5zdGFuY2UmJihpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRm9yY2VVcGRhdGU9ITAsZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsY29tcGxldGVTdGF0ZSl7dmFyIGludGVybmFsSW5zdGFuY2U9Z2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLFwicmVwbGFjZVN0YXRlXCIpO2ludGVybmFsSW5zdGFuY2UmJihpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZT1bY29tcGxldGVTdGF0ZV0saW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1JlcGxhY2VTdGF0ZT0hMCxlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpKX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLHBhcnRpYWxTdGF0ZSl7dmFyIGludGVybmFsSW5zdGFuY2U9Z2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLFwic2V0U3RhdGVcIik7aWYoaW50ZXJuYWxJbnN0YW5jZSl7dmFyIHF1ZXVlPWludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlfHwoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWU9W10pO3F1ZXVlLnB1c2gocGFydGlhbFN0YXRlKSxlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpfX0sZW5xdWV1ZVNldFByb3BzOmZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLHBhcnRpYWxQcm9wcyl7dmFyIGludGVybmFsSW5zdGFuY2U9Z2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLFwic2V0UHJvcHNcIik7aWYoaW50ZXJuYWxJbnN0YW5jZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoaW50ZXJuYWxJbnN0YW5jZS5faXNUb3BMZXZlbCxcInNldFByb3BzKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCBvbiBhIGNvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsIGdldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lcidzIGByZW5kZXJgIG1ldGhvZCB0byBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIGFzIHByb3BzIHRvIHRoZSBjb21wb25lbnQgd2hlcmUgaXQgaXMgY3JlYXRlZC5cIik6aW52YXJpYW50KGludGVybmFsSW5zdGFuY2UuX2lzVG9wTGV2ZWwpO3ZhciBlbGVtZW50PWludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50fHxpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCxwcm9wcz1hc3NpZ24oe30sZWxlbWVudC5wcm9wcyxwYXJ0aWFsUHJvcHMpO2ludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50PVJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyhlbGVtZW50LHByb3BzKSxlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpfX0sZW5xdWV1ZVJlcGxhY2VQcm9wczpmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSxwcm9wcyl7dmFyIGludGVybmFsSW5zdGFuY2U9Z2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLFwicmVwbGFjZVByb3BzXCIpO2lmKGludGVybmFsSW5zdGFuY2Upe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGludGVybmFsSW5zdGFuY2UuX2lzVG9wTGV2ZWwsXCJyZXBsYWNlUHJvcHMoLi4uKTogWW91IGNhbGxlZCBgcmVwbGFjZVByb3BzYCBvbiBhIGNvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsIGdldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lcidzIGByZW5kZXJgIG1ldGhvZCB0byBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIGFzIHByb3BzIHRvIHRoZSBjb21wb25lbnQgd2hlcmUgaXQgaXMgY3JlYXRlZC5cIik6aW52YXJpYW50KGludGVybmFsSW5zdGFuY2UuX2lzVG9wTGV2ZWwpO3ZhciBlbGVtZW50PWludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50fHxpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudD1SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoZWxlbWVudCxwcm9wcyksZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKX19LGVucXVldWVFbGVtZW50SW50ZXJuYWw6ZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSxuZXdFbGVtZW50KXtpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudD1uZXdFbGVtZW50LGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSl9fTttb2R1bGUuZXhwb3J0cz1SZWFjdFVwZGF0ZVF1ZXVlO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2VW1WaFkzUlZjR1JoZEdWUmRXVjFaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlYwRXNXVUZaUVN4VFFVRlRMR1ZCUVdNc2EwSkJRMnBDTEcxQ1FVRnhRaXhsUVVGbExESkNRVXQwUXl4aFFVRmhMR05CUVdNc2EwSkJTUzlDTEZGQlFWTXNiVU5CUVd0RExHVkJRV2RDTEZsQlEzaEVMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlExWXNUVUZCTjBJc2EwSkJRV3RDTEZGQlEyeENMSEZLUVVkQkxGbEJRMFVzVlVGQmRVTXNUVUZCTjBJc2EwSkJRV3RDTEZGQlJXaERMRWxCUVVrc2EwSkJRVzFDTEdsQ1FVRnBRaXhKUVVGSkxHVkJRelZETEU5QlFVc3NhMEpCYVVKRUxHMUNRVUZ4UWl4bFFVRmxMRFJDUVVNdlFpeExRVWRHTEd0Q1FYQkNSQ3hsUVVGcFFpeFJRVUZSTEVsQlFVa3NWMEZKT1VJc1pVRkJhVUlzVVVGQlVTeEpRVUZKTEZOQlFWY3NVMEZEZEVNc1YwRkRSQ3d5U1VGSFFTeFhRVU5CTEZsQlEwVXNUVUZGUXl4TlFUVkRXQ3hIUVVGSkxHZENRVUZwUWl4UlFVRlJMRzlDUVVONlFpeHJRa0ZCYjBJc1VVRkJVU3gxUWtGRE5VSXNZVUZCWlN4UlFVRlJMR3RDUVVOMlFpeHBRa0ZCYlVJc1VVRkJVU3h6UWtGRE0wSXNZVUZCWlN4UlFVRlJMR3RDUVVWMlFpeFBRVUZUTEZGQlFWRXNiVUpCUTJwQ0xGVkJRVmtzVVVGQlVTeGxRVU53UWl4UlFVRlZMRkZCUVZFc1lVRnJSR3hDTEd0Q1FWVkdMR2RDUVVGcFFpeFRRVUZUTEdWQlFXZENMRlZCUTNaRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTI1Q0xHdENRVUZpTEZWQlExQXNhMHBCUjBVc1ZVRkJPRUlzYTBKQlFXSXNWVUZEY2tJc1NVRkJTU3hyUWtGQmJVSXNhME5CUVd0RExHVkJUM3BFTEU5QlFVc3NiVUpCUTBRc2JVSkJRWEZDTEdWQlFXVXNNa0pCU1hCRExHbENRVUZwUWl4clFrRkRia0lzYVVKQlFXbENMR3RDUVVGclFpeExRVUZMTEZWQlJYaERMR2xDUVVGcFFpeHRRa0ZCY1VJc1kwRk5lRU1zWlVGQll5eHRRa0ZhVEN4TlFXVllMSGRDUVVGNVFpeFRRVUZUTEdsQ1FVRnJRaXhWUVVOcVJDeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOdVFpeHJRa0ZCWWl4VlFVTlFMR3RLUVVkRkxGVkJRVGhDTEd0Q1FVRmlMRmRCUTJwQ0xHbENRVUZwUWl4clFrRkRia0lzYVVKQlFXbENMR3RDUVVGclFpeExRVUZMTEZWQlJYaERMR2xDUVVGcFFpeHRRa0ZCY1VJc1ZVRkZlRU1zWTBGQll5eHRRa0ZuUW1oQ0xHMUNRVUZ2UWl4VFFVRlRMR2RDUVVNelFpeEhRVUZKTEd0Q1FVRnRRaXhyUTBGRGNrSXNaVUZEUVN4alFVZEhMRzlDUVVsTUxHbENRVUZwUWl4eFFrRkJjMElzUlVGRmRrTXNZMEZCWXl4dlFrRmphRUlzYjBKQlFYRkNMRk5CUVZNc1pVRkJaMElzWlVGRE5VTXNSMEZCU1N4clFrRkJiVUlzYTBOQlEzSkNMR1ZCUTBFc1pVRkhSeXh2UWtGSlRDeHBRa0ZCYVVJc2IwSkJRWE5DTEdWQlEzWkRMR2xDUVVGcFFpeHpRa0ZCZFVJc1JVRkZlRU1zWTBGQll5eHZRa0ZoYUVJc1owSkJRV2xDTEZOQlFWTXNaVUZCWjBJc1kwRkRlRU1zUjBGQlNTeHJRa0ZCYlVJc2EwTkJRM0pDTEdWQlEwRXNWMEZIUml4SlFVRkxMR2xDUVVGTUxFTkJTVUVzUjBGQlNTeFBRVU5HTEdsQ1FVRnBRaXh4UWtGRGFFSXNhVUpCUVdsQ0xITkNRVU53UWl4UFFVRk5MRXRCUVVzc1kwRkZXQ3hqUVVGakxHOUNRVlZvUWl4blFrRkJhVUlzVTBGQlV5eGxRVUZuUWl4alFVTjRReXhIUVVGSkxHdENRVUZ0UWl4clEwRkRja0lzWlVGRFFTeFhRVWRHTEVsQlFVc3NhVUpCUVV3c1EwRkpReXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4VlFVTjJReXhwUWtGQmFVSXNXVUZEYWtJc01GRkJTMFVzVlVGQlZTeHBRa0ZCYVVJc1dVRkpMMElzU1VGQlNTeFRRVUZWTEdsQ1FVRnBRaXhwUWtGRGFrSXNhVUpCUVdsQ0xHZENRVU16UWl4TlFVRlJMRlZCUVZjc1VVRkJVU3hOUVVGUExHRkJRM1JETEd0Q1FVRnBRaXhuUWtGQmEwSXNZVUZCWVN4eFFrRkRPVU1zVVVGRFFTeFBRVWRHTEdOQlFXTXNiMEpCVldoQ0xHOUNRVUZ4UWl4VFFVRlRMR1ZCUVdkQ0xFOUJRelZETEVkQlFVa3NhMEpCUVcxQ0xHdERRVU55UWl4bFFVTkJMR1ZCUjBZc1NVRkJTeXhwUWtGQlRDeERRVWxETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM1pETEdsQ1FVRnBRaXhaUVVOcVFpeHJVa0ZMUlN4VlFVRlZMR2xDUVVGcFFpeFpRVWt2UWl4SlFVRkpMRk5CUVZVc2FVSkJRV2xDTEdsQ1FVTnFRaXhwUWtGQmFVSXNaVUZETDBJc2EwSkJRV2xDTEdkQ1FVRnJRaXhoUVVGaExIRkNRVU01UXl4UlFVTkJMRTlCUjBZc1kwRkJZeXh2UWtGSGFFSXNkVUpCUVhkQ0xGTkJRVk1zYVVKQlFXdENMRmxCUTJwRUxHbENRVUZwUWl4blFrRkJhMElzVjBGRGJrTXNZMEZCWXl4dFFrRkxiRUlzVVVGQlR5eFJRVUZWSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElGSmxZV04wVlhCa1lYUmxVWFZsZFdWY2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQlNaV0ZqZEV4cFptVkRlV05zWlNBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFRHbG1aVU41WTJ4bFhDSXBPMXh1ZG1GeUlGSmxZV04wUTNWeWNtVnVkRTkzYm1WeUlEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkRkWEp5Wlc1MFQzZHVaWEpjSWlrN1hHNTJZWElnVW1WaFkzUkZiR1Z0Wlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2VW1WaFkzUkZiR1Z0Wlc1MFhDSXBPMXh1ZG1GeUlGSmxZV04wU1c1emRHRnVZMlZOWVhBZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFbHVjM1JoYm1ObFRXRndYQ0lwTzF4dWRtRnlJRkpsWVdOMFZYQmtZWFJsY3lBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFZYQmtZWFJsYzF3aUtUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb1hDSXVMMDlpYW1WamRDNWhjM05wWjI1Y0lpazdYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVkbUZ5SUhkaGNtNXBibWNnUFNCeVpYRjFhWEpsS0Z3aUxpOTNZWEp1YVc1blhDSXBPMXh1WEc1bWRXNWpkR2x2YmlCbGJuRjFaWFZsVlhCa1lYUmxLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXWWdLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVWdJVDA5SUZKbFlXTjBUR2xtWlVONVkyeGxMbU4xY25KbGJuUnNlVTF2ZFc1MGFXNW5TVzV6ZEdGdVkyVXBJSHRjYmlBZ0lDQXZMeUJKWmlCM1pTZHlaU0JwYmlCaElHTnZiWEJ2Ym1WdWRGZHBiR3hOYjNWdWRDQm9ZVzVrYkdWeUxDQmtiMjRuZENCbGJuRjFaWFZsSUdFZ2NtVnlaVzVrWlhKY2JpQWdJQ0F2THlCaVpXTmhkWE5sSUZKbFlXTjBWWEJrWVhSbGN5QmhjM04xYldWeklIZGxKM0psSUdsdUlHRWdZbkp2ZDNObGNpQmpiMjUwWlhoMElDaDNhR2xqYUNCcGMxeHVJQ0FnSUM4dklIZHliMjVuSUdadmNpQnpaWEoyWlhJZ2NtVnVaR1Z5YVc1bktTQmhibVFnZDJVbmNtVWdZV0p2ZFhRZ2RHOGdaRzhnWVNCeVpXNWtaWElnWVc1NWQyRjVMbHh1SUNBZ0lDOHZJRk5sWlNCaWRXY2dhVzRnSXpFM05EQXVYRzRnSUNBZ1VtVmhZM1JWY0dSaGRHVnpMbVZ1Y1hWbGRXVlZjR1JoZEdVb2FXNTBaWEp1WVd4SmJuTjBZVzVqWlNrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwU1c1MFpYSnVZV3hKYm5OMFlXNWpaVkpsWVdSNVJtOXlWWEJrWVhSbEtIQjFZbXhwWTBsdWMzUmhibU5sTENCallXeHNaWEpPWVcxbEtTQjdYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdVbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlQU0J1ZFd4c0xGeHVJQ0FnSUNjbGN5Z3VMaTRwT2lCRFlXNXViM1FnZFhCa1lYUmxJR1IxY21sdVp5QmhiaUJsZUdsemRHbHVaeUJ6ZEdGMFpTQjBjbUZ1YzJsMGFXOXVJQ2NnSzF4dUlDQWdJQ2NvYzNWamFDQmhjeUIzYVhSb2FXNGdZSEpsYm1SbGNtQXBMaUJTWlc1a1pYSWdiV1YwYUc5a2N5QnphRzkxYkdRZ1ltVWdZU0J3ZFhKbElHWjFibU4wYVc5dUlDY2dLMXh1SUNBZ0lDZHZaaUJ3Y205d2N5QmhibVFnYzNSaGRHVXVKeXhjYmlBZ0lDQmpZV3hzWlhKT1lXMWxYRzRnSUNrZ09pQnBiblpoY21saGJuUW9VbVZoWTNSRGRYSnlaVzUwVDNkdVpYSXVZM1Z5Y21WdWRDQTlQU0J1ZFd4c0tTazdYRzVjYmlBZ2RtRnlJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVWdQU0JTWldGamRFbHVjM1JoYm1ObFRXRndMbWRsZENod2RXSnNhV05KYm5OMFlXNWpaU2s3WEc0Z0lHbG1JQ2doYVc1MFpYSnVZV3hKYm5OMFlXNWpaU2tnZTF4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJQzh2SUU5dWJIa2dkMkZ5YmlCM2FHVnVJSGRsSUdoaGRtVWdZU0JqWVd4c1pYSk9ZVzFsTGlCUGRHaGxjbmRwYzJVZ2QyVWdjMmh2ZFd4a0lHSmxJSE5wYkdWdWRDNWNiaUFnSUNBZ0lDOHZJRmRsSjNKbElIQnliMkpoWW14NUlHTmhiR3hwYm1jZ1puSnZiU0JsYm5GMVpYVmxRMkZzYkdKaFkyc3VJRmRsSUdSdmJpZDBJSGRoYm5RZ2RHOGdkMkZ5Ymx4dUlDQWdJQ0FnTHk4Z2RHaGxjbVVnWW1WallYVnpaU0IzWlNCaGJISmxZV1I1SUhkaGNtNWxaQ0JtYjNJZ2RHaGxJR052Y25KbGMzQnZibVJwYm1jZ2JHbG1aV041WTJ4bElHMWxkR2h2WkM1Y2JpQWdJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdJQ0FoWTJGc2JHVnlUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ0p5VnpLQzR1TGlrNklFTmhiaUJ2Ym14NUlIVndaR0YwWlNCaElHMXZkVzUwWldRZ2IzSWdiVzkxYm5ScGJtY2dZMjl0Y0c5dVpXNTBMaUFuSUN0Y2JpQWdJQ0FnSUNBZ0oxUm9hWE1nZFhOMVlXeHNlU0J0WldGdWN5QjViM1VnWTJGc2JHVmtJQ1Z6S0NrZ2IyNGdZVzRnZFc1dGIzVnVkR1ZrSUNjZ0sxeHVJQ0FnSUNBZ0lDQW5ZMjl0Y0c5dVpXNTBMaUJVYUdseklHbHpJR0VnYm04dGIzQXVKeXhjYmlBZ0lDQWdJQ0FnWTJGc2JHVnlUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ1kyRnNiR1Z5VG1GdFpWeHVJQ0FnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hwYm5SbGNtNWhiRWx1YzNSaGJtTmxJRDA5UFNCU1pXRmpkRXhwWm1WRGVXTnNaUzVqZFhKeVpXNTBiSGxWYm0xdmRXNTBhVzVuU1c1emRHRnVZMlVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCcGJuUmxjbTVoYkVsdWMzUmhibU5sTzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsWVdOMFZYQmtZWFJsVVhWbGRXVWdZV3hzYjNkeklHWnZjaUJ6ZEdGMFpTQjFjR1JoZEdWeklIUnZJR0psSUhOamFHVmtkV3hsWkNCcGJuUnZJR0VnYkdGMFpYSmNiaUFxSUhKbFkyOXVZMmxzYVdGMGFXOXVJSE4wWlhBdVhHNGdLaTljYm5aaGNpQlNaV0ZqZEZWd1pHRjBaVkYxWlhWbElEMGdlMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkZibkYxWlhWbElHRWdZMkZzYkdKaFkyc2dkR2hoZENCM2FXeHNJR0psSUdWNFpXTjFkR1ZrSUdGbWRHVnlJR0ZzYkNCMGFHVWdjR1Z1WkdsdVp5QjFjR1JoZEdWelhHNGdJQ0FxSUdoaGRtVWdjSEp2WTJWemMyVmtMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBRMnhoYzNOOUlIQjFZbXhwWTBsdWMzUmhibU5sSUZSb1pTQnBibk4wWVc1alpTQjBieUIxYzJVZ1lYTWdZSFJvYVhOZ0lHTnZiblJsZUhRdVhHNGdJQ0FxSUVCd1lYSmhiU0I3UDJaMWJtTjBhVzl1ZlNCallXeHNZbUZqYXlCRFlXeHNaV1FnWVdaMFpYSWdjM1JoZEdVZ2FYTWdkWEJrWVhSbFpDNWNiaUFnSUNvZ1FHbHVkR1Z5Ym1Gc1hHNGdJQ0FxTDF4dUlDQmxibkYxWlhWbFEyRnNiR0poWTJzNklHWjFibU4wYVc5dUtIQjFZbXhwWTBsdWMzUmhibU5sTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdJQ0IwZVhCbGIyWWdZMkZzYkdKaFkyc2dQVDA5SUNkbWRXNWpkR2x2Ymljc1hHNGdJQ0FnSUNBblpXNXhkV1YxWlVOaGJHeGlZV05yS0M0dUxpazZJRmx2ZFNCallXeHNaV1FnWUhObGRGQnliM0J6WUN3Z1lISmxjR3hoWTJWUWNtOXdjMkFzSUNjZ0sxeHVJQ0FnSUNBZ0oyQnpaWFJUZEdGMFpXQXNJR0J5WlhCc1lXTmxVM1JoZEdWZ0xDQnZjaUJnWm05eVkyVlZjR1JoZEdWZ0lIZHBkR2dnWVNCallXeHNZbUZqYXlCMGFHRjBJQ2NnSzF4dUlDQWdJQ0FnSjJsemJseGNKM1FnWTJGc2JHRmliR1V1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2RIbHdaVzltSUdOaGJHeGlZV05ySUQwOVBTQW5ablZ1WTNScGIyNG5LU2s3WEc0Z0lDQWdkbUZ5SUdsdWRHVnlibUZzU1c1emRHRnVZMlVnUFNCblpYUkpiblJsY201aGJFbHVjM1JoYm1ObFVtVmhaSGxHYjNKVmNHUmhkR1VvY0hWaWJHbGpTVzV6ZEdGdVkyVXBPMXh1WEc0Z0lDQWdMeThnVUhKbGRtbHZkWE5zZVNCM1pTQjNiM1ZzWkNCMGFISnZkeUJoYmlCbGNuSnZjaUJwWmlCM1pTQmthV1J1SjNRZ2FHRjJaU0JoYmlCcGJuUmxjbTVoYkZ4dUlDQWdJQzh2SUdsdWMzUmhibU5sTGlCVGFXNWpaU0IzWlNCM1lXNTBJSFJ2SUcxaGEyVWdhWFFnWVNCdWJ5MXZjQ0JwYm5OMFpXRmtMQ0IzWlNCdGFYSnliM0lnZEdobElITmhiV1ZjYmlBZ0lDQXZMeUJpWldoaGRtbHZjaUIzWlNCb1lYWmxJR2x1SUc5MGFHVnlJR1Z1Y1hWbGRXVXFJRzFsZEdodlpITXVYRzRnSUNBZ0x5OGdWMlVnWVd4emJ5QnVaV1ZrSUhSdklHbG5ibTl5WlNCallXeHNZbUZqYTNNZ2FXNGdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBMaUJUWldWY2JpQWdJQ0F2THlCbGJuRjFaWFZsVlhCa1lYUmxjeTVjYmlBZ0lDQnBaaUFvSVdsdWRHVnlibUZzU1c1emRHRnVZMlVnZkh4Y2JpQWdJQ0FnSUNBZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlNBOVBUMGdVbVZoWTNSTWFXWmxRM2xqYkdVdVkzVnljbVZ1ZEd4NVRXOTFiblJwYm1kSmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTXBJSHRjYmlBZ0lDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTXVjSFZ6YUNoallXeHNZbUZqYXlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZERZV3hzWW1GamEzTWdQU0JiWTJGc2JHSmhZMnRkTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJVVDBSUE9pQlVhR1VnWTJGc2JHSmhZMnNnYUdWeVpTQnBjeUJwWjI1dmNtVmtJSGRvWlc0Z2MyVjBVM1JoZEdVZ2FYTWdZMkZzYkdWa0lHWnliMjFjYmlBZ0lDQXZMeUJqYjIxd2IyNWxiblJYYVd4c1RXOTFiblF1SUVWcGRHaGxjaUJtYVhnZ2FYUWdiM0lnWkdsellXeHNiM2NnWkc5cGJtY2djMjhnWTI5dGNHeGxkR1ZzZVNCcGJseHVJQ0FnSUM4dklHWmhkbTl5SUc5bUlHZGxkRWx1YVhScFlXeFRkR0YwWlM0Z1FXeDBaWEp1WVhScGRtVnNlU3dnZDJVZ1kyRnVJR1JwYzJGc2JHOTNYRzRnSUNBZ0x5OGdZMjl0Y0c5dVpXNTBWMmxzYkUxdmRXNTBJR1IxY21sdVp5QnpaWEoyWlhJdGMybGtaU0J5Wlc1a1pYSnBibWN1WEc0Z0lDQWdaVzV4ZFdWMVpWVndaR0YwWlNocGJuUmxjbTVoYkVsdWMzUmhibU5sS1R0Y2JpQWdmU3hjYmx4dUlDQmxibkYxWlhWbFEyRnNiR0poWTJ0SmJuUmxjbTVoYkRvZ1puVnVZM1JwYjI0b2FXNTBaWEp1WVd4SmJuTjBZVzVqWlN3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0Z4dUlDQWdJQ0FnZEhsd1pXOW1JR05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bkxGeHVJQ0FnSUNBZ0oyVnVjWFZsZFdWRFlXeHNZbUZqYXlndUxpNHBPaUJaYjNVZ1kyRnNiR1ZrSUdCelpYUlFjbTl3YzJBc0lHQnlaWEJzWVdObFVISnZjSE5nTENBbklDdGNiaUFnSUNBZ0lDZGdjMlYwVTNSaGRHVmdMQ0JnY21Wd2JHRmpaVk4wWVhSbFlDd2diM0lnWUdadmNtTmxWWEJrWVhSbFlDQjNhWFJvSUdFZ1kyRnNiR0poWTJzZ2RHaGhkQ0FuSUN0Y2JpQWdJQ0FnSUNkcGMyNWNYQ2QwSUdOaGJHeGhZbXhsTGlkY2JpQWdJQ0FwSURvZ2FXNTJZWEpwWVc1MEtIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdKMloxYm1OMGFXOXVKeWtwTzF4dUlDQWdJR2xtSUNocGJuUmxjbTVoYkVsdWMzUmhibU5sTGw5d1pXNWthVzVuUTJGc2JHSmhZMnR6S1NCN1hHNGdJQ0FnSUNCcGJuUmxjbTVoYkVsdWMzUmhibU5sTGw5d1pXNWthVzVuUTJGc2JHSmhZMnR6TG5CMWMyZ29ZMkZzYkdKaFkyc3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcGJuUmxjbTVoYkVsdWMzUmhibU5sTGw5d1pXNWthVzVuUTJGc2JHSmhZMnR6SUQwZ1cyTmhiR3hpWVdOclhUdGNiaUFnSUNCOVhHNGdJQ0FnWlc1eGRXVjFaVlZ3WkdGMFpTaHBiblJsY201aGJFbHVjM1JoYm1ObEtUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUm05eVkyVnpJR0Z1SUhWd1pHRjBaUzRnVkdocGN5QnphRzkxYkdRZ2IyNXNlU0JpWlNCcGJuWnZhMlZrSUhkb1pXNGdhWFFnYVhNZ2EyNXZkMjRnZDJsMGFGeHVJQ0FnS2lCalpYSjBZV2x1ZEhrZ2RHaGhkQ0IzWlNCaGNtVWdLaXB1YjNRcUtpQnBiaUJoSUVSUFRTQjBjbUZ1YzJGamRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1dXOTFJRzFoZVNCM1lXNTBJSFJ2SUdOaGJHd2dkR2hwY3lCM2FHVnVJSGx2ZFNCcmJtOTNJSFJvWVhRZ2MyOXRaU0JrWldWd1pYSWdZWE53WldOMElHOW1JSFJvWlZ4dUlDQWdLaUJqYjIxd2IyNWxiblFuY3lCemRHRjBaU0JvWVhNZ1kyaGhibWRsWkNCaWRYUWdZSE5sZEZOMFlYUmxZQ0IzWVhNZ2JtOTBJR05oYkd4bFpDNWNiaUFnSUNwY2JpQWdJQ29nVkdocGN5QjNhV3hzSUc1dmRDQnBiblp2YTJVZ1lITm9iM1ZzWkZWd1pHRjBaVU52YlhCdmJtVnVkR0FzSUdKMWRDQnBkQ0IzYVd4c0lHbHVkbTlyWlZ4dUlDQWdLaUJnWTI5dGNHOXVaVzUwVjJsc2JGVndaR0YwWldBZ1lXNWtJR0JqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1ZnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUTJ4aGMzTjlJSEIxWW14cFkwbHVjM1JoYm1ObElGUm9aU0JwYm5OMFlXNWpaU0IwYUdGMElITm9iM1ZzWkNCeVpYSmxibVJsY2k1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCbGJuRjFaWFZsUm05eVkyVlZjR1JoZEdVNklHWjFibU4wYVc5dUtIQjFZbXhwWTBsdWMzUmhibU5sS1NCN1hHNGdJQ0FnZG1GeUlHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVZ1BTQm5aWFJKYm5SbGNtNWhiRWx1YzNSaGJtTmxVbVZoWkhsR2IzSlZjR1JoZEdVb1hHNGdJQ0FnSUNCd2RXSnNhV05KYm5OMFlXNWpaU3hjYmlBZ0lDQWdJQ2RtYjNKalpWVndaR0YwWlNkY2JpQWdJQ0FwTzF4dVhHNGdJQ0FnYVdZZ0tDRnBiblJsY201aGJFbHVjM1JoYm1ObEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVc1MFpYSnVZV3hKYm5OMFlXNWpaUzVmY0dWdVpHbHVaMFp2Y21ObFZYQmtZWFJsSUQwZ2RISjFaVHRjYmx4dUlDQWdJR1Z1Y1hWbGRXVlZjR1JoZEdVb2FXNTBaWEp1WVd4SmJuTjBZVzVqWlNrN1hHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsY0d4aFkyVnpJR0ZzYkNCdlppQjBhR1VnYzNSaGRHVXVJRUZzZDJGNWN5QjFjMlVnZEdocGN5QnZjaUJnYzJWMFUzUmhkR1ZnSUhSdklHMTFkR0YwWlNCemRHRjBaUzVjYmlBZ0lDb2dXVzkxSUhOb2IzVnNaQ0IwY21WaGRDQmdkR2hwY3k1emRHRjBaV0FnWVhNZ2FXMXRkWFJoWW14bExseHVJQ0FnS2x4dUlDQWdLaUJVYUdWeVpTQnBjeUJ1YnlCbmRXRnlZVzUwWldVZ2RHaGhkQ0JnZEdocGN5NXpkR0YwWldBZ2QybHNiQ0JpWlNCcGJXMWxaR2xoZEdWc2VTQjFjR1JoZEdWa0xDQnpiMXh1SUNBZ0tpQmhZMk5sYzNOcGJtY2dZSFJvYVhNdWMzUmhkR1ZnSUdGbWRHVnlJR05oYkd4cGJtY2dkR2hwY3lCdFpYUm9iMlFnYldGNUlISmxkSFZ5YmlCMGFHVWdiMnhrSUhaaGJIVmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBRMnhoYzNOOUlIQjFZbXhwWTBsdWMzUmhibU5sSUZSb1pTQnBibk4wWVc1alpTQjBhR0YwSUhOb2IzVnNaQ0J5WlhKbGJtUmxjaTVjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHTnZiWEJzWlhSbFUzUmhkR1VnVG1WNGRDQnpkR0YwWlM1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCbGJuRjFaWFZsVW1Wd2JHRmpaVk4wWVhSbE9pQm1kVzVqZEdsdmJpaHdkV0pzYVdOSmJuTjBZVzVqWlN3Z1kyOXRjR3hsZEdWVGRHRjBaU2tnZTF4dUlDQWdJSFpoY2lCcGJuUmxjbTVoYkVsdWMzUmhibU5sSUQwZ1oyVjBTVzUwWlhKdVlXeEpibk4wWVc1alpWSmxZV1I1Um05eVZYQmtZWFJsS0Z4dUlDQWdJQ0FnY0hWaWJHbGpTVzV6ZEdGdVkyVXNYRzRnSUNBZ0lDQW5jbVZ3YkdGalpWTjBZWFJsSjF4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JwWmlBb0lXbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwYm5SbGNtNWhiRWx1YzNSaGJtTmxMbDl3Wlc1a2FXNW5VM1JoZEdWUmRXVjFaU0E5SUZ0amIyMXdiR1YwWlZOMFlYUmxYVHRjYmlBZ0lDQnBiblJsY201aGJFbHVjM1JoYm1ObExsOXdaVzVrYVc1blVtVndiR0ZqWlZOMFlYUmxJRDBnZEhKMVpUdGNibHh1SUNBZ0lHVnVjWFZsZFdWVmNHUmhkR1VvYVc1MFpYSnVZV3hKYm5OMFlXNWpaU2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkSE1nWVNCemRXSnpaWFFnYjJZZ2RHaGxJSE4wWVhSbExpQlVhR2x6SUc5dWJIa2daWGhwYzNSeklHSmxZMkYxYzJVZ1gzQmxibVJwYm1kVGRHRjBaU0JwYzF4dUlDQWdLaUJwYm5SbGNtNWhiQzRnVkdocGN5QndjbTkyYVdSbGN5QmhJRzFsY21kcGJtY2djM1J5WVhSbFoza2dkR2hoZENCcGN5QnViM1FnWVhaaGFXeGhZbXhsSUhSdklHUmxaWEJjYmlBZ0lDb2djSEp2Y0dWeWRHbGxjeUIzYUdsamFDQnBjeUJqYjI1bWRYTnBibWN1SUZSUFJFODZJRVY0Y0c5elpTQndaVzVrYVc1blUzUmhkR1VnYjNJZ1pHOXVKM1FnZFhObElHbDBYRzRnSUNBcUlHUjFjbWx1WnlCMGFHVWdiV1Z5WjJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZoWTNSRGJHRnpjMzBnY0hWaWJHbGpTVzV6ZEdGdVkyVWdWR2hsSUdsdWMzUmhibU5sSUhSb1lYUWdjMmh2ZFd4a0lISmxjbVZ1WkdWeUxseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnY0dGeWRHbGhiRk4wWVhSbElFNWxlSFFnY0dGeWRHbGhiQ0J6ZEdGMFpTQjBieUJpWlNCdFpYSm5aV1FnZDJsMGFDQnpkR0YwWlM1Y2JpQWdJQ29nUUdsdWRHVnlibUZzWEc0Z0lDQXFMMXh1SUNCbGJuRjFaWFZsVTJWMFUzUmhkR1U2SUdaMWJtTjBhVzl1S0hCMVlteHBZMGx1YzNSaGJtTmxMQ0J3WVhKMGFXRnNVM1JoZEdVcElIdGNiaUFnSUNCMllYSWdhVzUwWlhKdVlXeEpibk4wWVc1alpTQTlJR2RsZEVsdWRHVnlibUZzU1c1emRHRnVZMlZTWldGa2VVWnZjbFZ3WkdGMFpTaGNiaUFnSUNBZ0lIQjFZbXhwWTBsdWMzUmhibU5sTEZ4dUlDQWdJQ0FnSjNObGRGTjBZWFJsSjF4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JwWmlBb0lXbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2NYVmxkV1VnUFZ4dUlDQWdJQ0FnYVc1MFpYSnVZV3hKYm5OMFlXNWpaUzVmY0dWdVpHbHVaMU4wWVhSbFVYVmxkV1VnZkh4Y2JpQWdJQ0FnSUNocGJuUmxjbTVoYkVsdWMzUmhibU5sTGw5d1pXNWthVzVuVTNSaGRHVlJkV1YxWlNBOUlGdGRLVHRjYmlBZ0lDQnhkV1YxWlM1d2RYTm9LSEJoY25ScFlXeFRkR0YwWlNrN1hHNWNiaUFnSUNCbGJuRjFaWFZsVlhCa1lYUmxLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXBPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUnpJR0VnYzNWaWMyVjBJRzltSUhSb1pTQndjbTl3Y3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVOc1lYTnpmU0J3ZFdKc2FXTkpibk4wWVc1alpTQlVhR1VnYVc1emRHRnVZMlVnZEdoaGRDQnphRzkxYkdRZ2NtVnlaVzVrWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J3WVhKMGFXRnNVSEp2Y0hNZ1UzVmljMlYwSUc5bUlIUm9aU0J1WlhoMElIQnliM0J6TGx4dUlDQWdLaUJBYVc1MFpYSnVZV3hjYmlBZ0lDb3ZYRzRnSUdWdWNYVmxkV1ZUWlhSUWNtOXdjem9nWm5WdVkzUnBiMjRvY0hWaWJHbGpTVzV6ZEdGdVkyVXNJSEJoY25ScFlXeFFjbTl3Y3lrZ2UxeHVJQ0FnSUhaaGNpQnBiblJsY201aGJFbHVjM1JoYm1ObElEMGdaMlYwU1c1MFpYSnVZV3hKYm5OMFlXNWpaVkpsWVdSNVJtOXlWWEJrWVhSbEtGeHVJQ0FnSUNBZ2NIVmliR2xqU1c1emRHRnVZMlVzWEc0Z0lDQWdJQ0FuYzJWMFVISnZjSE1uWEc0Z0lDQWdLVHRjYmx4dUlDQWdJR2xtSUNnaGFXNTBaWEp1WVd4SmJuTjBZVzVqWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQnBiblJsY201aGJFbHVjM1JoYm1ObExsOXBjMVJ2Y0V4bGRtVnNMRnh1SUNBZ0lDQWdKM05sZEZCeWIzQnpLQzR1TGlrNklGbHZkU0JqWVd4c1pXUWdZSE5sZEZCeWIzQnpZQ0J2YmlCaElDY2dLMXh1SUNBZ0lDQWdKMk52YlhCdmJtVnVkQ0IzYVhSb0lHRWdjR0Z5Wlc1MExpQlVhR2x6SUdseklHRnVJR0Z1ZEdrdGNHRjBkR1Z5YmlCemFXNWpaU0J3Y205d2N5QjNhV3hzSUNjZ0sxeHVJQ0FnSUNBZ0oyZGxkQ0J5WldGamRHbDJaV3g1SUhWd1pHRjBaV1FnZDJobGJpQnlaVzVrWlhKbFpDNGdTVzV6ZEdWaFpDd2dZMmhoYm1kbElIUm9aU0J2ZDI1bGNseGNKM01nSnlBclhHNGdJQ0FnSUNBbllISmxibVJsY21BZ2JXVjBhRzlrSUhSdklIQmhjM01nZEdobElHTnZjbkpsWTNRZ2RtRnNkV1VnWVhNZ2NISnZjSE1nZEc4Z2RHaGxJR052YlhCdmJtVnVkQ0FuSUN0Y2JpQWdJQ0FnSUNkM2FHVnlaU0JwZENCcGN5QmpjbVZoZEdWa0xpZGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYMmx6Vkc5d1RHVjJaV3dwS1R0Y2JseHVJQ0FnSUM4dklFMWxjbWRsSUhkcGRHZ2dkR2hsSUhCbGJtUnBibWNnWld4bGJXVnVkQ0JwWmlCcGRDQmxlR2x6ZEhNc0lHOTBhR1Z5ZDJselpTQjNhWFJvSUdWNGFYTjBhVzVuWEc0Z0lDQWdMeThnWld4bGJXVnVkQ0J3Y205d2N5NWNiaUFnSUNCMllYSWdaV3hsYldWdWRDQTlJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZEZiR1Z0Wlc1MElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5SbGNtNWhiRWx1YzNSaGJtTmxMbDlqZFhKeVpXNTBSV3hsYldWdWREdGNiaUFnSUNCMllYSWdjSEp2Y0hNZ1BTQmhjM05wWjI0b2UzMHNJR1ZzWlcxbGJuUXVjSEp2Y0hNc0lIQmhjblJwWVd4UWNtOXdjeWs3WEc0Z0lDQWdhVzUwWlhKdVlXeEpibk4wWVc1alpTNWZjR1Z1WkdsdVowVnNaVzFsYm5RZ1BTQlNaV0ZqZEVWc1pXMWxiblF1WTJ4dmJtVkJibVJTWlhCc1lXTmxVSEp2Y0hNb1hHNGdJQ0FnSUNCbGJHVnRaVzUwTEZ4dUlDQWdJQ0FnY0hKdmNITmNiaUFnSUNBcE8xeHVYRzRnSUNBZ1pXNXhkV1YxWlZWd1pHRjBaU2hwYm5SbGNtNWhiRWx1YzNSaGJtTmxLVHRjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVndiR0ZqWlhNZ1lXeHNJRzltSUhSb1pTQndjbTl3Y3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVOc1lYTnpmU0J3ZFdKc2FXTkpibk4wWVc1alpTQlVhR1VnYVc1emRHRnVZMlVnZEdoaGRDQnphRzkxYkdRZ2NtVnlaVzVrWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J3Y205d2N5Qk9aWGNnY0hKdmNITXVYRzRnSUNBcUlFQnBiblJsY201aGJGeHVJQ0FnS2k5Y2JpQWdaVzV4ZFdWMVpWSmxjR3hoWTJWUWNtOXdjem9nWm5WdVkzUnBiMjRvY0hWaWJHbGpTVzV6ZEdGdVkyVXNJSEJ5YjNCektTQjdYRzRnSUNBZ2RtRnlJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVWdQU0JuWlhSSmJuUmxjbTVoYkVsdWMzUmhibU5sVW1WaFpIbEdiM0pWY0dSaGRHVW9YRzRnSUNBZ0lDQndkV0pzYVdOSmJuTjBZVzVqWlN4Y2JpQWdJQ0FnSUNkeVpYQnNZV05sVUhKdmNITW5YRzRnSUNBZ0tUdGNibHh1SUNBZ0lHbG1JQ2doYVc1MFpYSnVZV3hKYm5OMFlXNWpaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnSUNCcGJuUmxjbTVoYkVsdWMzUmhibU5sTGw5cGMxUnZjRXhsZG1Wc0xGeHVJQ0FnSUNBZ0ozSmxjR3hoWTJWUWNtOXdjeWd1TGk0cE9pQlpiM1VnWTJGc2JHVmtJR0J5WlhCc1lXTmxVSEp2Y0hOZ0lHOXVJR0VnSnlBclhHNGdJQ0FnSUNBblkyOXRjRzl1Wlc1MElIZHBkR2dnWVNCd1lYSmxiblF1SUZSb2FYTWdhWE1nWVc0Z1lXNTBhUzF3WVhSMFpYSnVJSE5wYm1ObElIQnliM0J6SUhkcGJHd2dKeUFyWEc0Z0lDQWdJQ0FuWjJWMElISmxZV04wYVhabGJIa2dkWEJrWVhSbFpDQjNhR1Z1SUhKbGJtUmxjbVZrTGlCSmJuTjBaV0ZrTENCamFHRnVaMlVnZEdobElHOTNibVZ5WEZ3bmN5QW5JQ3RjYmlBZ0lDQWdJQ2RnY21WdVpHVnlZQ0J0WlhSb2IyUWdkRzhnY0dGemN5QjBhR1VnWTI5eWNtVmpkQ0IyWVd4MVpTQmhjeUJ3Y205d2N5QjBieUIwYUdVZ1kyOXRjRzl1Wlc1MElDY2dLMXh1SUNBZ0lDQWdKM2RvWlhKbElHbDBJR2x6SUdOeVpXRjBaV1F1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2FXNTBaWEp1WVd4SmJuTjBZVzVqWlM1ZmFYTlViM0JNWlhabGJDa3BPMXh1WEc0Z0lDQWdMeThnVFdWeVoyVWdkMmwwYUNCMGFHVWdjR1Z1WkdsdVp5QmxiR1Z0Wlc1MElHbG1JR2wwSUdWNGFYTjBjeXdnYjNSb1pYSjNhWE5sSUhkcGRHZ2daWGhwYzNScGJtZGNiaUFnSUNBdkx5QmxiR1Z0Wlc1MElIQnliM0J6TGx4dUlDQWdJSFpoY2lCbGJHVnRaVzUwSUQwZ2FXNTBaWEp1WVd4SmJuTjBZVzVqWlM1ZmNHVnVaR2x1WjBWc1pXMWxiblFnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVdVgyTjFjbkpsYm5SRmJHVnRaVzUwTzF4dUlDQWdJR2x1ZEdWeWJtRnNTVzV6ZEdGdVkyVXVYM0JsYm1ScGJtZEZiR1Z0Wlc1MElEMGdVbVZoWTNSRmJHVnRaVzUwTG1Oc2IyNWxRVzVrVW1Wd2JHRmpaVkJ5YjNCektGeHVJQ0FnSUNBZ1pXeGxiV1Z1ZEN4Y2JpQWdJQ0FnSUhCeWIzQnpYRzRnSUNBZ0tUdGNibHh1SUNBZ0lHVnVjWFZsZFdWVmNHUmhkR1VvYVc1MFpYSnVZV3hKYm5OMFlXNWpaU2s3WEc0Z0lIMHNYRzVjYmlBZ1pXNXhkV1YxWlVWc1pXMWxiblJKYm5SbGNtNWhiRG9nWm5WdVkzUnBiMjRvYVc1MFpYSnVZV3hKYm5OMFlXNWpaU3dnYm1WM1JXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUdsdWRHVnlibUZzU1c1emRHRnVZMlV1WDNCbGJtUnBibWRGYkdWdFpXNTBJRDBnYm1WM1JXeGxiV1Z1ZER0Y2JpQWdJQ0JsYm5GMVpYVmxWWEJrWVhSbEtHbHVkR1Z5Ym1Gc1NXNXpkR0Z1WTJVcE8xeHVJQ0I5WEc1Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUlZjR1JoZEdWUmRXVjFaVHRjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiYmYmF0Y2hpbmdTdHJhdGVneSxcIlJlYWN0VXBkYXRlczogbXVzdCBpbmplY3QgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MgYW5kIGJhdGNoaW5nIHN0cmF0ZWd5XCIpOmludmFyaWFudChSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiYmYmF0Y2hpbmdTdHJhdGVneSl9ZnVuY3Rpb24gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbigpe3RoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKSx0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aD1udWxsLHRoaXMuY2FsbGJhY2tRdWV1ZT1DYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpLHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb249UmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCl9ZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssYSxiLGMsZCl7ZW5zdXJlSW5qZWN0ZWQoKSxiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLGEsYixjLGQpfWZ1bmN0aW9uIG1vdW50T3JkZXJDb21wYXJhdG9yKGMxLGMyKXtyZXR1cm4gYzEuX21vdW50T3JkZXItYzIuX21vdW50T3JkZXJ9ZnVuY3Rpb24gcnVuQmF0Y2hlZFVwZGF0ZXModHJhbnNhY3Rpb24pe3ZhciBsZW49dHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGxlbj09PWRpcnR5Q29tcG9uZW50cy5sZW5ndGgsXCJFeHBlY3RlZCBmbHVzaCB0cmFuc2FjdGlvbidzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvIG1hdGNoIGRpcnR5LWNvbXBvbmVudHMgYXJyYXkgbGVuZ3RoICglcykuXCIsbGVuLGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpOmludmFyaWFudChsZW49PT1kaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSxkaXJ0eUNvbXBvbmVudHMuc29ydChtb3VudE9yZGVyQ29tcGFyYXRvcik7Zm9yKHZhciBpPTA7bGVuPmk7aSsrKXt2YXIgY29tcG9uZW50PWRpcnR5Q29tcG9uZW50c1tpXSxjYWxsYmFja3M9Y29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzO2lmKGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcz1udWxsLFJlYWN0UmVjb25jaWxlci5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkoY29tcG9uZW50LHRyYW5zYWN0aW9uLnJlY29uY2lsZVRyYW5zYWN0aW9uKSxjYWxsYmFja3MpZm9yKHZhciBqPTA7ajxjYWxsYmFja3MubGVuZ3RoO2orKyl0cmFuc2FjdGlvbi5jYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2tzW2pdLGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKX19ZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShjb21wb25lbnQpe3JldHVybiBlbnN1cmVJbmplY3RlZCgpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhudWxsPT1SZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LFwiZW5xdWV1ZVVwZGF0ZSgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiBjb21wb25lbnREaWRVcGRhdGUuXCIpOm51bGwsYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcz92b2lkIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk6dm9pZCBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGVucXVldWVVcGRhdGUsY29tcG9uZW50KX1mdW5jdGlvbiBhc2FwKGNhbGxiYWNrLGNvbnRleHQpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KGJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMsXCJSZWFjdFVwZGF0ZXMuYXNhcDogQ2FuJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZXVwZGF0ZXMgYXJlIG5vdCBiZWluZyBiYXRjaGVkLlwiKTppbnZhcmlhbnQoYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyksYXNhcENhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFjayxjb250ZXh0KSxhc2FwRW5xdWV1ZWQ9ITB9dmFyIENhbGxiYWNrUXVldWU9cmVxdWlyZShcIi4vQ2FsbGJhY2tRdWV1ZVwiKSxQb29sZWRDbGFzcz1yZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKSxSZWFjdEN1cnJlbnRPd25lcj1yZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKSxSZWFjdFBlcmY9cmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpLFJlYWN0UmVjb25jaWxlcj1yZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIiksVHJhbnNhY3Rpb249cmVxdWlyZShcIi4vVHJhbnNhY3Rpb25cIiksYXNzaWduPXJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIiksZGlydHlDb21wb25lbnRzPVtdLGFzYXBDYWxsYmFja1F1ZXVlPUNhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCksYXNhcEVucXVldWVkPSExLGJhdGNoaW5nU3RyYXRlZ3k9bnVsbCxORVNURURfVVBEQVRFUz17aW5pdGlhbGl6ZTpmdW5jdGlvbigpe3RoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoPWRpcnR5Q29tcG9uZW50cy5sZW5ndGh9LGNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGghPT1kaXJ0eUNvbXBvbmVudHMubGVuZ3RoPyhkaXJ0eUNvbXBvbmVudHMuc3BsaWNlKDAsdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGgpLGZsdXNoQmF0Y2hlZFVwZGF0ZXMoKSk6ZGlydHlDb21wb25lbnRzLmxlbmd0aD0wfX0sVVBEQVRFX1FVRVVFSU5HPXtpbml0aWFsaXplOmZ1bmN0aW9uKCl7dGhpcy5jYWxsYmFja1F1ZXVlLnJlc2V0KCl9LGNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5jYWxsYmFja1F1ZXVlLm5vdGlmeUFsbCgpfX0sVFJBTlNBQ1RJT05fV1JBUFBFUlM9W05FU1RFRF9VUERBVEVTLFVQREFURV9RVUVVRUlOR107YXNzaWduKFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucHJvdG90eXBlLFRyYW5zYWN0aW9uLk1peGluLHtnZXRUcmFuc2FjdGlvbldyYXBwZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTfSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGg9bnVsbCxDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKSx0aGlzLmNhbGxiYWNrUXVldWU9bnVsbCxSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24pLHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb249bnVsbH0scGVyZm9ybTpmdW5jdGlvbihtZXRob2Qsc2NvcGUsYSl7cmV0dXJuIFRyYW5zYWN0aW9uLk1peGluLnBlcmZvcm0uY2FsbCh0aGlzLHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSx0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLG1ldGhvZCxzY29wZSxhKX19KSxQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7dmFyIGZsdXNoQmF0Y2hlZFVwZGF0ZXM9ZnVuY3Rpb24oKXtmb3IoO2RpcnR5Q29tcG9uZW50cy5sZW5ndGh8fGFzYXBFbnF1ZXVlZDspe2lmKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpe3ZhciB0cmFuc2FjdGlvbj1SZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO3RyYW5zYWN0aW9uLnBlcmZvcm0ocnVuQmF0Y2hlZFVwZGF0ZXMsbnVsbCx0cmFuc2FjdGlvbiksUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKX1pZihhc2FwRW5xdWV1ZWQpe2FzYXBFbnF1ZXVlZD0hMTt2YXIgcXVldWU9YXNhcENhbGxiYWNrUXVldWU7YXNhcENhbGxiYWNrUXVldWU9Q2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKSxxdWV1ZS5ub3RpZnlBbGwoKSxDYWxsYmFja1F1ZXVlLnJlbGVhc2UocXVldWUpfX19O2ZsdXNoQmF0Y2hlZFVwZGF0ZXM9UmVhY3RQZXJmLm1lYXN1cmUoXCJSZWFjdFVwZGF0ZXNcIixcImZsdXNoQmF0Y2hlZFVwZGF0ZXNcIixmbHVzaEJhdGNoZWRVcGRhdGVzKTt2YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uPXtpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjpmdW5jdGlvbihSZWNvbmNpbGVUcmFuc2FjdGlvbil7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoUmVjb25jaWxlVHJhbnNhY3Rpb24sXCJSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzc1wiKTppbnZhcmlhbnQoUmVjb25jaWxlVHJhbnNhY3Rpb24pLFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uPVJlY29uY2lsZVRyYW5zYWN0aW9ufSxpbmplY3RCYXRjaGluZ1N0cmF0ZWd5OmZ1bmN0aW9uKF9iYXRjaGluZ1N0cmF0ZWd5KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChfYmF0Y2hpbmdTdHJhdGVneSxcIlJlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hpbmcgc3RyYXRlZ3lcIik6aW52YXJpYW50KF9iYXRjaGluZ1N0cmF0ZWd5KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChcImZ1bmN0aW9uXCI9PXR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyxcIlJlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hlZFVwZGF0ZXMoKSBmdW5jdGlvblwiKTppbnZhcmlhbnQoXCJmdW5jdGlvblwiPT10eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFwiYm9vbGVhblwiPT10eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMsXCJSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZVwiKTppbnZhcmlhbnQoXCJib29sZWFuXCI9PXR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyksYmF0Y2hpbmdTdHJhdGVneT1fYmF0Y2hpbmdTdHJhdGVneX19LFJlYWN0VXBkYXRlcz17UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjpudWxsLGJhdGNoZWRVcGRhdGVzOmJhdGNoZWRVcGRhdGVzLGVucXVldWVVcGRhdGU6ZW5xdWV1ZVVwZGF0ZSxmbHVzaEJhdGNoZWRVcGRhdGVzOmZsdXNoQmF0Y2hlZFVwZGF0ZXMsaW5qZWN0aW9uOlJlYWN0VXBkYXRlc0luamVjdGlvbixhc2FwOmFzYXB9O21vZHVsZS5leHBvcnRzPVJlYWN0VXBkYXRlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlVtVmhZM1JWY0dSaGRHVnpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGWFFTeFpRVzFDUVN4VFFVRlRMR3RDUVVOT0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExHRkJRV0VzTWtKQlFUWkNMR2xDUVVNeFF5eHBSa0ZGUlN4VlFVRlZMR0ZCUVdFc01rSkJRVFpDTEd0Q1FXbERNVVFzVVVGQlV5eG5RMEZEVUN4TFFVRkxMREJDUVVOTUxFdEJRVXNzYzBKQlFYZENMRXRCUXpkQ0xFdEJRVXNzWTBGQlowSXNZMEZCWXl4WlFVTnVReXhMUVVGTExIRkNRVU5JTEdGQlFXRXNNRUpCUVRCQ0xGbEJhME16UXl4UlFVRlRMR2RDUVVGbExGTkJRVlVzUlVGQlJ5eEZRVUZITEVWQlFVY3NSMEZEZWtNc2FVSkJRMEVzYVVKQlFXbENMR1ZCUVdVc1UwRkJWU3hGUVVGSExFVkJRVWNzUlVGQlJ5eEhRVlZ5UkN4UlFVRlRMSE5DUVVGeFFpeEhRVUZKTEVsQlEyaERMRTFCUVU4c1NVRkJSeXhaUVVGakxFZEJRVWNzV1VGSE4wSXNVVUZCVXl4dFFrRkJhMElzWVVGRGVrSXNSMEZCU1N4TFFVRk5MRmxCUVZrc2NVSkJRM0pDTEdkQ1FVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU4yUXl4TlFVRlJMR2RDUVVGblFpeFBRVU40UWl4blNFRkZRU3hKUVVOQkxHZENRVUZuUWl4UlFVTmtMRlZCUVZVc1RVRkJVU3huUWtGQlowSXNVVUZMZEVNc1owSkJRV2RDTEV0QlFVc3NjVUpCUlhKQ0xFdEJRVXNzUjBGQlNTeEhRVUZKTEVWQlFVOHNTVUZCU2l4RlFVRlRMRWxCUVVzc1EwRkpOVUlzUjBGQlNTeFhRVUZaTEdkQ1FVRm5RaXhIUVVzMVFpeFZRVUZaTEZWQlFWVXNhVUpCVVRGQ0xFbEJVRUVzVlVGQlZTeHJRa0ZCYjBJc1MwRkZPVUlzWjBKQlFXZENMSGxDUVVOa0xGVkJRMEVzV1VGQldTeHpRa0ZIVml4VlFVTkdMRWxCUVVzc1IwRkJTU3hIUVVGSkxFVkJRVWNzUlVGQlNTeFZRVUZWTEU5QlFWRXNTVUZEY0VNc1dVRkJXU3hqUVVGakxGRkJRM2hDTEZWQlFWVXNSMEZEVml4VlFVRlZMSE5DUVhORGNFSXNVVUZCVXl4bFFVRmpMRmRCWjBKeVFpeE5RV1pCTEd0Q1FVOURMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZGQlExWXNUVUZCTjBJc2EwSkJRV3RDTEZGQlEyeENMRFpOUVVsRkxFdEJSVU1zYVVKQlFXbENMSE5DUVV0MFFpeHBRa0ZCWjBJc1MwRkJTeXhsUVVwdVFpeHJRa0ZCYVVJc1pVRkJaU3hqUVVGbExGZEJWMjVFTEZGQlFWTXNUVUZCU3l4VFFVRlZMRk5CUTNKQ0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExHbENRVUZwUWl4clFrRkRha0lzYzBkQlJVVXNWVUZCVlN4cFFrRkJhVUlzYlVKQlF5OUNMR3RDUVVGclFpeFJRVUZSTEZOQlFWVXNVMEZEY0VNc1kwRkJaU3hGUVROT2FrSXNSMEZCU1N4bFFVRm5RaXhSUVVGUkxHMUNRVU40UWl4WlFVRmpMRkZCUVZFc2FVSkJRM1JDTEd0Q1FVRnZRaXhSUVVGUkxIVkNRVU0xUWl4VlFVRlpMRkZCUVZFc1pVRkRjRUlzWjBKQlFXdENMRkZCUVZFc2NVSkJRekZDTEZsQlFXTXNVVUZCVVN4cFFrRkZkRUlzVDBGQlV5eFJRVUZSTEcxQ1FVTnFRaXhWUVVGWkxGRkJRVkVzWlVGRGNFSXNVVUZCVlN4UlFVRlJMR0ZCUld4Q0xHMUNRVU5CTEd0Q1FVRnZRaXhqUVVGakxGbEJRMnhETEdOQlFXVXNSVUZGWml4cFFrRkJiVUlzUzBGVmJrSXNaMEpCUTBZc1YwRkJXU3hYUVVOV0xFdEJRVXNzYzBKQlFYZENMR2RDUVVGblFpeFJRVVV2UXl4TlFVRlBMRmRCUTBRc1MwRkJTeXgzUWtGQk1FSXNaMEpCUVdkQ0xGRkJUV3BFTEdkQ1FVRm5RaXhQUVVGUExFVkJRVWNzUzBGQlN5eDFRa0ZETDBJc2RVSkJSVUVzWjBKQlFXZENMRTlCUVZNc1NVRkxNMElzYVVKQlEwWXNWMEZCV1N4WFFVTldMRXRCUVVzc1kwRkJZeXhUUVVWeVFpeE5RVUZQTEZkQlEwd3NTMEZCU3l4alFVRmpMR05CU1c1Q0xITkNRVUYzUWl4bFFVRm5RaXhuUWtGVk5VTXNVVUZEUlN3MlFrRkJOa0lzVlVGRE4wSXNXVUZCV1N4UFFVTmFMSFZDUVVGM1FpeFhRVU4wUWl4TlFVRlBMSFZDUVVkVUxGZEJRVmtzVjBGRFZpeExRVUZMTEhOQ1FVRjNRaXhMUVVNM1FpeGpRVUZqTEZGQlFWRXNTMEZCU3l4bFFVTXpRaXhMUVVGTExHTkJRV2RDTEV0QlEzSkNMR0ZCUVdFc01FSkJRVEJDTEZGQlFWRXNTMEZCU3l4elFrRkRjRVFzUzBGQlN5eHhRa0ZCZFVJc1RVRkhPVUlzVVVGQlV5eFRRVUZUTEU5QlFWRXNUVUZCVHl4SFFVY3ZRaXhOUVVGUExHRkJRVmtzVFVGQlRTeFJRVUZSTEV0QlF5OUNMRXRCUTBFc1MwRkJTeXh4UWtGQmNVSXNVVUZETVVJc1MwRkJTeXh4UWtGRFRDeFBRVU5CTEUxQlEwRXNUVUZMVGl4WlFVRlpMR0ZCUVdFc05rSkJOa1I2UWl4SlFVRkpMSEZDUVVGelFpeFhRVXQ0UWl4TFFVRlBMR2RDUVVGblFpeFJRVUZWTEdOQlFXTXNRMEZETjBNc1IwRkJTU3huUWtGQlowSXNUMEZCVVN4RFFVTXhRaXhIUVVGSkxHRkJRV01zTmtKQlFUWkNMRmRCUXk5RExHRkJRVmtzVVVGQlVTeHJRa0ZCYlVJc1MwRkJUU3hoUVVNM1F5dzJRa0ZCTmtJc1VVRkJVU3hoUVVkMlF5eEhRVUZKTEdGQlFXTXNRMEZEYUVJc1kwRkJaU3hEUVVObUxFbEJRVWtzVDBGQlVTeHBRa0ZEV2l4dFFrRkJiMElzWTBGQll5eFpRVU5zUXl4TlFVRk5MRmxCUTA0c1kwRkJZeXhSUVVGUkxGTkJTVFZDTEhGQ1FVRnpRaXhWUVVGVkxGRkJRemxDTEdWQlEwRXNjMEpCUTBFc2IwSkJOa05HTEVsQlFVa3NkMEpCUTBZc01rSkJRVFJDTEZOQlFWTXNjMEpCUTJ4RExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExIRkNRVU5CTERSRVFVTkZMRlZCUVZVc2MwSkJRMlFzWVVGQllTd3dRa0ZCTkVJc2MwSkJSek5ETEhWQ1FVRjNRaXhUUVVGVExHMUNRVU01UWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU4yUXl4clFrRkRRU3hyUkVGRFJTeFZRVUZWTEcxQ1FVTmlMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEwc3NhMEpCUVhKRExHMUNRVUZyUWl4bFFVTjZRaXd3UkVGRFJTeFZRVUZ6UkN4clFrRkJja01zYlVKQlFXdENMR2RDUVVOMFF5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOUkxHbENRVUY0UXl4dFFrRkJhMElzYTBKQlEzcENMSEZGUVVORkxGVkJRWGxFTEdsQ1FVRjRReXh0UWtGQmEwSXNiVUpCUTNaRExHbENRVUZ0UWl4dlFrRkpia0lzWTBGUFJpd3dRa0ZCTWtJc1MwRkZNMElzWlVGQlowSXNaVUZEYUVJc1kwRkJaU3hqUVVObUxHOUNRVUZ4UWl4dlFrRkRja0lzVlVGQlZ5eHpRa0ZEV0N4TFFVRk5MRXRCUjFJc1VVRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1VtVmhZM1JWY0dSaGRHVnpYRzRnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnUTJGc2JHSmhZMnRSZFdWMVpTQTlJSEpsY1hWcGNtVW9YQ0l1TDBOaGJHeGlZV05yVVhWbGRXVmNJaWs3WEc1MllYSWdVRzl2YkdWa1EyeGhjM01nUFNCeVpYRjFhWEpsS0Z3aUxpOVFiMjlzWldSRGJHRnpjMXdpS1R0Y2JuWmhjaUJTWldGamRFTjFjbkpsYm5SUGQyNWxjaUE5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUTNWeWNtVnVkRTkzYm1WeVhDSXBPMXh1ZG1GeUlGSmxZV04wVUdWeVppQTlJSEpsY1hWcGNtVW9YQ0l1TDFKbFlXTjBVR1Z5Wmx3aUtUdGNiblpoY2lCU1pXRmpkRkpsWTI5dVkybHNaWElnUFNCeVpYRjFhWEpsS0Z3aUxpOVNaV0ZqZEZKbFkyOXVZMmxzWlhKY0lpazdYRzUyWVhJZ1ZISmhibk5oWTNScGIyNGdQU0J5WlhGMWFYSmxLRndpTGk5VWNtRnVjMkZqZEdsdmJsd2lLVHRjYmx4dWRtRnlJR0Z6YzJsbmJpQTlJSEpsY1hWcGNtVW9YQ0l1TDA5aWFtVmpkQzVoYzNOcFoyNWNJaWs3WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmFXNTJZWEpwWVc1MFhDSXBPMXh1ZG1GeUlIZGhjbTVwYm1jZ1BTQnlaWEYxYVhKbEtGd2lMaTkzWVhKdWFXNW5YQ0lwTzF4dVhHNTJZWElnWkdseWRIbERiMjF3YjI1bGJuUnpJRDBnVzEwN1hHNTJZWElnWVhOaGNFTmhiR3hpWVdOclVYVmxkV1VnUFNCRFlXeHNZbUZqYTFGMVpYVmxMbWRsZEZCdmIyeGxaQ2dwTzF4dWRtRnlJR0Z6WVhCRmJuRjFaWFZsWkNBOUlHWmhiSE5sTzF4dVhHNTJZWElnWW1GMFkyaHBibWRUZEhKaGRHVm5lU0E5SUc1MWJHdzdYRzVjYm1aMWJtTjBhVzl1SUdWdWMzVnlaVWx1YW1WamRHVmtLQ2tnZTF4dUlDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUZKbFlXTjBWWEJrWVhSbGN5NVNaV0ZqZEZKbFkyOXVZMmxzWlZSeVlXNXpZV04wYVc5dUlDWW1JR0poZEdOb2FXNW5VM1J5WVhSbFoza3NYRzRnSUNBZ0oxSmxZV04wVlhCa1lYUmxjem9nYlhWemRDQnBibXBsWTNRZ1lTQnlaV052Ym1OcGJHVWdkSEpoYm5OaFkzUnBiMjRnWTJ4aGMzTWdZVzVrSUdKaGRHTm9hVzVuSUNjZ0sxeHVJQ0FnSUNkemRISmhkR1ZuZVNkY2JpQWdLU0E2SUdsdWRtRnlhV0Z1ZENoU1pXRmpkRlZ3WkdGMFpYTXVVbVZoWTNSU1pXTnZibU5wYkdWVWNtRnVjMkZqZEdsdmJpQW1KaUJpWVhSamFHbHVaMU4wY21GMFpXZDVLU2s3WEc1OVhHNWNiblpoY2lCT1JWTlVSVVJmVlZCRVFWUkZVeUE5SUh0Y2JpQWdhVzVwZEdsaGJHbDZaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZEdocGN5NWthWEowZVVOdmJYQnZibVZ1ZEhOTVpXNW5kR2dnUFNCa2FYSjBlVU52YlhCdmJtVnVkSE11YkdWdVozUm9PMXh1SUNCOUxGeHVJQ0JqYkc5elpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVaR2x5ZEhsRGIyMXdiMjVsYm5SelRHVnVaM1JvSUNFOVBTQmthWEowZVVOdmJYQnZibVZ1ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBdkx5QkJaR1JwZEdsdmJtRnNJSFZ3WkdGMFpYTWdkMlZ5WlNCbGJuRjFaWFZsWkNCaWVTQmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWdhR0Z1Wkd4bGNuTWdiM0pjYmlBZ0lDQWdJQzh2SUhOcGJXbHNZWEk3SUdKbFptOXlaU0J2ZFhJZ2IzZHVJRlZRUkVGVVJWOVJWVVZWUlVsT1J5QjNjbUZ3Y0dWeUlHTnNiM05sY3l3Z2QyVWdkMkZ1ZENCMGJ5QnlkVzVjYmlBZ0lDQWdJQzh2SUhSb1pYTmxJRzVsZHlCMWNHUmhkR1Z6SUhOdklIUm9ZWFFnYVdZZ1FTZHpJR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0JqWVd4c2N5QnpaWFJUZEdGMFpTQnZibHh1SUNBZ0lDQWdMeThnUWl3Z1FpQjNhV3hzSUhWd1pHRjBaU0JpWldadmNtVWdkR2hsSUdOaGJHeGlZV05ySUVFbmN5QjFjR1JoZEdWeUlIQnliM1pwWkdWa0lIZG9aVzRnWTJGc2JHbHVaMXh1SUNBZ0lDQWdMeThnYzJWMFUzUmhkR1V1WEc0Z0lDQWdJQ0JrYVhKMGVVTnZiWEJ2Ym1WdWRITXVjM0JzYVdObEtEQXNJSFJvYVhNdVpHbHlkSGxEYjIxd2IyNWxiblJ6VEdWdVozUm9LVHRjYmlBZ0lDQWdJR1pzZFhOb1FtRjBZMmhsWkZWd1pHRjBaWE1vS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaR2x5ZEhsRGIyMXdiMjVsYm5SekxteGxibWQwYUNBOUlEQTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzUyWVhJZ1ZWQkVRVlJGWDFGVlJWVkZTVTVISUQwZ2UxeHVJQ0JwYm1sMGFXRnNhWHBsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMGFHbHpMbU5oYkd4aVlXTnJVWFZsZFdVdWNtVnpaWFFvS1R0Y2JpQWdmU3hjYmlBZ1kyeHZjMlU2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhSb2FYTXVZMkZzYkdKaFkydFJkV1YxWlM1dWIzUnBabmxCYkd3b0tUdGNiaUFnZlZ4dWZUdGNibHh1ZG1GeUlGUlNRVTVUUVVOVVNVOU9YMWRTUVZCUVJWSlRJRDBnVzA1RlUxUkZSRjlWVUVSQlZFVlRMQ0JWVUVSQlZFVmZVVlZGVlVWSlRrZGRPMXh1WEc1bWRXNWpkR2x2YmlCU1pXRmpkRlZ3WkdGMFpYTkdiSFZ6YUZSeVlXNXpZV04wYVc5dUtDa2dlMXh1SUNCMGFHbHpMbkpsYVc1cGRHbGhiR2w2WlZSeVlXNXpZV04wYVc5dUtDazdYRzRnSUhSb2FYTXVaR2x5ZEhsRGIyMXdiMjVsYm5SelRHVnVaM1JvSUQwZ2JuVnNiRHRjYmlBZ2RHaHBjeTVqWVd4c1ltRmphMUYxWlhWbElEMGdRMkZzYkdKaFkydFJkV1YxWlM1blpYUlFiMjlzWldRb0tUdGNiaUFnZEdocGN5NXlaV052Ym1OcGJHVlVjbUZ1YzJGamRHbHZiaUE5WEc0Z0lDQWdVbVZoWTNSVmNHUmhkR1Z6TGxKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjR1WjJWMFVHOXZiR1ZrS0NrN1hHNTlYRzVjYm1GemMybG5iaWhjYmlBZ1VtVmhZM1JWY0dSaGRHVnpSbXgxYzJoVWNtRnVjMkZqZEdsdmJpNXdjbTkwYjNSNWNHVXNYRzRnSUZSeVlXNXpZV04wYVc5dUxrMXBlR2x1TENCN1hHNGdJR2RsZEZSeVlXNXpZV04wYVc5dVYzSmhjSEJsY25NNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCVVVrRk9VMEZEVkVsUFRsOVhVa0ZRVUVWU1V6dGNiaUFnZlN4Y2JseHVJQ0JrWlhOMGNuVmpkRzl5T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCMGFHbHpMbVJwY25SNVEyOXRjRzl1Wlc1MGMweGxibWQwYUNBOUlHNTFiR3c3WEc0Z0lDQWdRMkZzYkdKaFkydFJkV1YxWlM1eVpXeGxZWE5sS0hSb2FYTXVZMkZzYkdKaFkydFJkV1YxWlNrN1hHNGdJQ0FnZEdocGN5NWpZV3hzWW1GamExRjFaWFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQlNaV0ZqZEZWd1pHRjBaWE11VW1WaFkzUlNaV052Ym1OcGJHVlVjbUZ1YzJGamRHbHZiaTV5Wld4bFlYTmxLSFJvYVhNdWNtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNHBPMXh1SUNBZ0lIUm9hWE11Y21WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0Z1BTQnVkV3hzTzF4dUlDQjlMRnh1WEc0Z0lIQmxjbVp2Y20wNklHWjFibU4wYVc5dUtHMWxkR2h2WkN3Z2MyTnZjR1VzSUdFcElIdGNiaUFnSUNBdkx5QkZjM05sYm5ScFlXeHNlU0JqWVd4c2N5QmdkR2hwY3k1eVpXTnZibU5wYkdWVWNtRnVjMkZqZEdsdmJpNXdaWEptYjNKdEtHMWxkR2h2WkN3Z2MyTnZjR1VzSUdFcFlGeHVJQ0FnSUM4dklIZHBkR2dnZEdocGN5QjBjbUZ1YzJGamRHbHZiaWR6SUhkeVlYQndaWEp6SUdGeWIzVnVaQ0JwZEM1Y2JpQWdJQ0J5WlhSMWNtNGdWSEpoYm5OaFkzUnBiMjR1VFdsNGFXNHVjR1Z5Wm05eWJTNWpZV3hzS0Z4dUlDQWdJQ0FnZEdocGN5eGNiaUFnSUNBZ0lIUm9hWE11Y21WamIyNWphV3hsVkhKaGJuTmhZM1JwYjI0dWNHVnlabTl5YlN4Y2JpQWdJQ0FnSUhSb2FYTXVjbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjRzWEc0Z0lDQWdJQ0J0WlhSb2IyUXNYRzRnSUNBZ0lDQnpZMjl3WlN4Y2JpQWdJQ0FnSUdGY2JpQWdJQ0FwTzF4dUlDQjlYRzU5S1R0Y2JseHVVRzl2YkdWa1EyeGhjM011WVdSa1VHOXZiR2x1WjFSdktGSmxZV04wVlhCa1lYUmxjMFpzZFhOb1ZISmhibk5oWTNScGIyNHBPMXh1WEc1bWRXNWpkR2x2YmlCaVlYUmphR1ZrVlhCa1lYUmxjeWhqWVd4c1ltRmpheXdnWVN3Z1lpd2dZeXdnWkNrZ2UxeHVJQ0JsYm5OMWNtVkpibXBsWTNSbFpDZ3BPMXh1SUNCaVlYUmphR2x1WjFOMGNtRjBaV2Q1TG1KaGRHTm9aV1JWY0dSaGRHVnpLR05oYkd4aVlXTnJMQ0JoTENCaUxDQmpMQ0JrS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJCY25KaGVTQmpiMjF3WVhKaGRHOXlJR1p2Y2lCU1pXRmpkRU52YlhCdmJtVnVkSE1nWW5rZ2JXOTFiblFnYjNKa1pYSnBibWN1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRTWldGamRFTnZiWEJ2Ym1WdWRIMGdZekVnWm1seWMzUWdZMjl0Y0c5dVpXNTBJSGx2ZFNkeVpTQmpiMjF3WVhKcGJtZGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUkRiMjF3YjI1bGJuUjlJR015SUhObFkyOXVaQ0JqYjIxd2IyNWxiblFnZVc5MUozSmxJR052YlhCaGNtbHVaMXh1SUNvZ1FISmxkSFZ5YmlCN2JuVnRZbVZ5ZlNCU1pYUjFjbTRnZG1Gc2RXVWdkWE5oWW14bElHSjVJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiM0owS0NrdVhHNGdLaTljYm1aMWJtTjBhVzl1SUcxdmRXNTBUM0prWlhKRGIyMXdZWEpoZEc5eUtHTXhMQ0JqTWlrZ2UxeHVJQ0J5WlhSMWNtNGdZekV1WDIxdmRXNTBUM0prWlhJZ0xTQmpNaTVmYlc5MWJuUlBjbVJsY2p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY25WdVFtRjBZMmhsWkZWd1pHRjBaWE1vZEhKaGJuTmhZM1JwYjI0cElIdGNiaUFnZG1GeUlHeGxiaUE5SUhSeVlXNXpZV04wYVc5dUxtUnBjblI1UTI5dGNHOXVaVzUwYzB4bGJtZDBhRHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0JzWlc0Z1BUMDlJR1JwY25SNVEyOXRjRzl1Wlc1MGN5NXNaVzVuZEdnc1hHNGdJQ0FnSjBWNGNHVmpkR1ZrSUdac2RYTm9JSFJ5WVc1ellXTjBhVzl1WEZ3bmN5QnpkRzl5WldRZ1pHbHlkSGt0WTI5dGNHOXVaVzUwY3lCc1pXNW5kR2dnS0NWektTQjBieUFuSUN0Y2JpQWdJQ0FuYldGMFkyZ2daR2x5ZEhrdFkyOXRjRzl1Wlc1MGN5QmhjbkpoZVNCc1pXNW5kR2dnS0NWektTNG5MRnh1SUNBZ0lHeGxiaXhjYmlBZ0lDQmthWEowZVVOdmJYQnZibVZ1ZEhNdWJHVnVaM1JvWEc0Z0lDa2dPaUJwYm5aaGNtbGhiblFvYkdWdUlEMDlQU0JrYVhKMGVVTnZiWEJ2Ym1WdWRITXViR1Z1WjNSb0tTazdYRzVjYmlBZ0x5OGdVMmx1WTJVZ2NtVmpiMjVqYVd4cGJtY2dZU0JqYjIxd2IyNWxiblFnYUdsbmFHVnlJR2x1SUhSb1pTQnZkMjVsY2lCb2FXVnlZWEpqYUhrZ2RYTjFZV3hzZVNBb2JtOTBYRzRnSUM4dklHRnNkMkY1Y3lBdExTQnpaV1VnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbEtDa3BJSGRwYkd3Z2NtVmpiMjVqYVd4bElHTm9hV3hrY21WdUxDQnlaV052Ym1OcGJHVmNiaUFnTHk4Z2RHaGxiU0JpWldadmNtVWdkR2hsYVhJZ1kyaHBiR1J5Wlc0Z1lua2djMjl5ZEdsdVp5QjBhR1VnWVhKeVlYa3VYRzRnSUdScGNuUjVRMjl0Y0c5dVpXNTBjeTV6YjNKMEtHMXZkVzUwVDNKa1pYSkRiMjF3WVhKaGRHOXlLVHRjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdMeThnU1dZZ1lTQmpiMjF3YjI1bGJuUWdhWE1nZFc1dGIzVnVkR1ZrSUdKbFptOXlaU0J3Wlc1a2FXNW5JR05vWVc1blpYTWdZWEJ3Ykhrc0lHbDBJSGRwYkd3Z2MzUnBiR3hjYmlBZ0lDQXZMeUJpWlNCb1pYSmxMQ0JpZFhRZ2QyVWdZWE56ZFcxbElIUm9ZWFFnYVhRZ2FHRnpJR05zWldGeVpXUWdhWFJ6SUY5d1pXNWthVzVuUTJGc2JHSmhZMnR6SUdGdVpGeHVJQ0FnSUM4dklIUm9ZWFFnY0dWeVptOXliVlZ3WkdGMFpVbG1UbVZqWlhOellYSjVJR2x6SUdFZ2JtOXZjQzVjYmlBZ0lDQjJZWElnWTI5dGNHOXVaVzUwSUQwZ1pHbHlkSGxEYjIxd2IyNWxiblJ6VzJsZE8xeHVYRzRnSUNBZ0x5OGdTV1lnY0dWeVptOXliVlZ3WkdGMFpVbG1UbVZqWlhOellYSjVJR2hoY0hCbGJuTWdkRzhnWlc1eGRXVjFaU0JoYm5rZ2JtVjNJSFZ3WkdGMFpYTXNJSGRsWEc0Z0lDQWdMeThnYzJodmRXeGtiaWQwSUdWNFpXTjFkR1VnZEdobElHTmhiR3hpWVdOcmN5QjFiblJwYkNCMGFHVWdibVY0ZENCeVpXNWtaWElnYUdGd2NHVnVjeXdnYzI5Y2JpQWdJQ0F2THlCemRHRnphQ0IwYUdVZ1kyRnNiR0poWTJ0eklHWnBjbk4wWEc0Z0lDQWdkbUZ5SUdOaGJHeGlZV05yY3lBOUlHTnZiWEJ2Ym1WdWRDNWZjR1Z1WkdsdVowTmhiR3hpWVdOcmN6dGNiaUFnSUNCamIyMXdiMjVsYm5RdVgzQmxibVJwYm1kRFlXeHNZbUZqYTNNZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnVW1WaFkzUlNaV052Ym1OcGJHVnlMbkJsY21admNtMVZjR1JoZEdWSlprNWxZMlZ6YzJGeWVTaGNiaUFnSUNBZ0lHTnZiWEJ2Ym1WdWRDeGNiaUFnSUNBZ0lIUnlZVzV6WVdOMGFXOXVMbkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1WEc0Z0lDQWdLVHRjYmx4dUlDQWdJR2xtSUNoallXeHNZbUZqYTNNcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0F3T3lCcUlEd2dZMkZzYkdKaFkydHpMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lIUnlZVzV6WVdOMGFXOXVMbU5oYkd4aVlXTnJVWFZsZFdVdVpXNXhkV1YxWlNoY2JpQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamEzTmJhbDBzWEc0Z0lDQWdJQ0FnSUNBZ1kyOXRjRzl1Wlc1MExtZGxkRkIxWW14cFkwbHVjM1JoYm1ObEtDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1ZG1GeUlHWnNkWE5vUW1GMFkyaGxaRlZ3WkdGMFpYTWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdMeThnVW1WaFkzUlZjR1JoZEdWelJteDFjMmhVY21GdWMyRmpkR2x2YmlkeklIZHlZWEJ3WlhKeklIZHBiR3dnWTJ4bFlYSWdkR2hsSUdScGNuUjVRMjl0Y0c5dVpXNTBjMXh1SUNBdkx5QmhjbkpoZVNCaGJtUWdjR1Z5Wm05eWJTQmhibmtnZFhCa1lYUmxjeUJsYm5GMVpYVmxaQ0JpZVNCdGIzVnVkQzF5WldGa2VTQm9ZVzVrYkdWeWN5QW9hUzVsTGl4Y2JpQWdMeThnWTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsS1NCaWRYUWdkMlVnYm1WbFpDQjBieUJqYUdWamF5Qm9aWEpsSUhSdmJ5QnBiaUJ2Y21SbGNpQjBieUJqWVhSamFGeHVJQ0F2THlCMWNHUmhkR1Z6SUdWdWNYVmxkV1ZrSUdKNUlITmxkRk4wWVhSbElHTmhiR3hpWVdOcmN5QmhibVFnWVhOaGNDQmpZV3hzY3k1Y2JpQWdkMmhwYkdVZ0tHUnBjblI1UTI5dGNHOXVaVzUwY3k1c1pXNW5kR2dnZkh3Z1lYTmhjRVZ1Y1hWbGRXVmtLU0I3WEc0Z0lDQWdhV1lnS0dScGNuUjVRMjl0Y0c5dVpXNTBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSFpoY2lCMGNtRnVjMkZqZEdsdmJpQTlJRkpsWVdOMFZYQmtZWFJsYzBac2RYTm9WSEpoYm5OaFkzUnBiMjR1WjJWMFVHOXZiR1ZrS0NrN1hHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJpNXdaWEptYjNKdEtISjFia0poZEdOb1pXUlZjR1JoZEdWekxDQnVkV3hzTENCMGNtRnVjMkZqZEdsdmJpazdYRzRnSUNBZ0lDQlNaV0ZqZEZWd1pHRjBaWE5HYkhWemFGUnlZVzV6WVdOMGFXOXVMbkpsYkdWaGMyVW9kSEpoYm5OaFkzUnBiMjRwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoaGMyRndSVzV4ZFdWMVpXUXBJSHRjYmlBZ0lDQWdJR0Z6WVhCRmJuRjFaWFZsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnZG1GeUlIRjFaWFZsSUQwZ1lYTmhjRU5oYkd4aVlXTnJVWFZsZFdVN1hHNGdJQ0FnSUNCaGMyRndRMkZzYkdKaFkydFJkV1YxWlNBOUlFTmhiR3hpWVdOclVYVmxkV1V1WjJWMFVHOXZiR1ZrS0NrN1hHNGdJQ0FnSUNCeGRXVjFaUzV1YjNScFpubEJiR3dvS1R0Y2JpQWdJQ0FnSUVOaGJHeGlZV05yVVhWbGRXVXVjbVZzWldGelpTaHhkV1YxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVpteDFjMmhDWVhSamFHVmtWWEJrWVhSbGN5QTlJRkpsWVdOMFVHVnlaaTV0WldGemRYSmxLRnh1SUNBblVtVmhZM1JWY0dSaGRHVnpKeXhjYmlBZ0oyWnNkWE5vUW1GMFkyaGxaRlZ3WkdGMFpYTW5MRnh1SUNCbWJIVnphRUpoZEdOb1pXUlZjR1JoZEdWelhHNHBPMXh1WEc0dktpcGNiaUFxSUUxaGNtc2dZU0JqYjIxd2IyNWxiblFnWVhNZ2JtVmxaR2x1WnlCaElISmxjbVZ1WkdWeUxDQmhaR1JwYm1jZ1lXNGdiM0IwYVc5dVlXd2dZMkZzYkdKaFkyc2dkRzhnWVZ4dUlDb2diR2x6ZENCdlppQm1kVzVqZEdsdmJuTWdkMmhwWTJnZ2QybHNiQ0JpWlNCbGVHVmpkWFJsWkNCdmJtTmxJSFJvWlNCeVpYSmxibVJsY2lCdlkyTjFjbk11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1Z1Y1hWbGRXVlZjR1JoZEdVb1kyOXRjRzl1Wlc1MEtTQjdYRzRnSUdWdWMzVnlaVWx1YW1WamRHVmtLQ2s3WEc1Y2JpQWdMeThnVm1GeWFXOTFjeUJ3WVhKMGN5QnZaaUJ2ZFhJZ1kyOWtaU0FvYzNWamFDQmhjeUJTWldGamRFTnZiWEJ2YzJsMFpVTnZiWEJ2Ym1WdWRDZHpYRzRnSUM4dklGOXlaVzVrWlhKV1lXeHBaR0YwWldSRGIyMXdiMjVsYm5RcElHRnpjM1Z0WlNCMGFHRjBJR05oYkd4eklIUnZJSEpsYm1SbGNpQmhjbVZ1SjNRZ2JtVnpkR1ZrTzF4dUlDQXZMeUIyWlhKcFpua2dkR2hoZENCMGFHRjBKM01nZEdobElHTmhjMlV1SUNoVWFHbHpJR2x6SUdOaGJHeGxaQ0JpZVNCbFlXTm9JSFJ2Y0Mxc1pYWmxiQ0IxY0dSaGRHVmNiaUFnTHk4Z1puVnVZM1JwYjI0c0lHeHBhMlVnYzJWMFVISnZjSE1zSUhObGRGTjBZWFJsTENCbWIzSmpaVlZ3WkdGMFpTd2daWFJqTGpzZ1kzSmxZWFJwYjI0Z1lXNWtYRzRnSUM4dklHUmxjM1J5ZFdOMGFXOXVJRzltSUhSdmNDMXNaWFpsYkNCamIyMXdiMjVsYm5SeklHbHpJR2QxWVhKa1pXUWdhVzRnVW1WaFkzUk5iM1Z1ZEM0cFhHNGdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUZKbFlXTjBRM1Z5Y21WdWRFOTNibVZ5TG1OMWNuSmxiblFnUFQwZ2JuVnNiQ3hjYmlBZ0lDQW5aVzV4ZFdWMVpWVndaR0YwWlNncE9pQlNaVzVrWlhJZ2JXVjBhRzlrY3lCemFHOTFiR1FnWW1VZ1lTQndkWEpsSUdaMWJtTjBhVzl1SUc5bUlIQnliM0J6SUNjZ0sxeHVJQ0FnSUNkaGJtUWdjM1JoZEdVN0lIUnlhV2RuWlhKcGJtY2dibVZ6ZEdWa0lHTnZiWEJ2Ym1WdWRDQjFjR1JoZEdWeklHWnliMjBnY21WdVpHVnlJR2x6SUc1dmRDQW5JQ3RjYmlBZ0lDQW5ZV3hzYjNkbFpDNGdTV1lnYm1WalpYTnpZWEo1TENCMGNtbG5aMlZ5SUc1bGMzUmxaQ0IxY0dSaGRHVnpJR2x1SUNjZ0sxeHVJQ0FnSUNkamIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVdUoxeHVJQ0FwSURvZ2JuVnNiQ2s3WEc1Y2JpQWdhV1lnS0NGaVlYUmphR2x1WjFOMGNtRjBaV2Q1TG1selFtRjBZMmhwYm1kVmNHUmhkR1Z6S1NCN1hHNGdJQ0FnWW1GMFkyaHBibWRUZEhKaGRHVm5lUzVpWVhSamFHVmtWWEJrWVhSbGN5aGxibkYxWlhWbFZYQmtZWFJsTENCamIyMXdiMjVsYm5RcE8xeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVYRzRnSUdScGNuUjVRMjl0Y0c5dVpXNTBjeTV3ZFhOb0tHTnZiWEJ2Ym1WdWRDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JXNXhkV1YxWlNCaElHTmhiR3hpWVdOcklIUnZJR0psSUhKMWJpQmhkQ0IwYUdVZ1pXNWtJRzltSUhSb1pTQmpkWEp5Wlc1MElHSmhkR05vYVc1bklHTjVZMnhsTGlCVWFISnZkM05jYmlBcUlHbG1JRzV2SUhWd1pHRjBaWE1nWVhKbElHTjFjbkpsYm5Sc2VTQmlaV2x1WnlCd1pYSm1iM0p0WldRdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdGellYQW9ZMkZzYkdKaFkyc3NJR052Ym5SbGVIUXBJSHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0JpWVhSamFHbHVaMU4wY21GMFpXZDVMbWx6UW1GMFkyaHBibWRWY0dSaGRHVnpMRnh1SUNBZ0lDZFNaV0ZqZEZWd1pHRjBaWE11WVhOaGNEb2dRMkZ1WEZ3bmRDQmxibkYxWlhWbElHRnVJR0Z6WVhBZ1kyRnNiR0poWTJzZ2FXNGdZU0JqYjI1MFpYaDBJSGRvWlhKbEp5QXJYRzRnSUNBZ0ozVndaR0YwWlhNZ1lYSmxJRzV2ZENCaVpXbHVaeUJpWVhSamFHVmtMaWRjYmlBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2hpWVhSamFHbHVaMU4wY21GMFpXZDVMbWx6UW1GMFkyaHBibWRWY0dSaGRHVnpLU2s3WEc0Z0lHRnpZWEJEWVd4c1ltRmphMUYxWlhWbExtVnVjWFZsZFdVb1kyRnNiR0poWTJzc0lHTnZiblJsZUhRcE8xeHVJQ0JoYzJGd1JXNXhkV1YxWldRZ1BTQjBjblZsTzF4dWZWeHVYRzUyWVhJZ1VtVmhZM1JWY0dSaGRHVnpTVzVxWldOMGFXOXVJRDBnZTF4dUlDQnBibXBsWTNSU1pXTnZibU5wYkdWVWNtRnVjMkZqZEdsdmJqb2dablZ1WTNScGIyNG9VbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjRwSUh0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjRzWEc0Z0lDQWdJQ0FuVW1WaFkzUlZjR1JoZEdWek9pQnRkWE4wSUhCeWIzWnBaR1VnWVNCeVpXTnZibU5wYkdVZ2RISmhibk5oWTNScGIyNGdZMnhoYzNNblhHNGdJQ0FnS1NBNklHbHVkbUZ5YVdGdWRDaFNaV052Ym1OcGJHVlVjbUZ1YzJGamRHbHZiaWtwTzF4dUlDQWdJRkpsWVdOMFZYQmtZWFJsY3k1U1pXRmpkRkpsWTI5dVkybHNaVlJ5WVc1ellXTjBhVzl1SUQwZ1VtVmpiMjVqYVd4bFZISmhibk5oWTNScGIyNDdYRzRnSUgwc1hHNWNiaUFnYVc1cVpXTjBRbUYwWTJocGJtZFRkSEpoZEdWbmVUb2dablZ1WTNScGIyNG9YMkpoZEdOb2FXNW5VM1J5WVhSbFoza3BJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ1gySmhkR05vYVc1blUzUnlZWFJsWjNrc1hHNGdJQ0FnSUNBblVtVmhZM1JWY0dSaGRHVnpPaUJ0ZFhOMElIQnliM1pwWkdVZ1lTQmlZWFJqYUdsdVp5QnpkSEpoZEdWbmVTZGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLRjlpWVhSamFHbHVaMU4wY21GMFpXZDVLU2s3WEc0Z0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lIUjVjR1Z2WmlCZlltRjBZMmhwYm1kVGRISmhkR1ZuZVM1aVlYUmphR1ZrVlhCa1lYUmxjeUE5UFQwZ0oyWjFibU4wYVc5dUp5eGNiaUFnSUNBZ0lDZFNaV0ZqZEZWd1pHRjBaWE02SUcxMWMzUWdjSEp2ZG1sa1pTQmhJR0poZEdOb1pXUlZjR1JoZEdWektDa2dablZ1WTNScGIyNG5YRzRnSUNBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2gwZVhCbGIyWWdYMkpoZEdOb2FXNW5VM1J5WVhSbFoza3VZbUYwWTJobFpGVndaR0YwWlhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNwS1R0Y2JpQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lDQWdkSGx3Wlc5bUlGOWlZWFJqYUdsdVoxTjBjbUYwWldkNUxtbHpRbUYwWTJocGJtZFZjR1JoZEdWeklEMDlQU0FuWW05dmJHVmhiaWNzWEc0Z0lDQWdJQ0FuVW1WaFkzUlZjR1JoZEdWek9pQnRkWE4wSUhCeWIzWnBaR1VnWVc0Z2FYTkNZWFJqYUdsdVoxVndaR0YwWlhNZ1ltOXZiR1ZoYmlCaGRIUnlhV0oxZEdVblhHNGdJQ0FnS1NBNklHbHVkbUZ5YVdGdWRDaDBlWEJsYjJZZ1gySmhkR05vYVc1blUzUnlZWFJsWjNrdWFYTkNZWFJqYUdsdVoxVndaR0YwWlhNZ1BUMDlJQ2RpYjI5c1pXRnVKeWtwTzF4dUlDQWdJR0poZEdOb2FXNW5VM1J5WVhSbFoza2dQU0JmWW1GMFkyaHBibWRUZEhKaGRHVm5lVHRjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJRkpsWVdOMFZYQmtZWFJsY3lBOUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUZKbFlXTjBJSEpsWm1WeVpXNWpaWE1nWUZKbFlXTjBVbVZqYjI1amFXeGxWSEpoYm5OaFkzUnBiMjVnSUhWemFXNW5JSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FXNGdiM0prWlhKY2JpQWdJQ29nZEc4Z1lXeHNiM2NnWkdWd1pXNWtaVzVqZVNCcGJtcGxZM1JwYjI0dVhHNGdJQ0FxWEc0Z0lDQXFJRUJwYm5SbGNtNWhiRnh1SUNBZ0tpOWNiaUFnVW1WaFkzUlNaV052Ym1OcGJHVlVjbUZ1YzJGamRHbHZiam9nYm5Wc2JDeGNibHh1SUNCaVlYUmphR1ZrVlhCa1lYUmxjem9nWW1GMFkyaGxaRlZ3WkdGMFpYTXNYRzRnSUdWdWNYVmxkV1ZWY0dSaGRHVTZJR1Z1Y1hWbGRXVlZjR1JoZEdVc1hHNGdJR1pzZFhOb1FtRjBZMmhsWkZWd1pHRjBaWE02SUdac2RYTm9RbUYwWTJobFpGVndaR0YwWlhNc1hHNGdJR2x1YW1WamRHbHZiam9nVW1WaFkzUlZjR1JoZEdWelNXNXFaV04wYVc5dUxGeHVJQ0JoYzJGd09pQmhjMkZ3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsWVdOMFZYQmtZWFJsY3p0Y2JpSmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNWR0RPTVByb3BlcnR5Q29uZmlnXG4gKi9cblxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xuXG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICBjbGlwUGF0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGN4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY3k6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZHg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZpbGw6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmaWxsT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvbnRGYW1pbHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb250U2l6ZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZ4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZnk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGdyYWRpZW50VW5pdHM6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJFbmQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJNaWQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtYXJrZXJTdGFydDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG9mZnNldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBwYXR0ZXJuQ29udGVudFVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcGF0dGVyblVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcG9pbnRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHJ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3ByZWFkTWV0aG9kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RvcENvbG9yOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RvcE9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VEYXNoYXJyYXk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VMaW5lY2FwOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlT3BhY2l0eTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZVdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdGV4dEFuY2hvcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHRyYW5zZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZlcnNpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB2aWV3Qm94OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5MTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHkyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTogTVVTVF9VU0VfQVRUUklCVVRFXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgY2xpcFBhdGg6ICdjbGlwLXBhdGgnLFxuICAgIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICAgIGZvbnRTaXplOiAnZm9udC1zaXplJyxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogJ2dyYWRpZW50VHJhbnNmb3JtJyxcbiAgICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gICAgbWFya2VyRW5kOiAnbWFya2VyLWVuZCcsXG4gICAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgICBzcHJlYWRNZXRob2Q6ICdzcHJlYWRNZXRob2QnLFxuICAgIHN0b3BDb2xvcjogJ3N0b3AtY29sb3InLFxuICAgIHN0b3BPcGFjaXR5OiAnc3RvcC1vcGFjaXR5JyxcbiAgICBzdHJva2VEYXNoYXJyYXk6ICdzdHJva2UtZGFzaGFycmF5JyxcbiAgICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICAgIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gICAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnLFxuICAgIHRleHRBbmNob3I6ICd0ZXh0LWFuY2hvcicsXG4gICAgdmlld0JveDogJ3ZpZXdCb3gnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1ZHRE9NUHJvcGVydHlDb25maWc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VsZWN0RXZlbnRQbHVnaW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZShcIi4vZ2V0QWN0aXZlRWxlbWVudFwiKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKFwiLi9pc1RleHRJbnB1dEVsZW1lbnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKFwiLi9zaGFsbG93RXF1YWxcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIHNlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TZWxlY3Q6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TZWxlY3RDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudSxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXG4gICAgXVxuICB9XG59O1xuXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbnZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbnZhciBtb3VzZURvd24gPSBmYWxzZTtcblxuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIG5vZGUgJiZcbiAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmVudEVsZW1lbnQ6IHJhbmdlLnBhcmVudEVsZW1lbnQoKSxcbiAgICAgIHRleHQ6IHJhbmdlLnRleHQsXG4gICAgICB0b3A6IHJhbmdlLmJvdW5kaW5nVG9wLFxuICAgICAgbGVmdDogcmFuZ2UuYm91bmRpbmdMZWZ0XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFBvbGwgc2VsZWN0aW9uIHRvIHNlZSB3aGV0aGVyIGl0J3MgY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9TeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgaWYgKG1vdXNlRG93biB8fFxuICAgICAgYWN0aXZlRWxlbWVudCA9PSBudWxsIHx8XG4gICAgICBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE9ubHkgZmlyZSB3aGVuIHNlbGVjdGlvbiBoYXMgYWN0dWFsbHkgY2hhbmdlZC5cbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oYWN0aXZlRWxlbWVudCk7XG4gIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgbGFzdFNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG5cbiAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLnNlbGVjdCxcbiAgICAgIGFjdGl2ZUVsZW1lbnRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcblxuICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0JztcbiAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHN5bnRoZXRpY0V2ZW50KTtcblxuICAgIHJldHVybiBzeW50aGV0aWNFdmVudDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uU2VsZWN0YCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgc2VsZWN0IGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gY29udGVudEVkaXRhYmxlXG4gKlxuICogVGhpcyBkaWZmZXJzIGZyb20gbmF0aXZlIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIGluIHRoZSBmb2xsb3dpbmcgd2F5czpcbiAqIC0gRmlyZXMgb24gY29udGVudEVkaXRhYmxlIGZpZWxkcyBhcyB3ZWxsIGFzIGlucHV0cy5cbiAqIC0gRmlyZXMgZm9yIGNvbGxhcHNlZCBzZWxlY3Rpb24uXG4gKiAtIEZpcmVzIGFmdGVyIHVzZXIgaW5wdXQuXG4gKi9cbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0b3BMZXZlbFRhcmdldCkgfHxcbiAgICAgICAgICAgIHRvcExldmVsVGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRJRCA9IHRvcExldmVsVGFyZ2V0SUQ7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgICAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQpO1xuXG4gICAgICAvLyBDaHJvbWUgYW5kIElFIGZpcmUgbm9uLXN0YW5kYXJkIGV2ZW50IHdoZW4gc2VsZWN0aW9uIGlzIGNoYW5nZWQgKGFuZFxuICAgICAgLy8gc29tZXRpbWVzIHdoZW4gaXQgaGFzbid0KS5cbiAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgICAgLy8gYWZ0ZXIgZWFjaCBrZXkgZW50cnkuIFRoZSBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciBrZXlkb3duIGFuZCBiZWZvcmVcbiAgICAgIC8vIGtleXVwLCBidXQgd2UgY2hlY2sgb24ga2V5ZG93biBhcyB3ZWxsIGluIHRoZSBjYXNlIG9mIGhvbGRpbmcgZG93biBhXG4gICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RXZlbnRQbHVnaW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU2VydmVyUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpemUgb2YgdGhlIHJlYWN0Um9vdCBJRCBzcGFjZS4gV2UgZ2VuZXJhdGUgcmFuZG9tIG51bWJlcnMgZm9yIFJlYWN0IHJvb3RcbiAqIElEcyBhbmQgaWYgdGhlcmUncyBhIGNvbGxpc2lvbiB0aGUgZXZlbnRzIGFuZCBET00gdXBkYXRlIHN5c3RlbSB3aWxsXG4gKiBnZXQgY29uZnVzZWQuIEluIHRoZSBmdXR1cmUgd2UgbmVlZCBhIHdheSB0byBnZW5lcmF0ZSBHVUlEcyBidXQgZm9yXG4gKiBub3cgdGhpcyB3aWxsIHdvcmsgb24gYSBzbWFsbGVyIHNjYWxlLlxuICovXG52YXIgR0xPQkFMX01PVU5UX1BPSU5UX01BWCA9IE1hdGgucG93KDIsIDUzKTtcblxudmFyIFNlcnZlclJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogR0xPQkFMX01PVU5UX1BPSU5UX01BWCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmVyUmVhY3RSb290SW5kZXg7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIEV2ZW50Q29uc3RhbnRzPXJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpLEV2ZW50UGx1Z2luVXRpbHM9cmVxdWlyZShcIi4vRXZlbnRQbHVnaW5VdGlsc1wiKSxFdmVudFByb3BhZ2F0b3JzPXJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIiksU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnRcIiksU3ludGhldGljRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIiksU3ludGhldGljRm9jdXNFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNGb2N1c0V2ZW50XCIpLFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljS2V5Ym9hcmRFdmVudFwiKSxTeW50aGV0aWNNb3VzZUV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIiksU3ludGhldGljRHJhZ0V2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY0RyYWdFdmVudFwiKSxTeW50aGV0aWNUb3VjaEV2ZW50PXJlcXVpcmUoXCIuL1N5bnRoZXRpY1RvdWNoRXZlbnRcIiksU3ludGhldGljVUlFdmVudD1yZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpLFN5bnRoZXRpY1doZWVsRXZlbnQ9cmVxdWlyZShcIi4vU3ludGhldGljV2hlZWxFdmVudFwiKSxnZXRFdmVudENoYXJDb2RlPXJlcXVpcmUoXCIuL2dldEV2ZW50Q2hhckNvZGVcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxrZXlPZj1yZXF1aXJlKFwiLi9rZXlPZlwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIiksdG9wTGV2ZWxUeXBlcz1FdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLGV2ZW50VHlwZXM9e2JsdXI6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvbkJsdXI6ITB9KSxjYXB0dXJlZDprZXlPZih7b25CbHVyQ2FwdHVyZTohMH0pfX0sY2xpY2s6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvbkNsaWNrOiEwfSksY2FwdHVyZWQ6a2V5T2Yoe29uQ2xpY2tDYXB0dXJlOiEwfSl9fSxjb250ZXh0TWVudTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uQ29udGV4dE1lbnU6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Db250ZXh0TWVudUNhcHR1cmU6ITB9KX19LGNvcHk6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvbkNvcHk6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Db3B5Q2FwdHVyZTohMH0pfX0sY3V0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25DdXQ6ITB9KSxjYXB0dXJlZDprZXlPZih7b25DdXRDYXB0dXJlOiEwfSl9fSxkb3VibGVDbGljazp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRG91YmxlQ2xpY2s6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Eb3VibGVDbGlja0NhcHR1cmU6ITB9KX19LGRyYWc6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvbkRyYWc6ITB9KSxjYXB0dXJlZDprZXlPZih7b25EcmFnQ2FwdHVyZTohMH0pfX0sZHJhZ0VuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRHJhZ0VuZDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbkRyYWdFbmRDYXB0dXJlOiEwfSl9fSxkcmFnRW50ZXI6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvbkRyYWdFbnRlcjohMH0pLGNhcHR1cmVkOmtleU9mKHtvbkRyYWdFbnRlckNhcHR1cmU6ITB9KX19LGRyYWdFeGl0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25EcmFnRXhpdDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbkRyYWdFeGl0Q2FwdHVyZTohMH0pfX0sZHJhZ0xlYXZlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25EcmFnTGVhdmU6ITB9KSxjYXB0dXJlZDprZXlPZih7b25EcmFnTGVhdmVDYXB0dXJlOiEwfSl9fSxkcmFnT3Zlcjp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRHJhZ092ZXI6ITB9KSxjYXB0dXJlZDprZXlPZih7b25EcmFnT3ZlckNhcHR1cmU6ITB9KX19LGRyYWdTdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRHJhZ1N0YXJ0OiEwfSksY2FwdHVyZWQ6a2V5T2Yoe29uRHJhZ1N0YXJ0Q2FwdHVyZTohMH0pfX0sZHJvcDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRHJvcDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbkRyb3BDYXB0dXJlOiEwfSl9fSxmb2N1czp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRm9jdXM6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Gb2N1c0NhcHR1cmU6ITB9KX19LGlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25JbnB1dDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbklucHV0Q2FwdHVyZTohMH0pfX0sa2V5RG93bjp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uS2V5RG93bjohMH0pLGNhcHR1cmVkOmtleU9mKHtvbktleURvd25DYXB0dXJlOiEwfSl9fSxrZXlQcmVzczp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uS2V5UHJlc3M6ITB9KSxjYXB0dXJlZDprZXlPZih7b25LZXlQcmVzc0NhcHR1cmU6ITB9KX19LGtleVVwOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25LZXlVcDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbktleVVwQ2FwdHVyZTohMH0pfX0sbG9hZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uTG9hZDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbkxvYWRDYXB0dXJlOiEwfSl9fSxlcnJvcjp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uRXJyb3I6ITB9KSxjYXB0dXJlZDprZXlPZih7b25FcnJvckNhcHR1cmU6ITB9KX19LG1vdXNlRG93bjp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uTW91c2VEb3duOiEwfSksY2FwdHVyZWQ6a2V5T2Yoe29uTW91c2VEb3duQ2FwdHVyZTohMH0pfX0sbW91c2VNb3ZlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25Nb3VzZU1vdmU6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Nb3VzZU1vdmVDYXB0dXJlOiEwfSl9fSxtb3VzZU91dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uTW91c2VPdXQ6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Nb3VzZU91dENhcHR1cmU6ITB9KX19LG1vdXNlT3Zlcjp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uTW91c2VPdmVyOiEwfSksY2FwdHVyZWQ6a2V5T2Yoe29uTW91c2VPdmVyQ2FwdHVyZTohMH0pfX0sbW91c2VVcDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uTW91c2VVcDohMH0pLGNhcHR1cmVkOmtleU9mKHtvbk1vdXNlVXBDYXB0dXJlOiEwfSl9fSxwYXN0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6a2V5T2Yoe29uUGFzdGU6ITB9KSxjYXB0dXJlZDprZXlPZih7b25QYXN0ZUNhcHR1cmU6ITB9KX19LHJlc2V0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25SZXNldDohMH0pLGNhcHR1cmVkOmtleU9mKHtvblJlc2V0Q2FwdHVyZTohMH0pfX0sc2Nyb2xsOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25TY3JvbGw6ITB9KSxjYXB0dXJlZDprZXlPZih7b25TY3JvbGxDYXB0dXJlOiEwfSl9fSxzdWJtaXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvblN1Ym1pdDohMH0pLGNhcHR1cmVkOmtleU9mKHtvblN1Ym1pdENhcHR1cmU6ITB9KX19LHRvdWNoQ2FuY2VsOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDprZXlPZih7b25Ub3VjaENhbmNlbDohMH0pLGNhcHR1cmVkOmtleU9mKHtvblRvdWNoQ2FuY2VsQ2FwdHVyZTohMH0pfX0sdG91Y2hFbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvblRvdWNoRW5kOiEwfSksY2FwdHVyZWQ6a2V5T2Yoe29uVG91Y2hFbmRDYXB0dXJlOiEwfSl9fSx0b3VjaE1vdmU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvblRvdWNoTW92ZTohMH0pLGNhcHR1cmVkOmtleU9mKHtvblRvdWNoTW92ZUNhcHR1cmU6ITB9KX19LHRvdWNoU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvblRvdWNoU3RhcnQ6ITB9KSxjYXB0dXJlZDprZXlPZih7b25Ub3VjaFN0YXJ0Q2FwdHVyZTohMH0pfX0sd2hlZWw6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmtleU9mKHtvbldoZWVsOiEwfSksY2FwdHVyZWQ6a2V5T2Yoe29uV2hlZWxDYXB0dXJlOiEwfSl9fX0sdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnPXt0b3BCbHVyOmV2ZW50VHlwZXMuYmx1cix0b3BDbGljazpldmVudFR5cGVzLmNsaWNrLHRvcENvbnRleHRNZW51OmV2ZW50VHlwZXMuY29udGV4dE1lbnUsdG9wQ29weTpldmVudFR5cGVzLmNvcHksdG9wQ3V0OmV2ZW50VHlwZXMuY3V0LHRvcERvdWJsZUNsaWNrOmV2ZW50VHlwZXMuZG91YmxlQ2xpY2ssdG9wRHJhZzpldmVudFR5cGVzLmRyYWcsdG9wRHJhZ0VuZDpldmVudFR5cGVzLmRyYWdFbmQsdG9wRHJhZ0VudGVyOmV2ZW50VHlwZXMuZHJhZ0VudGVyLHRvcERyYWdFeGl0OmV2ZW50VHlwZXMuZHJhZ0V4aXQsdG9wRHJhZ0xlYXZlOmV2ZW50VHlwZXMuZHJhZ0xlYXZlLHRvcERyYWdPdmVyOmV2ZW50VHlwZXMuZHJhZ092ZXIsdG9wRHJhZ1N0YXJ0OmV2ZW50VHlwZXMuZHJhZ1N0YXJ0LHRvcERyb3A6ZXZlbnRUeXBlcy5kcm9wLHRvcEVycm9yOmV2ZW50VHlwZXMuZXJyb3IsdG9wRm9jdXM6ZXZlbnRUeXBlcy5mb2N1cyx0b3BJbnB1dDpldmVudFR5cGVzLmlucHV0LHRvcEtleURvd246ZXZlbnRUeXBlcy5rZXlEb3duLHRvcEtleVByZXNzOmV2ZW50VHlwZXMua2V5UHJlc3MsdG9wS2V5VXA6ZXZlbnRUeXBlcy5rZXlVcCx0b3BMb2FkOmV2ZW50VHlwZXMubG9hZCx0b3BNb3VzZURvd246ZXZlbnRUeXBlcy5tb3VzZURvd24sdG9wTW91c2VNb3ZlOmV2ZW50VHlwZXMubW91c2VNb3ZlLHRvcE1vdXNlT3V0OmV2ZW50VHlwZXMubW91c2VPdXQsdG9wTW91c2VPdmVyOmV2ZW50VHlwZXMubW91c2VPdmVyLHRvcE1vdXNlVXA6ZXZlbnRUeXBlcy5tb3VzZVVwLHRvcFBhc3RlOmV2ZW50VHlwZXMucGFzdGUsdG9wUmVzZXQ6ZXZlbnRUeXBlcy5yZXNldCx0b3BTY3JvbGw6ZXZlbnRUeXBlcy5zY3JvbGwsdG9wU3VibWl0OmV2ZW50VHlwZXMuc3VibWl0LHRvcFRvdWNoQ2FuY2VsOmV2ZW50VHlwZXMudG91Y2hDYW5jZWwsdG9wVG91Y2hFbmQ6ZXZlbnRUeXBlcy50b3VjaEVuZCx0b3BUb3VjaE1vdmU6ZXZlbnRUeXBlcy50b3VjaE1vdmUsdG9wVG91Y2hTdGFydDpldmVudFR5cGVzLnRvdWNoU3RhcnQsdG9wV2hlZWw6ZXZlbnRUeXBlcy53aGVlbH07Zm9yKHZhciB0eXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyl0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdHlwZV0uZGVwZW5kZW5jaWVzPVt0eXBlXTt2YXIgU2ltcGxlRXZlbnRQbHVnaW49e2V2ZW50VHlwZXM6ZXZlbnRUeXBlcyxleGVjdXRlRGlzcGF0Y2g6ZnVuY3Rpb24oZXZlbnQsbGlzdGVuZXIsZG9tSUQpe3ZhciByZXR1cm5WYWx1ZT1FdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaChldmVudCxsaXN0ZW5lcixkb21JRCk7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj93YXJuaW5nKFwiYm9vbGVhblwiIT10eXBlb2YgcmV0dXJuVmFsdWUsXCJSZXR1cm5pbmcgYGZhbHNlYCBmcm9tIGFuIGV2ZW50IGhhbmRsZXIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSBpZ25vcmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIEluc3RlYWQsIG1hbnVhbGx5IGNhbGwgZS5zdG9wUHJvcGFnYXRpb24oKSBvciBlLnByZXZlbnREZWZhdWx0KCksIGFzIGFwcHJvcHJpYXRlLlwiKTpudWxsLHJldHVyblZhbHVlPT09ITEmJihldmVudC5zdG9wUHJvcGFnYXRpb24oKSxldmVudC5wcmV2ZW50RGVmYXVsdCgpKX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbih0b3BMZXZlbFR5cGUsdG9wTGV2ZWxUYXJnZXQsdG9wTGV2ZWxUYXJnZXRJRCxuYXRpdmVFdmVudCl7dmFyIGRpc3BhdGNoQ29uZmlnPXRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO2lmKCFkaXNwYXRjaENvbmZpZylyZXR1cm4gbnVsbDt2YXIgRXZlbnRDb25zdHJ1Y3Rvcjtzd2l0Y2godG9wTGV2ZWxUeXBlKXtjYXNlIHRvcExldmVsVHlwZXMudG9wSW5wdXQ6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWQ6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVycm9yOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSZXNldDpjYXNlIHRvcExldmVsVHlwZXMudG9wU3VibWl0OkV2ZW50Q29uc3RydWN0b3I9U3ludGhldGljRXZlbnQ7YnJlYWs7Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOmlmKDA9PT1nZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSlyZXR1cm4gbnVsbDtjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6RXZlbnRDb25zdHJ1Y3Rvcj1TeW50aGV0aWNLZXlib2FyZEV2ZW50O2JyZWFrO2Nhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpFdmVudENvbnN0cnVjdG9yPVN5bnRoZXRpY0ZvY3VzRXZlbnQ7YnJlYWs7Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrOmlmKDI9PT1uYXRpdmVFdmVudC5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEb3VibGVDbGljazpjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmU6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0OmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXI6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6RXZlbnRDb25zdHJ1Y3Rvcj1TeW50aGV0aWNNb3VzZUV2ZW50O2JyZWFrO2Nhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW5kOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW50ZXI6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFeGl0OmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnTGVhdmU6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdPdmVyOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnU3RhcnQ6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyb3A6RXZlbnRDb25zdHJ1Y3Rvcj1TeW50aGV0aWNEcmFnRXZlbnQ7YnJlYWs7Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZDpjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlOmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0OkV2ZW50Q29uc3RydWN0b3I9U3ludGhldGljVG91Y2hFdmVudDticmVhaztjYXNlIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsOkV2ZW50Q29uc3RydWN0b3I9U3ludGhldGljVUlFdmVudDticmVhaztjYXNlIHRvcExldmVsVHlwZXMudG9wV2hlZWw6RXZlbnRDb25zdHJ1Y3Rvcj1TeW50aGV0aWNXaGVlbEV2ZW50O2JyZWFrO2Nhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb3B5OmNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDdXQ6Y2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOkV2ZW50Q29uc3RydWN0b3I9U3ludGhldGljQ2xpcGJvYXJkRXZlbnR9XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoRXZlbnRDb25zdHJ1Y3RvcixcIlNpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC5cIix0b3BMZXZlbFR5cGUpOmludmFyaWFudChFdmVudENvbnN0cnVjdG9yKTt2YXIgZXZlbnQ9RXZlbnRDb25zdHJ1Y3Rvci5nZXRQb29sZWQoZGlzcGF0Y2hDb25maWcsdG9wTGV2ZWxUYXJnZXRJRCxuYXRpdmVFdmVudCk7cmV0dXJuIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCksZXZlbnR9fTttb2R1bGUuZXhwb3J0cz1TaW1wbGVFdmVudFBsdWdpbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlUybHRjR3hsUlhabGJuUlFiSFZuYVc0dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmRCTEZsQlJVRXNTVUZCU1N4blFrRkJhVUlzVVVGQlVTeHZRa0ZEZWtJc2FVSkJRVzFDTEZGQlFWRXNjMEpCUXpOQ0xHbENRVUZ0UWl4UlFVRlJMSE5DUVVNelFpeDNRa0ZCTUVJc1VVRkJVU3cyUWtGRGJFTXNaVUZCYVVJc1VVRkJVU3h2UWtGRGVrSXNiMEpCUVhOQ0xGRkJRVkVzZVVKQlF6bENMSFZDUVVGNVFpeFJRVUZSTERSQ1FVTnFReXh2UWtGQmMwSXNVVUZCVVN4NVFrRkRPVUlzYlVKQlFYRkNMRkZCUVZFc2QwSkJRemRDTEc5Q1FVRnpRaXhSUVVGUkxIbENRVU01UWl4cFFrRkJiVUlzVVVGQlVTeHpRa0ZETTBJc2IwSkJRWE5DTEZGQlFWRXNlVUpCUlRsQ0xHbENRVUZ0UWl4UlFVRlJMSE5DUVVVelFpeFZRVUZaTEZGQlFWRXNaVUZEY0VJc1RVRkJVU3hSUVVGUkxGZEJRMmhDTEZGQlFWVXNVVUZCVVN4aFFVVnNRaXhqUVVGblFpeGxRVUZsTEdOQlJTOUNMRmxCUTBZc1RVRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNVVUZCVVN4SlFVTjRRaXhUUVVGVkxFOUJRVThzWlVGQlpTeE5RVWR3UXl4UFFVTkZMSGxDUVVORkxGRkJRVk1zVDBGQlR5eFRRVUZUTEVsQlEzcENMRk5CUVZVc1QwRkJUeXhuUWtGQlowSXNUVUZIY2tNc1lVRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNaVUZCWlN4SlFVTXZRaXhUUVVGVkxFOUJRVThzYzBKQlFYTkNMRTFCUnpORExFMUJRMFVzZVVKQlEwVXNVVUZCVXl4UFFVRlBMRkZCUVZFc1NVRkRlRUlzVTBGQlZTeFBRVUZQTEdWQlFXVXNUVUZIY0VNc1MwRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNUMEZCVHl4SlFVTjJRaXhUUVVGVkxFOUJRVThzWTBGQll5eE5RVWR1UXl4aFFVTkZMSGxDUVVORkxGRkJRVk1zVDBGQlR5eGxRVUZsTEVsQlF5OUNMRk5CUVZVc1QwRkJUeXh6UWtGQmMwSXNUVUZITTBNc1RVRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNVVUZCVVN4SlFVTjRRaXhUUVVGVkxFOUJRVThzWlVGQlpTeE5RVWR3UXl4VFFVTkZMSGxDUVVORkxGRkJRVk1zVDBGQlR5eFhRVUZYTEVsQlF6TkNMRk5CUVZVc1QwRkJUeXhyUWtGQmEwSXNUVUZIZGtNc1YwRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNZVUZCWVN4SlFVTTNRaXhUUVVGVkxFOUJRVThzYjBKQlFXOUNMRTFCUjNwRExGVkJRMFVzZVVKQlEwVXNVVUZCVXl4UFFVRlBMRmxCUVZrc1NVRkROVUlzVTBGQlZTeFBRVUZQTEcxQ1FVRnRRaXhOUVVkNFF5eFhRVU5GTEhsQ1FVTkZMRkZCUVZNc1QwRkJUeXhoUVVGaExFbEJRemRDTEZOQlFWVXNUMEZCVHl4dlFrRkJiMElzVFVGSGVrTXNWVUZEUlN4NVFrRkRSU3hSUVVGVExFOUJRVThzV1VGQldTeEpRVU0xUWl4VFFVRlZMRTlCUVU4c2JVSkJRVzFDTEUxQlIzaERMRmRCUTBVc2VVSkJRMFVzVVVGQlV5eFBRVUZQTEdGQlFXRXNTVUZETjBJc1UwRkJWU3hQUVVGUExHOUNRVUZ2UWl4TlFVZDZReXhOUVVORkxIbENRVU5GTEZGQlFWTXNUMEZCVHl4UlFVRlJMRWxCUTNoQ0xGTkJRVlVzVDBGQlR5eGxRVUZsTEUxQlIzQkRMRTlCUTBVc2VVSkJRMFVzVVVGQlV5eFBRVUZQTEZOQlFWTXNTVUZEZWtJc1UwRkJWU3hQUVVGUExHZENRVUZuUWl4TlFVZHlReXhQUVVORkxIbENRVU5GTEZGQlFWTXNUMEZCVHl4VFFVRlRMRWxCUTNwQ0xGTkJRVlVzVDBGQlR5eG5Ra0ZCWjBJc1RVRkhja01zVTBGRFJTeDVRa0ZEUlN4UlFVRlRMRTlCUVU4c1YwRkJWeXhKUVVNelFpeFRRVUZWTEU5QlFVOHNhMEpCUVd0Q0xFMUJSM1pETEZWQlEwVXNlVUpCUTBVc1VVRkJVeXhQUVVGUExGbEJRVmtzU1VGRE5VSXNVMEZCVlN4UFFVRlBMRzFDUVVGdFFpeE5RVWQ0UXl4UFFVTkZMSGxDUVVORkxGRkJRVk1zVDBGQlR5eFRRVUZUTEVsQlEzcENMRk5CUVZVc1QwRkJUeXhuUWtGQlowSXNUVUZIY2tNc1RVRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNVVUZCVVN4SlFVTjRRaXhUUVVGVkxFOUJRVThzWlVGQlpTeE5RVWR3UXl4UFFVTkZMSGxDUVVORkxGRkJRVk1zVDBGQlR5eFRRVUZUTEVsQlEzcENMRk5CUVZVc1QwRkJUeXhuUWtGQlowSXNUVUZMY2tNc1YwRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNZVUZCWVN4SlFVTTNRaXhUUVVGVkxFOUJRVThzYjBKQlFXOUNMRTFCUjNwRExGZEJRMFVzZVVKQlEwVXNVVUZCVXl4UFFVRlBMR0ZCUVdFc1NVRkROMElzVTBGQlZTeFBRVUZQTEc5Q1FVRnZRaXhOUVVkNlF5eFZRVU5GTEhsQ1FVTkZMRkZCUVZNc1QwRkJUeXhaUVVGWkxFbEJRelZDTEZOQlFWVXNUMEZCVHl4dFFrRkJiVUlzVFVGSGVFTXNWMEZEUlN4NVFrRkRSU3hSUVVGVExFOUJRVThzWVVGQllTeEpRVU0zUWl4VFFVRlZMRTlCUVU4c2IwSkJRVzlDTEUxQlIzcERMRk5CUTBVc2VVSkJRMFVzVVVGQlV5eFBRVUZQTEZkQlFWY3NTVUZETTBJc1UwRkJWU3hQUVVGUExHdENRVUZyUWl4TlFVZDJReXhQUVVORkxIbENRVU5GTEZGQlFWTXNUMEZCVHl4VFFVRlRMRWxCUTNwQ0xGTkJRVlVzVDBGQlR5eG5Ra0ZCWjBJc1RVRkhja01zVDBGRFJTeDVRa0ZEUlN4UlFVRlRMRTlCUVU4c1UwRkJVeXhKUVVONlFpeFRRVUZWTEU5QlFVOHNaMEpCUVdkQ0xFMUJSM0pETEZGQlEwVXNlVUpCUTBVc1VVRkJVeXhQUVVGUExGVkJRVlVzU1VGRE1VSXNVMEZCVlN4UFFVRlBMR2xDUVVGcFFpeE5RVWQwUXl4UlFVTkZMSGxDUVVORkxGRkJRVk1zVDBGQlR5eFZRVUZWTEVsQlF6RkNMRk5CUVZVc1QwRkJUeXhwUWtGQmFVSXNUVUZIZEVNc1lVRkRSU3g1UWtGRFJTeFJRVUZUTEU5QlFVOHNaVUZCWlN4SlFVTXZRaXhUUVVGVkxFOUJRVThzYzBKQlFYTkNMRTFCUnpORExGVkJRMFVzZVVKQlEwVXNVVUZCVXl4UFFVRlBMRmxCUVZrc1NVRkROVUlzVTBGQlZTeFBRVUZQTEcxQ1FVRnRRaXhOUVVkNFF5eFhRVU5GTEhsQ1FVTkZMRkZCUVZNc1QwRkJUeXhoUVVGaExFbEJRemRDTEZOQlFWVXNUMEZCVHl4dlFrRkJiMElzVFVGSGVrTXNXVUZEUlN4NVFrRkRSU3hSUVVGVExFOUJRVThzWTBGQll5eEpRVU01UWl4VFFVRlZMRTlCUVU4c2NVSkJRWEZDTEUxQlJ6RkRMRTlCUTBVc2VVSkJRMFVzVVVGQlV5eFBRVUZQTEZOQlFWTXNTVUZEZWtJc1UwRkJWU3hQUVVGUExHZENRVUZuUWl4UFFVdHVReXhuUTBGRFJpeFJRVUZuUWl4WFFVRlhMRXRCUXpOQ0xGTkJRV2RDTEZkQlFWY3NUVUZETTBJc1pVRkJaMElzVjBGQlZ5eFpRVU16UWl4UlFVRm5RaXhYUVVGWExFdEJRek5DTEU5QlFXZENMRmRCUVZjc1NVRkRNMElzWlVGQlowSXNWMEZCVnl4WlFVTXpRaXhSUVVGblFpeFhRVUZYTEV0QlF6TkNMRmRCUVdkQ0xGZEJRVmNzVVVGRE0wSXNZVUZCWjBJc1YwRkJWeXhWUVVNelFpeFpRVUZuUWl4WFFVRlhMRk5CUXpOQ0xHRkJRV2RDTEZkQlFWY3NWVUZETTBJc1dVRkJaMElzVjBGQlZ5eFRRVU16UWl4aFFVRm5RaXhYUVVGWExGVkJRek5DTEZGQlFXZENMRmRCUVZjc1MwRkRNMElzVTBGQlowSXNWMEZCVnl4TlFVTXpRaXhUUVVGblFpeFhRVUZYTEUxQlF6TkNMRk5CUVdkQ0xGZEJRVmNzVFVGRE0wSXNWMEZCWjBJc1YwRkJWeXhSUVVNelFpeFpRVUZuUWl4WFFVRlhMRk5CUXpOQ0xGTkJRV2RDTEZkQlFWY3NUVUZETTBJc1VVRkJaMElzVjBGQlZ5eExRVU16UWl4aFFVRm5RaXhYUVVGWExGVkJRek5DTEdGQlFXZENMRmRCUVZjc1ZVRkRNMElzV1VGQlowSXNWMEZCVnl4VFFVTXpRaXhoUVVGblFpeFhRVUZYTEZWQlF6TkNMRmRCUVdkQ0xGZEJRVmNzVVVGRE0wSXNVMEZCWjBJc1YwRkJWeXhOUVVNelFpeFRRVUZuUWl4WFFVRlhMRTFCUXpOQ0xGVkJRV2RDTEZkQlFWY3NUMEZETTBJc1ZVRkJaMElzVjBGQlZ5eFBRVU16UWl4bFFVRm5RaXhYUVVGWExGbEJRek5DTEZsQlFXZENMRmRCUVZjc1UwRkRNMElzWVVGQlowSXNWMEZCVnl4VlFVTXpRaXhqUVVGblFpeFhRVUZYTEZkQlF6TkNMRk5CUVdkQ0xGZEJRVmNzVFVGSE4wSXNTMEZCU3l4SFFVRkpMRkZCUVZFc1owTkJRMllzSzBKQlFTdENMRTFCUVUwc1kwRkJaMElzUzBGSGRrUXNTVUZCU1N4dlFrRkZSaXhYUVVGWkxGZEJWVm9zWjBKQlFXbENMRk5CUVZNc1RVRkJUeXhUUVVGVkxFOUJRM3BETEVkQlFVa3NZVUZCWXl4cFFrRkJhVUlzWjBKQlFXZENMRTFCUVU4c1UwRkJWU3hOUVVWdVJTeG5Ra0ZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVVVGRGFFSXNhVUpCUVdoQ0xHRkJRMUFzYjB4QlIwVXNTMEZGUVN4bFFVRm5RaXhKUVVOc1FpeE5RVUZOTEd0Q1FVTk9MRTFCUVUwc2JVSkJXVllzWTBGQlpTeFRRVU5ZTEdGQlEwRXNaVUZEUVN4cFFrRkRRU3hoUVVOR0xFZEJRVWtzWjBKQlFXbENMQ3RDUVVFclFpeGhRVU53UkN4TFFVRkxMR1ZCUTBnc1RVRkJUeXhMUVVWVUxFbEJRVWtzYVVKQlEwb3NVVUZCVVN4alFVTk9MRWxCUVVzc1pVRkJZeXhUUVVOdVFpeEpRVUZMTEdWQlFXTXNVVUZEYmtJc1NVRkJTeXhsUVVGakxGTkJRMjVDTEVsQlFVc3NaVUZCWXl4VFFVTnVRaXhKUVVGTExHVkJRV01zVlVGSGFrSXNhVUpCUVcxQ0xHTkJRMjVDTEUxQlEwWXNTMEZCU3l4bFFVRmpMRmxCU1dwQ0xFZEJRWE5ETEVsQlFXeERMR2xDUVVGcFFpeGhRVU51UWl4TlFVRlBMRXRCUjFnc1MwRkJTeXhsUVVGakxGZEJRMjVDTEVsQlFVc3NaVUZCWXl4VFFVTnFRaXhwUWtGQmJVSXNjMEpCUTI1Q0xFMUJRMFlzUzBGQlN5eGxRVUZqTEZGQlEyNUNMRWxCUVVzc1pVRkJZeXhUUVVOcVFpeHBRa0ZCYlVJc2JVSkJRMjVDTEUxQlEwWXNTMEZCU3l4bFFVRmpMRk5CUjJwQ0xFZEJRVEpDTEVsQlFYWkNMRmxCUVZrc1QwRkRaQ3hOUVVGUExFdEJSMWdzUzBGQlN5eGxRVUZqTEdWQlEyNUNMRWxCUVVzc1pVRkJZeXhsUVVOdVFpeEpRVUZMTEdWQlFXTXNZVUZEYmtJc1NVRkJTeXhsUVVGakxHRkJRMjVDTEVsQlFVc3NaVUZCWXl4WlFVTnVRaXhKUVVGTExHVkJRV01zWVVGRGJrSXNTVUZCU3l4bFFVRmpMRmRCUTJwQ0xHbENRVUZ0UWl4dFFrRkRia0lzVFVGRFJpeExRVUZMTEdWQlFXTXNVVUZEYmtJc1NVRkJTeXhsUVVGakxGZEJRMjVDTEVsQlFVc3NaVUZCWXl4aFFVTnVRaXhKUVVGTExHVkJRV01zV1VGRGJrSXNTVUZCU3l4bFFVRmpMR0ZCUTI1Q0xFbEJRVXNzWlVGQll5eFpRVU51UWl4SlFVRkxMR1ZCUVdNc1lVRkRia0lzU1VGQlN5eGxRVUZqTEZGQlEycENMR2xDUVVGdFFpeHJRa0ZEYmtJc1RVRkRSaXhMUVVGTExHVkJRV01zWlVGRGJrSXNTVUZCU3l4bFFVRmpMRmxCUTI1Q0xFbEJRVXNzWlVGQll5eGhRVU51UWl4SlFVRkxMR1ZCUVdNc1kwRkRha0lzYVVKQlFXMUNMRzFDUVVOdVFpeE5RVU5HTEV0QlFVc3NaVUZCWXl4VlFVTnFRaXhwUWtGQmJVSXNaMEpCUTI1Q0xFMUJRMFlzUzBGQlN5eGxRVUZqTEZOQlEycENMR2xDUVVGdFFpeHRRa0ZEYmtJc1RVRkRSaXhMUVVGTExHVkJRV01zVVVGRGJrSXNTVUZCU3l4bFFVRmpMRTlCUTI1Q0xFbEJRVXNzWlVGQll5eFRRVU5xUWl4cFFrRkJiVUlzZDBKQlIzUkNMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEzWkRMR2xDUVVOQkxHbEVRVU5CTEdOQlEwVXNWVUZCVlN4cFFrRkRaQ3hKUVVGSkxFOUJRVkVzYVVKQlFXbENMRlZCUXpOQ0xHVkJRMEVzYVVKQlEwRXNXVUZIUml4UFFVUkJMR3RDUVVGcFFpdzJRa0ZCTmtJc1QwRkRka01zVDBGTFdDeFJRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQlRhVzF3YkdWRmRtVnVkRkJzZFdkcGJseHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRVYyWlc1MFEyOXVjM1JoYm5SeklEMGdjbVZ4ZFdseVpTaGNJaTR2UlhabGJuUkRiMjV6ZEdGdWRITmNJaWs3WEc1MllYSWdSWFpsYm5SUWJIVm5hVzVWZEdsc2N5QTlJSEpsY1hWcGNtVW9YQ0l1TDBWMlpXNTBVR3gxWjJsdVZYUnBiSE5jSWlrN1hHNTJZWElnUlhabGJuUlFjbTl3WVdkaGRHOXljeUE5SUhKbGNYVnBjbVVvWENJdUwwVjJaVzUwVUhKdmNHRm5ZWFJ2Y25OY0lpazdYRzUyWVhJZ1UzbHVkR2hsZEdsalEyeHBjR0p2WVhKa1JYWmxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVRlVzUwYUdWMGFXTkRiR2x3WW05aGNtUkZkbVZ1ZEZ3aUtUdGNiblpoY2lCVGVXNTBhR1YwYVdORmRtVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxTjViblJvWlhScFkwVjJaVzUwWENJcE8xeHVkbUZ5SUZONWJuUm9aWFJwWTBadlkzVnpSWFpsYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlUZVc1MGFHVjBhV05HYjJOMWMwVjJaVzUwWENJcE8xeHVkbUZ5SUZONWJuUm9aWFJwWTB0bGVXSnZZWEprUlhabGJuUWdQU0J5WlhGMWFYSmxLRndpTGk5VGVXNTBhR1YwYVdOTFpYbGliMkZ5WkVWMlpXNTBYQ0lwTzF4dWRtRnlJRk41Ym5Sb1pYUnBZMDF2ZFhObFJYWmxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOVRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBYQ0lwTzF4dWRtRnlJRk41Ym5Sb1pYUnBZMFJ5WVdkRmRtVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxTjViblJvWlhScFkwUnlZV2RGZG1WdWRGd2lLVHRjYm5aaGNpQlRlVzUwYUdWMGFXTlViM1ZqYUVWMlpXNTBJRDBnY21WeGRXbHlaU2hjSWk0dlUzbHVkR2hsZEdsalZHOTFZMmhGZG1WdWRGd2lLVHRjYm5aaGNpQlRlVzUwYUdWMGFXTlZTVVYyWlc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2VTNsdWRHaGxkR2xqVlVsRmRtVnVkRndpS1R0Y2JuWmhjaUJUZVc1MGFHVjBhV05YYUdWbGJFVjJaVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZVM2x1ZEdobGRHbGpWMmhsWld4RmRtVnVkRndpS1R0Y2JseHVkbUZ5SUdkbGRFVjJaVzUwUTJoaGNrTnZaR1VnUFNCeVpYRjFhWEpsS0Z3aUxpOW5aWFJGZG1WdWRFTm9ZWEpEYjJSbFhDSXBPMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmFXNTJZWEpwWVc1MFhDSXBPMXh1ZG1GeUlHdGxlVTltSUQwZ2NtVnhkV2x5WlNoY0lpNHZhMlY1VDJaY0lpazdYRzUyWVhJZ2QyRnlibWx1WnlBOUlISmxjWFZwY21Vb1hDSXVMM2RoY201cGJtZGNJaWs3WEc1Y2JuWmhjaUIwYjNCTVpYWmxiRlI1Y0dWeklEMGdSWFpsYm5SRGIyNXpkR0Z1ZEhNdWRHOXdUR1YyWld4VWVYQmxjenRjYmx4dWRtRnlJR1YyWlc1MFZIbHdaWE1nUFNCN1hHNGdJR0pzZFhJNklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9lMjl1UW14MWNqb2dkSEoxWlgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0h0dmJrSnNkWEpEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHTnNhV05yT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZia05zYVdOck9pQjBjblZsZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZTI5dVEyeHBZMnREWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHTnZiblJsZUhSTlpXNTFPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0h0dmJrTnZiblJsZUhSTlpXNTFPaUIwY25WbGZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2UyOXVRMjl1ZEdWNGRFMWxiblZEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHTnZjSGs2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2UyOXVRMjl3ZVRvZ2RISjFaWDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHR2YmtOdmNIbERZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdOMWREb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3YjI1RGRYUTZJSFJ5ZFdWOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN2IyNURkWFJEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHUnZkV0pzWlVOc2FXTnJPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0h0dmJrUnZkV0pzWlVOc2FXTnJPaUIwY25WbGZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2UyOXVSRzkxWW14bFEyeHBZMnREWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHUnlZV2M2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2UyOXVSSEpoWnpvZ2RISjFaWDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHR2YmtSeVlXZERZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdSeVlXZEZibVE2SUh0Y2JpQWdJQ0J3YUdGelpXUlNaV2RwYzNSeVlYUnBiMjVPWVcxbGN6b2dlMXh1SUNBZ0lDQWdZblZpWW14bFpEb2dhMlY1VDJZb2UyOXVSSEpoWjBWdVpEb2dkSEoxWlgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0h0dmJrUnlZV2RGYm1SRFlYQjBkWEpsT2lCMGNuVmxmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJR1J5WVdkRmJuUmxjam9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN2IyNUVjbUZuUlc1MFpYSTZJSFJ5ZFdWOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN2IyNUVjbUZuUlc1MFpYSkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdSeVlXZEZlR2wwT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZia1J5WVdkRmVHbDBPaUIwY25WbGZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2UyOXVSSEpoWjBWNGFYUkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUdSeVlXZE1aV0YyWlRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdiMjVFY21GblRHVmhkbVU2SUhSeWRXVjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdiMjVFY21GblRHVmhkbVZEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHUnlZV2RQZG1WeU9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHR2YmtSeVlXZFBkbVZ5T2lCMGNuVmxmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9lMjl1UkhKaFowOTJaWEpEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHUnlZV2RUZEdGeWREb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3YjI1RWNtRm5VM1JoY25RNklIUnlkV1Y5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3YjI1RWNtRm5VM1JoY25SRFlYQjBkWEpsT2lCMGNuVmxmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJR1J5YjNBNklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9lMjl1UkhKdmNEb2dkSEoxWlgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0h0dmJrUnliM0JEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHWnZZM1Z6T2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZia1p2WTNWek9pQjBjblZsZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZTI5dVJtOWpkWE5EWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHbHVjSFYwT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZia2x1Y0hWME9pQjBjblZsZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZTI5dVNXNXdkWFJEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHdGxlVVJ2ZDI0NklIdGNiaUFnSUNCd2FHRnpaV1JTWldkcGMzUnlZWFJwYjI1T1lXMWxjem9nZTF4dUlDQWdJQ0FnWW5WaVlteGxaRG9nYTJWNVQyWW9lMjl1UzJWNVJHOTNiam9nZEhKMVpYMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIdHZia3RsZVVSdmQyNURZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUd0bGVWQnlaWE56T2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZia3RsZVZCeVpYTnpPaUIwY25WbGZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2UyOXVTMlY1VUhKbGMzTkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUd0bGVWVndPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0h0dmJrdGxlVlZ3T2lCMGNuVmxmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9lMjl1UzJWNVZYQkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUd4dllXUTZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZTI5dVRHOWhaRG9nZEhKMVpYMHBMRnh1SUNBZ0lDQWdZMkZ3ZEhWeVpXUTZJR3RsZVU5bUtIdHZia3h2WVdSRFlYQjBkWEpsT2lCMGNuVmxmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJR1Z5Y205eU9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHR2YmtWeWNtOXlPaUIwY25WbGZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2UyOXVSWEp5YjNKRFlYQjBkWEpsT2lCMGNuVmxmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJQzh2SUU1dmRHVTZJRmRsSUdSdklHNXZkQ0JoYkd4dmR5QnNhWE4wWlc1cGJtY2dkRzhnYlc5MWMyVlBkbVZ5SUdWMlpXNTBjeTRnU1c1emRHVmhaQ3dnZFhObElIUm9aVnh1SUNBdkx5QnZiazF2ZFhObFJXNTBaWEl2YjI1TmIzVnpaVXhsWVhabElHTnlaV0YwWldRZ1lua2dZRVZ1ZEdWeVRHVmhkbVZGZG1WdWRGQnNkV2RwYm1BdVhHNGdJRzF2ZFhObFJHOTNiam9nZTF4dUlDQWdJSEJvWVhObFpGSmxaMmx6ZEhKaGRHbHZiazVoYldWek9pQjdYRzRnSUNBZ0lDQmlkV0ppYkdWa09pQnJaWGxQWmloN2IyNU5iM1Z6WlVSdmQyNDZJSFJ5ZFdWOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN2IyNU5iM1Z6WlVSdmQyNURZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUcxdmRYTmxUVzkyWlRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdiMjVOYjNWelpVMXZkbVU2SUhSeWRXVjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdiMjVOYjNWelpVMXZkbVZEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHMXZkWE5sVDNWME9pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHR2YmsxdmRYTmxUM1YwT2lCMGNuVmxmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9lMjl1VFc5MWMyVlBkWFJEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHMXZkWE5sVDNabGNqb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3YjI1TmIzVnpaVTkyWlhJNklIUnlkV1Y5S1N4Y2JpQWdJQ0FnSUdOaGNIUjFjbVZrT2lCclpYbFBaaWg3YjI1TmIzVnpaVTkyWlhKRFlYQjBkWEpsT2lCMGNuVmxmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJRzF2ZFhObFZYQTZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZTI5dVRXOTFjMlZWY0RvZ2RISjFaWDBwTEZ4dUlDQWdJQ0FnWTJGd2RIVnlaV1E2SUd0bGVVOW1LSHR2YmsxdmRYTmxWWEJEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lIQmhjM1JsT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZibEJoYzNSbE9pQjBjblZsZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZTI5dVVHRnpkR1ZEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lISmxjMlYwT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZibEpsYzJWME9pQjBjblZsZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZTI5dVVtVnpaWFJEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lITmpjbTlzYkRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdiMjVUWTNKdmJHdzZJSFJ5ZFdWOUtTeGNiaUFnSUNBZ0lHTmhjSFIxY21Wa09pQnJaWGxQWmloN2IyNVRZM0p2Ykd4RFlYQjBkWEpsT2lCMGNuVmxmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJSE4xWW0xcGREb2dlMXh1SUNBZ0lIQm9ZWE5sWkZKbFoybHpkSEpoZEdsdmJrNWhiV1Z6T2lCN1hHNGdJQ0FnSUNCaWRXSmliR1ZrT2lCclpYbFBaaWg3YjI1VGRXSnRhWFE2SUhSeWRXVjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdiMjVUZFdKdGFYUkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhSdmRXTm9RMkZ1WTJWc09pQjdYRzRnSUNBZ2NHaGhjMlZrVW1WbmFYTjBjbUYwYVc5dVRtRnRaWE02SUh0Y2JpQWdJQ0FnSUdKMVltSnNaV1E2SUd0bGVVOW1LSHR2YmxSdmRXTm9RMkZ1WTJWc09pQjBjblZsZlNrc1hHNGdJQ0FnSUNCallYQjBkWEpsWkRvZ2EyVjVUMllvZTI5dVZHOTFZMmhEWVc1alpXeERZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhSdmRXTm9SVzVrT2lCN1hHNGdJQ0FnY0doaGMyVmtVbVZuYVhOMGNtRjBhVzl1VG1GdFpYTTZJSHRjYmlBZ0lDQWdJR0oxWW1Kc1pXUTZJR3RsZVU5bUtIdHZibFJ2ZFdOb1JXNWtPaUIwY25WbGZTa3NYRzRnSUNBZ0lDQmpZWEIwZFhKbFpEb2dhMlY1VDJZb2UyOXVWRzkxWTJoRmJtUkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhSdmRXTm9UVzkyWlRvZ2UxeHVJQ0FnSUhCb1lYTmxaRkpsWjJsemRISmhkR2x2Yms1aGJXVnpPaUI3WEc0Z0lDQWdJQ0JpZFdKaWJHVmtPaUJyWlhsUFppaDdiMjVVYjNWamFFMXZkbVU2SUhSeWRXVjlLU3hjYmlBZ0lDQWdJR05oY0hSMWNtVmtPaUJyWlhsUFppaDdiMjVVYjNWamFFMXZkbVZEWVhCMGRYSmxPaUIwY25WbGZTbGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lIUnZkV05vVTNSaGNuUTZJSHRjYmlBZ0lDQndhR0Z6WldSU1pXZHBjM1J5WVhScGIyNU9ZVzFsY3pvZ2UxeHVJQ0FnSUNBZ1luVmlZbXhsWkRvZ2EyVjVUMllvZTI5dVZHOTFZMmhUZEdGeWREb2dkSEoxWlgwcExGeHVJQ0FnSUNBZ1kyRndkSFZ5WldRNklHdGxlVTltS0h0dmJsUnZkV05vVTNSaGNuUkRZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUhkb1pXVnNPaUI3WEc0Z0lDQWdjR2hoYzJWa1VtVm5hWE4wY21GMGFXOXVUbUZ0WlhNNklIdGNiaUFnSUNBZ0lHSjFZbUpzWldRNklHdGxlVTltS0h0dmJsZG9aV1ZzT2lCMGNuVmxmU2tzWEc0Z0lDQWdJQ0JqWVhCMGRYSmxaRG9nYTJWNVQyWW9lMjl1VjJobFpXeERZWEIwZFhKbE9pQjBjblZsZlNsY2JpQWdJQ0I5WEc0Z0lIMWNibjA3WEc1Y2JuWmhjaUIwYjNCTVpYWmxiRVYyWlc1MGMxUnZSR2x6Y0dGMFkyaERiMjVtYVdjZ1BTQjdYRzRnSUhSdmNFSnNkWEk2SUNBZ0lDQWdJQ0JsZG1WdWRGUjVjR1Z6TG1Kc2RYSXNYRzRnSUhSdmNFTnNhV05yT2lBZ0lDQWdJQ0JsZG1WdWRGUjVjR1Z6TG1Oc2FXTnJMRnh1SUNCMGIzQkRiMjUwWlhoMFRXVnVkVG9nWlhabGJuUlVlWEJsY3k1amIyNTBaWGgwVFdWdWRTeGNiaUFnZEc5d1EyOXdlVG9nSUNBZ0lDQWdJR1YyWlc1MFZIbHdaWE11WTI5d2VTeGNiaUFnZEc5d1EzVjBPaUFnSUNBZ0lDQWdJR1YyWlc1MFZIbHdaWE11WTNWMExGeHVJQ0IwYjNCRWIzVmliR1ZEYkdsamF6b2daWFpsYm5SVWVYQmxjeTVrYjNWaWJHVkRiR2xqYXl4Y2JpQWdkRzl3UkhKaFp6b2dJQ0FnSUNBZ0lHVjJaVzUwVkhsd1pYTXVaSEpoWnl4Y2JpQWdkRzl3UkhKaFowVnVaRG9nSUNBZ0lHVjJaVzUwVkhsd1pYTXVaSEpoWjBWdVpDeGNiaUFnZEc5d1JISmhaMFZ1ZEdWeU9pQWdJR1YyWlc1MFZIbHdaWE11WkhKaFowVnVkR1Z5TEZ4dUlDQjBiM0JFY21GblJYaHBkRG9nSUNBZ1pYWmxiblJVZVhCbGN5NWtjbUZuUlhocGRDeGNiaUFnZEc5d1JISmhaMHhsWVhabE9pQWdJR1YyWlc1MFZIbHdaWE11WkhKaFoweGxZWFpsTEZ4dUlDQjBiM0JFY21GblQzWmxjam9nSUNBZ1pYWmxiblJVZVhCbGN5NWtjbUZuVDNabGNpeGNiaUFnZEc5d1JISmhaMU4wWVhKME9pQWdJR1YyWlc1MFZIbHdaWE11WkhKaFoxTjBZWEowTEZ4dUlDQjBiM0JFY205d09pQWdJQ0FnSUNBZ1pYWmxiblJVZVhCbGN5NWtjbTl3TEZ4dUlDQjBiM0JGY25KdmNqb2dJQ0FnSUNBZ1pYWmxiblJVZVhCbGN5NWxjbkp2Y2l4Y2JpQWdkRzl3Um05amRYTTZJQ0FnSUNBZ0lHVjJaVzUwVkhsd1pYTXVabTlqZFhNc1hHNGdJSFJ2Y0VsdWNIVjBPaUFnSUNBZ0lDQmxkbVZ1ZEZSNWNHVnpMbWx1Y0hWMExGeHVJQ0IwYjNCTFpYbEViM2R1T2lBZ0lDQWdaWFpsYm5SVWVYQmxjeTVyWlhsRWIzZHVMRnh1SUNCMGIzQkxaWGxRY21WemN6b2dJQ0FnWlhabGJuUlVlWEJsY3k1clpYbFFjbVZ6Y3l4Y2JpQWdkRzl3UzJWNVZYQTZJQ0FnSUNBZ0lHVjJaVzUwVkhsd1pYTXVhMlY1VlhBc1hHNGdJSFJ2Y0V4dllXUTZJQ0FnSUNBZ0lDQmxkbVZ1ZEZSNWNHVnpMbXh2WVdRc1hHNGdJSFJ2Y0UxdmRYTmxSRzkzYmpvZ0lDQmxkbVZ1ZEZSNWNHVnpMbTF2ZFhObFJHOTNiaXhjYmlBZ2RHOXdUVzkxYzJWTmIzWmxPaUFnSUdWMlpXNTBWSGx3WlhNdWJXOTFjMlZOYjNabExGeHVJQ0IwYjNCTmIzVnpaVTkxZERvZ0lDQWdaWFpsYm5SVWVYQmxjeTV0YjNWelpVOTFkQ3hjYmlBZ2RHOXdUVzkxYzJWUGRtVnlPaUFnSUdWMlpXNTBWSGx3WlhNdWJXOTFjMlZQZG1WeUxGeHVJQ0IwYjNCTmIzVnpaVlZ3T2lBZ0lDQWdaWFpsYm5SVWVYQmxjeTV0YjNWelpWVndMRnh1SUNCMGIzQlFZWE4wWlRvZ0lDQWdJQ0FnWlhabGJuUlVlWEJsY3k1d1lYTjBaU3hjYmlBZ2RHOXdVbVZ6WlhRNklDQWdJQ0FnSUdWMlpXNTBWSGx3WlhNdWNtVnpaWFFzWEc0Z0lIUnZjRk5qY205c2JEb2dJQ0FnSUNCbGRtVnVkRlI1Y0dWekxuTmpjbTlzYkN4Y2JpQWdkRzl3VTNWaWJXbDBPaUFnSUNBZ0lHVjJaVzUwVkhsd1pYTXVjM1ZpYldsMExGeHVJQ0IwYjNCVWIzVmphRU5oYm1ObGJEb2daWFpsYm5SVWVYQmxjeTUwYjNWamFFTmhibU5sYkN4Y2JpQWdkRzl3Vkc5MVkyaEZibVE2SUNBZ0lHVjJaVzUwVkhsd1pYTXVkRzkxWTJoRmJtUXNYRzRnSUhSdmNGUnZkV05vVFc5MlpUb2dJQ0JsZG1WdWRGUjVjR1Z6TG5SdmRXTm9UVzkyWlN4Y2JpQWdkRzl3Vkc5MVkyaFRkR0Z5ZERvZ0lHVjJaVzUwVkhsd1pYTXVkRzkxWTJoVGRHRnlkQ3hjYmlBZ2RHOXdWMmhsWld3NklDQWdJQ0FnSUdWMlpXNTBWSGx3WlhNdWQyaGxaV3hjYm4wN1hHNWNibVp2Y2lBb2RtRnlJSFI1Y0dVZ2FXNGdkRzl3VEdWMlpXeEZkbVZ1ZEhOVWIwUnBjM0JoZEdOb1EyOXVabWxuS1NCN1hHNGdJSFJ2Y0V4bGRtVnNSWFpsYm5SelZHOUVhWE53WVhSamFFTnZibVpwWjF0MGVYQmxYUzVrWlhCbGJtUmxibU5wWlhNZ1BTQmJkSGx3WlYwN1hHNTlYRzVjYm5aaGNpQlRhVzF3YkdWRmRtVnVkRkJzZFdkcGJpQTlJSHRjYmx4dUlDQmxkbVZ1ZEZSNWNHVnpPaUJsZG1WdWRGUjVjR1Z6TEZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWVcxbElHRnpJSFJvWlNCa1pXWmhkV3gwSUdsdGNHeGxiV1Z1ZEdGMGFXOXVMQ0JsZUdObGNIUWdZMkZ1WTJWc2N5QjBhR1VnWlhabGJuUWdkMmhsYmlCeVpYUjFjbTVjYmlBZ0lDb2dkbUZzZFdVZ2FYTWdabUZzYzJVdUlGUm9hWE1nWW1Wb1lYWnBiM0lnZDJsc2JDQmlaU0JrYVhOaFlteGxaQ0JwYmlCaElHWjFkSFZ5WlNCeVpXeGxZWE5sTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1JYWmxiblFnZEc4Z1ltVWdaR2x6Y0dGMFkyaGxaQzVjYmlBZ0lDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdRWEJ3YkdsallYUnBiMjR0YkdWMlpXd2dZMkZzYkdKaFkyc3VYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCa2IyMUpSQ0JFVDAwZ1NVUWdkRzhnY0dGemN5QjBieUIwYUdVZ1kyRnNiR0poWTJzdVhHNGdJQ0FxTDF4dUlDQmxlR1ZqZFhSbFJHbHpjR0YwWTJnNklHWjFibU4wYVc5dUtHVjJaVzUwTENCc2FYTjBaVzVsY2l3Z1pHOXRTVVFwSUh0Y2JpQWdJQ0IyWVhJZ2NtVjBkWEp1Vm1Gc2RXVWdQU0JGZG1WdWRGQnNkV2RwYmxWMGFXeHpMbVY0WldOMWRHVkVhWE53WVhSamFDaGxkbVZ1ZEN3Z2JHbHpkR1Z1WlhJc0lHUnZiVWxFS1R0Y2JseHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdkSGx3Wlc5bUlISmxkSFZ5YmxaaGJIVmxJQ0U5UFNBblltOXZiR1ZoYmljc1hHNGdJQ0FnSUNBblVtVjBkWEp1YVc1bklHQm1ZV3h6WldBZ1puSnZiU0JoYmlCbGRtVnVkQ0JvWVc1a2JHVnlJR2x6SUdSbGNISmxZMkYwWldRZ1lXNWtJSGRwYkd3Z1ltVWdKeUFyWEc0Z0lDQWdJQ0FuYVdkdWIzSmxaQ0JwYmlCaElHWjFkSFZ5WlNCeVpXeGxZWE5sTGlCSmJuTjBaV0ZrTENCdFlXNTFZV3hzZVNCallXeHNJQ2NnSzF4dUlDQWdJQ0FnSjJVdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrZ2IzSWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BMQ0JoY3lCaGNIQnliM0J5YVdGMFpTNG5YRzRnSUNBZ0tTQTZJRzUxYkd3cE8xeHVYRzRnSUNBZ2FXWWdLSEpsZEhWeWJsWmhiSFZsSUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ1pYWmxiblF1YzNSdmNGQnliM0JoWjJGMGFXOXVLQ2s3WEc0Z0lDQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUnZjRXhsZG1Wc1ZIbHdaU0JTWldOdmNtUWdabkp2YlNCZ1JYWmxiblJEYjI1emRHRnVkSE5nTGx4dUlDQWdLaUJBY0dGeVlXMGdlMFJQVFVWMlpXNTBWR0Z5WjJWMGZTQjBiM0JNWlhabGJGUmhjbWRsZENCVWFHVWdiR2x6ZEdWdWFXNW5JR052YlhCdmJtVnVkQ0J5YjI5MElHNXZaR1V1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBiM0JNWlhabGJGUmhjbWRsZEVsRUlFbEVJRzltSUdCMGIzQk1aWFpsYkZSaGNtZGxkR0F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnVZWFJwZG1WRmRtVnVkQ0JPWVhScGRtVWdZbkp2ZDNObGNpQmxkbVZ1ZEM1Y2JpQWdJQ29nUUhKbGRIVnliaUI3S24wZ1FXNGdZV05qZFcxMWJHRjBhVzl1SUc5bUlITjViblJvWlhScFl5QmxkbVZ1ZEhNdVhHNGdJQ0FxSUVCelpXVWdlMFYyWlc1MFVHeDFaMmx1U0hWaUxtVjRkSEpoWTNSRmRtVnVkSE45WEc0Z0lDQXFMMXh1SUNCbGVIUnlZV04wUlhabGJuUnpPaUJtZFc1amRHbHZiaWhjYmlBZ0lDQWdJSFJ2Y0V4bGRtVnNWSGx3WlN4Y2JpQWdJQ0FnSUhSdmNFeGxkbVZzVkdGeVoyVjBMRnh1SUNBZ0lDQWdkRzl3VEdWMlpXeFVZWEpuWlhSSlJDeGNiaUFnSUNBZ0lHNWhkR2wyWlVWMlpXNTBLU0I3WEc0Z0lDQWdkbUZ5SUdScGMzQmhkR05vUTI5dVptbG5JRDBnZEc5d1RHVjJaV3hGZG1WdWRITlViMFJwYzNCaGRHTm9RMjl1Wm1sblczUnZjRXhsZG1Wc1ZIbHdaVjA3WEc0Z0lDQWdhV1lnS0NGa2FYTndZWFJqYUVOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCRmRtVnVkRU52Ym5OMGNuVmpkRzl5TzF4dUlDQWdJSE4zYVhSamFDQW9kRzl3VEdWMlpXeFVlWEJsS1NCN1hHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdTVzV3ZFhRNlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdURzloWkRwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQkZjbkp2Y2pwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlNaWE5sZERwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQlRkV0p0YVhRNlhHNGdJQ0FnSUNBZ0lDOHZJRWhVVFV3Z1JYWmxiblJ6WEc0Z0lDQWdJQ0FnSUM4dklFQnpaV1VnYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdmFIUnRiRFV2YVc1a1pYZ3VhSFJ0YkNObGRtVnVkSE10TUZ4dUlDQWdJQ0FnSUNCRmRtVnVkRU52Ym5OMGNuVmpkRzl5SUQwZ1UzbHVkR2hsZEdsalJYWmxiblE3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0V0bGVWQnlaWE56T2x4dUlDQWdJQ0FnSUNBdkx5QkdhWEpsUm05NElHTnlaV0YwWlhNZ1lTQnJaWGx3Y21WemN5QmxkbVZ1ZENCbWIzSWdablZ1WTNScGIyNGdhMlY1Y3lCMGIyOHVJRlJvYVhNZ2NtVnRiM1psYzF4dUlDQWdJQ0FnSUNBdkx5QjBhR1VnZFc1M1lXNTBaV1FnYTJWNWNISmxjM01nWlhabGJuUnpMaUJGYm5SbGNpQnBjeUJvYjNkbGRtVnlJR0p2ZEdnZ2NISnBiblJoWW14bElHRnVaRnh1SUNBZ0lDQWdJQ0F2THlCdWIyNHRjSEpwYm5SaFlteGxMaUJQYm1VZ2QyOTFiR1FnWlhod1pXTjBJRlJoWWlCMGJ5QmlaU0JoY3lCM1pXeHNJQ2hpZFhRZ2FYUWdhWE51SjNRcExseHVJQ0FnSUNBZ0lDQnBaaUFvWjJWMFJYWmxiblJEYUdGeVEyOWtaU2h1WVhScGRtVkZkbVZ1ZENrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdktpQm1ZV3hzY3lCMGFISnZkV2RvSUNvdlhHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdTMlY1Ukc5M2JqcGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JMWlhsVmNEcGNiaUFnSUNBZ0lDQWdSWFpsYm5SRGIyNXpkSEoxWTNSdmNpQTlJRk41Ym5Sb1pYUnBZMHRsZVdKdllYSmtSWFpsYm5RN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFSnNkWEk2WEc0Z0lDQWdJQ0JqWVhObElIUnZjRXhsZG1Wc1ZIbHdaWE11ZEc5d1JtOWpkWE02WEc0Z0lDQWdJQ0FnSUVWMlpXNTBRMjl1YzNSeWRXTjBiM0lnUFNCVGVXNTBhR1YwYVdOR2IyTjFjMFYyWlc1ME8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQkRiR2xqYXpwY2JpQWdJQ0FnSUNBZ0x5OGdSbWx5WldadmVDQmpjbVZoZEdWeklHRWdZMnhwWTJzZ1pYWmxiblFnYjI0Z2NtbG5hSFFnYlc5MWMyVWdZMnhwWTJ0ekxpQlVhR2x6SUhKbGJXOTJaWE1nZEdobFhHNGdJQ0FnSUNBZ0lDOHZJSFZ1ZDJGdWRHVmtJR05zYVdOcklHVjJaVzUwY3k1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzVoZEdsMlpVVjJaVzUwTG1KMWRIUnZiaUE5UFQwZ01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzhxSUdaaGJHeHpJSFJvY205MVoyZ2dLaTljYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCRGIyNTBaWGgwVFdWdWRUcGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JFYjNWaWJHVkRiR2xqYXpwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQk5iM1Z6WlVSdmQyNDZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3VFc5MWMyVk5iM1psT2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNFMXZkWE5sVDNWME9seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRTF2ZFhObFQzWmxjanBjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCTmIzVnpaVlZ3T2x4dUlDQWdJQ0FnSUNCRmRtVnVkRU52Ym5OMGNuVmpkRzl5SUQwZ1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJSFJ2Y0V4bGRtVnNWSGx3WlhNdWRHOXdSSEpoWnpwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQkVjbUZuUlc1a09seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRVJ5WVdkRmJuUmxjanBjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCRWNtRm5SWGhwZERwY2JpQWdJQ0FnSUdOaGMyVWdkRzl3VEdWMlpXeFVlWEJsY3k1MGIzQkVjbUZuVEdWaGRtVTZYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3UkhKaFowOTJaWEk2WEc0Z0lDQWdJQ0JqWVhObElIUnZjRXhsZG1Wc1ZIbHdaWE11ZEc5d1JISmhaMU4wWVhKME9seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRVJ5YjNBNlhHNGdJQ0FnSUNBZ0lFVjJaVzUwUTI5dWMzUnlkV04wYjNJZ1BTQlRlVzUwYUdWMGFXTkVjbUZuUlhabGJuUTdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRlJ2ZFdOb1EyRnVZMlZzT2x4dUlDQWdJQ0FnWTJGelpTQjBiM0JNWlhabGJGUjVjR1Z6TG5SdmNGUnZkV05vUlc1a09seHVJQ0FnSUNBZ1kyRnpaU0IwYjNCTVpYWmxiRlI1Y0dWekxuUnZjRlJ2ZFdOb1RXOTJaVHBjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCVWIzVmphRk4wWVhKME9seHVJQ0FnSUNBZ0lDQkZkbVZ1ZEVOdmJuTjBjblZqZEc5eUlEMGdVM2x1ZEdobGRHbGpWRzkxWTJoRmRtVnVkRHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3VTJOeWIyeHNPbHh1SUNBZ0lDQWdJQ0JGZG1WdWRFTnZibk4wY25WamRHOXlJRDBnVTNsdWRHaGxkR2xqVlVsRmRtVnVkRHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUhSdmNFeGxkbVZzVkhsd1pYTXVkRzl3VjJobFpXdzZYRzRnSUNBZ0lDQWdJRVYyWlc1MFEyOXVjM1J5ZFdOMGIzSWdQU0JUZVc1MGFHVjBhV05YYUdWbGJFVjJaVzUwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ2RHOXdUR1YyWld4VWVYQmxjeTUwYjNCRGIzQjVPbHh1SUNBZ0lDQWdZMkZ6WlNCMGIzQk1aWFpsYkZSNWNHVnpMblJ2Y0VOMWREcGNiaUFnSUNBZ0lHTmhjMlVnZEc5d1RHVjJaV3hVZVhCbGN5NTBiM0JRWVhOMFpUcGNiaUFnSUNBZ0lDQWdSWFpsYm5SRGIyNXpkSEoxWTNSdmNpQTlJRk41Ym5Sb1pYUnBZME5zYVhCaWIyRnlaRVYyWlc1ME8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lFVjJaVzUwUTI5dWMzUnlkV04wYjNJc1hHNGdJQ0FnSUNBblUybHRjR3hsUlhabGJuUlFiSFZuYVc0NklGVnVhR0Z1Wkd4bFpDQmxkbVZ1ZENCMGVYQmxMQ0JnSlhOZ0xpY3NYRzRnSUNBZ0lDQjBiM0JNWlhabGJGUjVjR1ZjYmlBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0VWMlpXNTBRMjl1YzNSeWRXTjBiM0lwS1R0Y2JpQWdJQ0IyWVhJZ1pYWmxiblFnUFNCRmRtVnVkRU52Ym5OMGNuVmpkRzl5TG1kbGRGQnZiMnhsWkNoY2JpQWdJQ0FnSUdScGMzQmhkR05vUTI5dVptbG5MRnh1SUNBZ0lDQWdkRzl3VEdWMlpXeFVZWEpuWlhSSlJDeGNiaUFnSUNBZ0lHNWhkR2wyWlVWMlpXNTBYRzRnSUNBZ0tUdGNiaUFnSUNCRmRtVnVkRkJ5YjNCaFoyRjBiM0p6TG1GalkzVnRkV3hoZEdWVWQyOVFhR0Z6WlVScGMzQmhkR05vWlhNb1pYWmxiblFwTzF4dUlDQWdJSEpsZEhWeWJpQmxkbVZ1ZER0Y2JpQWdmVnh1WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRk5wYlhCc1pVVjJaVzUwVUd4MVoybHVPMXh1SWwxOSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY2xpcGJvYXJkLWFwaXMvXG4gKi9cbnZhciBDbGlwYm9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2NsaXBib2FyZERhdGEnIGluIGV2ZW50ID9cbiAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YSA6XG4gICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhXG4gICAgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljQ2xpcGJvYXJkRXZlbnQsIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1jb21wb3NpdGlvbmV2ZW50c1xuICovXG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgZGlzcGF0Y2hDb25maWcsXG4gIGRpc3BhdGNoTWFya2VyLFxuICBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoXG4gIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQsXG4gIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2Vcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNEcmFnRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBEcmFnRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRHJhZ0V2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhVHJhbnNmZXI6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHR5cGU6IG51bGwsXG4gIHRhcmdldDogZ2V0RXZlbnRUYXJnZXQsXG4gIC8vIGN1cnJlbnRUYXJnZXQgaXMgc2V0IHdoZW4gZGlzcGF0Y2hpbmc7IG5vIHVzZSBpbiBjb3B5aW5nIGl0IGhlcmVcbiAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gIGV2ZW50UGhhc2U6IG51bGwsXG4gIGJ1YmJsZXM6IG51bGwsXG4gIGNhbmNlbGFibGU6IG51bGwsXG4gIHRpbWVTdGFtcDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IGRpc3BhdGNoQ29uZmlnO1xuICB0aGlzLmRpc3BhdGNoTWFya2VyID0gZGlzcGF0Y2hNYXJrZXI7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgP1xuICAgIG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOlxuICAgIG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICB9XG4gIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG59XG5cbmFzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcblxuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoaXMgZXZlbnQgc2hvdWxkIGJlIHJlbGVhc2VkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzUGVyc2lzdGVudDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlLFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciBgZGVzdHJ1Y3RvcmAgb24gZWFjaCBpbnN0YW5jZSBpdCByZWxlYXNlcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gIH1cblxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG4vKipcbiAqIEhlbHBlciB0byByZWR1Y2UgYm9pbGVycGxhdGUgd2hlbiBjcmVhdGluZyBzdWJjbGFzc2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENsYXNzXG4gKiBAcGFyYW0gez9vYmplY3R9IEludGVyZmFjZVxuICovXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbihDbGFzcywgSW50ZXJmYWNlKSB7XG4gIHZhciBTdXBlciA9IHRoaXM7XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgQ2xhc3MucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDbGFzcztcblxuICBDbGFzcy5JbnRlcmZhY2UgPSBhc3NpZ24oe30sIFN1cGVyLkludGVyZmFjZSwgSW50ZXJmYWNlKTtcbiAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuXG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDbGFzcywgUG9vbGVkQ2xhc3MudGhyZWVBcmd1bWVudFBvb2xlcik7XG59O1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oU3ludGhldGljRXZlbnQsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0ZvY3VzRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEZvY3VzRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0ZvY3VzRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0ZvY3VzRXZlbnQsIEZvY3VzRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljSW5wdXRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcbiAqICAgICAgLyNldmVudHMtaW5wdXRldmVudHNcbiAqL1xudmFyIElucHV0RXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0lucHV0RXZlbnQoXG4gIGRpc3BhdGNoQ29uZmlnLFxuICBkaXNwYXRjaE1hcmtlcixcbiAgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFxuICBTeW50aGV0aWNJbnB1dEV2ZW50LFxuICBJbnB1dEV2ZW50SW50ZXJmYWNlXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0lucHV0RXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljS2V5Ym9hcmRFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xudmFyIGdldEV2ZW50S2V5ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRLZXlcIik7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRNb2RpZmllclN0YXRlXCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgLy8gTGVnYWN5IEludGVyZmFjZVxuICBjaGFyQ29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBgY2hhckNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlQcmVzcyBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGUgYWN0dWFsIHByaW50YWJsZSBjaGFyYWN0ZXIuXG5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAga2V5Q29kZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGB3aGljaGAgaXMgYW4gYWxpYXMgZm9yIGVpdGhlciBga2V5Q29kZWAgb3IgYGNoYXJDb2RlYCBkZXBlbmRpbmcgb24gdGhlXG4gICAgLy8gdHlwZSBvZiB0aGUgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKFwiLi9WaWV3cG9ydE1ldHJpY3NcIik7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIFdlYmtpdCwgRmlyZWZveCwgSUU5K1xuICAgIC8vIHdoaWNoOiAgMSAyIDNcbiAgICAvLyBidXR0b246IDAgMSAyIChzdGFuZGFyZClcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuICAgIGlmICgnd2hpY2gnIGluIGV2ZW50KSB7XG4gICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICAvLyBJRTw5XG4gICAgLy8gd2hpY2g6ICB1bmRlZmluZWRcbiAgICAvLyBidXR0b246IDAgMCAwXG4gICAgLy8gYnV0dG9uOiAxIDQgMiAob25tb3VzZXVwKVxuICAgIHJldHVybiBidXR0b24gPT09IDIgPyAyIDogYnV0dG9uID09PSA0ID8gMSA6IDA7XG4gIH0sXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKFxuICAgICAgKChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KSlcbiAgICApO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWCA6XG4gICAgICBldmVudC5jbGllbnRYICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0O1xuICB9LFxuICBwYWdlWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWSA6XG4gICAgICBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVG91Y2hFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNVSUV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIHRhcmdldCBpcyBhIHdpbmRvdyBvYmplY3RcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICBpZiAoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICB9LFxuICBkZXRhaWw6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmRldGFpbCB8fCAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVUlFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNVSUV2ZW50LCBVSUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1doZWVsRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRlbHRhWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOlxuICAgICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwXG4gICAgKTtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6XG4gICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMFxuICAgICk7XG4gIH0sXG4gIGRlbHRhWjogbnVsbCxcblxuICAvLyBCcm93c2VycyB3aXRob3V0IFwiZGVsdGFNb2RlXCIgaXMgcmVwb3J0aW5nIGluIHJhdyB3aGVlbCBkZWx0YSB3aGVyZSBvbmVcbiAgLy8gbm90Y2ggb24gdGhlIHNjcm9sbCBpcyBhbHdheXMgKy8tIDEyMCwgcm91Z2hseSBlcXVpdmFsZW50IHRvIHBpeGVscy5cbiAgLy8gQSBnb29kIGFwcHJveGltYXRpb24gb2YgRE9NX0RFTFRBX0xJTkUgKDEpIGlzIDUlIG9mIHZpZXdwb3J0IHNpemUgb3JcbiAgLy8gfjQwIHBpeGVscywgZm9yIERPTV9ERUxUQV9TQ1JFRU4gKDIpIGl0IGlzIDg3LjUlIG9mIHZpZXdwb3J0IHNpemUuXG4gIGRlbHRhTW9kZTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljTW91c2VFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljV2hlZWxFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCwgV2hlZWxFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjt2YXIgaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxNaXhpbj17cmVpbml0aWFsaXplVHJhbnNhY3Rpb246ZnVuY3Rpb24oKXt0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM9dGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCksdGhpcy53cmFwcGVySW5pdERhdGE/dGhpcy53cmFwcGVySW5pdERhdGEubGVuZ3RoPTA6dGhpcy53cmFwcGVySW5pdERhdGE9W10sdGhpcy5faXNJblRyYW5zYWN0aW9uPSExfSxfaXNJblRyYW5zYWN0aW9uOiExLGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6bnVsbCxpc0luVHJhbnNhY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuX2lzSW5UcmFuc2FjdGlvbn0scGVyZm9ybTpmdW5jdGlvbihtZXRob2Qsc2NvcGUsYSxiLGMsZCxlLGYpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KCF0aGlzLmlzSW5UcmFuc2FjdGlvbigpLFwiVHJhbnNhY3Rpb24ucGVyZm9ybSguLi4pOiBDYW5ub3QgaW5pdGlhbGl6ZSBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgaXMgYWxyZWFkeSBhbiBvdXRzdGFuZGluZyB0cmFuc2FjdGlvbi5cIik6aW52YXJpYW50KCF0aGlzLmlzSW5UcmFuc2FjdGlvbigpKTt2YXIgZXJyb3JUaHJvd24scmV0O3RyeXt0aGlzLl9pc0luVHJhbnNhY3Rpb249ITAsZXJyb3JUaHJvd249ITAsdGhpcy5pbml0aWFsaXplQWxsKDApLHJldD1tZXRob2QuY2FsbChzY29wZSxhLGIsYyxkLGUsZiksZXJyb3JUaHJvd249ITF9ZmluYWxseXt0cnl7aWYoZXJyb3JUaHJvd24pdHJ5e3RoaXMuY2xvc2VBbGwoMCl9Y2F0Y2goZXJyKXt9ZWxzZSB0aGlzLmNsb3NlQWxsKDApfWZpbmFsbHl7dGhpcy5faXNJblRyYW5zYWN0aW9uPSExfX1yZXR1cm4gcmV0fSxpbml0aWFsaXplQWxsOmZ1bmN0aW9uKHN0YXJ0SW5kZXgpe2Zvcih2YXIgdHJhbnNhY3Rpb25XcmFwcGVycz10aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMsaT1zdGFydEluZGV4O2k8dHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7aSsrKXt2YXIgd3JhcHBlcj10cmFuc2FjdGlvbldyYXBwZXJzW2ldO3RyeXt0aGlzLndyYXBwZXJJbml0RGF0YVtpXT1UcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUix0aGlzLndyYXBwZXJJbml0RGF0YVtpXT13cmFwcGVyLmluaXRpYWxpemU/d3JhcHBlci5pbml0aWFsaXplLmNhbGwodGhpcyk6bnVsbH1maW5hbGx5e2lmKHRoaXMud3JhcHBlckluaXREYXRhW2ldPT09VHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IpdHJ5e3RoaXMuaW5pdGlhbGl6ZUFsbChpKzEpfWNhdGNoKGVycil7fX19fSxjbG9zZUFsbDpmdW5jdGlvbihzdGFydEluZGV4KXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCh0aGlzLmlzSW5UcmFuc2FjdGlvbigpLFwiVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi5cIik6aW52YXJpYW50KHRoaXMuaXNJblRyYW5zYWN0aW9uKCkpO2Zvcih2YXIgdHJhbnNhY3Rpb25XcmFwcGVycz10aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMsaT1zdGFydEluZGV4O2k8dHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7aSsrKXt2YXIgZXJyb3JUaHJvd24sd3JhcHBlcj10cmFuc2FjdGlvbldyYXBwZXJzW2ldLGluaXREYXRhPXRoaXMud3JhcHBlckluaXREYXRhW2ldO3RyeXtlcnJvclRocm93bj0hMCxpbml0RGF0YSE9PVRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SJiZ3cmFwcGVyLmNsb3NlJiZ3cmFwcGVyLmNsb3NlLmNhbGwodGhpcyxpbml0RGF0YSksZXJyb3JUaHJvd249ITF9ZmluYWxseXtpZihlcnJvclRocm93bil0cnl7dGhpcy5jbG9zZUFsbChpKzEpfWNhdGNoKGUpe319fXRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aD0wfX0sVHJhbnNhY3Rpb249e01peGluOk1peGluLE9CU0VSVkVEX0VSUk9SOnt9fTttb2R1bGUuZXhwb3J0cz1UcmFuc2FjdGlvbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlZISmhibk5oWTNScGIyNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVZkQkxGbEJSVUVzU1VGQlNTeFhRVUZaTEZGQlFWRXNaVUVyUkhCQ0xFOUJVVVlzZDBKQlFYbENMRmRCUTNaQ0xFdEJRVXNzYjBKQlFYTkNMRXRCUVVzc2VVSkJRek5DTEV0QlFVc3NaMEpCUjFJc1MwRkJTeXhuUWtGQlowSXNUMEZCVXl4RlFVWTVRaXhMUVVGTExHMUNRVWxRTEV0QlFVc3NhMEpCUVcxQ0xFZEJSekZDTEd0Q1FVRnJRaXhGUVUxc1FpeDFRa0ZCZDBJc1MwRkZlRUlzWjBKQlFXbENMRmRCUTJZc1VVRkJVeXhMUVVGTExHdENRV05vUWl4UlFVRlRMRk5CUVZNc1QwRkJVU3hOUVVGUExFVkJRVWNzUlVGQlJ5eEZRVUZITEVWQlFVY3NSVUZCUnl4SFFVTTNReXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4WFFVTjBReXhMUVVGTExHdENRVU5PTEN0SFFVVkZMRmRCUVZjc1MwRkJTeXhyUWtGRGNFSXNTVUZCU1N4aFFVTkJMRWRCUTBvc1MwRkRSU3hMUVVGTExHdENRVUZ0UWl4RlFVdDRRaXhoUVVGakxFVkJRMlFzUzBGQlN5eGpRVUZqTEVkQlEyNUNMRWxCUVUwc1QwRkJUeXhMUVVGTExFMUJRVThzUlVGQlJ5eEZRVUZITEVWQlFVY3NSVUZCUnl4RlFVRkhMRWRCUTNoRExHRkJRV01zUlVGRFpDeFJRVU5CTEVsQlEwVXNSMEZCU1N4WlFVZEdMRWxCUTBVc1MwRkJTeXhUUVVGVExFZEJRMlFzVFVGQlR5eFZRVXRVTEUxQlFVc3NVMEZCVXl4SFFVVm9RaXhSUVVOQkxFdEJRVXNzYTBKQlFXMUNMRWRCUnpWQ0xFMUJRVThzVFVGSFZDeGpRVUZsTEZOQlFWTXNXVUZGZEVJc1NVRkJTeXhIUVVSRUxIRkNRVUZ6UWl4TFFVRkxMRzlDUVVOMFFpeEZRVUZKTEZkQlFWa3NSVUZCU1N4dlFrRkJiMElzVDBGQlVTeEpRVUZMTEVOQlF6VkVMRWRCUVVrc1UwRkJWU3h2UWtGQmIwSXNSVUZEYkVNc1MwRkxSU3hMUVVGTExHZENRVUZuUWl4SFFVRkxMRmxCUVZrc1pVRkRkRU1zUzBGQlN5eG5Ra0ZCWjBJc1IwRkJTeXhSUVVGUkxGZEJRMmhETEZGQlFWRXNWMEZCVnl4TFFVRkxMRTFCUTNoQ0xFdEJRMFlzVVVGRFFTeEhRVUZKTEV0QlFVc3NaMEpCUVdkQ0xFdEJRVThzV1VGQldTeGxRVWt4UXl4SlFVTkZMRXRCUVVzc1kwRkJZeXhGUVVGSkxFZEJRM1pDTEUxQlFVOHNWVUZoYWtJc1UwRkJWU3hUUVVGVExGbEJRMmhDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM1pETEV0QlFVc3NhMEpCUTB3c2QwVkJRMFVzVlVGQlZTeExRVUZMTEd0Q1FVVnVRaXhMUVVGTExFZEJSRVFzY1VKQlFYTkNMRXRCUVVzc2IwSkJRM1JDTEVWQlFVa3NWMEZCV1N4RlFVRkpMRzlDUVVGdlFpeFBRVUZSTEVsQlFVc3NRMEZETlVRc1IwRkZTU3hoUVVaQkxGRkJRVlVzYjBKQlFXOUNMRWRCUXpsQ0xGTkJRVmNzUzBGQlN5eG5Ra0ZCWjBJc1JVRkZjRU1zUzBGTFJTeGhRVUZqTEVWQlExWXNWMEZCWVN4WlFVRlpMR2RDUVVGclFpeFJRVUZSTEU5QlEzSkVMRkZCUVZFc1RVRkJUU3hMUVVGTExFdEJRVTBzVlVGRk0wSXNZVUZCWXl4RlFVTmtMRkZCUTBFc1IwRkJTU3haUVVsR0xFbEJRMFVzUzBGQlN5eFRRVUZUTEVWQlFVa3NSMEZEYkVJc1RVRkJUeXhOUVV0bUxFdEJRVXNzWjBKQlFXZENMRTlCUVZNc1NVRkpPVUlzWVVGRlJpeE5RVUZQTEUxQlMxQXNhMEpCU1VZc1VVRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ1ZISmhibk5oWTNScGIyNWNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJwYm5aaGNtbGhiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOXBiblpoY21saGJuUmNJaWs3WEc1Y2JpOHFLbHh1SUNvZ1lGUnlZVzV6WVdOMGFXOXVZQ0JqY21WaGRHVnpJR0VnWW14aFkyc2dZbTk0SUhSb1lYUWdhWE1nWVdKc1pTQjBieUIzY21Gd0lHRnVlU0J0WlhSb2IyUWdjM1ZqYUNCMGFHRjBYRzRnS2lCalpYSjBZV2x1SUdsdWRtRnlhV0Z1ZEhNZ1lYSmxJRzFoYVc1MFlXbHVaV1FnWW1WbWIzSmxJR0Z1WkNCaFpuUmxjaUIwYUdVZ2JXVjBhRzlrSUdseklHbHVkbTlyWldSY2JpQXFJQ2hGZG1WdUlHbG1JR0Z1SUdWNFkyVndkR2x2YmlCcGN5QjBhSEp2ZDI0Z2QyaHBiR1VnYVc1MmIydHBibWNnZEdobElIZHlZWEJ3WldRZ2JXVjBhRzlrS1M0Z1YyaHZaWFpsY2x4dUlDb2dhVzV6ZEdGdWRHbGhkR1Z6SUdFZ2RISmhibk5oWTNScGIyNGdZMkZ1SUhCeWIzWnBaR1VnWlc1bWIzSmpaWEp6SUc5bUlIUm9aU0JwYm5aaGNtbGhiblJ6SUdGMFhHNGdLaUJqY21WaGRHbHZiaUIwYVcxbExpQlVhR1VnWUZSeVlXNXpZV04wYVc5dVlDQmpiR0Z6Y3lCcGRITmxiR1lnZDJsc2JDQnpkWEJ3YkhrZ2IyNWxJR0ZrWkdsMGFXOXVZV3hjYmlBcUlHRjFkRzl0WVhScFl5QnBiblpoY21saGJuUWdabTl5SUhsdmRTQXRJSFJvWlNCcGJuWmhjbWxoYm5RZ2RHaGhkQ0JoYm5rZ2RISmhibk5oWTNScGIyNGdhVzV6ZEdGdVkyVmNiaUFxSUhOb2IzVnNaQ0J1YjNRZ1ltVWdjblZ1SUhkb2FXeGxJR2wwSUdseklHRnNjbVZoWkhrZ1ltVnBibWNnY25WdUxpQlpiM1VnZDI5MWJHUWdkSGx3YVdOaGJHeDVJR055WldGMFpTQmhYRzRnS2lCemFXNW5iR1VnYVc1emRHRnVZMlVnYjJZZ1lTQmdWSEpoYm5OaFkzUnBiMjVnSUdadmNpQnlaWFZ6WlNCdGRXeDBhWEJzWlNCMGFXMWxjeXdnZEdoaGRDQndiM1JsYm5ScFlXeHNlVnh1SUNvZ2FYTWdkWE5sWkNCMGJ5QjNjbUZ3SUhObGRtVnlZV3dnWkdsbVptVnlaVzUwSUcxbGRHaHZaSE11SUZkeVlYQndaWEp6SUdGeVpTQmxlSFJ5WlcxbGJIa2djMmx0Y0d4bElDMWNiaUFxSUhSb1pYa2diMjVzZVNCeVpYRjFhWEpsSUdsdGNHeGxiV1Z1ZEdsdVp5QjBkMjhnYldWMGFHOWtjeTVjYmlBcVhHNGdLaUE4Y0hKbFBseHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHlZWEJ3WlhKeklDaHBibXBsWTNSbFpDQmhkQ0JqY21WaGRHbHZiaUIwYVcxbEtWeHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNzZ0lDQWdJQ0FnSUN0Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNBZ0lDQWdJQ0I4WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeTB0TFMwdExTMHRMUzB0TFMwdExTMHRmQzB0TFMwdExTMHRmQzB0TFMwdExTMHRMUzB0TFMwdEsxeHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZZ0lDQWdJQ0FnSUh3Z0lDQWdJQ0FnSUNBZ0lDQWdJSHhjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJQ0FnSUNBZ0t5MHRMUzB0TFMwdExTMHRMUzB0TFNzZ0lDQjhJQ0FnSUNBZ0lDQWdJQ0FnSUNCOFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNBZ0lDc3RMWHdnSUNBZ2QzSmhjSEJsY2pFZ0lDQjhMUzB0ZkMwdExTMHJJQ0FnSUNBZ0lDQWdmRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lId2dJQ0I4SUNBckxTMHRMUzB0TFMwdExTMHRMUzB0S3lBZ0lIWWdJQ0FnZkNBZ0lDQWdJQ0FnSUh4Y2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNBZ2ZDQWdJQ0FnSUNBZ0lDQXJMUzB0TFMwdExTMHRMUzB0TFNzZ0lId2dJQ0FnSUNBZ0lDQjhYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQWdJSHdnSUNBZ0lDc3RMUzB0ZkNBZ0lIZHlZWEJ3WlhJeUlDQjhMUzB0TFMwdExTMHJJQ0FnZkZ4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHdnSUNCOElDQWdJQ0I4SUNBZ0lDc3RMUzB0TFMwdExTMHRMUzB0S3lBZ2ZDQWdJQ0FnZkNBZ0lIeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElDQWdmQ0FnSUNBZ2ZDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHdnSUNBZ0lId2dJQ0I4WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmQ0FnSUhZZ0lDQWdJSFlnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMklDQWdJQ0IySUNBZ2ZDQjNjbUZ3Y0dWeVhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNBckxTMHRLeUFyTFMwdEt5QWdJQ3N0TFMwdExTMHRMUzBySUNBZ0t5MHRMU3NnS3kwdExTc2dmQ0JwYm5aaGNtbGhiblJ6WEc0Z0tpQndaWEptYjNKdEtHRnVlVTFsZEdodlpDa2dmQ0I4SUNBZ2ZDQjhJQ0FnZkNBZ0lId2dJQ0FnSUNBZ0lDQjhJQ0FnZkNBZ0lId2dmQ0FnSUh3Z2ZDQnRZV2x1ZEdGcGJtVmtYRzRnS2lBckxTMHRMUzB0TFMwdExTMHRMUzB0TFMwK2ZDMThMUzB0ZkMxOExTMHRmQzB0UG54aGJubE5aWFJvYjJSOExTMHRmQzB0TFh3dGZDMHRMWHd0ZkMwdExTMHRMUzB0UGx4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHdnZkNBZ0lId2dmQ0FnSUh3Z0lDQjhJQ0FnSUNBZ0lDQWdmQ0FnSUh3Z0lDQjhJSHdnSUNCOElIeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElId2dJQ0I4SUh3Z0lDQjhJQ0FnZkNBZ0lDQWdJQ0FnSUh3Z0lDQjhJQ0FnZkNCOElDQWdmQ0I4WEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmQ0I4SUNBZ2ZDQjhJQ0FnZkNBZ0lId2dJQ0FnSUNBZ0lDQjhJQ0FnZkNBZ0lId2dmQ0FnSUh3Z2ZGeHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z0t5MHRMU3NnS3kwdExTc2dJQ0FyTFMwdExTMHRMUzB0S3lBZ0lDc3RMUzBySUNzdExTMHJJSHhjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJQ0JwYm1sMGFXRnNhWHBsSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaU0FnSUNCOFhHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS3kwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRLMXh1SUNvZ1BDOXdjbVUrWEc0Z0tseHVJQ29nVlhObElHTmhjMlZ6T2x4dUlDb2dMU0JRY21WelpYSjJhVzVuSUhSb1pTQnBibkIxZENCelpXeGxZM1JwYjI0Z2NtRnVaMlZ6SUdKbFptOXlaUzloWm5SbGNpQnlaV052Ym1OcGJHbGhkR2x2Ymk1Y2JpQXFJQ0FnVW1WemRHOXlhVzVuSUhObGJHVmpkR2x2YmlCbGRtVnVJR2x1SUhSb1pTQmxkbVZ1ZENCdlppQmhiaUIxYm1WNGNHVmpkR1ZrSUdWeWNtOXlMbHh1SUNvZ0xTQkVaV0ZqZEdsMllYUnBibWNnWlhabGJuUnpJSGRvYVd4bElISmxZWEp5WVc1bmFXNW5JSFJvWlNCRVQwMHNJSEJ5WlhabGJuUnBibWNnWW14MWNuTXZabTlqZFhObGN5eGNiaUFxSUNBZ2QyaHBiR1VnWjNWaGNtRnVkR1ZsYVc1bklIUm9ZWFFnWVdaMFpYSjNZWEprY3l3Z2RHaGxJR1YyWlc1MElITjVjM1JsYlNCcGN5QnlaV0ZqZEdsMllYUmxaQzVjYmlBcUlDMGdSbXgxYzJocGJtY2dZU0J4ZFdWMVpTQnZaaUJqYjJ4c1pXTjBaV1FnUkU5TklHMTFkR0YwYVc5dWN5QjBieUIwYUdVZ2JXRnBiaUJWU1NCMGFISmxZV1FnWVdaMFpYSWdZVnh1SUNvZ0lDQnlaV052Ym1OcGJHbGhkR2x2YmlCMFlXdGxjeUJ3YkdGalpTQnBiaUJoSUhkdmNtdGxjaUIwYUhKbFlXUXVYRzRnS2lBdElFbHVkbTlyYVc1bklHRnVlU0JqYjJ4c1pXTjBaV1FnWUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWldBZ1kyRnNiR0poWTJ0eklHRm1kR1Z5SUhKbGJtUmxjbWx1WnlCdVpYZGNiaUFxSUNBZ1kyOXVkR1Z1ZEM1Y2JpQXFJQzBnS0VaMWRIVnlaU0IxYzJVZ1kyRnpaU2s2SUZkeVlYQndhVzVuSUhCaGNuUnBZM1ZzWVhJZ1pteDFjMmhsY3lCdlppQjBhR1VnWUZKbFlXTjBWMjl5YTJWeVlDQnhkV1YxWlZ4dUlDb2dJQ0IwYnlCd2NtVnpaWEoyWlNCMGFHVWdZSE5qY205c2JGUnZjR0FnS0dGdUlHRjFkRzl0WVhScFl5QnpZM0p2Ykd3Z1lYZGhjbVVnUkU5TktTNWNiaUFxSUMwZ0tFWjFkSFZ5WlNCMWMyVWdZMkZ6WlNrNklFeGhlVzkxZENCallXeGpkV3hoZEdsdmJuTWdZbVZtYjNKbElHRnVaQ0JoWm5SbGNpQkVUMDBnZFhCa1lYUmxjeTVjYmlBcVhHNGdLaUJVY21GdWMyRmpkR2x2Ym1Gc0lIQnNkV2RwYmlCQlVFazZYRzRnS2lBdElFRWdiVzlrZFd4bElIUm9ZWFFnYUdGeklHRnVJR0JwYm1sMGFXRnNhWHBsWUNCdFpYUm9iMlFnZEdoaGRDQnlaWFIxY201eklHRnVlU0J3Y21WamIyMXdkWFJoZEdsdmJpNWNiaUFxSUMwZ1lXNWtJR0VnWUdOc2IzTmxZQ0J0WlhSb2IyUWdkR2hoZENCaFkyTmxjSFJ6SUhSb1pTQndjbVZqYjIxd2RYUmhkR2x2Ymk0Z1lHTnNiM05sWUNCcGN5QnBiblp2YTJWa1hHNGdLaUFnSUhkb1pXNGdkR2hsSUhkeVlYQndaV1FnY0hKdlkyVnpjeUJwY3lCamIyMXdiR1YwWldRc0lHOXlJR2hoY3lCbVlXbHNaV1F1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVUeFVjbUZ1YzJGamRHbHZibUZzVjNKaGNIQmxjajU5SUhSeVlXNXpZV04wYVc5dVYzSmhjSEJsY2lCWGNtRndjR1Z5SUcxdlpIVnNaWE5jYmlBcUlIUm9ZWFFnYVcxd2JHVnRaVzUwSUdCcGJtbDBhV0ZzYVhwbFlDQmhibVFnWUdOc2IzTmxZQzVjYmlBcUlFQnlaWFIxY200Z2UxUnlZVzV6WVdOMGFXOXVmU0JUYVc1bmJHVWdkSEpoYm5OaFkzUnBiMjRnWm05eUlISmxkWE5sSUdsdUlIUm9jbVZoWkM1Y2JpQXFYRzRnS2lCQVkyeGhjM01nVkhKaGJuTmhZM1JwYjI1Y2JpQXFMMXh1ZG1GeUlFMXBlR2x1SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGN5QjFjQ0IwYUdseklHbHVjM1JoYm1ObElITnZJSFJvWVhRZ2FYUWdhWE1nY0hKbGNHRnlaV1FnWm05eUlHTnZiR3hsWTNScGJtY2diV1YwY21samN5NGdSRzlsYzF4dUlDQWdLaUJ6YnlCemRXTm9JSFJvWVhRZ2RHaHBjeUJ6WlhSMWNDQnRaWFJvYjJRZ2JXRjVJR0psSUhWelpXUWdiMjRnWVc0Z2FXNXpkR0Z1WTJVZ2RHaGhkQ0JwY3lCaGJISmxZV1I1WEc0Z0lDQXFJR2x1YVhScFlXeHBlbVZrTENCcGJpQmhJSGRoZVNCMGFHRjBJR1J2WlhNZ2JtOTBJR052Ym5OMWJXVWdZV1JrYVhScGIyNWhiQ0J0WlcxdmNua2dkWEJ2YmlCeVpYVnpaUzVjYmlBZ0lDb2dWR2hoZENCallXNGdZbVVnZFhObFpuVnNJR2xtSUhsdmRTQmtaV05wWkdVZ2RHOGdiV0ZyWlNCNWIzVnlJSE4xWW1Oc1lYTnpJRzltSUhSb2FYTWdiV2w0YVc0Z1lWeHVJQ0FnS2lCY0lsQnZiMnhsWkVOc1lYTnpYQ0l1WEc0Z0lDQXFMMXh1SUNCeVpXbHVhWFJwWVd4cGVtVlVjbUZ1YzJGamRHbHZiam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZEdocGN5NTBjbUZ1YzJGamRHbHZibGR5WVhCd1pYSnpJRDBnZEdocGN5NW5aWFJVY21GdWMyRmpkR2x2YmxkeVlYQndaWEp6S0NrN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5keVlYQndaWEpKYm1sMFJHRjBZU2tnZTF4dUlDQWdJQ0FnZEdocGN5NTNjbUZ3Y0dWeVNXNXBkRVJoZEdFZ1BTQmJYVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzY21Gd2NHVnlTVzVwZEVSaGRHRXViR1Z1WjNSb0lEMGdNRHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVmYVhOSmJsUnlZVzV6WVdOMGFXOXVJRDBnWm1Gc2MyVTdYRzRnSUgwc1hHNWNiaUFnWDJselNXNVVjbUZ1YzJGamRHbHZiam9nWm1Gc2MyVXNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQmhZbk4wY21GamRGeHVJQ0FnS2lCQWNtVjBkWEp1SUh0QmNuSmhlVHhVY21GdWMyRmpkR2x2YmxkeVlYQndaWEkrZlNCQmNuSmhlU0J2WmlCMGNtRnVjMkZqZEdsdmJpQjNjbUZ3Y0dWeWN5NWNiaUFnSUNvdlhHNGdJR2RsZEZSeVlXNXpZV04wYVc5dVYzSmhjSEJsY25NNklHNTFiR3dzWEc1Y2JpQWdhWE5KYmxSeVlXNXpZV04wYVc5dU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0lTRjBhR2x6TGw5cGMwbHVWSEpoYm5OaFkzUnBiMjQ3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVjRaV04xZEdWeklIUm9aU0JtZFc1amRHbHZiaUIzYVhSb2FXNGdZU0J6WVdabGRIa2dkMmx1Wkc5M0xpQlZjMlVnZEdocGN5Qm1iM0lnZEdobElIUnZjQ0JzWlhabGJGeHVJQ0FnS2lCdFpYUm9iMlJ6SUhSb1lYUWdjbVZ6ZFd4MElHbHVJR3hoY21kbElHRnRiM1Z1ZEhNZ2IyWWdZMjl0Y0hWMFlYUnBiMjR2YlhWMFlYUnBiMjV6SUhSb1lYUWdkMjkxYkdSY2JpQWdJQ29nYm1WbFpDQjBieUJpWlNCellXWmxkSGtnWTJobFkydGxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ2JXVjBhRzlrSUUxbGJXSmxjaUJ2WmlCelkyOXdaU0IwYnlCallXeHNMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2MyTnZjR1VnVTJOdmNHVWdkRzhnYVc1MmIydGxJR1p5YjIwdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBQejE5SUdGeVozTXVMaTRnUVhKbmRXMWxiblJ6SUhSdklIQmhjM01nZEc4Z2RHaGxJRzFsZEdodlpDQW9iM0IwYVc5dVlXd3BMbHh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFaGxiSEJ6SUhCeVpYWmxiblFnYm1WbFpDQjBieUJpYVc1a0lHbHVJRzFoYm5rZ1kyRnpaWE11WEc0Z0lDQXFJRUJ5WlhSMWNtNGdVbVYwZFhKdUlIWmhiSFZsSUdaeWIyMGdZRzFsZEdodlpHQXVYRzRnSUNBcUwxeHVJQ0J3WlhKbWIzSnRPaUJtZFc1amRHbHZiaWh0WlhSb2IyUXNJSE5qYjNCbExDQmhMQ0JpTENCakxDQmtMQ0JsTENCbUtTQjdYRzRnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUNGMGFHbHpMbWx6U1c1VWNtRnVjMkZqZEdsdmJpZ3BMRnh1SUNBZ0lDQWdKMVJ5WVc1ellXTjBhVzl1TG5CbGNtWnZjbTBvTGk0dUtUb2dRMkZ1Ym05MElHbHVhWFJwWVd4cGVtVWdZU0IwY21GdWMyRmpkR2x2YmlCM2FHVnVJSFJvWlhKbElDY2dLMXh1SUNBZ0lDQWdKMmx6SUdGc2NtVmhaSGtnWVc0Z2IzVjBjM1JoYm1ScGJtY2dkSEpoYm5OaFkzUnBiMjR1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb0lYUm9hWE11YVhOSmJsUnlZVzV6WVdOMGFXOXVLQ2twS1R0Y2JpQWdJQ0IyWVhJZ1pYSnliM0pVYUhKdmQyNDdYRzRnSUNBZ2RtRnlJSEpsZER0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYVhOSmJsUnlZVzV6WVdOMGFXOXVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDOHZJRU5oZEdOb2FXNW5JR1Z5Y205eWN5QnRZV3RsY3lCa1pXSjFaMmRwYm1jZ2JXOXlaU0JrYVdabWFXTjFiSFFzSUhOdklIZGxJSE4wWVhKMElIZHBkR2hjYmlBZ0lDQWdJQzh2SUdWeWNtOXlWR2h5YjNkdUlITmxkQ0IwYnlCMGNuVmxJR0psWm05eVpTQnpaWFIwYVc1bklHbDBJSFJ2SUdaaGJITmxJR0ZtZEdWeUlHTmhiR3hwYm1kY2JpQWdJQ0FnSUM4dklHTnNiM05sSUMwdElHbG1JR2wwSjNNZ2MzUnBiR3dnYzJWMElIUnZJSFJ5ZFdVZ2FXNGdkR2hsSUdacGJtRnNiSGtnWW14dlkyc3NJR2wwSUcxbFlXNXpYRzRnSUNBZ0lDQXZMeUJ2Ym1VZ2IyWWdkR2hsYzJVZ1kyRnNiSE1nZEdoeVpYY3VYRzRnSUNBZ0lDQmxjbkp2Y2xSb2NtOTNiaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQjBhR2x6TG1sdWFYUnBZV3hwZW1WQmJHd29NQ2s3WEc0Z0lDQWdJQ0J5WlhRZ1BTQnRaWFJvYjJRdVkyRnNiQ2h6WTI5d1pTd2dZU3dnWWl3Z1l5d2daQ3dnWlN3Z1ppazdYRzRnSUNBZ0lDQmxjbkp2Y2xSb2NtOTNiaUE5SUdaaGJITmxPMXh1SUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppQW9aWEp5YjNKVWFISnZkMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCZ2JXVjBhRzlrWUNCMGFISnZkM01zSUhCeVpXWmxjaUIwYnlCemFHOTNJSFJvWVhRZ2MzUmhZMnNnZEhKaFkyVWdiM1psY2lCaGJua2dkR2h5YjNkdVhHNGdJQ0FnSUNBZ0lDQWdMeThnWW5rZ2FXNTJiMnRwYm1jZ1lHTnNiM05sUVd4c1lDNWNiaUFnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiRzl6WlVGc2JDZ3dLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVTJsdVkyVWdZRzFsZEdodlpHQWdaR2xrYmlkMElIUm9jbTkzTENCM1pTQmtiMjRuZENCM1lXNTBJSFJ2SUhOcGJHVnVZMlVnZEdobElHVjRZMlZ3ZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQzh2SUdobGNtVXVYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiRzl6WlVGc2JDZ3dLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYVhOSmJsUnlZVzV6WVdOMGFXOXVJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhRN1hHNGdJSDBzWEc1Y2JpQWdhVzVwZEdsaGJHbDZaVUZzYkRvZ1puVnVZM1JwYjI0b2MzUmhjblJKYm1SbGVDa2dlMXh1SUNBZ0lIWmhjaUIwY21GdWMyRmpkR2x2YmxkeVlYQndaWEp6SUQwZ2RHaHBjeTUwY21GdWMyRmpkR2x2YmxkeVlYQndaWEp6TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCemRHRnlkRWx1WkdWNE95QnBJRHdnZEhKaGJuTmhZM1JwYjI1WGNtRndjR1Z5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUhkeVlYQndaWElnUFNCMGNtRnVjMkZqZEdsdmJsZHlZWEJ3WlhKelcybGRPMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0x5OGdRMkYwWTJocGJtY2daWEp5YjNKeklHMWhhMlZ6SUdSbFluVm5aMmx1WnlCdGIzSmxJR1JwWm1acFkzVnNkQ3dnYzI4Z2QyVWdjM1JoY25RZ2QybDBhQ0IwYUdWY2JpQWdJQ0FnSUNBZ0x5OGdUMEpUUlZKV1JVUmZSVkpTVDFJZ2MzUmhkR1VnWW1WbWIzSmxJRzkyWlhKM2NtbDBhVzVuSUdsMElIZHBkR2dnZEdobElISmxZV3dnY21WMGRYSnVJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lDOHZJRzltSUdsdWFYUnBZV3hwZW1VZ0xTMGdhV1lnYVhRbmN5QnpkR2xzYkNCelpYUWdkRzhnVDBKVFJWSldSVVJmUlZKU1QxSWdhVzRnZEdobElHWnBibUZzYkhsY2JpQWdJQ0FnSUNBZ0x5OGdZbXh2WTJzc0lHbDBJRzFsWVc1eklIZHlZWEJ3WlhJdWFXNXBkR2xoYkdsNlpTQjBhSEpsZHk1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzY21Gd2NHVnlTVzVwZEVSaGRHRmJhVjBnUFNCVWNtRnVjMkZqZEdsdmJpNVBRbE5GVWxaRlJGOUZVbEpQVWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzY21Gd2NHVnlTVzVwZEVSaGRHRmJhVjBnUFNCM2NtRndjR1Z5TG1sdWFYUnBZV3hwZW1VZ1AxeHVJQ0FnSUNBZ0lDQWdJSGR5WVhCd1pYSXVhVzVwZEdsaGJHbDZaUzVqWVd4c0tIUm9hWE1wSURwY2JpQWdJQ0FnSUNBZ0lDQnVkV3hzTzF4dUlDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWQzSmhjSEJsY2tsdWFYUkVZWFJoVzJsZElEMDlQU0JVY21GdWMyRmpkR2x2Ymk1UFFsTkZVbFpGUkY5RlVsSlBVaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRlJvWlNCcGJtbDBhV0ZzYVhwbGNpQm1iM0lnZDNKaGNIQmxjaUJwSUhSb2NtVjNJR0Z1SUdWeWNtOXlPeUJwYm1sMGFXRnNhWHBsSUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQzh2SUhKbGJXRnBibWx1WnlCM2NtRndjR1Z5Y3lCaWRYUWdjMmxzWlc1alpTQmhibmtnWlhoalpYQjBhVzl1Y3lCbWNtOXRJSFJvWlcwZ2RHOGdaVzV6ZFhKbFhHNGdJQ0FnSUNBZ0lDQWdMeThnZEdoaGRDQjBhR1VnWm1seWMzUWdaWEp5YjNJZ2FYTWdkR2hsSUc5dVpTQjBieUJpZFdKaWJHVWdkWEF1WEc0Z0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YVc1cGRHbGhiR2w2WlVGc2JDaHBJQ3NnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJuWnZhMlZ6SUdWaFkyZ2diMllnWUhSb2FYTXVkSEpoYm5OaFkzUnBiMjVYY21Gd2NHVnljeTVqYkc5elpWdHBYV0FnWm5WdVkzUnBiMjV6TENCd1lYTnphVzVuSUdsdWRHOWNiaUFnSUNvZ2RHaGxiU0IwYUdVZ2NtVnpjR1ZqZEdsMlpTQnlaWFIxY200Z2RtRnNkV1Z6SUc5bUlHQjBhR2x6TG5SeVlXNXpZV04wYVc5dVYzSmhjSEJsY25NdWFXNXBkRnRwWFdCY2JpQWdJQ29nS0dCamJHOXpaV0J5Y3lCMGFHRjBJR052Y25KbGMzQnZibVFnZEc4Z2FXNXBkR2xoYkdsNlpYSnpJSFJvWVhRZ1ptRnBiR1ZrSUhkcGJHd2dibTkwSUdKbFhHNGdJQ0FxSUdsdWRtOXJaV1FwTGx4dUlDQWdLaTljYmlBZ1kyeHZjMlZCYkd3NklHWjFibU4wYVc5dUtITjBZWEowU1c1a1pYZ3BJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ2RHaHBjeTVwYzBsdVZISmhibk5oWTNScGIyNG9LU3hjYmlBZ0lDQWdJQ2RVY21GdWMyRmpkR2x2Ymk1amJHOXpaVUZzYkNncE9pQkRZVzV1YjNRZ1kyeHZjMlVnZEhKaGJuTmhZM1JwYjI0Z2QyaGxiaUJ1YjI1bElHRnlaU0J2Y0dWdUxpZGNiaUFnSUNBcElEb2dhVzUyWVhKcFlXNTBLSFJvYVhNdWFYTkpibFJ5WVc1ellXTjBhVzl1S0NrcEtUdGNiaUFnSUNCMllYSWdkSEpoYm5OaFkzUnBiMjVYY21Gd2NHVnljeUE5SUhSb2FYTXVkSEpoYm5OaFkzUnBiMjVYY21Gd2NHVnljenRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnYzNSaGNuUkpibVJsZURzZ2FTQThJSFJ5WVc1ellXTjBhVzl1VjNKaGNIQmxjbk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUIzY21Gd2NHVnlJRDBnZEhKaGJuTmhZM1JwYjI1WGNtRndjR1Z5YzF0cFhUdGNiaUFnSUNBZ0lIWmhjaUJwYm1sMFJHRjBZU0E5SUhSb2FYTXVkM0poY0hCbGNrbHVhWFJFWVhSaFcybGRPMXh1SUNBZ0lDQWdkbUZ5SUdWeWNtOXlWR2h5YjNkdU8xeHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1EyRjBZMmhwYm1jZ1pYSnliM0p6SUcxaGEyVnpJR1JsWW5WbloybHVaeUJ0YjNKbElHUnBabVpwWTNWc2RDd2djMjhnZDJVZ2MzUmhjblFnZDJsMGFGeHVJQ0FnSUNBZ0lDQXZMeUJsY25KdmNsUm9jbTkzYmlCelpYUWdkRzhnZEhKMVpTQmlaV1p2Y21VZ2MyVjBkR2x1WnlCcGRDQjBieUJtWVd4elpTQmhablJsY2lCallXeHNhVzVuWEc0Z0lDQWdJQ0FnSUM4dklHTnNiM05sSUMwdElHbG1JR2wwSjNNZ2MzUnBiR3dnYzJWMElIUnZJSFJ5ZFdVZ2FXNGdkR2hsSUdacGJtRnNiSGtnWW14dlkyc3NJR2wwSUcxbFlXNXpYRzRnSUNBZ0lDQWdJQzh2SUhkeVlYQndaWEl1WTJ4dmMyVWdkR2h5WlhjdVhHNGdJQ0FnSUNBZ0lHVnljbTl5VkdoeWIzZHVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdhV1lnS0dsdWFYUkVZWFJoSUNFOVBTQlVjbUZ1YzJGamRHbHZiaTVQUWxORlVsWkZSRjlGVWxKUFVpQW1KaUIzY21Gd2NHVnlMbU5zYjNObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZDNKaGNIQmxjaTVqYkc5elpTNWpZV3hzS0hSb2FYTXNJR2x1YVhSRVlYUmhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGNuSnZjbFJvY205M2JpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0dWeWNtOXlWR2h5YjNkdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaGxJR05zYjNObGNpQm1iM0lnZDNKaGNIQmxjaUJwSUhSb2NtVjNJR0Z1SUdWeWNtOXlPeUJqYkc5elpTQjBhR1VnY21WdFlXbHVhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkM0poY0hCbGNuTWdZblYwSUhOcGJHVnVZMlVnWVc1NUlHVjRZMlZ3ZEdsdmJuTWdabkp2YlNCMGFHVnRJSFJ2SUdWdWMzVnlaU0IwYUdGMElIUm9aVnh1SUNBZ0lDQWdJQ0FnSUM4dklHWnBjbk4wSUdWeWNtOXlJR2x6SUhSb1pTQnZibVVnZEc4Z1luVmlZbXhsSUhWd0xseHVJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnNiM05sUVd4c0tHa2dLeUF4S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVkM0poY0hCbGNrbHVhWFJFWVhSaExteGxibWQwYUNBOUlEQTdYRzRnSUgxY2JuMDdYRzVjYm5aaGNpQlVjbUZ1YzJGamRHbHZiaUE5SUh0Y2JseHVJQ0JOYVhocGJqb2dUV2w0YVc0c1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSdmEyVnVJSFJ2SUd4dmIyc2dabTl5SUhSdklHUmxkR1Z5YldsdVpTQnBaaUJoYmlCbGNuSnZjaUJ2WTJOMWNtVmtMbHh1SUNBZ0tpOWNiaUFnVDBKVFJWSldSVVJmUlZKU1QxSTZJSHQ5WEc1Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVkhKaGJuTmhZM1JwYjI0N1hHNGlYWDA9IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFZpZXdwb3J0TWV0cmljc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFZpZXdwb3J0TWV0cmljcyA9IHtcblxuICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblxuICBjdXJyZW50U2Nyb2xsVG9wOiAwLFxuXG4gIHJlZnJlc2hTY3JvbGxWYWx1ZXM6IGZ1bmN0aW9uKHNjcm9sbFBvc2l0aW9uKSB7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zaXRpb24ueDtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFBvc2l0aW9uLnk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydE1ldHJpY3M7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYWNjdW11bGF0ZUludG8oY3VycmVudCxuZXh0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChudWxsIT1uZXh0LFwiYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuXCIpOmludmFyaWFudChudWxsIT1uZXh0KSxudWxsPT1jdXJyZW50KXJldHVybiBuZXh0O3ZhciBjdXJyZW50SXNBcnJheT1BcnJheS5pc0FycmF5KGN1cnJlbnQpLG5leHRJc0FycmF5PUFycmF5LmlzQXJyYXkobmV4dCk7cmV0dXJuIGN1cnJlbnRJc0FycmF5JiZuZXh0SXNBcnJheT8oY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsbmV4dCksY3VycmVudCk6Y3VycmVudElzQXJyYXk/KGN1cnJlbnQucHVzaChuZXh0KSxjdXJyZW50KTpuZXh0SXNBcnJheT9bY3VycmVudF0uY29uY2F0KG5leHQpOltjdXJyZW50LG5leHRdfXZhciBpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpO21vZHVsZS5leHBvcnRzPWFjY3VtdWxhdGVJbnRvO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2WVdOamRXMTFiR0YwWlVsdWRHOHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVZkQkxGbEJhMEpCTEZOQlFWTXNaMEpCUVdVc1VVRkJVeXhOUVVzdlFpeEhRVXBETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJReTlDTEUxQlFWSXNTMEZEUVN4NVJVRkRSU3hWUVVGclFpeE5RVUZTTEUxQlEwTXNUVUZCV0N4UlFVTkdMRTFCUVU4c1MwRkxWQ3hKUVVGSkxHZENRVUZwUWl4TlFVRk5MRkZCUVZFc1UwRkRMMElzV1VGQll5eE5RVUZOTEZGQlFWRXNTMEZGYUVNc1QwRkJTU3hwUWtGQmEwSXNZVUZEY0VJc1VVRkJVU3hMUVVGTExFMUJRVTBzVVVGQlV5eE5RVU55UWl4VFFVZE1MR2RDUVVOR0xGRkJRVkVzUzBGQlN5eE5RVU5PTEZOQlIwd3NZVUZGVFN4VFFVRlRMRTlCUVU4c1QwRkhiRUlzVVVGQlV5eE5RVGREYmtJc1IwRkJTU3hYUVVGWkxGRkJRVkVzWTBGblJIaENMRkZCUVU4c1VVRkJWU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXhOQzB5TURFMUxDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUV4SlEwVk9VMFVnWm1sc1pTQnBiaUIwYUdVZ2NtOXZkQ0JrYVhKbFkzUnZjbmtnYjJZZ2RHaHBjeUJ6YjNWeVkyVWdkSEpsWlM0Z1FXNGdZV1JrYVhScGIyNWhiQ0JuY21GdWRGeHVJQ29nYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBiaUIwYUdVZ2MyRnRaU0JrYVhKbFkzUnZjbmt1WEc0Z0tseHVJQ29nUUhCeWIzWnBaR1Z6VFc5a2RXeGxJR0ZqWTNWdGRXeGhkR1ZKYm5SdlhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdhVzUyWVhKcFlXNTBJRDBnY21WeGRXbHlaU2hjSWk0dmFXNTJZWEpwWVc1MFhDSXBPMXh1WEc0dktpcGNiaUFxWEc0Z0tpQkJZMk4xYlhWc1lYUmxjeUJwZEdWdGN5QjBhR0YwSUcxMWMzUWdibTkwSUdKbElHNTFiR3dnYjNJZ2RXNWtaV1pwYm1Wa0lHbHVkRzhnZEdobElHWnBjbk4wSUc5dVpTNGdWR2hwYzF4dUlDb2dhWE1nZFhObFpDQjBieUJqYjI1elpYSjJaU0J0WlcxdmNua2dZbmtnWVhadmFXUnBibWNnWVhKeVlYa2dZV3hzYjJOaGRHbHZibk1zSUdGdVpDQjBhSFZ6SUhOaFkzSnBabWxqWlhOY2JpQXFJRUZRU1NCamJHVmhibTVsYzNNdUlGTnBibU5sSUdCamRYSnlaVzUwWUNCallXNGdZbVVnYm5Wc2JDQmlaV1p2Y21VZ1ltVnBibWNnY0dGemMyVmtJR2x1SUdGdVpDQnViM1JjYmlBcUlHNTFiR3dnWVdaMFpYSWdkR2hwY3lCbWRXNWpkR2x2Yml3Z2JXRnJaU0J6ZFhKbElIUnZJR0Z6YzJsbmJpQnBkQ0JpWVdOcklIUnZJR0JqZFhKeVpXNTBZRHBjYmlBcVhHNGdLaUJnWVNBOUlHRmpZM1Z0ZFd4aGRHVkpiblJ2S0dFc0lHSXBPMkJjYmlBcVhHNGdLaUJVYUdseklFRlFTU0J6YUc5MWJHUWdZbVVnYzNCaGNtbHVaMng1SUhWelpXUXVJRlJ5ZVNCZ1lXTmpkVzExYkdGMFpXQWdabTl5SUhOdmJXVjBhR2x1WnlCamJHVmhibVZ5TGx4dUlDcGNiaUFxSUVCeVpYUjFjbTRnZXlwOFlYSnlZWGs4S2o1OUlFRnVJR0ZqWTNWdGRXeGhkR2x2YmlCdlppQnBkR1Z0Y3k1Y2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCaFkyTjFiWFZzWVhSbFNXNTBieWhqZFhKeVpXNTBMQ0J1WlhoMEtTQjdYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdibVY0ZENBaFBTQnVkV3hzTEZ4dUlDQWdJQ2RoWTJOMWJYVnNZWFJsU1c1MGJ5Z3VMaTRwT2lCQlkyTjFiWFZzWVhSbFpDQnBkR1Z0Y3lCdGRYTjBJRzV2ZENCaVpTQnVkV3hzSUc5eUlIVnVaR1ZtYVc1bFpDNG5YRzRnSUNrZ09pQnBiblpoY21saGJuUW9ibVY0ZENBaFBTQnVkV3hzS1NrN1hHNGdJR2xtSUNoamRYSnlaVzUwSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVY0ZER0Y2JpQWdmVnh1WEc0Z0lDOHZJRUp2ZEdnZ1lYSmxJRzV2ZENCbGJYQjBlUzRnVjJGeWJtbHVaem9nVG1WMlpYSWdZMkZzYkNCNExtTnZibU5oZENoNUtTQjNhR1Z1SUhsdmRTQmhjbVVnYm05MFhHNGdJQzh2SUdObGNuUmhhVzRnZEdoaGRDQjRJR2x6SUdGdUlFRnljbUY1SUNoNElHTnZkV3hrSUdKbElHRWdjM1J5YVc1bklIZHBkR2dnWTI5dVkyRjBJRzFsZEdodlpDa3VYRzRnSUhaaGNpQmpkWEp5Wlc1MFNYTkJjbkpoZVNBOUlFRnljbUY1TG1selFYSnlZWGtvWTNWeWNtVnVkQ2s3WEc0Z0lIWmhjaUJ1WlhoMFNYTkJjbkpoZVNBOUlFRnljbUY1TG1selFYSnlZWGtvYm1WNGRDazdYRzVjYmlBZ2FXWWdLR04xY25KbGJuUkpjMEZ5Y21GNUlDWW1JRzVsZUhSSmMwRnljbUY1S1NCN1hHNGdJQ0FnWTNWeWNtVnVkQzV3ZFhOb0xtRndjR3g1S0dOMWNuSmxiblFzSUc1bGVIUXBPMXh1SUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLR04xY25KbGJuUkpjMEZ5Y21GNUtTQjdYRzRnSUNBZ1kzVnljbVZ1ZEM1d2RYTm9LRzVsZUhRcE8xeHVJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHNWxlSFJKYzBGeWNtRjVLU0I3WEc0Z0lDQWdMeThnUVNCaWFYUWdkRzl2SUdSaGJtZGxjbTkxY3lCMGJ5QnRkWFJoZEdVZ1lHNWxlSFJnTGx4dUlDQWdJSEpsZEhWeWJpQmJZM1Z5Y21WdWRGMHVZMjl1WTJGMEtHNWxlSFFwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUZ0amRYSnlaVzUwTENCdVpYaDBYVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmhZMk4xYlhWc1lYUmxTVzUwYnp0Y2JpSmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFkbGVyMzJcbiAqL1xuXG4vKiBqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE1PRCA9IDY1NTIxO1xuXG4vLyBUaGlzIGlzIGEgY2xlYW4tcm9vbSBpbXBsZW1lbnRhdGlvbiBvZiBhZGxlcjMyIGRlc2lnbmVkIGZvciBkZXRlY3Rpbmdcbi8vIGlmIG1hcmt1cCBpcyBub3Qgd2hhdCB3ZSBleHBlY3QgaXQgdG8gYmUuIEl0IGRvZXMgbm90IG5lZWQgdG8gYmVcbi8vIGNyeXB0b2dyYXBoaWNhbGx5IHN0cm9uZywgb25seSByZWFzb25hYmx5IGdvb2QgYXQgZGV0ZWN0aW5nIGlmIG1hcmt1cFxuLy8gZ2VuZXJhdGVkIG9uIHRoZSBzZXJ2ZXIgaXMgZGlmZmVyZW50IHRoYW4gdGhhdCBvbiB0aGUgY2xpZW50LlxuZnVuY3Rpb24gYWRsZXIzMihkYXRhKSB7XG4gIHZhciBhID0gMTtcbiAgdmFyIGIgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBhID0gKGEgKyBkYXRhLmNoYXJDb2RlQXQoaSkpICUgTU9EO1xuICAgIGIgPSAoYiArIGEpICUgTU9EO1xuICB9XG4gIHJldHVybiBhIHwgKGIgPDwgMTYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkbGVyMzI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FtZWxpemVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24oXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjYW1lbGl6ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNhbWVsaXplID0gcmVxdWlyZShcIi4vY2FtZWxpemVcIik7XG5cbnZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1vei10cmFuc2l0aW9uJylcbiAqICAgPCBcIk1velRyYW5zaXRpb25cIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbXMtdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJtc1RyYW5zaXRpb25cIlxuICpcbiAqIEFzIEFuZGkgU21pdGggc3VnZ2VzdHNcbiAqIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gY2FtZWxpemUoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplU3R5bGVOYW1lO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNvbnRhaW5zTm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoXCIuL2lzVGV4dE5vZGVcIik7XG5cbi8qanNsaW50IGJpdHdpc2U6dHJ1ZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKlxuICogQHBhcmFtIHs/RE9NTm9kZX0gb3V0ZXJOb2RlIE91dGVyIERPTSBub2RlLlxuICogQHBhcmFtIHs/RE9NTm9kZX0gaW5uZXJOb2RlIElubmVyIERPTSBub2RlLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb3V0ZXJOb2RlYCBjb250YWlucyBvciBpcyBgaW5uZXJOb2RlYC5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29udGFpbnMpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVBcnJheUZyb21NaXhlZFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgdG9BcnJheSA9IHJlcXVpcmUoXCIuL3RvQXJyYXlcIik7XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiZcbiAgICAvLyBhcnJheXMgYXJlIG9iamVjdHMsIE5vZGVMaXN0cyBhcmUgZnVuY3Rpb25zIGluIFNhZmFyaVxuICAgICh0eXBlb2Ygb2JqID09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykgJiZcbiAgICAvLyBxdWFja3MgbGlrZSBhbiBhcnJheVxuICAgICgnbGVuZ3RoJyBpbiBvYmopICYmXG4gICAgLy8gbm90IHdpbmRvd1xuICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG4gICAgLy8gbm8gRE9NIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gYXJyYXktbGlrZVxuICAgIC8vIGEgJ3NlbGVjdCcgZWxlbWVudCBoYXMgJ2xlbmd0aCcgYW5kICdpdGVtJyBwcm9wZXJ0aWVzIG9uIElFOFxuICAgICh0eXBlb2Ygb2JqLm5vZGVUeXBlICE9ICdudW1iZXInKSAmJlxuICAgIChcbiAgICAgIC8vIGEgcmVhbCBhcnJheVxuICAgICAgKC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG4gICAgICAoQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgICAvLyBhcmd1bWVudHNcbiAgICAgICgnY2FsbGVlJyBpbiBvYmopIHx8ICdpdGVtJyBpbiBvYmopKVxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50IGlmIGl0IGlzIGFscmVhZHkgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG4gKlxuICogICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb21NaXhlZCcpO1xuICpcbiAqICAgZnVuY3Rpb24gdGFrZXNPbmVPck1vcmVUaGluZ3ModGhpbmdzKSB7XG4gKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQodGhpbmdzKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gY29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCwgbGlrZSBgYXJndW1lbnRzYCwgaW50byBhbiBhcnJheVxuICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1peGVkKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCh0YWcpe3ZhciBlbGVtZW50RmFjdG9yeT1SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpLEZ1bGxQYWdlQ29tcG9uZW50PVJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe3RhZ05hbWU6dGFnLnRvVXBwZXJDYXNlKCksZGlzcGxheU5hbWU6XCJSZWFjdEZ1bGxQYWdlQ29tcG9uZW50XCIrdGFnLGNvbXBvbmVudFdpbGxVbm1vdW50OmZ1bmN0aW9uKCl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCIlcyB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzIGltcG9zc2libGUgdG8gdW5tb3VudCBzb21lIHRvcC1sZXZlbCBjb21wb25lbnRzIChlZyA8aHRtbD4sIDxoZWFkPiwgYW5kIDxib2R5PikgcmVsaWFibHkgYW5kIGVmZmljaWVudGx5LiBUbyBmaXggdGhpcywgaGF2ZSBhIHNpbmdsZSB0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlIGVsZW1lbnRzLlwiLHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUpOmludmFyaWFudCghMSl9LHJlbmRlcjpmdW5jdGlvbigpe3JldHVybiBlbGVtZW50RmFjdG9yeSh0aGlzLnByb3BzKX19KTtyZXR1cm4gRnVsbFBhZ2VDb21wb25lbnR9dmFyIFJlYWN0Q2xhc3M9cmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKSxSZWFjdEVsZW1lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7bW9kdWxlLmV4cG9ydHM9Y3JlYXRlRnVsbFBhZ2VDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZZM0psWVhSbFJuVnNiRkJoWjJWRGIyMXdiMjVsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmxCTEZsQmJVSkJMRk5CUVZNc2VVSkJRWGRDTEV0QlF5OUNMRWRCUVVrc1owSkJRV2xDTEdGQlFXRXNZMEZCWXl4TFFVVTFReXhyUWtGQmIwSXNWMEZCVnl4aFFVTnFReXhSUVVGVExFbEJRVWtzWTBGRFlpeFpRVUZoTEhsQ1FVRXlRaXhKUVVWNFF5eHhRa0ZCYzBJc1YwRkRia0lzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1YwRkRka01zUlVGRFFTeHBVVUZKUVN4TFFVRkxMRmxCUVZrc1lVRkRaaXhYUVVGVkxFbEJSMmhDTEU5QlFWRXNWMEZEVGl4TlFVRlBMR2RDUVVGbExFdEJRVXNzVTBGSkwwSXNUMEZCVHl4dFFrRjJRMVFzUjBGQlNTeFpRVUZoTEZGQlFWRXNaMEpCUTNKQ0xHRkJRV1VzVVVGQlVTeHJRa0ZGZGtJc1ZVRkJXU3hSUVVGUkxHTkJkVU40UWl4UlFVRlBMRkZCUVZVaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRNdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCamNtVmhkR1ZHZFd4c1VHRm5aVU52YlhCdmJtVnVkRnh1SUNvZ1FIUjVjR1ZqYUdWamEzTmNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHZJRVJsWm1WaGRDQmphWEpqZFd4aGNpQnlaV1psY21WdVkyVnpJR0o1SUhKbGNYVnBjbWx1WnlCMGFHbHpJR1JwY21WamRHeDVMbHh1ZG1GeUlGSmxZV04wUTJ4aGMzTWdQU0J5WlhGMWFYSmxLRndpTGk5U1pXRmpkRU5zWVhOelhDSXBPMXh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRndpS1R0Y2JseHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMmx1ZG1GeWFXRnVkRndpS1R0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdVZ1lTQmpiMjF3YjI1bGJuUWdkR2hoZENCM2FXeHNJSFJvY205M0lHRnVJR1Y0WTJWd2RHbHZiaUIzYUdWdUlIVnViVzkxYm5SbFpDNWNiaUFxWEc0Z0tpQkRiMjF3YjI1bGJuUnpJR3hwYTJVZ1BHaDBiV3crSUR4b1pXRmtQaUJoYm1RZ1BHSnZaSGsrSUdOaGJpZDBJR0psSUhKbGJXOTJaV1FnYjNJZ1lXUmtaV1JjYmlBcUlHVmhjMmxzZVNCcGJpQmhJR055YjNOekxXSnliM2R6WlhJZ2QyRjVMQ0JvYjNkbGRtVnlJR2wwSjNNZ2RtRnNkV0ZpYkdVZ2RHOGdZbVVnWVdKc1pTQjBiMXh1SUNvZ2RHRnJaU0JoWkhaaGJuUmhaMlVnYjJZZ1VtVmhZM1FuY3lCeVpXTnZibU5wYkdsaGRHbHZiaUJtYjNJZ2MzUjViR2x1WnlCaGJtUWdQSFJwZEd4bFBseHVJQ29nYldGdVlXZGxiV1Z1ZEM0Z1UyOGdkMlVnYW5WemRDQmtiMk4xYldWdWRDQnBkQ0JoYm1RZ2RHaHliM2NnYVc0Z1pHRnVaMlZ5YjNWeklHTmhjMlZ6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IwWVdjZ1ZHaGxJSFJoWnlCMGJ5QjNjbUZ3WEc0Z0tpQkFjbVYwZFhKdUlIdG1kVzVqZEdsdmJuMGdZMjl1ZG1WdWFXVnVZMlVnWTI5dWMzUnlkV04wYjNJZ2IyWWdibVYzSUdOdmJYQnZibVZ1ZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqY21WaGRHVkdkV3hzVUdGblpVTnZiWEJ2Ym1WdWRDaDBZV2NwSUh0Y2JpQWdkbUZ5SUdWc1pXMWxiblJHWVdOMGIzSjVJRDBnVW1WaFkzUkZiR1Z0Wlc1MExtTnlaV0YwWlVaaFkzUnZjbmtvZEdGbktUdGNibHh1SUNCMllYSWdSblZzYkZCaFoyVkRiMjF3YjI1bGJuUWdQU0JTWldGamRFTnNZWE56TG1OeVpXRjBaVU5zWVhOektIdGNiaUFnSUNCMFlXZE9ZVzFsT2lCMFlXY3VkRzlWY0hCbGNrTmhjMlVvS1N4Y2JpQWdJQ0JrYVhOd2JHRjVUbUZ0WlRvZ0oxSmxZV04wUm5Wc2JGQmhaMlZEYjIxd2IyNWxiblFuSUNzZ2RHRm5MRnh1WEc0Z0lDQWdZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0FnSUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNjbGN5QjBjbWxsWkNCMGJ5QjFibTF2ZFc1MExpQkNaV05oZFhObElHOW1JR055YjNOekxXSnliM2R6WlhJZ2NYVnBjbXR6SUdsMElHbHpJQ2NnSzF4dUlDQWdJQ0FnSUNBbmFXMXdiM056YVdKc1pTQjBieUIxYm0xdmRXNTBJSE52YldVZ2RHOXdMV3hsZG1Wc0lHTnZiWEJ2Ym1WdWRITWdLR1ZuSUR4b2RHMXNQaXdnUEdobFlXUStMQ0FuSUN0Y2JpQWdJQ0FnSUNBZ0oyRnVaQ0E4WW05a2VUNHBJSEpsYkdsaFlteDVJR0Z1WkNCbFptWnBZMmxsYm5Sc2VTNGdWRzhnWm1sNElIUm9hWE1zSUdoaGRtVWdZU0J6YVc1bmJHVWdKeUFyWEc0Z0lDQWdJQ0FnSUNkMGIzQXRiR1YyWld3Z1kyOXRjRzl1Wlc1MElIUm9ZWFFnYm1WMlpYSWdkVzV0YjNWdWRITWdjbVZ1WkdWeUlIUm9aWE5sSUdWc1pXMWxiblJ6TGljc1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWMzUnlkV04wYjNJdVpHbHpjR3hoZVU1aGJXVmNiaUFnSUNBZ0lDa2dPaUJwYm5aaGNtbGhiblFvWm1Gc2MyVXBLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjbVZ1WkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmxiR1Z0Wlc1MFJtRmpkRzl5ZVNoMGFHbHpMbkJ5YjNCektUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dVhHNGdJSEpsZEhWeWJpQkdkV3hzVUdGblpVTnZiWEJ2Ym1WdWREdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamNtVmhkR1ZHZFd4c1VHRm5aVU52YlhCdmJtVnVkRHRjYmlKZGZRPT0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKXt2YXIgbm9kZU5hbWVNYXRjaD1tYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtyZXR1cm4gbm9kZU5hbWVNYXRjaCYmbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsaGFuZGxlU2NyaXB0KXt2YXIgbm9kZT1kdW1teU5vZGU7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoISFkdW1teU5vZGUsXCJjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkXCIpOmludmFyaWFudCghIWR1bW15Tm9kZSk7dmFyIG5vZGVOYW1lPWdldE5vZGVOYW1lKG1hcmt1cCksd3JhcD1ub2RlTmFtZSYmZ2V0TWFya3VwV3JhcChub2RlTmFtZSk7aWYod3JhcCl7bm9kZS5pbm5lckhUTUw9d3JhcFsxXSttYXJrdXArd3JhcFsyXTtmb3IodmFyIHdyYXBEZXB0aD13cmFwWzBdO3dyYXBEZXB0aC0tOylub2RlPW5vZGUubGFzdENoaWxkfWVsc2Ugbm9kZS5pbm5lckhUTUw9bWFya3VwO3ZhciBzY3JpcHRzPW5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7c2NyaXB0cy5sZW5ndGgmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChoYW5kbGVTY3JpcHQsXCJjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLlwiKTppbnZhcmlhbnQoaGFuZGxlU2NyaXB0KSxjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCkpO2Zvcih2YXIgbm9kZXM9Y3JlYXRlQXJyYXlGcm9tTWl4ZWQobm9kZS5jaGlsZE5vZGVzKTtub2RlLmxhc3RDaGlsZDspbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7cmV0dXJuIG5vZGVzfXZhciBFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxjcmVhdGVBcnJheUZyb21NaXhlZD1yZXF1aXJlKFwiLi9jcmVhdGVBcnJheUZyb21NaXhlZFwiKSxnZXRNYXJrdXBXcmFwPXJlcXVpcmUoXCIuL2dldE1hcmt1cFdyYXBcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxkdW1teU5vZGU9RXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik6bnVsbCxub2RlTmFtZVBhdHRlcm49L15cXHMqPChcXHcrKS87bW9kdWxlLmV4cG9ydHM9Y3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2WTNKbFlYUmxUbTlrWlhOR2NtOXRUV0Z5YTNWd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZ4UTBFc1VVRkJVeXhoUVVGWkxGRkJRMjVDTEVkQlFVa3NaVUZCWjBJc1QwRkJUeXhOUVVGTkxHZENRVU5xUXl4UFFVRlBMR2RDUVVGcFFpeGpRVUZqTEVkQlFVY3NZMEZoTTBNc1VVRkJVeXgxUWtGQmMwSXNUMEZCVVN4alFVTnlReXhIUVVGSkxFMUJRVThzVTBGRFZpeG5Ra0ZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzV1VGQldTeFZRVUZYTEN0RFFVRnBSQ3haUVVGWkxGVkJRemRJTEVsQlFVa3NWVUZCVnl4WlFVRlpMRkZCUlhaQ0xFdEJRVThzVlVGQldTeGpRVUZqTEZOQlEzSkRMRWxCUVVrc1MwRkJUU3hEUVVOU0xFdEJRVXNzVlVGQldTeExRVUZMTEVkQlFVc3NUMEZCVXl4TFFVRkxMRVZCUjNwRExFdEJSRUVzUjBGQlNTeFhRVUZaTEV0QlFVc3NSMEZEWkN4aFFVTk1MRXRCUVU4c1MwRkJTeXhqUVVka0xFMUJRVXNzVlVGQldTeE5RVWR1UWl4SlFVRkpMRk5CUVZVc1MwRkJTeXh4UWtGQmNVSXNVMEZEY0VNc1UwRkJVU3hUUVVOVUxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRlZCUTNaRExHRkJRMEVzY1VWQlEwVXNWVUZCVlN4alFVTmtMSEZDUVVGeFFpeFRRVUZUTEZGQlFWRXNZMEZKZUVNc1MwRkVRU3hIUVVGSkxFOUJRVkVzY1VKQlFYRkNMRXRCUVVzc1dVRkRMMElzUzBGQlN5eFhRVU5XTEV0QlFVc3NXVUZCV1N4TFFVRkxMRlZCUlhoQ0xFOUJRVThzVDBGd1JWUXNSMEZCU1N4elFrRkJkVUlzVVVGQlVTd3dRa0ZGTDBJc2NVSkJRWFZDTEZGQlFWRXNNRUpCUXk5Q0xHTkJRV2RDTEZGQlFWRXNiVUpCUTNoQ0xGVkJRVmtzVVVGQlVTeGxRVXR3UWl4VlFVTkdMSEZDUVVGeFFpeFZRVUZaTEZOQlFWTXNZMEZCWXl4UFFVRlRMRXRCU3k5RUxHZENRVUZyUWl4WlFYZEVkRUlzVVVGQlR5eFJRVUZWSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnWTNKbFlYUmxUbTlrWlhOR2NtOXRUV0Z5YTNWd1hHNGdLaUJBZEhsd1pXTm9aV05yYzF4dUlDb3ZYRzVjYmk4cWFuTnNhVzUwSUdWMmFXdzZJSFJ5ZFdVc0lITjFZam9nZEhKMVpTQXFMMXh1WEc1MllYSWdSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOUZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkRndpS1R0Y2JseHVkbUZ5SUdOeVpXRjBaVUZ5Y21GNVJuSnZiVTFwZUdWa0lEMGdjbVZ4ZFdseVpTaGNJaTR2WTNKbFlYUmxRWEp5WVhsR2NtOXRUV2w0WldSY0lpazdYRzUyWVhJZ1oyVjBUV0Z5YTNWd1YzSmhjQ0E5SUhKbGNYVnBjbVVvWENJdUwyZGxkRTFoY210MWNGZHlZWEJjSWlrN1hHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZhVzUyWVhKcFlXNTBYQ0lwTzF4dVhHNHZLaXBjYmlBcUlFUjFiVzE1SUdOdmJuUmhhVzVsY2lCMWMyVmtJSFJ2SUhKbGJtUmxjaUJoYkd3Z2JXRnlhM1Z3TGx4dUlDb3ZYRzUyWVhJZ1pIVnRiWGxPYjJSbElEMWNiaUFnUlhobFkzVjBhVzl1Ulc1MmFYSnZibTFsYm5RdVkyRnVWWE5sUkU5TklEOGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWtnT2lCdWRXeHNPMXh1WEc0dktpcGNiaUFxSUZCaGRIUmxjbTRnZFhObFpDQmllU0JnWjJWMFRtOWtaVTVoYldWZ0xseHVJQ292WEc1MllYSWdibTlrWlU1aGJXVlFZWFIwWlhKdUlEMGdMMTVjWEhNcVBDaGNYSGNyS1M4N1hHNWNiaThxS2x4dUlDb2dSWGgwY21GamRITWdkR2hsSUdCdWIyUmxUbUZ0WldBZ2IyWWdkR2hsSUdacGNuTjBJR1ZzWlcxbGJuUWdhVzRnWVNCemRISnBibWNnYjJZZ2JXRnlhM1Z3TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J0WVhKcmRYQWdVM1J5YVc1bklHOW1JRzFoY210MWNDNWNiaUFxSUVCeVpYUjFjbTRnZXo5emRISnBibWQ5SUU1dlpHVWdibUZ0WlNCdlppQjBhR1VnYzNWd2NHeHBaV1FnYldGeWEzVndMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJPYjJSbFRtRnRaU2h0WVhKcmRYQXBJSHRjYmlBZ2RtRnlJRzV2WkdWT1lXMWxUV0YwWTJnZ1BTQnRZWEpyZFhBdWJXRjBZMmdvYm05a1pVNWhiV1ZRWVhSMFpYSnVLVHRjYmlBZ2NtVjBkWEp1SUc1dlpHVk9ZVzFsVFdGMFkyZ2dKaVlnYm05a1pVNWhiV1ZOWVhSamFGc3hYUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVc0Z1lYSnlZWGtnWTI5dWRHRnBibWx1WnlCMGFHVWdibTlrWlhNZ2NtVnVaR1Z5WldRZ1puSnZiU0IwYUdVZ2MzVndjR3hwWldRZ2JXRnlhM1Z3TGlCVWFHVmNiaUFxSUc5d2RHbHZibUZzYkhrZ2MzVndjR3hwWldRZ1lHaGhibVJzWlZOamNtbHdkR0FnWm5WdVkzUnBiMjRnZDJsc2JDQmlaU0JwYm5admEyVmtJRzl1WTJVZ1ptOXlJR1ZoWTJoY2JpQXFJRHh6WTNKcGNIUStJR1ZzWlcxbGJuUWdkR2hoZENCcGN5QnlaVzVrWlhKbFpDNGdTV1lnYm04Z1lHaGhibVJzWlZOamNtbHdkR0FnWm5WdVkzUnBiMjRnYVhNZ2MzVndjR3hwWldRc1hHNGdLaUJoYmlCbGVHTmxjSFJwYjI0Z2FYTWdkR2h5YjNkdUlHbG1JR0Z1ZVNBOGMyTnlhWEIwUGlCbGJHVnRaVzUwY3lCaGNtVWdjbVZ1WkdWeVpXUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWhjbXQxY0NCQklITjBjbWx1WnlCdlppQjJZV3hwWkNCSVZFMU1JRzFoY210MWNDNWNiaUFxSUVCd1lYSmhiU0I3UDJaMWJtTjBhVzl1ZlNCb1lXNWtiR1ZUWTNKcGNIUWdTVzUyYjJ0bFpDQnZibU5sSUdadmNpQmxZV05vSUhKbGJtUmxjbVZrSUR4elkzSnBjSFErTGx4dUlDb2dRSEpsZEhWeWJpQjdZWEp5WVhrOFJFOU5SV3hsYldWdWRIeEVUMDFVWlhoMFRtOWtaVDU5SUVGdUlHRnljbUY1SUc5bUlISmxibVJsY21Wa0lHNXZaR1Z6TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJqY21WaGRHVk9iMlJsYzBaeWIyMU5ZWEpyZFhBb2JXRnlhM1Z3TENCb1lXNWtiR1ZUWTNKcGNIUXBJSHRjYmlBZ2RtRnlJRzV2WkdVZ1BTQmtkVzF0ZVU1dlpHVTdYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvSVNGa2RXMXRlVTV2WkdVc0lDZGpjbVZoZEdWT2IyUmxjMFp5YjIxTllYSnJkWEFnWkhWdGJYa2dibTkwSUdsdWFYUnBZV3hwZW1Wa0p5a2dPaUJwYm5aaGNtbGhiblFvSVNGa2RXMXRlVTV2WkdVcEtUdGNiaUFnZG1GeUlHNXZaR1ZPWVcxbElEMGdaMlYwVG05a1pVNWhiV1VvYldGeWEzVndLVHRjYmx4dUlDQjJZWElnZDNKaGNDQTlJRzV2WkdWT1lXMWxJQ1ltSUdkbGRFMWhjbXQxY0ZkeVlYQW9ibTlrWlU1aGJXVXBPMXh1SUNCcFppQW9kM0poY0NrZ2UxeHVJQ0FnSUc1dlpHVXVhVzV1WlhKSVZFMU1JRDBnZDNKaGNGc3hYU0FySUcxaGNtdDFjQ0FySUhkeVlYQmJNbDA3WEc1Y2JpQWdJQ0IyWVhJZ2QzSmhjRVJsY0hSb0lEMGdkM0poY0Zzd1hUdGNiaUFnSUNCM2FHbHNaU0FvZDNKaGNFUmxjSFJvTFMwcElIdGNiaUFnSUNBZ0lHNXZaR1VnUFNCdWIyUmxMbXhoYzNSRGFHbHNaRHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdibTlrWlM1cGJtNWxja2hVVFV3Z1BTQnRZWEpyZFhBN1hHNGdJSDFjYmx4dUlDQjJZWElnYzJOeWFYQjBjeUE5SUc1dlpHVXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvSjNOamNtbHdkQ2NwTzF4dUlDQnBaaUFvYzJOeWFYQjBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQ4Z2FXNTJZWEpwWVc1MEtGeHVJQ0FnSUNBZ2FHRnVaR3hsVTJOeWFYQjBMRnh1SUNBZ0lDQWdKMk55WldGMFpVNXZaR1Z6Um5KdmJVMWhjbXQxY0NndUxpNHBPaUJWYm1WNGNHVmpkR1ZrSUR4elkzSnBjSFErSUdWc1pXMWxiblFnY21WdVpHVnlaV1F1SjF4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb2FHRnVaR3hsVTJOeWFYQjBLU2s3WEc0Z0lDQWdZM0psWVhSbFFYSnlZWGxHY205dFRXbDRaV1FvYzJOeWFYQjBjeWt1Wm05eVJXRmphQ2hvWVc1a2JHVlRZM0pwY0hRcE8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUc1dlpHVnpJRDBnWTNKbFlYUmxRWEp5WVhsR2NtOXRUV2w0WldRb2JtOWtaUzVqYUdsc1pFNXZaR1Z6S1R0Y2JpQWdkMmhwYkdVZ0tHNXZaR1V1YkdGemRFTm9hV3hrS1NCN1hHNGdJQ0FnYm05a1pTNXlaVzF2ZG1WRGFHbHNaQ2h1YjJSbExteGhjM1JEYUdsc1pDazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHNXZaR1Z6TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR055WldGMFpVNXZaR1Z6Um5KdmJVMWhjbXQxY0R0Y2JpSmRmUT09IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eVwiKTtcblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgaXNOb25OdW1lcmljID0gaXNOYU4odmFsdWUpO1xuICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8XG4gICAgICBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTsgLy8gY2FzdCB0byBzdHJpbmdcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgJ3B4Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5RnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uKGFyZykgeyByZXR1cm4gYXJnOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIGVtcHR5T2JqZWN0PXt9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpLG1vZHVsZS5leHBvcnRzPWVtcHR5T2JqZWN0O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2Wlcxd2RIbFBZbXBsWTNRdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmRCTEZsQlJVRXNTVUZCU1N4bFFVVkJMR2RDUVVGcFFpeFJRVUZSTEVsQlFVa3NWVUZETDBJc1QwRkJUeXhQUVVGUExHRkJSMmhDTEU5QlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUdWdGNIUjVUMkpxWldOMFhHNGdLaTljYmx4dVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1Y2JuWmhjaUJsYlhCMGVVOWlhbVZqZENBOUlIdDlPMXh1WEc1cFppQW9YQ0p3Y205a2RXTjBhVzl1WENJZ0lUMDlJSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXS1NCN1hHNGdJRTlpYW1WamRDNW1jbVZsZW1Vb1pXMXdkSGxQWW1wbFkzUXBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHVnRjSFI1VDJKcVpXTjBPMXh1SWwxOSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFU0NBUEVfTE9PS1VQID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc+JzogJyZndDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gICdcXCcnOiAnJiN4Mjc7J1xufTtcblxudmFyIEVTQ0FQRV9SRUdFWCA9IC9bJj48XCInXS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiBFU0NBUEVfTE9PS1VQW21hdGNoXTtcbn1cblxuLyoqXG4gKiBFc2NhcGVzIHRleHQgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkge1xuICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZShFU0NBUEVfUkVHRVgsIGVzY2FwZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcjtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBmaW5kRE9NTm9kZShjb21wb25lbnRPckVsZW1lbnQpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpe3ZhciBvd25lcj1SZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O251bGwhPT1vd25lciYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsXCIlcyBpcyBhY2Nlc3NpbmcgZ2V0RE9NTm9kZSBvciBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiByZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkIG5ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzIHJlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kIGNvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLlwiLG93bmVyLmdldE5hbWUoKXx8XCJBIGNvbXBvbmVudFwiKTpudWxsLG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcj0hMCl9cmV0dXJuIG51bGw9PWNvbXBvbmVudE9yRWxlbWVudD9udWxsOmlzTm9kZShjb21wb25lbnRPckVsZW1lbnQpP2NvbXBvbmVudE9yRWxlbWVudDpSZWFjdEluc3RhbmNlTWFwLmhhcyhjb21wb25lbnRPckVsZW1lbnQpP1JlYWN0TW91bnQuZ2V0Tm9kZUZyb21JbnN0YW5jZShjb21wb25lbnRPckVsZW1lbnQpOihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudChudWxsPT1jb21wb25lbnRPckVsZW1lbnQucmVuZGVyfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyLFwiQ29tcG9uZW50ICh3aXRoIGtleXM6ICVzKSBjb250YWlucyBgcmVuZGVyYCBtZXRob2QgYnV0IGlzIG5vdCBtb3VudGVkIGluIHRoZSBET01cIixPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpKTppbnZhcmlhbnQobnVsbD09Y29tcG9uZW50T3JFbGVtZW50LnJlbmRlcnx8XCJmdW5jdGlvblwiIT10eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciksdm9pZChcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghMSxcIkVsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcylcIixPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpKTppbnZhcmlhbnQoITEpKSl9dmFyIFJlYWN0Q3VycmVudE93bmVyPXJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpLFJlYWN0SW5zdGFuY2VNYXA9cmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKSxSZWFjdE1vdW50PXJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKSxpc05vZGU9cmVxdWlyZShcIi4vaXNOb2RlXCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKTttb2R1bGUuZXhwb3J0cz1maW5kRE9NTm9kZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdlptbHVaRVJQVFU1dlpHVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVZsQkxGbEJaMEpCTEZOQlFWTXNZVUZCV1N4dlFrRkRia0lzUjBGQlNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWU3hEUVVONlF5eEhRVUZKTEU5QlFWRXNhMEpCUVd0Q0xFOUJRMmhDTEZGQlFWWXNVVUZEUkN4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFJRVU4yUXl4TlFVRk5MSGxDUVVOT0xDdFNRVXRCTEUxQlFVMHNWMEZCWVN4bFFVTnFRaXhMUVVOS0xFMUJRVTBzTUVKQlFUSkNMRWRCUjNKRExFMUJRVEJDTEU5QlFYUkNMRzFDUVVOTExFdEJSVXdzVDBGQlR5eHZRa0ZEUml4dFFrRkZUQ3hwUWtGQmFVSXNTVUZCU1N4dlFrRkRhRUlzVjBGQlZ5eHZRa0ZCYjBJc2NVSkJSWFpETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRMVlzVFVGQk4wSXNiVUpCUVcxQ0xGRkJRMnRDTEd0Q1FVRTVRaXh2UWtGQmJVSXNUMEZETVVJc2JVWkJSVUVzVDBGQlR5eExRVUZMTEhGQ1FVTldMRlZCUVhWRExFMUJRVGRDTEcxQ1FVRnRRaXhSUVVOSkxHdENRVUU1UWl4dlFrRkJiVUlzWVVGRGVrSXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGTkJRVmNzVjBGRGRrTXNSVUZEUVN4elJVRkRRU3hQUVVGUExFdEJRVXNzY1VKQlExWXNWMEZCVlN4TFFXNUVhRUlzUjBGQlNTeHRRa0ZCYjBJc1VVRkJVU3gxUWtGRE5VSXNhVUpCUVcxQ0xGRkJRVkVzYzBKQlF6TkNMRmRCUVdFc1VVRkJVU3huUWtGRmNrSXNWVUZCV1N4UlFVRlJMR1ZCUTNCQ0xFOUJRVk1zVVVGQlVTeFpRVU5xUWl4UlFVRlZMRkZCUVZFc1dVRm5SSFJDTEZGQlFVOHNVVUZCVlNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF4TXkweU1ERTFMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNGdRVzRnWVdSa2FYUnBiMjVoYkNCbmNtRnVkRnh1SUNvZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmlCMGFHVWdjMkZ0WlNCa2FYSmxZM1J2Y25rdVhHNGdLbHh1SUNvZ1FIQnliM1pwWkdWelRXOWtkV3hsSUdacGJtUkVUMDFPYjJSbFhHNGdLaUJBZEhsd1pXTm9aV05yY3lCemRHRjBhV010YjI1c2VWeHVJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMFEzVnljbVZ1ZEU5M2JtVnlJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JEZFhKeVpXNTBUM2R1WlhKY0lpazdYRzUyWVhJZ1VtVmhZM1JKYm5OMFlXNWpaVTFoY0NBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFNXNXpkR0Z1WTJWTllYQmNJaWs3WEc1MllYSWdVbVZoWTNSTmIzVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wVFc5MWJuUmNJaWs3WEc1Y2JuWmhjaUJwYm5aaGNtbGhiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOXBiblpoY21saGJuUmNJaWs3WEc1MllYSWdhWE5PYjJSbElEMGdjbVZ4ZFdseVpTaGNJaTR2YVhOT2IyUmxYQ0lwTzF4dWRtRnlJSGRoY201cGJtY2dQU0J5WlhGMWFYSmxLRndpTGk5M1lYSnVhVzVuWENJcE8xeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdkR2hsSUVSUFRTQnViMlJsSUhKbGJtUmxjbVZrSUdKNUlIUm9hWE1nWld4bGJXVnVkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZFUlBUVVZzWlcxbGJuUjlJR052YlhCdmJtVnVkRTl5Uld4bGJXVnVkRnh1SUNvZ1FISmxkSFZ5YmlCN1JFOU5SV3hsYldWdWRIMGdWR2hsSUhKdmIzUWdibTlrWlNCdlppQjBhR2x6SUdWc1pXMWxiblF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1pwYm1SRVQwMU9iMlJsS0dOdmJYQnZibVZ1ZEU5eVJXeGxiV1Z1ZENrZ2UxeHVJQ0JwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lDQWdkbUZ5SUc5M2JtVnlJRDBnVW1WaFkzUkRkWEp5Wlc1MFQzZHVaWEl1WTNWeWNtVnVkRHRjYmlBZ0lDQnBaaUFvYjNkdVpYSWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQnZkMjVsY2k1ZmQyRnlibVZrUVdKdmRYUlNaV1p6U1c1U1pXNWtaWElzWEc0Z0lDQWdJQ0FnSUNjbGN5QnBjeUJoWTJObGMzTnBibWNnWjJWMFJFOU5UbTlrWlNCdmNpQm1hVzVrUkU5TlRtOWtaU0JwYm5OcFpHVWdhWFJ6SUhKbGJtUmxjaWdwTGlBbklDdGNiaUFnSUNBZ0lDQWdKM0psYm1SbGNpZ3BJSE5vYjNWc1pDQmlaU0JoSUhCMWNtVWdablZ1WTNScGIyNGdiMllnY0hKdmNITWdZVzVrSUhOMFlYUmxMaUJKZENCemFHOTFiR1FnSnlBclhHNGdJQ0FnSUNBZ0lDZHVaWFpsY2lCaFkyTmxjM01nYzI5dFpYUm9hVzVuSUhSb1lYUWdjbVZ4ZFdseVpYTWdjM1JoYkdVZ1pHRjBZU0JtY205dElIUm9aU0J3Y21WMmFXOTFjeUFuSUN0Y2JpQWdJQ0FnSUNBZ0ozSmxibVJsY2l3Z2MzVmphQ0JoY3lCeVpXWnpMaUJOYjNabElIUm9hWE1nYkc5bmFXTWdkRzhnWTI5dGNHOXVaVzUwUkdsa1RXOTFiblFnWVc1a0lDY2dLMXh1SUNBZ0lDQWdJQ0FuWTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsSUdsdWMzUmxZV1F1Snl4Y2JpQWdJQ0FnSUNBZ2IzZHVaWEl1WjJWMFRtRnRaU2dwSUh4OElDZEJJR052YlhCdmJtVnVkQ2RjYmlBZ0lDQWdJQ2tnT2lCdWRXeHNLVHRjYmlBZ0lDQWdJRzkzYm1WeUxsOTNZWEp1WldSQlltOTFkRkpsWm5OSmJsSmxibVJsY2lBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJR2xtSUNoamIyMXdiMjVsYm5SUGNrVnNaVzFsYm5RZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5WEc0Z0lHbG1JQ2hwYzA1dlpHVW9ZMjl0Y0c5dVpXNTBUM0pGYkdWdFpXNTBLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmpiMjF3YjI1bGJuUlBja1ZzWlcxbGJuUTdYRzRnSUgxY2JpQWdhV1lnS0ZKbFlXTjBTVzV6ZEdGdVkyVk5ZWEF1YUdGektHTnZiWEJ2Ym1WdWRFOXlSV3hsYldWdWRDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1VtVmhZM1JOYjNWdWRDNW5aWFJPYjJSbFJuSnZiVWx1YzNSaGJtTmxLR052YlhCdmJtVnVkRTl5Uld4bGJXVnVkQ2s3WEc0Z0lIMWNiaUFnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQmpiMjF3YjI1bGJuUlBja1ZzWlcxbGJuUXVjbVZ1WkdWeUlEMDlJRzUxYkd3Z2ZIeGNiaUFnSUNCMGVYQmxiMllnWTI5dGNHOXVaVzUwVDNKRmJHVnRaVzUwTG5KbGJtUmxjaUFoUFQwZ0oyWjFibU4wYVc5dUp5eGNiaUFnSUNBblEyOXRjRzl1Wlc1MElDaDNhWFJvSUd0bGVYTTZJQ1Z6S1NCamIyNTBZV2x1Y3lCZ2NtVnVaR1Z5WUNCdFpYUm9iMlFnSnlBclhHNGdJQ0FnSjJKMWRDQnBjeUJ1YjNRZ2JXOTFiblJsWkNCcGJpQjBhR1VnUkU5Tkp5eGNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aGpiMjF3YjI1bGJuUlBja1ZzWlcxbGJuUXBYRzRnSUNrZ09pQnBiblpoY21saGJuUW9ZMjl0Y0c5dVpXNTBUM0pGYkdWdFpXNTBMbkpsYm1SbGNpQTlQU0J1ZFd4c0lIeDhYRzRnSUhSNWNHVnZaaUJqYjIxd2IyNWxiblJQY2tWc1pXMWxiblF1Y21WdVpHVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktTazdYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdabUZzYzJVc1hHNGdJQ0FnSjBWc1pXMWxiblFnWVhCd1pXRnljeUIwYnlCaVpTQnVaV2wwYUdWeUlGSmxZV04wUTI5dGNHOXVaVzUwSUc1dmNpQkVUMDFPYjJSbElDaHJaWGx6T2lBbGN5a25MRnh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLR052YlhCdmJtVnVkRTl5Uld4bGJXVnVkQ2xjYmlBZ0tTQTZJR2x1ZG1GeWFXRnVkQ2htWVd4elpTa3BPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWnBibVJFVDAxT2IyUmxPMXh1SWwxOSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsY2hpbGQsbmFtZSl7dmFyIHJlc3VsdD10cmF2ZXJzZUNvbnRleHQsa2V5VW5pcXVlPSFyZXN1bHQuaGFzT3duUHJvcGVydHkobmFtZSk7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/d2FybmluZyhrZXlVbmlxdWUsXCJmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCBgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSB0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLlwiLG5hbWUpOm51bGwpLGtleVVuaXF1ZSYmbnVsbCE9Y2hpbGQmJihyZXN1bHRbbmFtZV09Y2hpbGQpfWZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbil7aWYobnVsbD09Y2hpbGRyZW4pcmV0dXJuIGNoaWxkcmVuO3ZhciByZXN1bHQ9e307cmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQscmVzdWx0KSxyZXN1bHR9dmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW49cmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKSx3YXJuaW5nPXJlcXVpcmUoXCIuL3dhcm5pbmdcIik7bW9kdWxlLmV4cG9ydHM9ZmxhdHRlbkNoaWxkcmVuO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2Wm14aGRIUmxia05vYVd4a2NtVnVMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGWFFTeFpRVlZCTEZOQlFWTXNLMEpCUVRoQ0xHZENRVUZwUWl4TlFVRlBMRTFCUlRkRUxFZEJRVWtzVVVGQlV5eG5Ra0ZEVkN4WFFVRmhMRTlCUVU4c1pVRkJaU3hMUVVOdVF5eG5Ra0ZCYVVJc1VVRkJVU3hKUVVGSkxGZEJRemxDTEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGRkJRM1pETEZWQlEwRXNkVXRCUjBFc1RVRkRSU3hOUVVWR0xGZEJRWE5DTEUxQlFWUXNVVUZEWml4UFFVRlBMRTFCUVZFc1QwRlRia0lzVVVGQlV5eHBRa0ZCWjBJc1ZVRkRka0lzUjBGQlowSXNUVUZCV2l4VFFVTkdMRTFCUVU4c1UwRkZWQ3hKUVVGSkxGVkJSVW9zVDBGRVFTeHhRa0ZCYjBJc1UwRkJWU3c0UWtGQkswSXNVVUZEZEVRc1QwRnlRMVFzUjBGQlNTeHhRa0ZCYzBJc1VVRkJVU3g1UWtGRE9VSXNVVUZCVlN4UlFVRlJMRmxCZFVOMFFpeFJRVUZQTEZGQlFWVWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01UTXRNakF4TlN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJNU1VORlRsTkZJR1pwYkdVZ2FXNGdkR2hsSUhKdmIzUWdaR2x5WldOMGIzSjVJRzltSUhSb2FYTWdjMjkxY21ObElIUnlaV1V1SUVGdUlHRmtaR2wwYVc5dVlXd2daM0poYm5SY2JpQXFJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNGdkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNwY2JpQXFJRUJ3Y205MmFXUmxjMDF2WkhWc1pTQm1iR0YwZEdWdVEyaHBiR1J5Wlc1Y2JpQXFMMXh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQjBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVJRDBnY21WeGRXbHlaU2hjSWk0dmRISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJsd2lLVHRjYm5aaGNpQjNZWEp1YVc1bklEMGdjbVZ4ZFdseVpTaGNJaTR2ZDJGeWJtbHVaMXdpS1R0Y2JseHVMeW9xWEc0Z0tpQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZTQjBjbUYyWlhKelpVTnZiblJsZUhRZ1EyOXVkR1Y0ZENCd1lYTnpaV1FnZEdoeWIzVm5hQ0IwY21GMlpYSnpZV3d1WEc0Z0tpQkFjR0Z5WVcwZ2V6OVNaV0ZqZEVOdmJYQnZibVZ1ZEgwZ1kyaHBiR1FnVW1WaFkzUWdZMmhwYkdRZ1kyOXRjRzl1Wlc1MExseHVJQ29nUUhCaGNtRnRJSHNoYzNSeWFXNW5mU0J1WVcxbElGTjBjbWx1WnlCdVlXMWxJRzltSUd0bGVTQndZWFJvSUhSdklHTm9hV3hrTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJtYkdGMGRHVnVVMmx1WjJ4bFEyaHBiR1JKYm5SdlEyOXVkR1Y0ZENoMGNtRjJaWEp6WlVOdmJuUmxlSFFzSUdOb2FXeGtMQ0J1WVcxbEtTQjdYRzRnSUM4dklGZGxJR1p2ZFc1a0lHRWdZMjl0Y0c5dVpXNTBJR2x1YzNSaGJtTmxMbHh1SUNCMllYSWdjbVZ6ZFd4MElEMGdkSEpoZG1WeWMyVkRiMjUwWlhoME8xeHVJQ0IyWVhJZ2EyVjVWVzVwY1hWbElEMGdJWEpsYzNWc2RDNW9ZWE5QZDI1UWNtOXdaWEowZVNodVlXMWxLVHRjYmlBZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUIzWVhKdWFXNW5LRnh1SUNBZ0lDQWdhMlY1Vlc1cGNYVmxMRnh1SUNBZ0lDQWdKMlpzWVhSMFpXNURhR2xzWkhKbGJpZ3VMaTRwT2lCRmJtTnZkVzUwWlhKbFpDQjBkMjhnWTJocGJHUnlaVzRnZDJsMGFDQjBhR1VnYzJGdFpTQnJaWGtzSUNjZ0sxeHVJQ0FnSUNBZ0oyQWxjMkF1SUVOb2FXeGtJR3RsZVhNZ2JYVnpkQ0JpWlNCMWJtbHhkV1U3SUhkb1pXNGdkSGR2SUdOb2FXeGtjbVZ1SUhOb1lYSmxJR0VnYTJWNUxDQnZibXg1SUNjZ0sxeHVJQ0FnSUNBZ0ozUm9aU0JtYVhKemRDQmphR2xzWkNCM2FXeHNJR0psSUhWelpXUXVKeXhjYmlBZ0lDQWdJRzVoYldWY2JpQWdJQ0FwSURvZ2JuVnNiQ2s3WEc0Z0lIMWNiaUFnYVdZZ0tHdGxlVlZ1YVhGMVpTQW1KaUJqYUdsc1pDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ2NtVnpkV3gwVzI1aGJXVmRJRDBnWTJocGJHUTdYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJHYkdGMGRHVnVjeUJqYUdsc1pISmxiaUIwYUdGMElHRnlaU0IwZVhCcFkyRnNiSGtnYzNCbFkybG1hV1ZrSUdGeklHQndjbTl3Y3k1amFHbHNaSEpsYm1BdUlFRnVlU0J1ZFd4c1hHNGdLaUJqYUdsc1pISmxiaUIzYVd4c0lHNXZkQ0JpWlNCcGJtTnNkV1JsWkNCcGJpQjBhR1VnY21WemRXeDBhVzVuSUc5aWFtVmpkQzVjYmlBcUlFQnlaWFIxY200Z2V5RnZZbXBsWTNSOUlHWnNZWFIwWlc1bFpDQmphR2xzWkhKbGJpQnJaWGxsWkNCaWVTQnVZVzFsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJtYkdGMGRHVnVRMmhwYkdSeVpXNG9ZMmhwYkdSeVpXNHBJSHRjYmlBZ2FXWWdLR05vYVd4a2NtVnVJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQnlaWFIxY200Z1kyaHBiR1J5Wlc0N1hHNGdJSDFjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJSHQ5TzF4dUlDQjBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVLR05vYVd4a2NtVnVMQ0JtYkdGMGRHVnVVMmx1WjJ4bFEyaHBiR1JKYm5SdlEyOXVkR1Y0ZEN3Z2NtVnpkV3gwS1R0Y2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtYkdGMGRHVnVRMmhwYkdSeVpXNDdYRzRpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoKGUpIHtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb3JFYWNoQWNjdW11bGF0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHthcnJheX0gYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqL1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IGZ1bmN0aW9uKGFyciwgY2IsIHNjb3BlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBhcnIuZm9yRWFjaChjYiwgc2NvcGUpO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGNiLmNhbGwoc2NvcGUsIGFycik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaEFjY3VtdWxhdGVkO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEFjdGl2ZUVsZW1lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgYm9keSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSAvKj9ET01FbGVtZW50Ki8ge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRDaGFyQ29kZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogYGNoYXJDb2RlYCByZXByZXNlbnRzIHRoZSBhY3R1YWwgXCJjaGFyYWN0ZXIgY29kZVwiIGFuZCBpcyBzYWZlIHRvIHVzZSB3aXRoXG4gKiBgU3RyaW5nLmZyb21DaGFyQ29kZWAuIEFzIHN1Y2gsIG9ubHkga2V5cyB0aGF0IGNvcnJlc3BvbmQgdG8gcHJpbnRhYmxlXG4gKiBjaGFyYWN0ZXJzIHByb2R1Y2UgYSB2YWxpZCBgY2hhckNvZGVgLCB0aGUgb25seSBleGNlcHRpb24gdG8gdGhpcyBpcyBFbnRlci5cbiAqIFRoZSBUYWIta2V5IGlzIGNvbnNpZGVyZWQgbm9uLXByaW50YWJsZSBhbmQgZG9lcyBub3QgaGF2ZSBhIGBjaGFyQ29kZWAsXG4gKiBwcmVzdW1hYmx5IGJlY2F1c2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIHRhYi1jaGFyYWN0ZXIgaW4gYnJvd3NlcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBjaGFyQ29kZWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGNoYXJDb2RlO1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG5cbiAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcbiAgICBjaGFyQ29kZSA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlO1xuXG4gICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgY2hhckNvZGUgPSAxMztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBgY2hhckNvZGVgLCBidXQgYGtleUNvZGVgIGhhcyB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gIH1cblxuICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cbiAgLy8gTXVzdCBub3QgZGlzY2FyZCB0aGUgKG5vbi0pcHJpbnRhYmxlIEVudGVyLWtleS5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRLZXlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50Q2hhckNvZGVcIik7XG5cbi8qKlxuICogTm9ybWFsaXphdGlvbiBvZiBkZXByZWNhdGVkIEhUTUw1IGBrZXlgIHZhbHVlc1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIG5vcm1hbGl6ZUtleSA9IHtcbiAgJ0VzYyc6ICdFc2NhcGUnLFxuICAnU3BhY2ViYXInOiAnICcsXG4gICdMZWZ0JzogJ0Fycm93TGVmdCcsXG4gICdVcCc6ICdBcnJvd1VwJyxcbiAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxuICAnRG93bic6ICdBcnJvd0Rvd24nLFxuICAnRGVsJzogJ0RlbGV0ZScsXG4gICdXaW4nOiAnT1MnLFxuICAnTWVudSc6ICdDb250ZXh0TWVudScsXG4gICdBcHBzJzogJ0NvbnRleHRNZW51JyxcbiAgJ1Njcm9sbCc6ICdTY3JvbGxMb2NrJyxcbiAgJ01velByaW50YWJsZUtleSc6ICdVbmlkZW50aWZpZWQnXG59O1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuICogT25seSBzcGVjaWFsIGtleXMgc3VwcG9ydGVkLCBhbGwgb3RoZXJzIGRlcGVuZCBvbiBrZXlib2FyZCBsYXlvdXQgb3IgYnJvd3NlclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICA4OiAnQmFja3NwYWNlJyxcbiAgOTogJ1RhYicsXG4gIDEyOiAnQ2xlYXInLFxuICAxMzogJ0VudGVyJyxcbiAgMTY6ICdTaGlmdCcsXG4gIDE3OiAnQ29udHJvbCcsXG4gIDE4OiAnQWx0JyxcbiAgMTk6ICdQYXVzZScsXG4gIDIwOiAnQ2Fwc0xvY2snLFxuICAyNzogJ0VzY2FwZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQ1OiAnSW5zZXJ0JyxcbiAgNDY6ICdEZWxldGUnLFxuICAxMTI6ICdGMScsIDExMzogJ0YyJywgMTE0OiAnRjMnLCAxMTU6ICdGNCcsIDExNjogJ0Y1JywgMTE3OiAnRjYnLFxuICAxMTg6ICdGNycsIDExOTogJ0Y4JywgMTIwOiAnRjknLCAxMjE6ICdGMTAnLCAxMjI6ICdGMTEnLCAxMjM6ICdGMTInLFxuICAxNDQ6ICdOdW1Mb2NrJyxcbiAgMTQ1OiAnU2Nyb2xsTG9jaycsXG4gIDIyNDogJ01ldGEnXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBga2V5YCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRLZXkobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgIC8vIE5vcm1hbGl6ZSBpbmNvbnNpc3RlbnQgdmFsdWVzIHJlcG9ydGVkIGJ5IGJyb3dzZXJzIGR1ZSB0b1xuICAgIC8vIGltcGxlbWVudGF0aW9ucyBvZiBhIHdvcmtpbmcgZHJhZnQgc3BlY2lmaWNhdGlvbi5cblxuICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG4gICAgLy8gcHJpbnRhYmxlIGNoYXJhY3RlcnMgKG5vcm1hbGl6ZWQgdG8gYFVuaWRlbnRpZmllZGApLCBpZ25vcmUgaXQuXG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCk7XG5cbiAgICAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cbiAgICAvLyB0aHVzIGJlIGNhcHR1cmVkIGJ5IGBrZXlwcmVzc2AsIG5vIG90aGVyIG5vbi1wcmludGFibGUga2V5IHNob3VsZC5cbiAgICByZXR1cm4gY2hhckNvZGUgPT09IDEzID8gJ0VudGVyJyA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICB9XG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5ZG93bicgfHwgbmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgIC8vIFdoaWxlIHVzZXIga2V5Ym9hcmQgbGF5b3V0IGRldGVybWluZXMgdGhlIGFjdHVhbCBtZWFuaW5nIG9mIGVhY2hcbiAgICAvLyBga2V5Q29kZWAgdmFsdWUsIGFsbW9zdCBhbGwgZnVuY3Rpb24ga2V5cyBoYXZlIGEgdW5pdmVyc2FsIHZhbHVlLlxuICAgIHJldHVybiB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCAnVW5pZGVudGlmaWVkJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRLZXk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRNb2RpZmllclN0YXRlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICdBbHQnOiAnYWx0S2V5JyxcbiAgJ0NvbnRyb2wnOiAnY3RybEtleScsXG4gICdNZXRhJzogJ21ldGFLZXknLFxuICAnU2hpZnQnOiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudFRhcmdldFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRJdGVyYXRvckZuXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoXG4gICAgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pXG4gICk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5mdW5jdGlvbiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghIWR1bW15Tm9kZSxcIk1hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZFwiKTppbnZhcmlhbnQoISFkdW1teU5vZGUpLG1hcmt1cFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpfHwobm9kZU5hbWU9XCIqXCIpLHNob3VsZFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpfHwoXCIqXCI9PT1ub2RlTmFtZT9kdW1teU5vZGUuaW5uZXJIVE1MPVwiPGxpbmsgLz5cIjpkdW1teU5vZGUuaW5uZXJIVE1MPVwiPFwiK25vZGVOYW1lK1wiPjwvXCIrbm9kZU5hbWUrXCI+XCIsc2hvdWxkV3JhcFtub2RlTmFtZV09IWR1bW15Tm9kZS5maXJzdENoaWxkKSxzaG91bGRXcmFwW25vZGVOYW1lXT9tYXJrdXBXcmFwW25vZGVOYW1lXTpudWxsfXZhciBFeGVjdXRpb25FbnZpcm9ubWVudD1yZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLGR1bW15Tm9kZT1FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTpudWxsLHNob3VsZFdyYXA9e2NpcmNsZTohMCxjbGlwUGF0aDohMCxkZWZzOiEwLGVsbGlwc2U6ITAsZzohMCxsaW5lOiEwLGxpbmVhckdyYWRpZW50OiEwLHBhdGg6ITAscG9seWdvbjohMCxwb2x5bGluZTohMCxyYWRpYWxHcmFkaWVudDohMCxyZWN0OiEwLHN0b3A6ITAsdGV4dDohMH0sc2VsZWN0V3JhcD1bMSwnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLFwiPC9zZWxlY3Q+XCJdLHRhYmxlV3JhcD1bMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLHRyV3JhcD1bMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLHN2Z1dyYXA9WzEsXCI8c3ZnPlwiLFwiPC9zdmc+XCJdLG1hcmt1cFdyYXA9e1wiKlwiOlsxLFwiPzxkaXY+XCIsXCI8L2Rpdj5cIl0sYXJlYTpbMSxcIjxtYXA+XCIsXCI8L21hcD5cIl0sY29sOlsyLFwiPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sbGVnZW5kOlsxLFwiPGZpZWxkc2V0PlwiLFwiPC9maWVsZHNldD5cIl0scGFyYW06WzEsXCI8b2JqZWN0PlwiLFwiPC9vYmplY3Q+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sb3B0Z3JvdXA6c2VsZWN0V3JhcCxvcHRpb246c2VsZWN0V3JhcCxjYXB0aW9uOnRhYmxlV3JhcCxjb2xncm91cDp0YWJsZVdyYXAsdGJvZHk6dGFibGVXcmFwLHRmb290OnRhYmxlV3JhcCx0aGVhZDp0YWJsZVdyYXAsdGQ6dHJXcmFwLHRoOnRyV3JhcCxjaXJjbGU6c3ZnV3JhcCxjbGlwUGF0aDpzdmdXcmFwLGRlZnM6c3ZnV3JhcCxlbGxpcHNlOnN2Z1dyYXAsZzpzdmdXcmFwLGxpbmU6c3ZnV3JhcCxsaW5lYXJHcmFkaWVudDpzdmdXcmFwLHBhdGg6c3ZnV3JhcCxwb2x5Z29uOnN2Z1dyYXAscG9seWxpbmU6c3ZnV3JhcCxyYWRpYWxHcmFkaWVudDpzdmdXcmFwLHJlY3Q6c3ZnV3JhcCxzdG9wOnN2Z1dyYXAsdGV4dDpzdmdXcmFwfTttb2R1bGUuZXhwb3J0cz1nZXRNYXJrdXBXcmFwO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5emFXMXZibWh2YkcxbGN5OVRhWFJsY3k5d1pYSnpiMjVoYkM5amIyeHZjaTEzYjNKa0wyNXZaR1ZmYlc5a2RXeGxjeTl5WldGamRDOXNhV0l2WjJWMFRXRnlhM1Z3VjNKaGNDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCYVVkQkxGRkJRVk1zWlVGQll5eFZRV0Z5UWl4TlFWcERMR1ZCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZsQlFWa3NWVUZCVnl4M1EwRkJNRU1zV1VGQldTeFhRVU5xU0N4WFFVRlhMR1ZCUVdVc1dVRkROMElzVTBGQlZ5eExRVVZTTEZkQlFWY3NaVUZCWlN4WlFVTmFMRTFCUVdJc1UwRkRSaXhWUVVGVkxGVkJRVmtzVjBGRmRFSXNWVUZCVlN4VlFVRlpMRWxCUVUwc1UwRkJWeXhOUVVGUkxGTkJRVmNzU1VGRk5VUXNWMEZCVnl4WFFVRmhMRlZCUVZVc1dVRkZOMElzVjBGQlZ5eFZRVUZaTEZkQlFWY3NWVUZCV1N4TFFXNUhka1FzUjBGQlNTeHpRa0ZCZFVJc1VVRkJVU3d3UWtGRkwwSXNWVUZCV1N4UlFVRlJMR1ZCUzNCQ0xGVkJRMFlzY1VKQlFYRkNMRlZCUVZrc1UwRkJVeXhqUVVGakxFOUJRVk1zUzBGUkwwUXNXVUZIUml4UlFVRlZMRVZCUTFZc1ZVRkJXU3hGUVVOYUxFMUJRVkVzUlVGRFVpeFRRVUZYTEVWQlExZ3NSMEZCU3l4RlFVTk1MRTFCUVZFc1JVRkRVaXhuUWtGQmEwSXNSVUZEYkVJc1RVRkJVU3hGUVVOU0xGTkJRVmNzUlVGRFdDeFZRVUZaTEVWQlExb3NaMEpCUVd0Q0xFVkJRMnhDTEUxQlFWRXNSVUZEVWl4TlFVRlJMRVZCUTFJc1RVRkJVU3hIUVVkT0xGbEJRV01zUlVGQlJ5d3lRa0ZCTkVJc1lVRkROME1zVjBGQllTeEZRVUZITEZWQlFWY3NXVUZETTBJc1VVRkJWU3hGUVVGSExIRkNRVUZ6UWl4NVFrRkZia01zVTBGQlZ5eEZRVUZITEZGQlFWTXNWVUZGZGtJc1dVRkRSaXhMUVVGTkxFVkJRVWNzVTBGQlZTeFZRVVZ1UWl4TlFVRlRMRVZCUVVjc1VVRkJVeXhWUVVOeVFpeExRVUZSTEVWQlFVY3NiVU5CUVc5RExIVkNRVU12UXl4UlFVRlhMRVZCUVVjc1lVRkJZeXhsUVVNMVFpeFBRVUZWTEVWQlFVY3NWMEZCV1N4aFFVTjZRaXhKUVVGUExFVkJRVWNzYVVKQlFXdENMRzlDUVVVMVFpeFRRVUZaTEZkQlExb3NUMEZCVlN4WFFVVldMRkZCUVZjc1ZVRkRXQ3hUUVVGWkxGVkJRMW9zVFVGQlV5eFZRVU5VTEUxQlFWTXNWVUZEVkN4TlFVRlRMRlZCUlZRc1IwRkJUU3hQUVVOT0xFZEJRVTBzVDBGRlRpeFBRVUZWTEZGQlExWXNVMEZCV1N4UlFVTmFMRXRCUVZFc1VVRkRVaXhSUVVGWExGRkJRMWdzUlVGQlN5eFJRVU5NTEV0QlFWRXNVVUZEVWl4bFFVRnJRaXhSUVVOc1FpeExRVUZSTEZGQlExSXNVVUZCVnl4UlFVTllMRk5CUVZrc1VVRkRXaXhsUVVGclFpeFJRVU5zUWl4TFFVRlJMRkZCUTFJc1MwRkJVU3hSUVVOU0xFdEJRVkVzVVVFMFFsWXNVVUZCVHl4UlFVRlZJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERXpMVEl3TVRVc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDMXpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR2x1SUhSb1pWeHVJQ29nVEVsRFJVNVRSU0JtYVd4bElHbHVJSFJvWlNCeWIyOTBJR1JwY21WamRHOXllU0J2WmlCMGFHbHpJSE52ZFhKalpTQjBjbVZsTGlCQmJpQmhaR1JwZEdsdmJtRnNJR2R5WVc1MFhHNGdLaUJ2WmlCd1lYUmxiblFnY21sbmFIUnpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnVUVGVVJVNVVVeUJtYVd4bElHbHVJSFJvWlNCellXMWxJR1JwY21WamRHOXllUzVjYmlBcVhHNGdLaUJBY0hKdmRtbGtaWE5OYjJSMWJHVWdaMlYwVFdGeWEzVndWM0poY0Z4dUlDb3ZYRzVjYm5aaGNpQkZlR1ZqZFhScGIyNUZiblpwY205dWJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwwVjRaV04xZEdsdmJrVnVkbWx5YjI1dFpXNTBYQ0lwTzF4dVhHNTJZWElnYVc1MllYSnBZVzUwSUQwZ2NtVnhkV2x5WlNoY0lpNHZhVzUyWVhKcFlXNTBYQ0lwTzF4dVhHNHZLaXBjYmlBcUlFUjFiVzE1SUdOdmJuUmhhVzVsY2lCMWMyVmtJSFJ2SUdSbGRHVmpkQ0IzYUdsamFDQjNjbUZ3Y3lCaGNtVWdibVZqWlhOellYSjVMbHh1SUNvdlhHNTJZWElnWkhWdGJYbE9iMlJsSUQxY2JpQWdSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblF1WTJGdVZYTmxSRTlOSUQ4Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5a2dPaUJ1ZFd4c08xeHVYRzR2S2lwY2JpQXFJRk52YldVZ1luSnZkM05sY25NZ1kyRnVibTkwSUhWelpTQmdhVzV1WlhKSVZFMU1ZQ0IwYnlCeVpXNWtaWElnWTJWeWRHRnBiaUJsYkdWdFpXNTBjeUJ6ZEdGdVpHRnNiMjVsTEZ4dUlDb2djMjhnZDJVZ2QzSmhjQ0IwYUdWdExDQnlaVzVrWlhJZ2RHaGxJSGR5WVhCd1pXUWdibTlrWlhNc0lIUm9aVzRnWlhoMGNtRmpkQ0IwYUdVZ1pHVnphWEpsWkNCdWIyUmxMbHh1SUNwY2JpQXFJRWx1SUVsRk9Dd2dZMlZ5ZEdGcGJpQmxiR1Z0Wlc1MGN5QmpZVzV1YjNRZ2NtVnVaR1Z5SUdGc2IyNWxMQ0J6YnlCM2NtRndJR0ZzYkNCbGJHVnRaVzUwY3lBb0p5b25LUzVjYmlBcUwxeHVkbUZ5SUhOb2IzVnNaRmR5WVhBZ1BTQjdYRzRnSUM4dklFWnZjbU5sSUhkeVlYQndhVzVuSUdadmNpQlRWa2NnWld4bGJXVnVkSE1nWW1WallYVnpaU0JwWmlCMGFHVjVJR2RsZENCamNtVmhkR1ZrSUdsdWMybGtaU0JoSUR4a2FYWStMRnh1SUNBdkx5QjBhR1Y1SUhkcGJHd2dZbVVnYVc1cGRHbGhiR2w2WldRZ2FXNGdkR2hsSUhkeWIyNW5JRzVoYldWemNHRmpaU0FvWVc1a0lIZHBiR3dnYm05MElHUnBjM0JzWVhrcExseHVJQ0FuWTJseVkyeGxKem9nZEhKMVpTeGNiaUFnSjJOc2FYQlFZWFJvSnpvZ2RISjFaU3hjYmlBZ0oyUmxabk1uT2lCMGNuVmxMRnh1SUNBblpXeHNhWEJ6WlNjNklIUnlkV1VzWEc0Z0lDZG5Kem9nZEhKMVpTeGNiaUFnSjJ4cGJtVW5PaUIwY25WbExGeHVJQ0FuYkdsdVpXRnlSM0poWkdsbGJuUW5PaUIwY25WbExGeHVJQ0FuY0dGMGFDYzZJSFJ5ZFdVc1hHNGdJQ2R3YjJ4NVoyOXVKem9nZEhKMVpTeGNiaUFnSjNCdmJIbHNhVzVsSnpvZ2RISjFaU3hjYmlBZ0ozSmhaR2xoYkVkeVlXUnBaVzUwSnpvZ2RISjFaU3hjYmlBZ0ozSmxZM1FuT2lCMGNuVmxMRnh1SUNBbmMzUnZjQ2M2SUhSeWRXVXNYRzRnSUNkMFpYaDBKem9nZEhKMVpWeHVmVHRjYmx4dWRtRnlJSE5sYkdWamRGZHlZWEFnUFNCYk1Td2dKenh6Wld4bFkzUWdiWFZzZEdsd2JHVTlYQ0owY25WbFhDSStKeXdnSnp3dmMyVnNaV04wUGlkZE8xeHVkbUZ5SUhSaFlteGxWM0poY0NBOUlGc3hMQ0FuUEhSaFlteGxQaWNzSUNjOEwzUmhZbXhsUGlkZE8xeHVkbUZ5SUhSeVYzSmhjQ0E5SUZzekxDQW5QSFJoWW14bFBqeDBZbTlrZVQ0OGRISStKeXdnSnp3dmRISStQQzkwWW05a2VUNDhMM1JoWW14bFBpZGRPMXh1WEc1MllYSWdjM1puVjNKaGNDQTlJRnN4TENBblBITjJaejRuTENBblBDOXpkbWMrSjEwN1hHNWNiblpoY2lCdFlYSnJkWEJYY21Gd0lEMGdlMXh1SUNBbktpYzZJRnN4TENBblB6eGthWFkrSnl3Z0p6d3ZaR2wyUGlkZExGeHVYRzRnSUNkaGNtVmhKem9nV3pFc0lDYzhiV0Z3UGljc0lDYzhMMjFoY0Q0blhTeGNiaUFnSjJOdmJDYzZJRnN5TENBblBIUmhZbXhsUGp4MFltOWtlVDQ4TDNSaWIyUjVQanhqYjJ4bmNtOTFjRDRuTENBblBDOWpiMnhuY205MWNENDhMM1JoWW14bFBpZGRMRnh1SUNBbmJHVm5aVzVrSnpvZ1d6RXNJQ2M4Wm1sbGJHUnpaWFErSnl3Z0p6d3ZabWxsYkdSelpYUStKMTBzWEc0Z0lDZHdZWEpoYlNjNklGc3hMQ0FuUEc5aWFtVmpkRDRuTENBblBDOXZZbXBsWTNRK0oxMHNYRzRnSUNkMGNpYzZJRnN5TENBblBIUmhZbXhsUGp4MFltOWtlVDRuTENBblBDOTBZbTlrZVQ0OEwzUmhZbXhsUGlkZExGeHVYRzRnSUNkdmNIUm5jbTkxY0NjNklITmxiR1ZqZEZkeVlYQXNYRzRnSUNkdmNIUnBiMjRuT2lCelpXeGxZM1JYY21Gd0xGeHVYRzRnSUNkallYQjBhVzl1SnpvZ2RHRmliR1ZYY21Gd0xGeHVJQ0FuWTI5c1ozSnZkWEFuT2lCMFlXSnNaVmR5WVhBc1hHNGdJQ2QwWW05a2VTYzZJSFJoWW14bFYzSmhjQ3hjYmlBZ0ozUm1iMjkwSnpvZ2RHRmliR1ZYY21Gd0xGeHVJQ0FuZEdobFlXUW5PaUIwWVdKc1pWZHlZWEFzWEc1Y2JpQWdKM1JrSnpvZ2RISlhjbUZ3TEZ4dUlDQW5kR2duT2lCMGNsZHlZWEFzWEc1Y2JpQWdKMk5wY21Oc1pTYzZJSE4yWjFkeVlYQXNYRzRnSUNkamJHbHdVR0YwYUNjNklITjJaMWR5WVhBc1hHNGdJQ2RrWldaekp6b2djM1puVjNKaGNDeGNiaUFnSjJWc2JHbHdjMlVuT2lCemRtZFhjbUZ3TEZ4dUlDQW5aeWM2SUhOMloxZHlZWEFzWEc0Z0lDZHNhVzVsSnpvZ2MzWm5WM0poY0N4Y2JpQWdKMnhwYm1WaGNrZHlZV1JwWlc1MEp6b2djM1puVjNKaGNDeGNiaUFnSjNCaGRHZ25PaUJ6ZG1kWGNtRndMRnh1SUNBbmNHOXNlV2R2YmljNklITjJaMWR5WVhBc1hHNGdJQ2R3YjJ4NWJHbHVaU2M2SUhOMloxZHlZWEFzWEc0Z0lDZHlZV1JwWVd4SGNtRmthV1Z1ZENjNklITjJaMWR5WVhBc1hHNGdJQ2R5WldOMEp6b2djM1puVjNKaGNDeGNiaUFnSjNOMGIzQW5PaUJ6ZG1kWGNtRndMRnh1SUNBbmRHVjRkQ2M2SUhOMloxZHlZWEJjYm4wN1hHNWNiaThxS2x4dUlDb2dSMlYwY3lCMGFHVWdiV0Z5YTNWd0lIZHlZWEFnWTI5dVptbG5kWEpoZEdsdmJpQm1iM0lnZEdobElITjFjSEJzYVdWa0lHQnViMlJsVG1GdFpXQXVYRzRnS2x4dUlDb2dUazlVUlRvZ1ZHaHBjeUJzWVhwcGJIa2daR1YwWldOMGN5QjNhR2xqYUNCM2NtRndjeUJoY21VZ2JtVmpaWE56WVhKNUlHWnZjaUIwYUdVZ1kzVnljbVZ1ZENCaWNtOTNjMlZ5TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1YjJSbFRtRnRaU0JNYjNkbGNtTmhjMlVnWUc1dlpHVk9ZVzFsWUM1Y2JpQXFJRUJ5WlhSMWNtNGdlejloY25KaGVYMGdUV0Z5YTNWd0lIZHlZWEFnWTI5dVptbG5kWEpoZEdsdmJpd2dhV1lnWVhCd2JHbGpZV0pzWlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMFRXRnlhM1Z3VjNKaGNDaHViMlJsVG1GdFpTa2dlMXh1SUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnYVc1MllYSnBZVzUwS0NFaFpIVnRiWGxPYjJSbExDQW5UV0Z5YTNWd0lIZHlZWEJ3YVc1bklHNXZaR1VnYm05MElHbHVhWFJwWVd4cGVtVmtKeWtnT2lCcGJuWmhjbWxoYm5Rb0lTRmtkVzF0ZVU1dlpHVXBLVHRjYmlBZ2FXWWdLQ0Z0WVhKcmRYQlhjbUZ3TG1oaGMwOTNibEJ5YjNCbGNuUjVLRzV2WkdWT1lXMWxLU2tnZTF4dUlDQWdJRzV2WkdWT1lXMWxJRDBnSnlvbk8xeHVJQ0I5WEc0Z0lHbG1JQ2doYzJodmRXeGtWM0poY0M1b1lYTlBkMjVRY205d1pYSjBlU2h1YjJSbFRtRnRaU2twSUh0Y2JpQWdJQ0JwWmlBb2JtOWtaVTVoYldVZ1BUMDlJQ2NxSnlrZ2UxeHVJQ0FnSUNBZ1pIVnRiWGxPYjJSbExtbHVibVZ5U0ZSTlRDQTlJQ2M4YkdsdWF5QXZQaWM3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHUjFiVzE1VG05a1pTNXBibTVsY2toVVRVd2dQU0FuUENjZ0t5QnViMlJsVG1GdFpTQXJJQ2MrUEM4bklDc2dibTlrWlU1aGJXVWdLeUFuUGljN1hHNGdJQ0FnZlZ4dUlDQWdJSE5vYjNWc1pGZHlZWEJiYm05a1pVNWhiV1ZkSUQwZ0lXUjFiVzE1VG05a1pTNW1hWEp6ZEVOb2FXeGtPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnphRzkxYkdSWGNtRndXMjV2WkdWT1lXMWxYU0EvSUcxaGNtdDFjRmR5WVhCYmJtOWtaVTVoYldWZElEb2diblZzYkR0Y2JuMWNibHh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdkbGRFMWhjbXQxY0ZkeVlYQTdYRzRpWFgwPSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTURvY3VtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBSZWFjdCBjb21wb25lbnRcbiAqIEByZXR1cm4gez8qfSBET00gZWxlbWVudCB0aGF0IG1heSBoYXZlIHRoZSByZWFjdFJvb3QgSUQsIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXI7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjb250ZW50S2V5ID0gbnVsbDtcblxuLyoqXG4gKiBHZXRzIHRoZSBrZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50IG9uIGEgRE9NIG5vZGUuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gS2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEFjY2Vzc29yKCkge1xuICBpZiAoIWNvbnRlbnRLZXkgJiYgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgLy8gUHJlZmVyIHRleHRDb250ZW50IHRvIGlubmVyVGV4dCBiZWNhdXNlIG1hbnkgYnJvd3NlcnMgc3VwcG9ydCBib3RoIGJ1dFxuICAgIC8vIFNWRyA8dGV4dD4gZWxlbWVudHMgZG9uJ3Qgc3VwcG9ydCBpbm5lclRleHQgZXZlbiB3aGVuIDxkaXY+IGRvZXMuXG4gICAgY29udGVudEtleSA9ICd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID9cbiAgICAgICd0ZXh0Q29udGVudCcgOlxuICAgICAgJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWVzIGFyZSB1bmJvdW5kZWQsIHVubGlrZSBgZ2V0U2Nyb2xsUG9zaXRpb25gLiBUaGlzIG1lYW5zIHRoZXlcbiAqIG1heSBiZSBuZWdhdGl2ZSBvciBleGNlZWQgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmdcbiAqIGluZXJ0aWFsIHNjcm9sbGluZykuXG4gKlxuICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuICogQHJldHVybiB7b2JqZWN0fSBNYXAgd2l0aCBgeGAgYW5kIGB5YCBrZXlzLlxuICovXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKTtcblxudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaXNJbnRlcm5hbENvbXBvbmVudFR5cGUodHlwZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdHlwZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHR5cGUucHJvdG90eXBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudH1mdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5vZGUscGFyZW50Q29tcG9zaXRlVHlwZSl7dmFyIGluc3RhbmNlO2lmKChudWxsPT09bm9kZXx8bm9kZT09PSExKSYmKG5vZGU9UmVhY3RFbXB0eUNvbXBvbmVudC5lbXB0eUVsZW1lbnQpLFwib2JqZWN0XCI9PXR5cGVvZiBub2RlKXt2YXIgZWxlbWVudD1ub2RlO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoZWxlbWVudCYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGVsZW1lbnQudHlwZXx8XCJzdHJpbmdcIj09dHlwZW9mIGVsZW1lbnQudHlwZSksXCJPbmx5IGZ1bmN0aW9ucyBvciBzdHJpbmdzIGNhbiBiZSBtb3VudGVkIGFzIFJlYWN0IGNvbXBvbmVudHMuXCIpOm51bGwpLGluc3RhbmNlPXBhcmVudENvbXBvc2l0ZVR5cGU9PT1lbGVtZW50LnR5cGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlbGVtZW50LnR5cGU/UmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCk6aXNJbnRlcm5hbENvbXBvbmVudFR5cGUoZWxlbWVudC50eXBlKT9uZXcgZWxlbWVudC50eXBlKGVsZW1lbnQpOm5ldyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXJ9ZWxzZVwic3RyaW5nXCI9PXR5cGVvZiBub2RlfHxcIm51bWJlclwiPT10eXBlb2Ygbm9kZT9pbnN0YW5jZT1SZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoITEsXCJFbmNvdW50ZXJlZCBpbnZhbGlkIFJlYWN0IG5vZGUgb2YgdHlwZSAlc1wiLHR5cGVvZiBub2RlKTppbnZhcmlhbnQoITEpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoXCJmdW5jdGlvblwiPT10eXBlb2YgaW5zdGFuY2UuY29uc3RydWN0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpbnN0YW5jZS5tb3VudENvbXBvbmVudCYmXCJmdW5jdGlvblwiPT10eXBlb2YgaW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudCYmXCJmdW5jdGlvblwiPT10eXBlb2YgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCxcIk9ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC5cIik6bnVsbCksaW5zdGFuY2UuY29uc3RydWN0KG5vZGUpLGluc3RhbmNlLl9tb3VudEluZGV4PTAsaW5zdGFuY2UuX21vdW50SW1hZ2U9bnVsbCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoaW5zdGFuY2UuX2lzT3duZXJOZWNlc3Nhcnk9ITEsaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyPSExKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZPYmplY3QucHJldmVudEV4dGVuc2lvbnMmJk9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhpbnN0YW5jZSksaW5zdGFuY2V9dmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50PXJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpLFJlYWN0RW1wdHlDb21wb25lbnQ9cmVxdWlyZShcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiKSxSZWFjdE5hdGl2ZUNvbXBvbmVudD1yZXF1aXJlKFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiKSxhc3NpZ249cmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKSxpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKSxSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXI9ZnVuY3Rpb24oKXt9O2Fzc2lnbihSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIucHJvdG90eXBlLFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLHtfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDppbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50fSksbW9kdWxlLmV4cG9ydHM9aW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmFXNXpkR0Z1ZEdsaGRHVlNaV0ZqZEVOdmJYQnZibVZ1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJXVUVzV1VFeVFrRXNVMEZCVXl4NVFrRkJkMElzVFVGREwwSXNUVUZEYTBJc2EwSkJRVlFzVDBGRGJVSXNiVUpCUVc1Q0xFMUJRVXNzVjBGRE5rSXNhMEpCUVd4RExFMUJRVXNzVlVGQlZTeG5Ra0ZEY1VJc2EwSkJRWEJETEUxQlFVc3NWVUZCVlN4cFFrRlpNVUlzVVVGQlV5d3lRa0ZCTUVJc1MwRkJUU3h4UWtGRGRrTXNSMEZCU1N4VFFVMUtMRXRCU21Fc1QwRkJWQ3hOUVVGcFFpeFJRVUZUTEV0QlF6VkNMRXRCUVU4c2IwSkJRVzlDTEdOQlIxUXNaMEpCUVZRc1RVRkJiVUlzUTBGRE5VSXNSMEZCU1N4VFFVRlZMRWxCUTFZc1owSkJRV2xDTEZGQlFWRXNTVUZCU1N4WFFVTTVRaXhsUVVGcFFpeFJRVUZSTEVsQlFVa3NVMEZCVnl4UlFVTjJReXhWUVVGdlF5eHJRa0ZCYWtJc1UwRkJVU3hOUVVOVExHZENRVUZxUWl4VFFVRlJMRTFCUXpOQ0xHbEZRVU5GTEUxQlQwb3NVMEZJUlN4elFrRkJkMElzVVVGQlVTeE5RVU5TTEdkQ1FVRnFRaXhUUVVGUkxFdEJSVTRzY1VKQlFYRkNMSGRDUVVGM1FpeFRRVWN2UXl4M1FrRkJkMElzVVVGQlVTeE5RVWs1UWl4SFFVRkpMRk5CUVZFc1MwRkJTeXhUUVVWcVFpeEhRVUZKTEc5RFFVVlJMR2RDUVVGVUxFOUJRWEZETEdkQ1FVRlVMRTFCUXpWRExGTkJRVmNzY1VKQlFYRkNMSE5DUVVGelFpeE5RVVZ5UkN4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFhRVU4yUXl4RlFVTkJMR3RFUVVOUExFOUJRMHdzVjBGQlZTeEZRVzFEYUVJc1QwRm9RMGtzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRmRCUXpsQ0xHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRkZCUTFRc2EwSkJRWFpDTEZWQlFWTXNWMEZEYlVJc2EwSkJRVFZDTEZWQlFWTXNaMEpCUTNGQ0xHdENRVUU1UWl4VlFVRlRMR3RDUVVOeFFpeHJRa0ZCT1VJc1ZVRkJVeXhwUWtGRGFFSXNlVU5CUTBVc1RVRkpUaXhUUVVGVExGVkJRVlVzVFVGTGJrSXNVMEZCVXl4WlFVRmpMRVZCUTNaQ0xGTkJRVk1zV1VGQll5eExRVVZ1UWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVjBGREwwSXNVMEZCVXl4dFFrRkJiMElzUlVGRE4wSXNVMEZCVXl3d1FrRkJNa0lzUjBGTGJFTXNaVUZCYVVJc1VVRkJVU3hKUVVGSkxGVkJRek5DTEU5QlFVOHNiVUpCUTFRc1QwRkJUeXhyUWtGQmEwSXNWVUZKZEVJc1UwRndTRlFzUjBGQlNTeDVRa0ZCTUVJc1VVRkJVU3cyUWtGRGJFTXNiMEpCUVhOQ0xGRkJRVkVzZVVKQlF6bENMSEZDUVVGMVFpeFJRVUZSTERCQ1FVVXZRaXhQUVVGVExGRkJRVkVzYlVKQlEycENMRlZCUVZrc1VVRkJVU3hsUVVOd1FpeFJRVUZWTEZGQlFWRXNZVUZIYkVJc0swSkJRV2xETEZsQlEzSkRMRkZCUTBVc0swSkJRU3RDTEZWQlF5OUNMSGRDUVVGM1FpeFBRVVYwUWl3eVFrRkJORUlzTkVKQmVVZG9ReXhQUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVE10TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0JwYm5OMFlXNTBhV0YwWlZKbFlXTjBRMjl0Y0c5dVpXNTBYRzRnS2lCQWRIbHdaV05vWldOcmN5QnpkR0YwYVdNdGIyNXNlVnh1SUNvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBRMjl0Y0c5emFYUmxRMjl0Y0c5dVpXNTBJRDBnY21WeGRXbHlaU2hjSWk0dlVtVmhZM1JEYjIxd2IzTnBkR1ZEYjIxd2IyNWxiblJjSWlrN1hHNTJZWElnVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZENBOUlISmxjWFZwY21Vb1hDSXVMMUpsWVdOMFJXMXdkSGxEYjIxd2IyNWxiblJjSWlrN1hHNTJZWElnVW1WaFkzUk9ZWFJwZG1WRGIyMXdiMjVsYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFNWhkR2wyWlVOdmJYQnZibVZ1ZEZ3aUtUdGNibHh1ZG1GeUlHRnpjMmxuYmlBOUlISmxjWFZwY21Vb1hDSXVMMDlpYW1WamRDNWhjM05wWjI1Y0lpazdYRzUyWVhJZ2FXNTJZWEpwWVc1MElEMGdjbVZ4ZFdseVpTaGNJaTR2YVc1MllYSnBZVzUwWENJcE8xeHVkbUZ5SUhkaGNtNXBibWNnUFNCeVpYRjFhWEpsS0Z3aUxpOTNZWEp1YVc1blhDSXBPMXh1WEc0dkx5QlVieUJoZG05cFpDQmhJR041WTJ4cFl5QmtaWEJsYm1SbGJtTjVMQ0IzWlNCamNtVmhkR1VnZEdobElHWnBibUZzSUdOc1lYTnpJR2x1SUhSb2FYTWdiVzlrZFd4bFhHNTJZWElnVW1WaFkzUkRiMjF3YjNOcGRHVkRiMjF3YjI1bGJuUlhjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNG9LU0I3SUgwN1hHNWhjM05wWjI0b1hHNGdJRkpsWVdOMFEyOXRjRzl6YVhSbFEyOXRjRzl1Wlc1MFYzSmhjSEJsY2k1d2NtOTBiM1I1Y0dVc1hHNGdJRkpsWVdOMFEyOXRjRzl6YVhSbFEyOXRjRzl1Wlc1MExrMXBlR2x1TEZ4dUlDQjdYRzRnSUNBZ1gybHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5RNklHbHVjM1JoYm5ScFlYUmxVbVZoWTNSRGIyMXdiMjVsYm5SY2JpQWdmVnh1S1R0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYXlCcFppQjBhR1VnZEhsd1pTQnlaV1psY21WdVkyVWdhWE1nWVNCcmJtOTNiaUJwYm5SbGNtNWhiQ0IwZVhCbExpQkpMbVV1SUc1dmRDQmhJSFZ6WlhKY2JpQXFJSEJ5YjNacFpHVmtJR052YlhCdmMybDBaU0IwZVhCbExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlIUjVjR1ZjYmlBcUlFQnlaWFIxY200Z2UySnZiMnhsWVc1OUlGSmxkSFZ5Ym5NZ2RISjFaU0JwWmlCMGFHbHpJR2x6SUdFZ2RtRnNhV1FnYVc1MFpYSnVZV3dnZEhsd1pTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTkpiblJsY201aGJFTnZiWEJ2Ym1WdWRGUjVjR1VvZEhsd1pTa2dlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJSFI1Y0dWdlppQjBlWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltWEc0Z0lDQWdkSGx3Wlc5bUlIUjVjR1V1Y0hKdmRHOTBlWEJsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4dUlDQWdJSFI1Y0dWdlppQjBlWEJsTG5CeWIzUnZkSGx3WlM1dGIzVnVkRU52YlhCdmJtVnVkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KbHh1SUNBZ0lIUjVjR1Z2WmlCMGVYQmxMbkJ5YjNSdmRIbHdaUzV5WldObGFYWmxRMjl0Y0c5dVpXNTBJRDA5UFNBblpuVnVZM1JwYjI0blhHNGdJQ2s3WEc1OVhHNWNiaThxS2x4dUlDb2dSMmwyWlc0Z1lTQlNaV0ZqZEU1dlpHVXNJR055WldGMFpTQmhiaUJwYm5OMFlXNWpaU0IwYUdGMElIZHBiR3dnWVdOMGRXRnNiSGtnWW1VZ2JXOTFiblJsWkM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFKbFlXTjBUbTlrWlgwZ2JtOWtaVnh1SUNvZ1FIQmhjbUZ0SUhzcWZTQndZWEpsYm5SRGIyMXdiM05wZEdWVWVYQmxJRlJvWlNCamIyMXdiM05wZEdVZ2RIbHdaU0IwYUdGMElISmxjMjlzZG1Wa0lIUm9hWE11WEc0Z0tpQkFjbVYwZFhKdUlIdHZZbXBsWTNSOUlFRWdibVYzSUdsdWMzUmhibU5sSUc5bUlIUm9aU0JsYkdWdFpXNTBKM01nWTI5dWMzUnlkV04wYjNJdVhHNGdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x1YzNSaGJuUnBZWFJsVW1WaFkzUkRiMjF3YjI1bGJuUW9ibTlrWlN3Z2NHRnlaVzUwUTI5dGNHOXphWFJsVkhsd1pTa2dlMXh1SUNCMllYSWdhVzV6ZEdGdVkyVTdYRzVjYmlBZ2FXWWdLRzV2WkdVZ1BUMDlJRzUxYkd3Z2ZId2dibTlrWlNBOVBUMGdabUZzYzJVcElIdGNiaUFnSUNCdWIyUmxJRDBnVW1WaFkzUkZiWEIwZVVOdmJYQnZibVZ1ZEM1bGJYQjBlVVZzWlcxbGJuUTdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUc1dlpHVWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQnViMlJsTzF4dUlDQWdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QjNZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MElDWW1JQ2gwZVhCbGIyWWdaV3hsYldWdWRDNTBlWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5JSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCbGJHVnRaVzUwTG5SNWNHVWdQVDA5SUNkemRISnBibWNuS1N4Y2JpQWdJQ0FnSUNBZ0owOXViSGtnWm5WdVkzUnBiMjV6SUc5eUlITjBjbWx1WjNNZ1kyRnVJR0psSUcxdmRXNTBaV1FnWVhNZ1VtVmhZM1FnWTI5dGNHOXVaVzUwY3k0blhHNGdJQ0FnSUNBcElEb2diblZzYkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1UzQmxZMmxoYkNCallYTmxJSE4wY21sdVp5QjJZV3gxWlhOY2JpQWdJQ0JwWmlBb2NHRnlaVzUwUTI5dGNHOXphWFJsVkhsd1pTQTlQVDBnWld4bGJXVnVkQzUwZVhCbElDWW1YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQmxiR1Z0Wlc1MExuUjVjR1VnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQXZMeUJCZG05cFpDQnlaV04xY25OcGIyNGdhV1lnZEdobElIZHlZWEJ3WlhJZ2NtVnVaR1Z5Y3lCcGRITmxiR1l1WEc0Z0lDQWdJQ0JwYm5OMFlXNWpaU0E5SUZKbFlXTjBUbUYwYVhabFEyOXRjRzl1Wlc1MExtTnlaV0YwWlVsdWRHVnlibUZzUTI5dGNHOXVaVzUwS0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnTHk4Z1FXeHNJRzVoZEdsMlpTQmpiMjF3YjI1bGJuUnpJR0Z5WlNCamRYSnlaVzUwYkhrZ2QzSmhjSEJsWkNCcGJpQmhJR052YlhCdmMybDBaU0J6YnlCM1pTZHlaVnh1SUNBZ0lDQWdMeThnYzJGbVpTQjBieUJoYzNOMWJXVWdkR2hoZENCMGFHbHpJR2x6SUhkb1lYUWdkMlVnYzJodmRXeGtJR2x1YzNSaGJuUnBZWFJsTGx4dUlDQWdJSDBnWld4elpTQnBaaUFvYVhOSmJuUmxjbTVoYkVOdmJYQnZibVZ1ZEZSNWNHVW9aV3hsYldWdWRDNTBlWEJsS1NrZ2UxeHVJQ0FnSUNBZ0x5OGdWR2hwY3lCcGN5QjBaVzF3YjNKaGNtbHNlU0JoZG1GcGJHRmliR1VnWm05eUlHTjFjM1J2YlNCamIyMXdiMjVsYm5SeklIUm9ZWFFnWVhKbElHNXZkQ0J6ZEhKcGJtZGNiaUFnSUNBZ0lDOHZJSEpsY0hKbGMyVnVZWFJwYjI1ekxpQkpMbVV1SUVGU1ZDNGdUMjVqWlNCMGFHOXpaU0JoY21VZ2RYQmtZWFJsWkNCMGJ5QjFjMlVnZEdobElITjBjbWx1WjF4dUlDQWdJQ0FnTHk4Z2NtVndjbVZ6Wlc1MFlYUnBiMjRzSUhkbElHTmhiaUJrY205d0lIUm9hWE1nWTI5a1pTQndZWFJvTGx4dUlDQWdJQ0FnYVc1emRHRnVZMlVnUFNCdVpYY2daV3hsYldWdWRDNTBlWEJsS0dWc1pXMWxiblFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBibk4wWVc1alpTQTlJRzVsZHlCU1pXRmpkRU52YlhCdmMybDBaVU52YlhCdmJtVnVkRmR5WVhCd1pYSW9LVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUc1dlpHVWdQVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCdWIyUmxJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUdsdWMzUmhibU5sSUQwZ1VtVmhZM1JPWVhScGRtVkRiMjF3YjI1bGJuUXVZM0psWVhSbFNXNXpkR0Z1WTJWR2IzSlVaWGgwS0c1dlpHVXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1B5QnBiblpoY21saGJuUW9YRzRnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNkRmJtTnZkVzUwWlhKbFpDQnBiblpoYkdsa0lGSmxZV04wSUc1dlpHVWdiMllnZEhsd1pTQWxjeWNzWEc0Z0lDQWdJQ0IwZVhCbGIyWWdibTlrWlZ4dUlDQWdJQ2tnT2lCcGJuWmhjbWxoYm5Rb1ptRnNjMlVwS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hjSW5CeWIyUjFZM1JwYjI1Y0lpQWhQVDBnY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZcElIdGNiaUFnSUNBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDhnZDJGeWJtbHVaeWhjYmlBZ0lDQWdJSFI1Y0dWdlppQnBibk4wWVc1alpTNWpiMjV6ZEhKMVkzUWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWmNiaUFnSUNBZ0lIUjVjR1Z2WmlCcGJuTjBZVzVqWlM1dGIzVnVkRU52YlhCdmJtVnVkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KbHh1SUNBZ0lDQWdkSGx3Wlc5bUlHbHVjM1JoYm1ObExuSmxZMlZwZG1WRGIyMXdiMjVsYm5RZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlaY2JpQWdJQ0FnSUhSNWNHVnZaaUJwYm5OMFlXNWpaUzUxYm0xdmRXNTBRMjl0Y0c5dVpXNTBJRDA5UFNBblpuVnVZM1JwYjI0bkxGeHVJQ0FnSUNBZ0owOXViSGtnVW1WaFkzUWdRMjl0Y0c5dVpXNTBjeUJqWVc0Z1ltVWdiVzkxYm5SbFpDNG5YRzRnSUNBZ0tTQTZJRzUxYkd3cE8xeHVJQ0I5WEc1Y2JpQWdMeThnVTJWMGN5QjFjQ0IwYUdVZ2FXNXpkR0Z1WTJVdUlGUm9hWE1nWTJGdUlIQnliMkpoWW14NUlHcDFjM1FnYlc5MlpTQnBiblJ2SUhSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ1YjNjdVhHNGdJR2x1YzNSaGJtTmxMbU52Ym5OMGNuVmpkQ2h1YjJSbEtUdGNibHh1SUNBdkx5QlVhR1Z6WlNCMGQyOGdabWxsYkdSeklHRnlaU0IxYzJWa0lHSjVJSFJvWlNCRVQwMGdZVzVrSUVGU1ZDQmthV1ptYVc1bklHRnNaMjl5YVhSb2JYTmNiaUFnTHk4Z2NtVnpjR1ZqZEdsMlpXeDVMaUJKYm5OMFpXRmtJRzltSUhWemFXNW5JR1Y0Y0dGdVpHOXpJRzl1SUdOdmJYQnZibVZ1ZEhNc0lIZGxJSE5vYjNWc1pDQmlaVnh1SUNBdkx5QnpkRzl5YVc1bklIUm9aU0J6ZEdGMFpTQnVaV1ZrWldRZ1lua2dkR2hsSUdScFptWnBibWNnWVd4bmIzSnBkR2h0Y3lCbGJITmxkMmhsY21VdVhHNGdJR2x1YzNSaGJtTmxMbDl0YjNWdWRFbHVaR1Y0SUQwZ01EdGNiaUFnYVc1emRHRnVZMlV1WDIxdmRXNTBTVzFoWjJVZ1BTQnVkV3hzTzF4dVhHNGdJR2xtSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWXBJSHRjYmlBZ0lDQnBibk4wWVc1alpTNWZhWE5QZDI1bGNrNWxZMlZ6YzJGeWVTQTlJR1poYkhObE8xeHVJQ0FnSUdsdWMzUmhibU5sTGw5M1lYSnVaV1JCWW05MWRGSmxabk5KYmxKbGJtUmxjaUE5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnTHk4Z1NXNTBaWEp1WVd3Z2FXNXpkR0Z1WTJWeklITm9iM1ZzWkNCbWRXeHNlU0JqYjI1emRISjFZM1JsWkNCaGRDQjBhR2x6SUhCdmFXNTBMQ0J6YnlCMGFHVjVJSE5vYjNWc1pGeHVJQ0F2THlCdWIzUWdaMlYwSUdGdWVTQnVaWGNnWm1sbGJHUnpJR0ZrWkdWa0lIUnZJSFJvWlcwZ1lYUWdkR2hwY3lCd2IybHVkQzVjYmlBZ2FXWWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlrZ2UxeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5NcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1d2NtVjJaVzUwUlhoMFpXNXphVzl1Y3locGJuTjBZVzVqWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdsdWMzUmhibU5sTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x1YzNSaGJuUnBZWFJsVW1WaFkzUkRiMjF3YjI1bGJuUTdYRzRpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjt2YXIgaW52YXJpYW50PWZ1bmN0aW9uKGNvbmRpdGlvbixmb3JtYXQsYSxiLGMsZCxlLGYpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PWZvcm1hdCl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudFwiKTtpZighY29uZGl0aW9uKXt2YXIgZXJyb3I7aWYodm9pZCAwPT09Zm9ybWF0KWVycm9yPW5ldyBFcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGFyZ3M9W2EsYixjLGQsZSxmXSxhcmdJbmRleD0wO2Vycm9yPW5ldyBFcnJvcihcIkludmFyaWFudCBWaW9sYXRpb246IFwiK2Zvcm1hdC5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3NbYXJnSW5kZXgrK119KSl9dGhyb3cgZXJyb3IuZnJhbWVzVG9Qb3A9MSxlcnJvcn19O21vZHVsZS5leHBvcnRzPWludmFyaWFudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmFXNTJZWEpwWVc1MExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZYUVN4WlFXRkJMRWxCUVVrc1YwRkJXU3hUUVVGVExGVkJRVmNzVDBGQlVTeEZRVUZITEVWQlFVY3NSVUZCUnl4RlFVRkhMRVZCUVVjc1IwRkRla1FzUjBGQlNTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1ZVRkRhRUlzVTBGQldDeFBRVU5HTEV0QlFVMHNTVUZCU1N4UFFVRk5MQ3REUVVsd1FpeExRVUZMTEZWQlFWY3NRMEZEWkN4SFFVRkpMRTFCUTBvc1NVRkJaU3hUUVVGWUxFOUJRMFlzVFVGQlVTeEhRVUZKTEU5QlExWXNjVWxCUjBjc1EwRkRUQ3hIUVVGSkxFOUJRVkVzUlVGQlJ5eEZRVUZITEVWQlFVY3NSVUZCUnl4RlFVRkhMRWRCUTNaQ0xGTkJRVmNzUTBGRFppeFBRVUZSTEVkQlFVa3NUMEZEVml4M1FrRkRRU3hQUVVGUExGRkJRVkVzVFVGQlR5eFhRVUZoTEUxQlFVOHNUVUZCU3l4bFFVdHVSQ3hMUVVSQkxFOUJRVTBzV1VGQll5eEZRVU5rTEU5QlNWWXNVVUZCVHl4UlFVRlZJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ERXpMVEl3TVRVc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRlJvYVhNZ2MyOTFjbU5sSUdOdlpHVWdhWE1nYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDMXpkSGxzWlNCc2FXTmxibk5sSUdadmRXNWtJR2x1SUhSb1pWeHVJQ29nVEVsRFJVNVRSU0JtYVd4bElHbHVJSFJvWlNCeWIyOTBJR1JwY21WamRHOXllU0J2WmlCMGFHbHpJSE52ZFhKalpTQjBjbVZsTGlCQmJpQmhaR1JwZEdsdmJtRnNJR2R5WVc1MFhHNGdLaUJ2WmlCd1lYUmxiblFnY21sbmFIUnpJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnVUVGVVJVNVVVeUJtYVd4bElHbHVJSFJvWlNCellXMWxJR1JwY21WamRHOXllUzVjYmlBcVhHNGdLaUJBY0hKdmRtbGtaWE5OYjJSMWJHVWdhVzUyWVhKcFlXNTBYRzRnS2k5Y2JseHVYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNiaThxS2x4dUlDb2dWWE5sSUdsdWRtRnlhV0Z1ZENncElIUnZJR0Z6YzJWeWRDQnpkR0YwWlNCM2FHbGphQ0I1YjNWeUlIQnliMmR5WVcwZ1lYTnpkVzFsY3lCMGJ5QmlaU0IwY25WbExseHVJQ3BjYmlBcUlGQnliM1pwWkdVZ2MzQnlhVzUwWmkxemRIbHNaU0JtYjNKdFlYUWdLRzl1YkhrZ0pYTWdhWE1nYzNWd2NHOXlkR1ZrS1NCaGJtUWdZWEpuZFcxbGJuUnpYRzRnS2lCMGJ5QndjbTkyYVdSbElHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIZG9ZWFFnWW5KdmEyVWdZVzVrSUhkb1lYUWdlVzkxSUhkbGNtVmNiaUFxSUdWNGNHVmpkR2x1Wnk1Y2JpQXFYRzRnS2lCVWFHVWdhVzUyWVhKcFlXNTBJRzFsYzNOaFoyVWdkMmxzYkNCaVpTQnpkSEpwY0hCbFpDQnBiaUJ3Y205a2RXTjBhVzl1TENCaWRYUWdkR2hsSUdsdWRtRnlhV0Z1ZEZ4dUlDb2dkMmxzYkNCeVpXMWhhVzRnZEc4Z1pXNXpkWEpsSUd4dloybGpJR1J2WlhNZ2JtOTBJR1JwWm1abGNpQnBiaUJ3Y205a2RXTjBhVzl1TGx4dUlDb3ZYRzVjYm5aaGNpQnBiblpoY21saGJuUWdQU0JtZFc1amRHbHZiaWhqYjI1a2FYUnBiMjRzSUdadmNtMWhkQ3dnWVN3Z1lpd2dZeXdnWkN3Z1pTd2daaWtnZTF4dUlDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ2FXWWdLR1p2Y20xaGRDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnlhV0Z1ZENCeVpYRjFhWEpsY3lCaGJpQmxjbkp2Y2lCdFpYTnpZV2RsSUdGeVozVnRaVzUwSnlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXWWdLQ0ZqYjI1a2FYUnBiMjRwSUh0Y2JpQWdJQ0IyWVhJZ1pYSnliM0k3WEc0Z0lDQWdhV1lnS0dadmNtMWhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQmxjbkp2Y2lBOUlHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdKMDFwYm1sbWFXVmtJR1Y0WTJWd2RHbHZiaUJ2WTJOMWNuSmxaRHNnZFhObElIUm9aU0J1YjI0dGJXbHVhV1pwWldRZ1pHVjJJR1Z1ZG1seWIyNXRaVzUwSUNjZ0sxeHVJQ0FnSUNBZ0lDQW5abTl5SUhSb1pTQm1kV3hzSUdWeWNtOXlJRzFsYzNOaFoyVWdZVzVrSUdGa1pHbDBhVzl1WVd3Z2FHVnNjR1oxYkNCM1lYSnVhVzVuY3k0blhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyWVhJZ1lYSm5jeUE5SUZ0aExDQmlMQ0JqTENCa0xDQmxMQ0JtWFR0Y2JpQWdJQ0FnSUhaaGNpQmhjbWRKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0JsY25KdmNpQTlJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSjBsdWRtRnlhV0Z1ZENCV2FXOXNZWFJwYjI0NklDY2dLMXh1SUNBZ0lDQWdJQ0JtYjNKdFlYUXVjbVZ3YkdGalpTZ3ZKWE12Wnl3Z1puVnVZM1JwYjI0b0tTQjdJSEpsZEhWeWJpQmhjbWR6VzJGeVowbHVaR1Y0S3l0ZE95QjlLVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmxjbkp2Y2k1bWNtRnRaWE5VYjFCdmNDQTlJREU3SUM4dklIZGxJR1J2YmlkMElHTmhjbVVnWVdKdmRYUWdhVzUyWVhKcFlXNTBKM01nYjNkdUlHWnlZVzFsWEc0Z0lDQWdkR2h5YjNjZ1pYSnliM0k3WEc0Z0lIMWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2FXNTJZWEpwWVc1ME8xeHVJbDE5IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmIChcbiAgICAoKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpXG4gICkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc1RleHRJbnB1dEVsZW1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG4gKi9cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICAnY29sb3InOiB0cnVlLFxuICAnZGF0ZSc6IHRydWUsXG4gICdkYXRldGltZSc6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICdlbWFpbCc6IHRydWUsXG4gICdtb250aCc6IHRydWUsXG4gICdudW1iZXInOiB0cnVlLFxuICAncGFzc3dvcmQnOiB0cnVlLFxuICAncmFuZ2UnOiB0cnVlLFxuICAnc2VhcmNoJzogdHJ1ZSxcbiAgJ3RlbCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZSxcbiAgJ3RpbWUnOiB0cnVlLFxuICAndXJsJzogdHJ1ZSxcbiAgJ3dlZWsnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICByZXR1cm4gZWxlbSAmJiAoXG4gICAgKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdIHx8IGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQScpXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0SW5wdXRFbGVtZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzVGV4dE5vZGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoXCIuL2lzTm9kZVwiKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO3ZhciBpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpLGtleU1pcnJvcj1mdW5jdGlvbihvYmope3ZhciBrZXkscmV0PXt9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KG9iaiBpbnN0YW5jZW9mIE9iamVjdCYmIUFycmF5LmlzQXJyYXkob2JqKSxcImtleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC5cIik6aW52YXJpYW50KG9iaiBpbnN0YW5jZW9mIE9iamVjdCYmIUFycmF5LmlzQXJyYXkob2JqKSk7Zm9yKGtleSBpbiBvYmopb2JqLmhhc093blByb3BlcnR5KGtleSkmJihyZXRba2V5XT1rZXkpO3JldHVybiByZXR9O21vZHVsZS5leHBvcnRzPWtleU1pcnJvcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmEyVjVUV2x5Y205eUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZaUVN4WlFVVkJMRWxCUVVrc1YwRkJXU3hSUVVGUkxHVkJiMEp3UWl4VlFVRlpMRk5CUVZNc1MwRkRka0lzUjBGRFNTeExRVVJCTEUxQlJVZ3NaMEpCUVdsQ0xGRkJRVkVzU1VGQlNTeFRRVUZYTEZWQlEzWkRMR05CUVdVc1ZVRkJWeXhOUVVGTkxGRkJRVkVzUzBGRGVFTXNLME5CUTBVc1ZVRkJWU3hqUVVGbExGVkJRVmNzVFVGQlRTeFJRVUZSTEV0QlEzUkVMRXRCUVVzc1RVRkJUeXhMUVVOTUxFbEJRVWtzWlVGQlpTeFBRVWQ0UWl4SlFVRkpMRXRCUVU4c1NVRkZZaXhQUVVGUExFdEJSMVFzVVVGQlR5eFJRVUZWSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREV6TFRJd01UVXNJRVpoWTJWaWIyOXJMQ0JKYm1NdVhHNGdLaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUZSb2FYTWdjMjkxY21ObElHTnZaR1VnYVhNZ2JHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFSlRSQzF6ZEhsc1pTQnNhV05sYm5ObElHWnZkVzVrSUdsdUlIUm9aVnh1SUNvZ1RFbERSVTVUUlNCbWFXeGxJR2x1SUhSb1pTQnliMjkwSUdScGNtVmpkRzl5ZVNCdlppQjBhR2x6SUhOdmRYSmpaU0IwY21WbExpQkJiaUJoWkdScGRHbHZibUZzSUdkeVlXNTBYRzRnS2lCdlppQndZWFJsYm5RZ2NtbG5hSFJ6SUdOaGJpQmlaU0JtYjNWdVpDQnBiaUIwYUdVZ1VFRlVSVTVVVXlCbWFXeGxJR2x1SUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFYRzRnS2lCQWNISnZkbWxrWlhOTmIyUjFiR1VnYTJWNVRXbHljbTl5WEc0Z0tpQkFkSGx3WldOb1pXTnJjeUJ6ZEdGMGFXTXRiMjVzZVZ4dUlDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlHbHVkbUZ5YVdGdWRDQTlJSEpsY1hWcGNtVW9YQ0l1TDJsdWRtRnlhV0Z1ZEZ3aUtUdGNibHh1THlvcVhHNGdLaUJEYjI1emRISjFZM1J6SUdGdUlHVnVkVzFsY21GMGFXOXVJSGRwZEdnZ2EyVjVjeUJsY1hWaGJDQjBieUIwYUdWcGNpQjJZV3gxWlM1Y2JpQXFYRzRnS2lCR2IzSWdaWGhoYlhCc1pUcGNiaUFxWEc0Z0tpQWdJSFpoY2lCRFQweFBVbE1nUFNCclpYbE5hWEp5YjNJb2UySnNkV1U2SUc1MWJHd3NJSEpsWkRvZ2JuVnNiSDBwTzF4dUlDb2dJQ0IyWVhJZ2JYbERiMnh2Y2lBOUlFTlBURTlTVXk1aWJIVmxPMXh1SUNvZ0lDQjJZWElnYVhORGIyeHZjbFpoYkdsa0lEMGdJU0ZEVDB4UFVsTmJiWGxEYjJ4dmNsMDdYRzRnS2x4dUlDb2dWR2hsSUd4aGMzUWdiR2x1WlNCamIzVnNaQ0J1YjNRZ1ltVWdjR1Z5Wm05eWJXVmtJR2xtSUhSb1pTQjJZV3gxWlhNZ2IyWWdkR2hsSUdkbGJtVnlZWFJsWkNCbGJuVnRJSGRsY21WY2JpQXFJRzV2ZENCbGNYVmhiQ0IwYnlCMGFHVnBjaUJyWlhsekxseHVJQ3BjYmlBcUlDQWdTVzV3ZFhRNklDQjdhMlY1TVRvZ2RtRnNNU3dnYTJWNU1qb2dkbUZzTW4xY2JpQXFJQ0FnVDNWMGNIVjBPaUI3YTJWNU1Ub2dhMlY1TVN3Z2EyVjVNam9nYTJWNU1uMWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2IySnFYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5WEc0Z0tpOWNiblpoY2lCclpYbE5hWEp5YjNJZ1BTQm1kVzVqZEdsdmJpaHZZbW9wSUh0Y2JpQWdkbUZ5SUhKbGRDQTlJSHQ5TzF4dUlDQjJZWElnYTJWNU8xeHVJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdhVzUyWVhKcFlXNTBLRnh1SUNBZ0lHOWlhaUJwYm5OMFlXNWpaVzltSUU5aWFtVmpkQ0FtSmlBaFFYSnlZWGt1YVhOQmNuSmhlU2h2WW1vcExGeHVJQ0FnSUNkclpYbE5hWEp5YjNJb0xpNHVLVG9nUVhKbmRXMWxiblFnYlhWemRDQmlaU0JoYmlCdlltcGxZM1F1SjF4dUlDQXBJRG9nYVc1MllYSnBZVzUwS0c5aWFpQnBibk4wWVc1alpXOW1JRTlpYW1WamRDQW1KaUFoUVhKeVlYa3VhWE5CY25KaGVTaHZZbW9wS1NrN1hHNGdJR1p2Y2lBb2EyVjVJR2x1SUc5aWFpa2dlMXh1SUNBZ0lHbG1JQ2doYjJKcUxtaGhjMDkzYmxCeWIzQmxjblI1S0d0bGVTa3BJSHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUmJhMlY1WFNBOUlHdGxlVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JyWlhsTmFYSnliM0k3WEc0aVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5T2ZcbiAqL1xuXG4vKipcbiAqIEFsbG93cyBleHRyYWN0aW9uIG9mIGEgbWluaWZpZWQga2V5LiBMZXQncyB0aGUgYnVpbGQgc3lzdGVtIG1pbmlmeSBrZXlzXG4gKiB3aXRob3V0IGxvb3NpbmcgdGhlIGFiaWxpdHkgdG8gZHluYW1pY2FsbHkgdXNlIGtleSBzdHJpbmdzIGFzIHZhbHVlc1xuICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG4gKiB5b3UgdGhlIHN0cmluZyBrZXkgb2YgdGhhdCBzaW5nbGUgcmVjb3JkLiBTdXBwb3NlIHlvdSB3YW50IHRvIGdyYWIgdGhlXG4gKiB2YWx1ZSBmb3IgYSBrZXkgJ2NsYXNzTmFtZScgaW5zaWRlIG9mIGFuIG9iamVjdC4gS2V5L3ZhbCBtaW5pZmljYXRpb24gbWF5XG4gKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cbiAqICd4YTEyJyBpbiB0aGF0IGNhc2UuIFJlc29sdmUga2V5cyB5b3Ugd2FudCB0byB1c2Ugb25jZSBhdCBzdGFydHVwIHRpbWUsIHRoZW5cbiAqIHJldXNlIHRob3NlIHJlc29sdXRpb25zLlxuICovXG52YXIga2V5T2YgPSBmdW5jdGlvbihvbmVLZXlPYmopIHtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gb25lS2V5T2JqKSB7XG4gICAgaWYgKCFvbmVLZXlPYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ga2V5T2Y7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWFwT2JqZWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBgY2FsbGJhY2tgIG9uY2UgZm9yIGVhY2ggZW51bWVyYWJsZSBvd24gcHJvcGVydHkgaW4gdGhlXG4gKiBvYmplY3QgYW5kIGNvbnN0cnVjdHMgYSBuZXcgb2JqZWN0IGZyb20gdGhlIHJlc3VsdHMuIFRoZSBgY2FsbGJhY2tgIGlzXG4gKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICpcbiAqICAtIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICogIC0gdGhlIHByb3BlcnR5IG5hbWVcbiAqICAtIHRoZSBvYmplY3QgYmVpbmcgdHJhdmVyc2VkXG4gKlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBhZGRlZCBhZnRlciB0aGUgY2FsbCB0byBgbWFwT2JqZWN0YCB3aWxsIG5vdCBiZSB2aXNpdGVkXG4gKiBieSBgY2FsbGJhY2tgLiBJZiB0aGUgdmFsdWVzIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMgYXJlIGNoYW5nZWQsIHRoZSB2YWx1ZVxuICogcGFzc2VkIHRvIGBjYWxsYmFja2Agd2lsbCBiZSB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgYG1hcE9iamVjdGAgdmlzaXRzIHRoZW0uXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGRlbGV0ZWQgYmVmb3JlIGJlaW5nIHZpc2l0ZWQgYXJlIG5vdCB2aXNpdGVkLlxuICpcbiAqIEBncmVwIGZ1bmN0aW9uIG9iamVjdE1hcCgpXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmpNYXAoKVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYXBPYmplY3Qob2JqZWN0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG5hbWUpKSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG9iamVjdFtuYW1lXSwgbmFtZSwgb2JqZWN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBPYmplY3Q7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWVtb2l6ZVN0cmluZ09ubHlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lbW9pemVzIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIHN0cmluZyBhcmd1bWVudC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/aW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbiksXCJvbmx5Q2hpbGQgbXVzdCBiZSBwYXNzZWQgYSBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgb25lIGNoaWxkLlwiKTppbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSksY2hpbGRyZW59dmFyIFJlYWN0RWxlbWVudD1yZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIiksaW52YXJpYW50PXJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTttb2R1bGUuZXhwb3J0cz1vbmx5Q2hpbGQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZiMjVzZVVOb2FXeGtMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGVlFTeFpRV2xDUVN4VFFVRlRMRmRCUVZVc1ZVRkxha0lzVFVGS1F5eGxRVUZwUWl4UlFVRlJMRWxCUVVrc1UwRkJWeXhWUVVOMlF5eGhRVUZoTEdWQlFXVXNWVUZETlVJc0swUkJRMFVzVlVGQlZTeGhRVUZoTEdWQlFXVXNWMEZEYmtNc1UwRndRbFFzUjBGQlNTeGpRVUZsTEZGQlFWRXNhMEpCUlhaQ0xGVkJRVmtzVVVGQlVTeGpRWEZDZUVJc1VVRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ2IyNXNlVU5vYVd4a1hHNGdLaTljYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlGSmxZV04wUld4bGJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUld4bGJXVnVkRndpS1R0Y2JseHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMmx1ZG1GeWFXRnVkRndpS1R0Y2JseHVMeW9xWEc0Z0tpQlNaWFIxY201eklIUm9aU0JtYVhKemRDQmphR2xzWkNCcGJpQmhJR052Ykd4bFkzUnBiMjRnYjJZZ1kyaHBiR1J5Wlc0Z1lXNWtJSFpsY21sbWFXVnpJSFJvWVhRZ2RHaGxjbVZjYmlBcUlHbHpJRzl1YkhrZ2IyNWxJR05vYVd4a0lHbHVJSFJvWlNCamIyeHNaV04wYVc5dUxpQlVhR1VnWTNWeWNtVnVkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUIwYUdselhHNGdLaUJtZFc1amRHbHZiaUJoYzNOMWJXVnpJSFJvWVhRZ1lTQnphVzVuYkdVZ1kyaHBiR1FnWjJWMGN5QndZWE56WldRZ2QybDBhRzkxZENCaElIZHlZWEJ3WlhJc0lHSjFkQ0IwYUdWY2JpQXFJSEIxY25CdmMyVWdiMllnZEdocGN5Qm9aV3h3WlhJZ1puVnVZM1JwYjI0Z2FYTWdkRzhnWVdKemRISmhZM1FnWVhkaGVTQjBhR1VnY0dGeWRHbGpkV3hoY2lCemRISjFZM1IxY21WY2JpQXFJRzltSUdOb2FXeGtjbVZ1TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3UDI5aWFtVmpkSDBnWTJocGJHUnlaVzRnUTJocGJHUWdZMjlzYkdWamRHbHZiaUJ6ZEhKMVkzUjFjbVV1WEc0Z0tpQkFjbVYwZFhKdUlIdFNaV0ZqZEVOdmJYQnZibVZ1ZEgwZ1ZHaGxJR1pwY25OMElHRnVaQ0J2Ym14NUlHQlNaV0ZqZEVOdmJYQnZibVZ1ZEdBZ1kyOXVkR0ZwYm1Wa0lHbHVJSFJvWlZ4dUlDb2djM1J5ZFdOMGRYSmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnZibXg1UTJocGJHUW9ZMmhwYkdSeVpXNHBJSHRjYmlBZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUEvSUdsdWRtRnlhV0Z1ZENoY2JpQWdJQ0JTWldGamRFVnNaVzFsYm5RdWFYTldZV3hwWkVWc1pXMWxiblFvWTJocGJHUnlaVzRwTEZ4dUlDQWdJQ2R2Ym14NVEyaHBiR1FnYlhWemRDQmlaU0J3WVhOelpXUWdZU0JqYUdsc1pISmxiaUIzYVhSb0lHVjRZV04wYkhrZ2IyNWxJR05vYVd4a0xpZGNiaUFnS1NBNklHbHVkbUZ5YVdGdWRDaFNaV0ZqZEVWc1pXMWxiblF1YVhOV1lXeHBaRVZzWlcxbGJuUW9ZMmhwYkdSeVpXNHBLU2s3WEc0Z0lISmxkSFZ5YmlCamFHbHNaSEpsYmp0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J2Ym14NVEyaHBiR1E3WEc0aVhYMD0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcGVyZm9ybWFuY2VcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgcGVyZm9ybWFuY2U7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgcGVyZm9ybWFuY2UgPVxuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSB8fFxuICAgIHdpbmRvdy5tc1BlcmZvcm1hbmNlIHx8XG4gICAgd2luZG93LndlYmtpdFBlcmZvcm1hbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlIHx8IHt9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlTm93XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBwZXJmb3JtYW5jZSA9IHJlcXVpcmUoXCIuL3BlcmZvcm1hbmNlXCIpO1xuXG4vKipcbiAqIERldGVjdCBpZiB3ZSBjYW4gdXNlIGB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClgIGFuZCBncmFjZWZ1bGx5IGZhbGxiYWNrIHRvXG4gKiBgRGF0ZS5ub3coKWAgaWYgaXQgZG9lc24ndCBleGlzdC4gV2UgbmVlZCB0byBzdXBwb3J0IEZpcmVmb3ggPCAxNSBmb3Igbm93XG4gKiBiZWNhdXNlIG9mIEZhY2Vib29rJ3MgdGVzdGluZyBpbmZyYXN0cnVjdHVyZS5cbiAqL1xuaWYgKCFwZXJmb3JtYW5jZSB8fCAhcGVyZm9ybWFuY2Uubm93KSB7XG4gIHBlcmZvcm1hbmNlID0gRGF0ZTtcbn1cblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcGVyZm9ybWFuY2Uubm93LmJpbmQocGVyZm9ybWFuY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCIpO1xuXG4vKipcbiAqIEVzY2FwZXMgYXR0cmlidXRlIHZhbHVlIHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSkge1xuICByZXR1cm4gJ1wiJyArIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNldElubmVySFRNTFxuICovXG5cbi8qIGdsb2JhbHMgTVNBcHAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcbnZhciBOT05WSVNJQkxFX1RFU1QgPSAvPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLztcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG59O1xuXG4vLyBXaW44IGFwcHM6IEFsbG93IGFsbCBodG1sIHRvIGJlIGluc2VydGVkXG5pZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfSk7XG4gIH07XG59XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4OiBXaGVuIHVwZGF0aW5nIGEganVzdCBjcmVhdGVkIG5vZGUgd2l0aCBpbm5lckhUTUwgb25seSBsZWFkaW5nXG4gIC8vIHdoaXRlc3BhY2UgaXMgcmVtb3ZlZC4gV2hlbiB1cGRhdGluZyBhbiBleGlzdGluZyBub2RlIHdpdGggaW5uZXJIVE1MXG4gIC8vIHdoaXRlc3BhY2UgaW4gcm9vdCBUZXh0Tm9kZXMgaXMgYWxzbyBjb2xsYXBzZWQuXG4gIC8vIEBzZWUgcXVpcmtzbW9kZS5vcmcvYnVncmVwb3J0cy9hcmNoaXZlcy8yMDA0LzExL2lubmVyaHRtbF9hbmRfdC5odG1sXG5cbiAgLy8gRmVhdHVyZSBkZXRlY3Rpb247IG9ubHkgSUU4IGlzIGtub3duIHRvIGJlaGF2ZSBpbXByb3Blcmx5IGxpa2UgdGhpcy5cbiAgdmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRlc3RFbGVtZW50LmlubmVySFRNTCA9ICcgJztcbiAgaWYgKHRlc3RFbGVtZW50LmlubmVySFRNTCA9PT0gJycpIHtcbiAgICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gICAgICAvLyBNYWdpYyB0aGVvcnk6IElFOCBzdXBwb3NlZGx5IGRpZmZlcmVudGlhdGVzIGJldHdlZW4gYWRkZWQgYW5kIHVwZGF0ZWRcbiAgICAgIC8vIG5vZGVzIHdoZW4gcHJvY2Vzc2luZyBpbm5lckhUTUwsIGlubmVySFRNTCBvbiB1cGRhdGVkIG5vZGVzIHN1ZmZlcnNcbiAgICAgIC8vIGZyb20gd29yc2Ugd2hpdGVzcGFjZSBiZWhhdmlvci4gUmUtYWRkaW5nIGEgbm9kZSBsaWtlIHRoaXMgdHJpZ2dlcnNcbiAgICAgIC8vIHRoZSBpbml0aWFsIGFuZCBtb3JlIGZhdm9yYWJsZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLlxuICAgICAgLy8gVE9ETzogV2hhdCB0byBkbyBvbiBhIGRldGFjaGVkIG5vZGU/XG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGFsc28gaW1wbGVtZW50IGEgd29ya2Fyb3VuZCBmb3Igbm9uLXZpc2libGUgdGFncyBkaXNhcHBlYXJpbmcgaW50b1xuICAgICAgLy8gdGhpbiBhaXIgb24gSUU4LCB0aGlzIG9ubHkgaGFwcGVucyBpZiB0aGVyZSBpcyBubyB2aXNpYmxlIHRleHRcbiAgICAgIC8vIGluLWZyb250IG9mIHRoZSBub24tdmlzaWJsZSB0YWdzLiBQaWdneWJhY2sgb24gdGhlIHdoaXRlc3BhY2UgZml4XG4gICAgICAvLyBhbmQgc2ltcGx5IGNoZWNrIGlmIGFueSBub24tdmlzaWJsZSB0YWdzIGFwcGVhciBpbiB0aGUgc291cmNlLlxuICAgICAgaWYgKFdISVRFU1BBQ0VfVEVTVC50ZXN0KGh0bWwpIHx8XG4gICAgICAgICAgaHRtbFswXSA9PT0gJzwnICYmIE5PTlZJU0lCTEVfVEVTVC50ZXN0KGh0bWwpKSB7XG4gICAgICAgIC8vIFJlY292ZXIgbGVhZGluZyB3aGl0ZXNwYWNlIGJ5IHRlbXBvcmFyaWx5IHByZXBlbmRpbmcgYW55IGNoYXJhY3Rlci5cbiAgICAgICAgLy8gXFx1RkVGRiBoYXMgdGhlIHBvdGVudGlhbCBhZHZhbnRhZ2Ugb2YgYmVpbmcgemVyby13aWR0aC9pbnZpc2libGUuXG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gJ1xcdUZFRkYnICsgaHRtbDtcblxuICAgICAgICAvLyBkZWxldGVEYXRhIGxlYXZlcyBhbiBlbXB0eSBgVGV4dE5vZGVgIHdoaWNoIG9mZnNldHMgdGhlIGluZGV4IG9mIGFsbFxuICAgICAgICAvLyBjaGlsZHJlbi4gRGVmaW5pdGVseSB3YW50IHRvIGF2b2lkIHRoaXMuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHRleHROb2RlLmRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dE5vZGUuZGVsZXRlRGF0YSgwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbm5lckhUTUw7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2V0VGV4dENvbnRlbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKFwiLi9zZXRJbm5lckhUTUxcIik7XG5cbi8qKlxuICogU2V0IHRoZSB0ZXh0Q29udGVudCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LiBpbm5lclRleHQgaXMgYSBwb29yIHN1YnN0aXR1dGUgZm9yIHRleHRDb250ZW50IGFuZCwgYW1vbmcgbWFueVxuICogaXNzdWVzLCBpbnNlcnRzIDxicj4gaW5zdGVhZCBvZiB0aGUgbGl0ZXJhbCBuZXdsaW5lIGNoYXJzLiBpbm5lckhUTUwgYmVoYXZlc1xuICogYXMgaXQgc2hvdWxkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBpZiAoISgndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkpIHtcbiAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgICAgIHNldElubmVySFRNTChub2RlLCBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUZXh0Q29udGVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZ1xuICogZmFsc2Ugd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuXG4gKiBvYmpBIGFuZCBvYmpCLiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBrZXk7XG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAoa2V5IGluIG9iakEpIHtcbiAgICBpZiAob2JqQS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICghb2JqQi5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IG9iakFba2V5XSAhPT0gb2JqQltrZXldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBUZXN0IGZvciBCJ3Mga2V5cyBtaXNzaW5nIGZyb20gQS5cbiAgZm9yIChrZXkgaW4gb2JqQikge1xuICAgIGlmIChvYmpCLmhhc093blByb3BlcnR5KGtleSkgJiYgIW9iakEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsbmV4dEVsZW1lbnQpe2lmKG51bGwhPXByZXZFbGVtZW50JiZudWxsIT1uZXh0RWxlbWVudCl7dmFyIHByZXZUeXBlPXR5cGVvZiBwcmV2RWxlbWVudCxuZXh0VHlwZT10eXBlb2YgbmV4dEVsZW1lbnQ7aWYoXCJzdHJpbmdcIj09PXByZXZUeXBlfHxcIm51bWJlclwiPT09cHJldlR5cGUpcmV0dXJuXCJzdHJpbmdcIj09PW5leHRUeXBlfHxcIm51bWJlclwiPT09bmV4dFR5cGU7aWYoXCJvYmplY3RcIj09PW5leHRUeXBlJiZwcmV2RWxlbWVudC50eXBlPT09bmV4dEVsZW1lbnQudHlwZSYmcHJldkVsZW1lbnQua2V5PT09bmV4dEVsZW1lbnQua2V5KXt2YXIgb3duZXJzTWF0Y2g9cHJldkVsZW1lbnQuX293bmVyPT09bmV4dEVsZW1lbnQuX293bmVyLHByZXZOYW1lPW51bGwsbmV4dE5hbWU9bnVsbCxuZXh0RGlzcGxheU5hbWU9bnVsbDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYob3duZXJzTWF0Y2h8fChudWxsIT1wcmV2RWxlbWVudC5fb3duZXImJm51bGwhPXByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpJiZudWxsIT1wcmV2RWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3RvciYmKHByZXZOYW1lPXByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSxudWxsIT1uZXh0RWxlbWVudC5fb3duZXImJm51bGwhPW5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpJiZudWxsIT1uZXh0RWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3RvciYmKG5leHROYW1lPW5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lKSxudWxsIT1uZXh0RWxlbWVudC50eXBlJiZudWxsIT1uZXh0RWxlbWVudC50eXBlLmRpc3BsYXlOYW1lJiYobmV4dERpc3BsYXlOYW1lPW5leHRFbGVtZW50LnR5cGUuZGlzcGxheU5hbWUpLG51bGwhPW5leHRFbGVtZW50LnR5cGUmJlwic3RyaW5nXCI9PXR5cGVvZiBuZXh0RWxlbWVudC50eXBlJiYobmV4dERpc3BsYXlOYW1lPW5leHRFbGVtZW50LnR5cGUpLChcInN0cmluZ1wiIT10eXBlb2YgbmV4dEVsZW1lbnQudHlwZXx8XCJpbnB1dFwiPT09bmV4dEVsZW1lbnQudHlwZXx8XCJ0ZXh0YXJlYVwiPT09bmV4dEVsZW1lbnQudHlwZSkmJihudWxsIT1wcmV2RWxlbWVudC5fb3duZXImJnByZXZFbGVtZW50Ll9vd25lci5faXNPd25lck5lY2Vzc2FyeT09PSExfHxudWxsIT1uZXh0RWxlbWVudC5fb3duZXImJm5leHRFbGVtZW50Ll9vd25lci5faXNPd25lck5lY2Vzc2FyeT09PSExKSYmKG51bGwhPXByZXZFbGVtZW50Ll9vd25lciYmKHByZXZFbGVtZW50Ll9vd25lci5faXNPd25lck5lY2Vzc2FyeT0hMCksbnVsbCE9bmV4dEVsZW1lbnQuX293bmVyJiYobmV4dEVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5PSEwKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoITEsXCI8JXMgLz4gaXMgYmVpbmcgcmVuZGVyZWQgYnkgYm90aCAlcyBhbmQgJXMgdXNpbmcgdGhlIHNhbWUga2V5ICglcykgaW4gdGhlIHNhbWUgcGxhY2UuIEN1cnJlbnRseSwgdGhpcyBtZWFucyB0aGF0IHRoZXkgZG9uJ3QgcHJlc2VydmUgc3RhdGUuIFRoaXMgYmVoYXZpb3Igc2hvdWxkIGJlIHZlcnkgcmFyZSBzbyB3ZSdyZSBjb25zaWRlcmluZyBkZXByZWNhdGluZyBpdC4gUGxlYXNlIGNvbnRhY3QgdGhlIFJlYWN0IHRlYW0gYW5kIGV4cGxhaW4geW91ciB1c2UgY2FzZSBzbyB0aGF0IHdlIGNhbiB0YWtlIHRoYXQgaW50byBjb25zaWRlcmF0aW9uLlwiLG5leHREaXNwbGF5TmFtZXx8XCJVbmtub3duIENvbXBvbmVudFwiLHByZXZOYW1lfHxcIltVbmtub3duXVwiLG5leHROYW1lfHxcIltVbmtub3duXVwiLHByZXZFbGVtZW50LmtleSk6bnVsbCkpKSxvd25lcnNNYXRjaH19cmV0dXJuITF9dmFyIHdhcm5pbmc9cmVxdWlyZShcIi4vd2FybmluZ1wiKTttb2R1bGUuZXhwb3J0cz1zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmMyaHZkV3hrVlhCa1lYUmxVbVZoWTNSRGIyMXdiMjVsYm5RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVmxCTEZsQlpVRXNVMEZCVXl3MFFrRkJNa0lzV1VGQllTeGhRVU12UXl4SFFVRnRRaXhOUVVGbUxHRkJRWE5ETEUxQlFXWXNXVUZCY1VJc1EwRkRPVU1zUjBGQlNTeG5Ra0ZCYTBJc1lVRkRiRUlzWlVGQmEwSXNXVUZEZEVJc1NVRkJhVUlzVjBGQllpeFZRVUZ6UXl4WFFVRmlMRk5CUXpOQ0xFMUJRWEZDTEZkQlFXSXNWVUZCYzBNc1YwRkJZaXhSUVVWcVF5eEpRVUZwUWl4WFFVRmlMRlZCUTBFc1dVRkJXU3hQUVVGVExGbEJRVmtzVFVGRGFrTXNXVUZCV1N4TlFVRlJMRmxCUVZrc1NVRkJTeXhEUVVOMlF5eEhRVUZKTEdGQlFXTXNXVUZCV1N4VFFVRlhMRmxCUVZrc1QwRkRha1FzVTBGQlZ5eExRVU5ZTEZOQlFWY3NTMEZEV0N4blFrRkJhMElzU1VGdlJIUkNMRTlCYmtSSkxHVkJRV2xDTEZGQlFWRXNTVUZCU1N4WFFVTXhRaXhqUVVOMVFpeE5RVUYwUWl4WlFVRlpMRkZCUXpoQ0xFMUJRVEZETEZsQlFWa3NUMEZCVHl4eFFrRkRiVU1zVFVGQmRFUXNXVUZCV1N4UFFVRlBMRzlDUVVGdlFpeGpRVU42UXl4VFFVTkZMRmxCUVZrc1QwRkJUeXh2UWtGQmIwSXNXVUZCV1N4aFFVVTNRaXhOUVVGMFFpeFpRVUZaTEZGQlF6aENMRTFCUVRGRExGbEJRVmtzVDBGQlR5eHhRa0ZEYlVNc1RVRkJkRVFzV1VGQldTeFBRVUZQTEc5Q1FVRnZRaXhqUVVONlF5eFRRVU5GTEZsQlFWa3NUMEZCVHl4dlFrRkJiMElzV1VGQldTeGhRVVV2UWl4TlFVRndRaXhaUVVGWkxFMUJRMjlDTEUxQlFXaERMRmxCUVZrc1MwRkJTeXhqUVVOdVFpeG5Ra0ZCYTBJc1dVRkJXU3hMUVVGTExHRkJSV0lzVFVGQmNFSXNXVUZCV1N4TlFVRTBReXhuUWtGQmNrSXNZVUZCV1N4UFFVTnFSQ3huUWtGQmEwSXNXVUZCV1N4UFFVVkJMR2RDUVVGeVFpeGhRVUZaTEUxQlEwVXNWVUZCY2tJc1dVRkJXU3hOUVVOVExHRkJRWEpDTEZsQlFWa3NVVUZEWVN4TlFVRjBRaXhaUVVGWkxGRkJRMklzV1VGQldTeFBRVUZQTEhGQ1FVRnpRaXhIUVVOc1FpeE5RVUYwUWl4WlFVRlpMRkZCUTJJc1dVRkJXU3hQUVVGUExIRkNRVUZ6UWl4TFFVTnFRaXhOUVVGMFFpeFpRVUZaTEZOQlEyUXNXVUZCV1N4UFFVRlBMRzFDUVVGdlFpeEhRVVZtTEUxQlFYUkNMRmxCUVZrc1UwRkRaQ3haUVVGWkxFOUJRVThzYlVKQlFXOUNMRWRCUlhoRExHVkJRV2xDTEZGQlFWRXNTVUZCU1N4VFFVRlhMRk5CUTNaRExFVkJRMEVzTUZSQlRVRXNhVUpCUVcxQ0xHOUNRVU51UWl4VlFVRlpMRmxCUTFvc1ZVRkJXU3haUVVOYUxGbEJRVmtzUzBGRFZpeFJRVXRNTEdGQlNXSXNUMEZCVHl4RlFXeEdWQ3hIUVVGSkxGTkJRVlVzVVVGQlVTeFpRWEZHZEVJc1VVRkJUeXhSUVVGVklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURFekxUSXdNVFVzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2lCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlGUm9hWE1nYzI5MWNtTmxJR052WkdVZ2FYTWdiR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUpUUkMxemRIbHNaU0JzYVdObGJuTmxJR1p2ZFc1a0lHbHVJSFJvWlZ4dUlDb2dURWxEUlU1VFJTQm1hV3hsSUdsdUlIUm9aU0J5YjI5MElHUnBjbVZqZEc5eWVTQnZaaUIwYUdseklITnZkWEpqWlNCMGNtVmxMaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHZHlZVzUwWEc0Z0tpQnZaaUJ3WVhSbGJuUWdjbWxuYUhSeklHTmhiaUJpWlNCbWIzVnVaQ0JwYmlCMGFHVWdVRUZVUlU1VVV5Qm1hV3hsSUdsdUlIUm9aU0J6WVcxbElHUnBjbVZqZEc5eWVTNWNiaUFxWEc0Z0tpQkFjSEp2ZG1sa1pYTk5iMlIxYkdVZ2MyaHZkV3hrVlhCa1lYUmxVbVZoWTNSRGIyMXdiMjVsYm5SY2JpQXFJRUIwZVhCbFkyaGxZMnR6SUhOMFlYUnBZeTF2Ym14NVhHNGdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkMkZ5Ym1sdVp5QTlJSEpsY1hWcGNtVW9YQ0l1TDNkaGNtNXBibWRjSWlrN1hHNWNiaThxS2x4dUlDb2dSMmwyWlc0Z1lTQmdjSEpsZGtWc1pXMWxiblJnSUdGdVpDQmdibVY0ZEVWc1pXMWxiblJnTENCa1pYUmxjbTFwYm1WeklHbG1JSFJvWlNCbGVHbHpkR2x1WjF4dUlDb2dhVzV6ZEdGdVkyVWdjMmh2ZFd4a0lHSmxJSFZ3WkdGMFpXUWdZWE1nYjNCd2IzTmxaQ0IwYnlCaVpXbHVaeUJrWlhOMGNtOTVaV1FnYjNJZ2NtVndiR0ZqWldRZ1lua2dZU0J1WlhkY2JpQXFJR2x1YzNSaGJtTmxMaUJDYjNSb0lHRnlaM1Z0Wlc1MGN5QmhjbVVnWld4bGJXVnVkSE11SUZSb2FYTWdaVzV6ZFhKbGN5QjBhR0YwSUhSb2FYTWdiRzluYVdNZ1kyRnVYRzRnS2lCdmNHVnlZWFJsSUc5dUlITjBZWFJsYkdWemN5QjBjbVZsY3lCM2FYUm9iM1YwSUdGdWVTQmlZV05yYVc1bklHbHVjM1JoYm1ObExseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1AyOWlhbVZqZEgwZ2NISmxka1ZzWlcxbGJuUmNiaUFxSUVCd1lYSmhiU0I3UDI5aWFtVmpkSDBnYm1WNGRFVnNaVzFsYm5SY2JpQXFJRUJ5WlhSMWNtNGdlMkp2YjJ4bFlXNTlJRlJ5ZFdVZ2FXWWdkR2hsSUdWNGFYTjBhVzVuSUdsdWMzUmhibU5sSUhOb2IzVnNaQ0JpWlNCMWNHUmhkR1ZrTGx4dUlDb2dRSEJ5YjNSbFkzUmxaRnh1SUNvdlhHNW1kVzVqZEdsdmJpQnphRzkxYkdSVmNHUmhkR1ZTWldGamRFTnZiWEJ2Ym1WdWRDaHdjbVYyUld4bGJXVnVkQ3dnYm1WNGRFVnNaVzFsYm5RcElIdGNiaUFnYVdZZ0tIQnlaWFpGYkdWdFpXNTBJQ0U5SUc1MWJHd2dKaVlnYm1WNGRFVnNaVzFsYm5RZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUhaaGNpQndjbVYyVkhsd1pTQTlJSFI1Y0dWdlppQndjbVYyUld4bGJXVnVkRHRjYmlBZ0lDQjJZWElnYm1WNGRGUjVjR1VnUFNCMGVYQmxiMllnYm1WNGRFVnNaVzFsYm5RN1hHNGdJQ0FnYVdZZ0tIQnlaWFpVZVhCbElEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCd2NtVjJWSGx3WlNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9ibVY0ZEZSNWNHVWdQVDA5SUNkemRISnBibWNuSUh4OElHNWxlSFJVZVhCbElEMDlQU0FuYm5WdFltVnlKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2h1WlhoMFZIbHdaU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWmNiaUFnSUNBZ0lDQWdJQ0J3Y21WMlJXeGxiV1Z1ZEM1MGVYQmxJRDA5UFNCdVpYaDBSV3hsYldWdWRDNTBlWEJsSUNZbVhHNGdJQ0FnSUNBZ0lDQWdjSEpsZGtWc1pXMWxiblF1YTJWNUlEMDlQU0J1WlhoMFJXeGxiV1Z1ZEM1clpYa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOTNibVZ5YzAxaGRHTm9JRDBnY0hKbGRrVnNaVzFsYm5RdVgyOTNibVZ5SUQwOVBTQnVaWGgwUld4bGJXVnVkQzVmYjNkdVpYSTdYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtVjJUbUZ0WlNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVaWGgwVG1GdFpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhoMFJHbHpjR3hoZVU1aGJXVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnBaaUFvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnZkMjVsY25OTllYUmphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCeVpYWkZiR1Z0Wlc1MExsOXZkMjVsY2lBaFBTQnVkV3hzSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxka1ZzWlcxbGJuUXVYMjkzYm1WeUxtZGxkRkIxWW14cFkwbHVjM1JoYm1ObEtDa2dJVDBnYm5Wc2JDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhaRmJHVnRaVzUwTGw5dmQyNWxjaTVuWlhSUWRXSnNhV05KYm5OMFlXNWpaU2dwTG1OdmJuTjBjblZqZEc5eUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxkazVoYldVZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFpGYkdWdFpXNTBMbDl2ZDI1bGNpNW5aWFJRZFdKc2FXTkpibk4wWVc1alpTZ3BMbU52Ym5OMGNuVmpkRzl5TG1ScGMzQnNZWGxPWVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGVIUkZiR1Z0Wlc1MExsOXZkMjVsY2lBaFBTQnVkV3hzSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRVZzWlcxbGJuUXVYMjkzYm1WeUxtZGxkRkIxWW14cFkwbHVjM1JoYm1ObEtDa2dJVDBnYm5Wc2JDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZUhSRmJHVnRaVzUwTGw5dmQyNWxjaTVuWlhSUWRXSnNhV05KYm5OMFlXNWpaU2dwTG1OdmJuTjBjblZqZEc5eUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRTVoYldVZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJGYkdWdFpXNTBMbDl2ZDI1bGNpNW5aWFJRZFdKc2FXTkpibk4wWVc1alpTZ3BMbU52Ym5OMGNuVmpkRzl5TG1ScGMzQnNZWGxPWVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGVIUkZiR1Z0Wlc1MExuUjVjR1VnSVQwZ2JuVnNiQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUkZiR1Z0Wlc1MExuUjVjR1V1WkdsemNHeGhlVTVoYldVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBSR2x6Y0d4aGVVNWhiV1VnUFNCdVpYaDBSV3hsYldWdWRDNTBlWEJsTG1ScGMzQnNZWGxPWVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1bGVIUkZiR1Z0Wlc1MExuUjVjR1VnSVQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnYm1WNGRFVnNaVzFsYm5RdWRIbHdaU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRVJwYzNCc1lYbE9ZVzFsSUQwZ2JtVjRkRVZzWlcxbGJuUXVkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdibVY0ZEVWc1pXMWxiblF1ZEhsd1pTQWhQVDBnSjNOMGNtbHVaeWNnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBSV3hsYldWdWRDNTBlWEJsSUQwOVBTQW5hVzV3ZFhRbklIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVY0ZEVWc1pXMWxiblF1ZEhsd1pTQTlQVDBnSjNSbGVIUmhjbVZoSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9LSEJ5WlhaRmJHVnRaVzUwTGw5dmQyNWxjaUFoUFNCdWRXeHNJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJSV3hsYldWdWRDNWZiM2R1WlhJdVgybHpUM2R1WlhKT1pXTmxjM05oY25rZ1BUMDlJR1poYkhObEtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0c1bGVIUkZiR1Z0Wlc1MExsOXZkMjVsY2lBaFBTQnVkV3hzSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwUld4bGJXVnVkQzVmYjNkdVpYSXVYMmx6VDNkdVpYSk9aV05sYzNOaGNua2dQVDA5SUdaaGJITmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbVYyUld4bGJXVnVkQzVmYjNkdVpYSWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRrVnNaVzFsYm5RdVgyOTNibVZ5TGw5cGMwOTNibVZ5VG1WalpYTnpZWEo1SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWxlSFJGYkdWdFpXNTBMbDl2ZDI1bGNpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFJXeGxiV1Z1ZEM1ZmIzZHVaWEl1WDJselQzZHVaWEpPWldObGMzTmhjbmtnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWENKd2NtOWtkV04wYVc5dVhDSWdJVDA5SUhCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEOGdkMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKendsY3lBdlBpQnBjeUJpWldsdVp5QnlaVzVrWlhKbFpDQmllU0JpYjNSb0lDVnpJR0Z1WkNBbGN5QjFjMmx1WnlCMGFHVWdjMkZ0WlNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RyWlhrZ0tDVnpLU0JwYmlCMGFHVWdjMkZ0WlNCd2JHRmpaUzRnUTNWeWNtVnVkR3g1TENCMGFHbHpJRzFsWVc1eklIUm9ZWFFnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5kR2hsZVNCa2IyNWNYQ2QwSUhCeVpYTmxjblpsSUhOMFlYUmxMaUJVYUdseklHSmxhR0YyYVc5eUlITm9iM1ZzWkNCaVpTQjJaWEo1SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM0poY21VZ2MyOGdkMlZjWENkeVpTQmpiMjV6YVdSbGNtbHVaeUJrWlhCeVpXTmhkR2x1WnlCcGRDNGdVR3hsWVhObElHTnZiblJoWTNRZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuZEdobElGSmxZV04wSUhSbFlXMGdZVzVrSUdWNGNHeGhhVzRnZVc5MWNpQjFjMlVnWTJGelpTQnpieUIwYUdGMElIZGxJR05oYmlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2QwWVd0bElIUm9ZWFFnYVc1MGJ5QmpiMjV6YVdSbGNtRjBhVzl1TGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwUkdsemNHeGhlVTVoYldVZ2ZId2dKMVZ1YTI1dmQyNGdRMjl0Y0c5dVpXNTBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWk9ZVzFsSUh4OElDZGJWVzVyYm05M2JsMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRFNWhiV1VnZkh3Z0oxdFZibXR1YjNkdVhTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y21WMlJXeGxiV1Z1ZEM1clpYbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkzYm1WeWMwMWhkR05vTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYzJodmRXeGtWWEJrWVhSbFVtVmhZM1JEYjIxd2IyNWxiblE3WEc0aVhYMD0iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuZnVuY3Rpb24gdG9BcnJheShvYmope3ZhciBsZW5ndGg9b2JqLmxlbmd0aDtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2ludmFyaWFudCghQXJyYXkuaXNBcnJheShvYmopJiYoXCJvYmplY3RcIj09dHlwZW9mIG9ianx8XCJmdW5jdGlvblwiPT10eXBlb2Ygb2JqKSxcInRvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkXCIpOmludmFyaWFudCghQXJyYXkuaXNBcnJheShvYmopJiYoXCJvYmplY3RcIj09dHlwZW9mIG9ianx8XCJmdW5jdGlvblwiPT10eXBlb2Ygb2JqKSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoXCJudW1iZXJcIj09dHlwZW9mIGxlbmd0aCxcInRvQXJyYXk6IE9iamVjdCBuZWVkcyBhIGxlbmd0aCBwcm9wZXJ0eVwiKTppbnZhcmlhbnQoXCJudW1iZXJcIj09dHlwZW9mIGxlbmd0aCksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoMD09PWxlbmd0aHx8bGVuZ3RoLTEgaW4gb2JqLFwidG9BcnJheTogT2JqZWN0IHNob3VsZCBoYXZlIGtleXMgZm9yIGluZGljZXNcIik6aW52YXJpYW50KDA9PT1sZW5ndGh8fGxlbmd0aC0xIGluIG9iaiksb2JqLmhhc093blByb3BlcnR5KXRyeXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKX1jYXRjaChlKXt9Zm9yKHZhciByZXQ9QXJyYXkobGVuZ3RoKSxpaT0wO2xlbmd0aD5paTtpaSsrKXJldFtpaV09b2JqW2lpXTtyZXR1cm4gcmV0fXZhciBpbnZhcmlhbnQ9cmVxdWlyZShcIi4vaW52YXJpYW50XCIpO21vZHVsZS5leHBvcnRzPXRvQXJyYXk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZkRzlCY25KaGVTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCZFVKQkxGRkJRVk1zVTBGQlVTeExRVU5tTEVkQlFVa3NVVUZCVXl4SlFVRkpMRTFCTUVKcVFpeEpRWFJDUXl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFhRVU4wUXl4TlFVRk5MRkZCUVZFc1QwRkRReXhuUWtGQlVpeE5RVUZ0UXl4clFrRkJVaXhOUVVOdVF5eDFRMEZEUlN4WFFVRlhMRTFCUVUwc1VVRkJVU3hQUVVOaUxHZENRVUZTTEUxQlFXMURMR3RDUVVGU0xFOUJSV3hETEdWQlFXbENMRkZCUVZFc1NVRkJTU3hUUVVGWExGVkJRM0pDTEdkQ1FVRllMRkZCUTFBc01rTkJRMFVzVlVGQk5FSXNaMEpCUVZnc1UwRkZjRUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1ZVRkROVUlzU1VGQldDeFJRVU5ETEU5QlFWTXNTVUZCVFN4TFFVTm9RaXhuUkVGRFJTeFZRVUZ4UWl4SlFVRllMRkZCUTJJc1QwRkJVeXhKUVVGTkxFMUJTMW9zU1VGQlNTeGxRVU5PTEVsQlEwVXNUVUZCVHl4UFFVRk5MRlZCUVZVc1RVRkJUU3hMUVVGTExFdEJRMnhETEUxQlFVOHNTVUZSV0N4SlFVRkxMRWRCUkVRc1MwRkJUU3hOUVVGTkxGRkJRMUFzUjBGQlN5eEZRVUZSTEU5QlFVd3NSMEZCWVN4TFFVTTFRaXhKUVVGSkxFbEJRVTBzU1VGQlNTeEhRVVZvUWl4UFFVRlBMRXRCY0VSVUxFZEJRVWtzVjBGQldTeFJRVUZSTEdOQmRVUjRRaXhSUVVGUExGRkJRVlVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNVFF0TWpBeE5Td2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FsTkVMWE4wZVd4bElHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdUlFRnVJR0ZrWkdsMGFXOXVZV3dnWjNKaGJuUmNiaUFxSUc5bUlIQmhkR1Z1ZENCeWFXZG9kSE1nWTJGdUlHSmxJR1p2ZFc1a0lHbHVJSFJvWlNCUVFWUkZUbFJUSUdacGJHVWdhVzRnZEdobElITmhiV1VnWkdseVpXTjBiM0o1TGx4dUlDcGNiaUFxSUVCd2NtOTJhV1JsYzAxdlpIVnNaU0IwYjBGeWNtRjVYRzRnS2lCQWRIbHdaV05vWldOcmMxeHVJQ292WEc1Y2JuWmhjaUJwYm5aaGNtbGhiblFnUFNCeVpYRjFhWEpsS0Z3aUxpOXBiblpoY21saGJuUmNJaWs3WEc1Y2JpOHFLbHh1SUNvZ1EyOXVkbVZ5ZENCaGNuSmhlUzFzYVd0bElHOWlhbVZqZEhNZ2RHOGdZWEp5WVhsekxseHVJQ3BjYmlBcUlGUm9hWE1nUVZCSklHRnpjM1Z0WlhNZ2RHaGxJR05oYkd4bGNpQnJibTkzY3lCMGFHVWdZMjl1ZEdWdWRITWdiMllnZEdobElHUmhkR0VnZEhsd1pTNGdSbTl5SUd4bGMzTmNiaUFxSUhkbGJHd2daR1ZtYVc1bFpDQnBibkIxZEhNZ2RYTmxJR055WldGMFpVRnljbUY1Um5KdmJVMXBlR1ZrTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmR1oxYm1OMGFXOXVmR1pwYkdWc2FYTjBmU0J2WW1wY2JpQXFJRUJ5WlhSMWNtNGdlMkZ5Y21GNWZWeHVJQ292WEc1bWRXNWpkR2x2YmlCMGIwRnljbUY1S0c5aWFpa2dlMXh1SUNCMllYSWdiR1Z1WjNSb0lEMGdiMkpxTG14bGJtZDBhRHRjYmx4dUlDQXZMeUJUYjIxbElHSnliM2R6WlNCaWRXbHNkR2x1SUc5aWFtVmpkSE1nWTJGdUlISmxjRzl5ZENCMGVYQmxiMllnSjJaMWJtTjBhVzl1SnlBb1pTNW5MaUJPYjJSbFRHbHpkQ0JwYmx4dUlDQXZMeUJ2YkdRZ2RtVnljMmx2Ym5NZ2IyWWdVMkZtWVhKcEtTNWNiaUFnS0Z3aWNISnZaSFZqZEdsdmJsd2lJQ0U5UFNCd2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQS9JR2x1ZG1GeWFXRnVkQ2hjYmlBZ0lDQWhRWEp5WVhrdWFYTkJjbkpoZVNodlltb3BJQ1ltWEc0Z0lDQWdLSFI1Y0dWdlppQnZZbW9nUFQwOUlDZHZZbXBsWTNRbklIeDhJSFI1Y0dWdlppQnZZbW9nUFQwOUlDZG1kVzVqZEdsdmJpY3BMRnh1SUNBZ0lDZDBiMEZ5Y21GNU9pQkJjbkpoZVMxc2FXdGxJRzlpYW1WamRDQmxlSEJsWTNSbFpDZGNiaUFnS1NBNklHbHVkbUZ5YVdGdWRDZ2hRWEp5WVhrdWFYTkJjbkpoZVNodlltb3BJQ1ltWEc0Z0lDaDBlWEJsYjJZZ2IySnFJRDA5UFNBbmIySnFaV04wSnlCOGZDQjBlWEJsYjJZZ2IySnFJRDA5UFNBblpuVnVZM1JwYjI0bktTa3BPMXh1WEc0Z0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCcGJuWmhjbWxoYm5Rb1hHNGdJQ0FnZEhsd1pXOW1JR3hsYm1kMGFDQTlQVDBnSjI1MWJXSmxjaWNzWEc0Z0lDQWdKM1J2UVhKeVlYazZJRTlpYW1WamRDQnVaV1ZrY3lCaElHeGxibWQwYUNCd2NtOXdaWEowZVNkY2JpQWdLU0E2SUdsdWRtRnlhV0Z1ZENoMGVYQmxiMllnYkdWdVozUm9JRDA5UFNBbmJuVnRZbVZ5SnlrcE8xeHVYRzRnSUNoY0luQnliMlIxWTNScGIyNWNJaUFoUFQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQeUJwYm5aaGNtbGhiblFvWEc0Z0lDQWdiR1Z1WjNSb0lEMDlQU0F3SUh4OFhHNGdJQ0FnS0d4bGJtZDBhQ0F0SURFcElHbHVJRzlpYWl4Y2JpQWdJQ0FuZEc5QmNuSmhlVG9nVDJKcVpXTjBJSE5vYjNWc1pDQm9ZWFpsSUd0bGVYTWdabTl5SUdsdVpHbGpaWE1uWEc0Z0lDa2dPaUJwYm5aaGNtbGhiblFvYkdWdVozUm9JRDA5UFNBd0lIeDhYRzRnSUNoc1pXNW5kR2dnTFNBeEtTQnBiaUJ2WW1vcEtUdGNibHh1SUNBdkx5QlBiR1FnU1VVZ1pHOWxjMjRuZENCbmFYWmxJR052Ykd4bFkzUnBiMjV6SUdGalkyVnpjeUIwYnlCb1lYTlBkMjVRY205d1pYSjBlUzRnUVhOemRXMWxJR2x1Y0hWMGMxeHVJQ0F2THlCM2FYUm9iM1YwSUcxbGRHaHZaQ0IzYVd4c0lIUm9jbTkzSUdSMWNtbHVaeUIwYUdVZ2MyeHBZMlVnWTJGc2JDQmhibVFnYzJ0cGNDQnpkSEpoYVdkb2RDQjBieUIwYUdWY2JpQWdMeThnWm1Gc2JHSmhZMnN1WEc0Z0lHbG1JQ2h2WW1vdWFHRnpUM2R1VUhKdmNHVnlkSGtwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0c5aWFpazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdMeThnU1VVZ1BDQTVJR1J2WlhNZ2JtOTBJSE4xY0hCdmNuUWdRWEp5WVhramMyeHBZMlVnYjI0Z1kyOXNiR1ZqZEdsdmJuTWdiMkpxWldOMGMxeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRVpoYkd3Z1ltRmpheUIwYnlCamIzQjVhVzVuSUd0bGVTQmllU0JyWlhrdUlGUm9hWE1nWVhOemRXMWxjeUJoYkd3Z2EyVjVjeUJvWVhabElHRWdkbUZzZFdVc1hHNGdJQzh2SUhOdklIZHBiR3dnYm05MElIQnlaWE5sY25abElITndZWEp6Wld4NUlIQnZjSFZzWVhSbFpDQnBibkIxZEhNdVhHNGdJSFpoY2lCeVpYUWdQU0JCY25KaGVTaHNaVzVuZEdncE8xeHVJQ0JtYjNJZ0tIWmhjaUJwYVNBOUlEQTdJR2xwSUR3Z2JHVnVaM1JvT3lCcGFTc3JLU0I3WEc0Z0lDQWdjbVYwVzJscFhTQTlJRzlpYWx0cGFWMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxkRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjBiMEZ5Y21GNU8xeHVJbDE5IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIHVzZXJQcm92aWRlZEtleUVzY2FwZXIobWF0Y2gpe3JldHVybiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwW21hdGNoXX1mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LGluZGV4KXtyZXR1cm4gY29tcG9uZW50JiZudWxsIT1jb21wb25lbnQua2V5P3dyYXBVc2VyUHJvdmlkZWRLZXkoY29tcG9uZW50LmtleSk6aW5kZXgudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KXtyZXR1cm4oXCJcIit0ZXh0KS5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LHVzZXJQcm92aWRlZEtleUVzY2FwZXIpfWZ1bmN0aW9uIHdyYXBVc2VyUHJvdmlkZWRLZXkoa2V5KXtyZXR1cm5cIiRcIitlc2NhcGVVc2VyUHJvdmlkZWRLZXkoa2V5KX1mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbixuYW1lU29GYXIsaW5kZXhTb0ZhcixjYWxsYmFjayx0cmF2ZXJzZUNvbnRleHQpe3ZhciB0eXBlPXR5cGVvZiBjaGlsZHJlbjtpZigoXCJ1bmRlZmluZWRcIj09PXR5cGV8fFwiYm9vbGVhblwiPT09dHlwZSkmJihjaGlsZHJlbj1udWxsKSxudWxsPT09Y2hpbGRyZW58fFwic3RyaW5nXCI9PT10eXBlfHxcIm51bWJlclwiPT09dHlwZXx8UmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSlyZXR1cm4gY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LGNoaWxkcmVuLFwiXCI9PT1uYW1lU29GYXI/U0VQQVJBVE9SK2dldENvbXBvbmVudEtleShjaGlsZHJlbiwwKTpuYW1lU29GYXIsaW5kZXhTb0ZhciksMTt2YXIgY2hpbGQsbmV4dE5hbWUsbmV4dEluZGV4LHN1YnRyZWVDb3VudD0wO2lmKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKWZvcih2YXIgaT0wO2k8Y2hpbGRyZW4ubGVuZ3RoO2krKyljaGlsZD1jaGlsZHJlbltpXSxuZXh0TmFtZT0oXCJcIiE9PW5hbWVTb0Zhcj9uYW1lU29GYXIrU1VCU0VQQVJBVE9SOlNFUEFSQVRPUikrZ2V0Q29tcG9uZW50S2V5KGNoaWxkLGkpLG5leHRJbmRleD1pbmRleFNvRmFyK3N1YnRyZWVDb3VudCxzdWJ0cmVlQ291bnQrPXRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLG5leHROYW1lLG5leHRJbmRleCxjYWxsYmFjayx0cmF2ZXJzZUNvbnRleHQpO2Vsc2V7dmFyIGl0ZXJhdG9yRm49Z2V0SXRlcmF0b3JGbihjaGlsZHJlbik7aWYoaXRlcmF0b3JGbil7dmFyIHN0ZXAsaXRlcmF0b3I9aXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtpZihpdGVyYXRvckZuIT09Y2hpbGRyZW4uZW50cmllcylmb3IodmFyIGlpPTA7IShzdGVwPWl0ZXJhdG9yLm5leHQoKSkuZG9uZTspY2hpbGQ9c3RlcC52YWx1ZSxuZXh0TmFtZT0oXCJcIiE9PW5hbWVTb0Zhcj9uYW1lU29GYXIrU1VCU0VQQVJBVE9SOlNFUEFSQVRPUikrZ2V0Q29tcG9uZW50S2V5KGNoaWxkLGlpKyspLG5leHRJbmRleD1pbmRleFNvRmFyK3N1YnRyZWVDb3VudCxzdWJ0cmVlQ291bnQrPXRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLG5leHROYW1lLG5leHRJbmRleCxjYWxsYmFjayx0cmF2ZXJzZUNvbnRleHQpO2Vsc2UgZm9yKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3dhcm5pbmcoZGlkV2FybkFib3V0TWFwcyxcIlVzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHlldCBmdWxseSBzdXBwb3J0ZWQuIEl0IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhIHNlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLlwiKTpudWxsLGRpZFdhcm5BYm91dE1hcHM9ITApOyEoc3RlcD1pdGVyYXRvci5uZXh0KCkpLmRvbmU7KXt2YXIgZW50cnk9c3RlcC52YWx1ZTtlbnRyeSYmKGNoaWxkPWVudHJ5WzFdLG5leHROYW1lPShcIlwiIT09bmFtZVNvRmFyP25hbWVTb0ZhcitTVUJTRVBBUkFUT1I6U0VQQVJBVE9SKSt3cmFwVXNlclByb3ZpZGVkS2V5KGVudHJ5WzBdKStTVUJTRVBBUkFUT1IrZ2V0Q29tcG9uZW50S2V5KGNoaWxkLDApLG5leHRJbmRleD1pbmRleFNvRmFyK3N1YnRyZWVDb3VudCxzdWJ0cmVlQ291bnQrPXRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLG5leHROYW1lLG5leHRJbmRleCxjYWxsYmFjayx0cmF2ZXJzZUNvbnRleHQpKX19ZWxzZSBpZihcIm9iamVjdFwiPT09dHlwZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9pbnZhcmlhbnQoMSE9PWNoaWxkcmVuLm5vZGVUeXBlLFwidHJhdmVyc2VBbGxDaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCBhbiBpbnZhbGlkIGNoaWxkOyBET00gZWxlbWVudHMgYXJlIG5vdCB2YWxpZCBjaGlsZHJlbiBvZiBSZWFjdCBjb21wb25lbnRzLlwiKTppbnZhcmlhbnQoMSE9PWNoaWxkcmVuLm5vZGVUeXBlKTt2YXIgZnJhZ21lbnQ9UmVhY3RGcmFnbWVudC5leHRyYWN0KGNoaWxkcmVuKTtmb3IodmFyIGtleSBpbiBmcmFnbWVudClmcmFnbWVudC5oYXNPd25Qcm9wZXJ0eShrZXkpJiYoY2hpbGQ9ZnJhZ21lbnRba2V5XSxuZXh0TmFtZT0oXCJcIiE9PW5hbWVTb0Zhcj9uYW1lU29GYXIrU1VCU0VQQVJBVE9SOlNFUEFSQVRPUikrd3JhcFVzZXJQcm92aWRlZEtleShrZXkpK1NVQlNFUEFSQVRPUitnZXRDb21wb25lbnRLZXkoY2hpbGQsMCksbmV4dEluZGV4PWluZGV4U29GYXIrc3VidHJlZUNvdW50LHN1YnRyZWVDb3VudCs9dHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsbmV4dE5hbWUsbmV4dEluZGV4LGNhbGxiYWNrLHRyYXZlcnNlQ29udGV4dCkpfX1yZXR1cm4gc3VidHJlZUNvdW50fWZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sY2FsbGJhY2ssdHJhdmVyc2VDb250ZXh0KXtyZXR1cm4gbnVsbD09Y2hpbGRyZW4/MDp0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbixcIlwiLDAsY2FsbGJhY2ssdHJhdmVyc2VDb250ZXh0KX12YXIgUmVhY3RFbGVtZW50PXJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKSxSZWFjdEZyYWdtZW50PXJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIiksUmVhY3RJbnN0YW5jZUhhbmRsZXM9cmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIiksZ2V0SXRlcmF0b3JGbj1yZXF1aXJlKFwiLi9nZXRJdGVyYXRvckZuXCIpLGludmFyaWFudD1yZXF1aXJlKFwiLi9pbnZhcmlhbnRcIiksd2FybmluZz1yZXF1aXJlKFwiLi93YXJuaW5nXCIpLFNFUEFSQVRPUj1SZWFjdEluc3RhbmNlSGFuZGxlcy5TRVBBUkFUT1IsU1VCU0VQQVJBVE9SPVwiOlwiLHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXA9e1wiPVwiOlwiPTBcIixcIi5cIjpcIj0xXCIsXCI6XCI6XCI9MlwifSx1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleD0vWz0uOl0vZyxkaWRXYXJuQWJvdXRNYXBzPSExO21vZHVsZS5leHBvcnRzPXRyYXZlcnNlQWxsQ2hpbGRyZW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl6YVcxdmJtaHZiRzFsY3k5VGFYUmxjeTl3WlhKemIyNWhiQzlqYjJ4dmNpMTNiM0prTDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZqZEM5c2FXSXZkSEpoZG1WeWMyVkJiR3hEYUdsc1pISmxiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlYwRXNXVUUwUWtFc1UwRkJVeXgzUWtGQmRVSXNUMEZET1VJc1RVRkJUeXc0UWtGQk5rSXNUMEZWZEVNc1VVRkJVeXhwUWtGQlowSXNWVUZCVnl4UFFVTnNReXhOUVVGSkxGbEJRVGhDTEUxQlFXcENMRlZCUVZVc1NVRkZiRUlzYjBKQlFXOUNMRlZCUVZVc1MwRkhhRU1zVFVGQlRTeFRRVUZUTEVsQlUzaENMRkZCUVZNc2RVSkJRWE5DTEUxQlF6ZENMRTlCUVZFc1IwRkJTeXhOUVVGTkxGRkJRMnBDTERKQ1FVTkJMSGRDUVZkS0xGRkJRVk1zY1VKQlFXOUNMRXRCUXpOQ0xFMUJRVThzU1VGQlRTeHpRa0ZCYzBJc1MwRlpja01zVVVGQlV5eDVRa0ZEVUN4VFFVTkJMRlZCUTBFc1YwRkRRU3hUUVVOQkxHbENRVVZCTEVkQlFVa3NXVUZCWXl4VFFVOXNRaXhMUVV4aExHTkJRVlFzVFVGQmFVTXNXVUZCVkN4UlFVVXhRaXhUUVVGWExFMUJSMGtzVDBGQllpeFZRVU5UTEZkQlFWUXNUVUZEVXl4WFFVRlVMRTFCUTBFc1lVRkJZU3hsUVVGbExGVkJVemxDTEUxQlVrRXNWVUZEUlN4blFrRkRRU3hUUVVkakxFdEJRV1FzVlVGQmJVSXNWVUZCV1N4blFrRkJaMElzVTBGQlZTeEhRVUZMTEZWQlF6bEVMRmxCUlVzc1EwRkhWQ3hKUVVGSkxFOUJRVThzVTBGQlZTeFZRVU5xUWl4aFFVRmxMRU5CUlc1Q0xFbEJRVWtzVFVGQlRTeFJRVUZSTEZWQlEyaENMRWxCUVVzc1IwRkJTU3hIUVVGSkxFVkJRVWNzUlVGQlNTeFRRVUZUTEU5QlFWRXNTVUZEYmtNc1RVRkJVU3hUUVVGVExFZEJRMnBDTEZWQlEybENMRXRCUVdRc1ZVRkJiVUlzVlVGQldTeGhRVUZsTEZkQlF5OURMR2RDUVVGblFpeE5RVUZQTEVkQlJYcENMRlZCUVZrc1YwRkJZU3hoUVVONlFpeGpRVUZuUWl4M1FrRkRaQ3hOUVVOQkxGTkJRMEVzVlVGRFFTeFRRVU5CTEhGQ1FVZERMRU5CUTB3c1IwRkJTU3haUVVGaExHTkJRV01zVTBGREwwSXNTVUZCU1N4WFFVRlpMRU5CUTJRc1IwRkRTU3hOUVVSQkxGTkJRVmNzVjBGQlZ5eExRVUZMTEZOQlJTOUNMRWxCUVVrc1lVRkJaU3hUUVVGVExGRkJSVEZDTEVsQlJFRXNSMEZCU1N4SlFVRkxMRWxCUTBFc1MwRkJUeXhUUVVGVExGRkJRVkVzVFVGREwwSXNUVUZCVVN4TFFVRkxMRTFCUTJJc1ZVRkRhVUlzUzBGQlpDeFZRVUZ0UWl4VlFVRlpMR0ZCUVdVc1YwRkRMME1zWjBKQlFXZENMRTFCUVU4c1RVRkZla0lzVlVGQldTeFhRVUZoTEdGQlEzcENMR05CUVdkQ0xIZENRVU5rTEUxQlEwRXNVMEZEUVN4VlFVTkJMRk5CUTBFc2NVSkJZMG9zUzBGV1NTeGxRVUZwUWl4UlFVRlJMRWxCUVVrc1YwRkRPVUlzWlVGQmFVSXNVVUZCVVN4SlFVRkpMRk5CUVZjc1VVRkRka01zYVVKQlEwRXNLMHRCUjBVc1MwRkRTaXhyUWtGQmJVSXNTMEZIV2l4TFFVRlBMRk5CUVZNc1VVRkJVU3hOUVVGTkxFTkJRM0pETEVkQlFVa3NUMEZCVVN4TFFVRkxMRXRCUTJJc1UwRkRSaXhOUVVGUkxFMUJRVTBzUjBGRFpDeFZRVU5wUWl4TFFVRmtMRlZCUVcxQ0xGVkJRVmtzWVVGQlpTeFhRVU12UXl4dlFrRkJiMElzVFVGQlRTeEpRVUZOTEdGQlEyaERMR2RDUVVGblFpeE5RVUZQTEVkQlJYcENMRlZCUVZrc1YwRkJZU3hoUVVONlFpeGpRVUZuUWl4M1FrRkRaQ3hOUVVOQkxGTkJRMEVzVlVGRFFTeFRRVU5CTEhWQ1FVdElMRWxCUVdFc1YwRkJWQ3hMUVVGdFFpeERRVU16UWl4bFFVRnBRaXhSUVVGUkxFbEJRVWtzVTBGQlZ5eFZRVU5xUWl4SlFVRjBRaXhUUVVGVExGTkJRMVFzYjBoQlJVVXNWVUZCWjBNc1NVRkJkRUlzVTBGQlV5eFRRVU4yUWl4SlFVRkpMRlZCUVZjc1kwRkJZeXhSUVVGUkxGTkJRM0pETEV0QlFVc3NSMEZCU1N4UFFVRlBMRlZCUTFZc1UwRkJVeXhsUVVGbExFOUJRekZDTEUxQlFWRXNVMEZCVXl4TFFVTnFRaXhWUVVOcFFpeExRVUZrTEZWQlFXMUNMRlZCUVZrc1lVRkJaU3hYUVVNdlF5eHZRa0ZCYjBJc1MwRkJUeXhoUVVNelFpeG5Ra0ZCWjBJc1RVRkJUeXhIUVVWNlFpeFZRVUZaTEZkQlFXRXNZVUZEZWtJc1kwRkJaMElzZDBKQlEyUXNUVUZEUVN4VFFVTkJMRlZCUTBFc1UwRkRRU3h0UWtGUFZpeE5RVUZQTEdOQmJVSlVMRkZCUVZNc2NVSkJRVzlDTEZOQlFWVXNVMEZCVlN4cFFrRkRMME1zVFVGQlowSXNUMEZCV2l4VFFVTkxMRVZCUjBZc2QwSkJRWGRDTEZOQlFWVXNSMEZCU1N4RlFVRkhMRk5CUVZVc2FVSkJlRTgxUkN4SFFVRkpMR05CUVdVc1VVRkJVU3hyUWtGRGRrSXNZMEZCWjBJc1VVRkJVU3h0UWtGRGVFSXNjVUpCUVhWQ0xGRkJRVkVzTUVKQlJTOUNMR05CUVdkQ0xGRkJRVkVzYlVKQlEzaENMRlZCUVZrc1VVRkJVU3hsUVVOd1FpeFJRVUZWTEZGQlFWRXNZVUZGYkVJc1ZVRkJXU3h4UWtGQmNVSXNWVUZEYWtNc1lVRkJaU3hKUVU5bUxEaENRVU5HTEVsQlFVc3NTMEZEVEN4SlFVRkxMRXRCUTB3c1NVRkJTeXhOUVVkSUxESkNRVUUyUWl4VFFVVTNRaXhyUWtGQmJVSXNRMEZ0VG5aQ0xGRkJRVThzVVVGQlZTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeE15MHlNREUxTENCR1lXTmxZbTl2YXl3Z1NXNWpMbHh1SUNvZ1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaUFxWEc0Z0tpQlVhR2x6SUhOdmRYSmpaU0JqYjJSbElHbHpJR3hwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JDVTBRdGMzUjViR1VnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzRnUVc0Z1lXUmthWFJwYjI1aGJDQm5jbUZ1ZEZ4dUlDb2diMllnY0dGMFpXNTBJSEpwWjJoMGN5QmpZVzRnWW1VZ1ptOTFibVFnYVc0Z2RHaGxJRkJCVkVWT1ZGTWdabWxzWlNCcGJpQjBhR1VnYzJGdFpTQmthWEpsWTNSdmNua3VYRzRnS2x4dUlDb2dRSEJ5YjNacFpHVnpUVzlrZFd4bElIUnlZWFpsY25ObFFXeHNRMmhwYkdSeVpXNWNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJTWldGamRFVnNaVzFsYm5RZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFVnNaVzFsYm5SY0lpazdYRzUyWVhJZ1VtVmhZM1JHY21GbmJXVnVkQ0E5SUhKbGNYVnBjbVVvWENJdUwxSmxZV04wUm5KaFoyMWxiblJjSWlrN1hHNTJZWElnVW1WaFkzUkpibk4wWVc1alpVaGhibVJzWlhNZ1BTQnlaWEYxYVhKbEtGd2lMaTlTWldGamRFbHVjM1JoYm1ObFNHRnVaR3hsYzF3aUtUdGNibHh1ZG1GeUlHZGxkRWwwWlhKaGRHOXlSbTRnUFNCeVpYRjFhWEpsS0Z3aUxpOW5aWFJKZEdWeVlYUnZja1p1WENJcE8xeHVkbUZ5SUdsdWRtRnlhV0Z1ZENBOUlISmxjWFZwY21Vb1hDSXVMMmx1ZG1GeWFXRnVkRndpS1R0Y2JuWmhjaUIzWVhKdWFXNW5JRDBnY21WeGRXbHlaU2hjSWk0dmQyRnlibWx1WjF3aUtUdGNibHh1ZG1GeUlGTkZVRUZTUVZSUFVpQTlJRkpsWVdOMFNXNXpkR0Z1WTJWSVlXNWtiR1Z6TGxORlVFRlNRVlJQVWp0Y2JuWmhjaUJUVlVKVFJWQkJVa0ZVVDFJZ1BTQW5PaWM3WEc1Y2JpOHFLbHh1SUNvZ1ZFOUVUem9nVkdWemRDQjBhR0YwSUdFZ2MybHVaMnhsSUdOb2FXeGtJR0Z1WkNCaGJpQmhjbkpoZVNCM2FYUm9JRzl1WlNCcGRHVnRJR2hoZG1VZ2RHaGxJSE5oYldVZ2EyVjVYRzRnS2lCd1lYUjBaWEp1TGx4dUlDb3ZYRzVjYm5aaGNpQjFjMlZ5VUhKdmRtbGtaV1JMWlhsRmMyTmhjR1Z5VEc5dmEzVndJRDBnZTF4dUlDQW5QU2M2SUNjOU1DY3NYRzRnSUNjdUp6b2dKejB4Snl4Y2JpQWdKem9uT2lBblBUSW5YRzU5TzF4dVhHNTJZWElnZFhObGNsQnliM1pwWkdWa1MyVjVSWE5qWVhCbFVtVm5aWGdnUFNBdld6MHVPbDB2Wnp0Y2JseHVkbUZ5SUdScFpGZGhjbTVCWW05MWRFMWhjSE1nUFNCbVlXeHpaVHRjYmx4dVpuVnVZM1JwYjI0Z2RYTmxjbEJ5YjNacFpHVmtTMlY1UlhOallYQmxjaWh0WVhSamFDa2dlMXh1SUNCeVpYUjFjbTRnZFhObGNsQnliM1pwWkdWa1MyVjVSWE5qWVhCbGNreHZiMnQxY0Z0dFlYUmphRjA3WEc1OVhHNWNiaThxS2x4dUlDb2dSMlZ1WlhKaGRHVWdZU0JyWlhrZ2MzUnlhVzVuSUhSb1lYUWdhV1JsYm5ScFptbGxjeUJoSUdOdmJYQnZibVZ1ZENCM2FYUm9hVzRnWVNCelpYUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIc3FmU0JqYjIxd2IyNWxiblFnUVNCamIyMXdiMjVsYm5RZ2RHaGhkQ0JqYjNWc1pDQmpiMjUwWVdsdUlHRWdiV0Z1ZFdGc0lHdGxlUzVjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCcGJtUmxlQ0JKYm1SbGVDQjBhR0YwSUdseklIVnpaV1FnYVdZZ1lTQnRZVzUxWVd3Z2EyVjVJR2x6SUc1dmRDQndjbTkyYVdSbFpDNWNiaUFxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzFjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwUTI5dGNHOXVaVzUwUzJWNUtHTnZiWEJ2Ym1WdWRDd2dhVzVrWlhncElIdGNiaUFnYVdZZ0tHTnZiWEJ2Ym1WdWRDQW1KaUJqYjIxd2IyNWxiblF1YTJWNUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBdkx5QkZlSEJzYVdOcGRDQnJaWGxjYmlBZ0lDQnlaWFIxY200Z2QzSmhjRlZ6WlhKUWNtOTJhV1JsWkV0bGVTaGpiMjF3YjI1bGJuUXVhMlY1S1R0Y2JpQWdmVnh1SUNBdkx5QkpiWEJzYVdOcGRDQnJaWGtnWkdWMFpYSnRhVzVsWkNCaWVTQjBhR1VnYVc1a1pYZ2dhVzRnZEdobElITmxkRnh1SUNCeVpYUjFjbTRnYVc1a1pYZ3VkRzlUZEhKcGJtY29NellwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVZ6WTJGd1pTQmhJR052YlhCdmJtVnVkQ0JyWlhrZ2MyOGdkR2hoZENCcGRDQnBjeUJ6WVdabElIUnZJSFZ6WlNCcGJpQmhJSEpsWVdOMGFXUXVYRzRnS2x4dUlDb2dRSEJoY21GdElIc3FmU0JyWlhrZ1EyOXRjRzl1Wlc1MElHdGxlU0IwYnlCaVpTQmxjMk5oY0dWa0xseHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JCYmlCbGMyTmhjR1ZrSUhOMGNtbHVaeTVjYmlBcUwxeHVablZ1WTNScGIyNGdaWE5qWVhCbFZYTmxjbEJ5YjNacFpHVmtTMlY1S0hSbGVIUXBJSHRjYmlBZ2NtVjBkWEp1SUNnbkp5QXJJSFJsZUhRcExuSmxjR3hoWTJVb1hHNGdJQ0FnZFhObGNsQnliM1pwWkdWa1MyVjVSWE5qWVhCbFVtVm5aWGdzWEc0Z0lDQWdkWE5sY2xCeWIzWnBaR1ZrUzJWNVJYTmpZWEJsY2x4dUlDQXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGZHlZWEFnWVNCZ2EyVjVZQ0IyWVd4MVpTQmxlSEJzYVdOcGRHeDVJSEJ5YjNacFpHVmtJR0o1SUhSb1pTQjFjMlZ5SUhSdklHUnBjM1JwYm1kMWFYTm9JR2wwSUdaeWIyMWNiaUFxSUdsdGNHeHBZMmwwYkhrdFoyVnVaWEpoZEdWa0lHdGxlWE1nWjJWdVpYSmhkR1ZrSUdKNUlHRWdZMjl0Y0c5dVpXNTBKM01nYVc1a1pYZ2dhVzRnYVhSeklIQmhjbVZ1ZEM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYTJWNUlGWmhiSFZsSUc5bUlHRWdkWE5sY2kxd2NtOTJhV1JsWkNCZ2EyVjVZQ0JoZEhSeWFXSjFkR1ZjYmlBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMxY2JpQXFMMXh1Wm5WdVkzUnBiMjRnZDNKaGNGVnpaWEpRY205MmFXUmxaRXRsZVNoclpYa3BJSHRjYmlBZ2NtVjBkWEp1SUNja0p5QXJJR1Z6WTJGd1pWVnpaWEpRY205MmFXUmxaRXRsZVNoclpYa3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFQndZWEpoYlNCN1B5cDlJR05vYVd4a2NtVnVJRU5vYVd4a2NtVnVJSFJ5WldVZ1kyOXVkR0ZwYm1WeUxseHVJQ29nUUhCaGNtRnRJSHNoYzNSeWFXNW5mU0J1WVcxbFUyOUdZWElnVG1GdFpTQnZaaUIwYUdVZ2EyVjVJSEJoZEdnZ2MyOGdabUZ5TGx4dUlDb2dRSEJoY21GdElIc2hiblZ0WW1WeWZTQnBibVJsZUZOdlJtRnlJRTUxYldKbGNpQnZaaUJqYUdsc1pISmxiaUJsYm1OdmRXNTBaWEpsWkNCMWJuUnBiQ0IwYUdseklIQnZhVzUwTGx4dUlDb2dRSEJoY21GdElIc2hablZ1WTNScGIyNTlJR05oYkd4aVlXTnJJRU5oYkd4aVlXTnJJSFJ2SUdsdWRtOXJaU0IzYVhSb0lHVmhZMmdnWTJocGJHUWdabTkxYm1RdVhHNGdLaUJBY0dGeVlXMGdlejhxZlNCMGNtRjJaWEp6WlVOdmJuUmxlSFFnVlhObFpDQjBieUJ3WVhOeklHbHVabTl5YldGMGFXOXVJSFJvY205MVoyaHZkWFFnZEdobElIUnlZWFpsY25OaGJGeHVJQ29nY0hKdlkyVnpjeTVjYmlBcUlFQnlaWFIxY200Z2V5RnVkVzFpWlhKOUlGUm9aU0J1ZFcxaVpYSWdiMllnWTJocGJHUnlaVzRnYVc0Z2RHaHBjeUJ6ZFdKMGNtVmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVTVzF3YkNoY2JpQWdZMmhwYkdSeVpXNHNYRzRnSUc1aGJXVlRiMFpoY2l4Y2JpQWdhVzVrWlhoVGIwWmhjaXhjYmlBZ1kyRnNiR0poWTJzc1hHNGdJSFJ5WVhabGNuTmxRMjl1ZEdWNGRGeHVLU0I3WEc0Z0lIWmhjaUIwZVhCbElEMGdkSGx3Wlc5bUlHTm9hV3hrY21WdU8xeHVYRzRnSUdsbUlDaDBlWEJsSUQwOVBTQW5kVzVrWldacGJtVmtKeUI4ZkNCMGVYQmxJRDA5UFNBblltOXZiR1ZoYmljcElIdGNiaUFnSUNBdkx5QkJiR3dnYjJZZ2RHaGxJR0ZpYjNabElHRnlaU0J3WlhKalpXbDJaV1FnWVhNZ2JuVnNiQzVjYmlBZ0lDQmphR2xzWkhKbGJpQTlJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnBaaUFvWTJocGJHUnlaVzRnUFQwOUlHNTFiR3dnZkh4Y2JpQWdJQ0FnSUhSNWNHVWdQVDA5SUNkemRISnBibWNuSUh4OFhHNGdJQ0FnSUNCMGVYQmxJRDA5UFNBbmJuVnRZbVZ5SnlCOGZGeHVJQ0FnSUNBZ1VtVmhZM1JGYkdWdFpXNTBMbWx6Vm1Gc2FXUkZiR1Z0Wlc1MEtHTm9hV3hrY21WdUtTa2dlMXh1SUNBZ0lHTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ2RISmhkbVZ5YzJWRGIyNTBaWGgwTEZ4dUlDQWdJQ0FnWTJocGJHUnlaVzRzWEc0Z0lDQWdJQ0F2THlCSlppQnBkQ2R6SUhSb1pTQnZibXg1SUdOb2FXeGtMQ0IwY21WaGRDQjBhR1VnYm1GdFpTQmhjeUJwWmlCcGRDQjNZWE1nZDNKaGNIQmxaQ0JwYmlCaGJpQmhjbkpoZVZ4dUlDQWdJQ0FnTHk4Z2MyOGdkR2hoZENCcGRDZHpJR052Ym5OcGMzUmxiblFnYVdZZ2RHaGxJRzUxYldKbGNpQnZaaUJqYUdsc1pISmxiaUJuY205M2N5NWNiaUFnSUNBZ0lHNWhiV1ZUYjBaaGNpQTlQVDBnSnljZ1B5QlRSVkJCVWtGVVQxSWdLeUJuWlhSRGIyMXdiMjVsYm5STFpYa29ZMmhwYkdSeVpXNHNJREFwSURvZ2JtRnRaVk52Um1GeUxGeHVJQ0FnSUNBZ2FXNWtaWGhUYjBaaGNseHVJQ0FnSUNrN1hHNGdJQ0FnY21WMGRYSnVJREU3WEc0Z0lIMWNibHh1SUNCMllYSWdZMmhwYkdRc0lHNWxlSFJPWVcxbExDQnVaWGgwU1c1a1pYZzdYRzRnSUhaaGNpQnpkV0owY21WbFEyOTFiblFnUFNBd095QXZMeUJEYjNWdWRDQnZaaUJqYUdsc1pISmxiaUJtYjNWdVpDQnBiaUIwYUdVZ1kzVnljbVZ1ZENCemRXSjBjbVZsTGx4dVhHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR05vYVd4a2NtVnVLU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTJocGJHUnlaVzR1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lHTm9hV3hrSUQwZ1kyaHBiR1J5Wlc1YmFWMDdYRzRnSUNBZ0lDQnVaWGgwVG1GdFpTQTlJQ2hjYmlBZ0lDQWdJQ0FnS0c1aGJXVlRiMFpoY2lBaFBUMGdKeWNnUHlCdVlXMWxVMjlHWVhJZ0t5QlRWVUpUUlZCQlVrRlVUMUlnT2lCVFJWQkJVa0ZVVDFJcElDdGNiaUFnSUNBZ0lDQWdaMlYwUTI5dGNHOXVaVzUwUzJWNUtHTm9hV3hrTENCcEtWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lHNWxlSFJKYm1SbGVDQTlJR2x1WkdWNFUyOUdZWElnS3lCemRXSjBjbVZsUTI5MWJuUTdYRzRnSUNBZ0lDQnpkV0owY21WbFEyOTFiblFnS3owZ2RISmhkbVZ5YzJWQmJHeERhR2xzWkhKbGJrbHRjR3dvWEc0Z0lDQWdJQ0FnSUdOb2FXeGtMRnh1SUNBZ0lDQWdJQ0J1WlhoMFRtRnRaU3hjYmlBZ0lDQWdJQ0FnYm1WNGRFbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNCallXeHNZbUZqYXl4Y2JpQWdJQ0FnSUNBZ2RISmhkbVZ5YzJWRGIyNTBaWGgwWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ2FYUmxjbUYwYjNKR2JpQTlJR2RsZEVsMFpYSmhkRzl5Um00b1kyaHBiR1J5Wlc0cE8xeHVJQ0FnSUdsbUlDaHBkR1Z5WVhSdmNrWnVLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FYUmxjbUYwYjNJZ1BTQnBkR1Z5WVhSdmNrWnVMbU5oYkd3b1kyaHBiR1J5Wlc0cE8xeHVJQ0FnSUNBZ2RtRnlJSE4wWlhBN1hHNGdJQ0FnSUNCcFppQW9hWFJsY21GMGIzSkdiaUFoUFQwZ1kyaHBiR1J5Wlc0dVpXNTBjbWxsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVdrZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9JU2h6ZEdWd0lEMGdhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhwYkdRZ1BTQnpkR1Z3TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUc1bGVIUk9ZVzFsSUQwZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0c1aGJXVlRiMFpoY2lBaFBUMGdKeWNnUHlCdVlXMWxVMjlHWVhJZ0t5QlRWVUpUUlZCQlVrRlVUMUlnT2lCVFJWQkJVa0ZVVDFJcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGRFTnZiWEJ2Ym1WdWRFdGxlU2hqYUdsc1pDd2dhV2tyS3lsY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUc1bGVIUkpibVJsZUNBOUlHbHVaR1Y0VTI5R1lYSWdLeUJ6ZFdKMGNtVmxRMjkxYm5RN1hHNGdJQ0FnSUNBZ0lDQWdjM1ZpZEhKbFpVTnZkVzUwSUNzOUlIUnlZWFpsY25ObFFXeHNRMmhwYkdSeVpXNUpiWEJzS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFRtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJKYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoZG1WeWMyVkRiMjUwWlhoMFhHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGd2ljSEp2WkhWamRHbHZibHdpSUNFOVBTQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDaGNJbkJ5YjJSMVkzUnBiMjVjSWlBaFBUMGdjSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUHlCM1lYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdaR2xrVjJGeWJrRmliM1YwVFdGd2N5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNkVmMybHVaeUJOWVhCeklHRnpJR05vYVd4a2NtVnVJR2x6SUc1dmRDQjVaWFFnWm5Wc2JIa2djM1Z3Y0c5eWRHVmtMaUJKZENCcGN5QmhiaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RsZUhCbGNtbHRaVzUwWVd3Z1ptVmhkSFZ5WlNCMGFHRjBJRzFwWjJoMElHSmxJSEpsYlc5MlpXUXVJRU52Ym5abGNuUWdhWFFnZEc4Z1lTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHpaWEYxWlc1alpTQXZJR2wwWlhKaFlteGxJRzltSUd0bGVXVmtJRkpsWVdOMFJXeGxiV1Z1ZEhNZ2FXNXpkR1ZoWkM0blhHNGdJQ0FnSUNBZ0lDQWdLU0E2SUc1MWJHd3BPMXh1SUNBZ0lDQWdJQ0FnSUdScFpGZGhjbTVCWW05MWRFMWhjSE1nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklFbDBaWEpoZEc5eUlIZHBiR3dnY0hKdmRtbGtaU0JsYm5SeWVTQmJheXgyWFNCMGRYQnNaWE1nY21GMGFHVnlJSFJvWVc0Z2RtRnNkV1Z6TGx4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvSVNoemRHVndJRDBnYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLUzVrYjI1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHVnVkSEo1SUQwZ2MzUmxjQzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vYVd4a0lEMGdaVzUwY25sYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBUbUZ0WlNBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tHNWhiV1ZUYjBaaGNpQWhQVDBnSnljZ1B5QnVZVzFsVTI5R1lYSWdLeUJUVlVKVFJWQkJVa0ZVVDFJZ09pQlRSVkJCVWtGVVQxSXBJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkM0poY0ZWelpYSlFjbTkyYVdSbFpFdGxlU2hsYm5SeWVWc3dYU2tnS3lCVFZVSlRSVkJCVWtGVVQxSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aWFJEYjIxd2IyNWxiblJMWlhrb1kyaHBiR1FzSURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdibVY0ZEVsdVpHVjRJRDBnYVc1a1pYaFRiMFpoY2lBcklITjFZblJ5WldWRGIzVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFZblJ5WldWRGIzVnVkQ0FyUFNCMGNtRjJaWEp6WlVGc2JFTm9hV3hrY21WdVNXMXdiQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUk9ZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05oYkd4aVlXTnJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUYyWlhKelpVTnZiblJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdLRndpY0hKdlpIVmpkR2x2Ymx3aUlDRTlQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBL0lHbHVkbUZ5YVdGdWRDaGNiaUFnSUNBZ0lDQWdZMmhwYkdSeVpXNHVibTlrWlZSNWNHVWdJVDA5SURFc1hHNGdJQ0FnSUNBZ0lDZDBjbUYyWlhKelpVRnNiRU5vYVd4a2NtVnVLQzR1TGlrNklFVnVZMjkxYm5SbGNtVmtJR0Z1SUdsdWRtRnNhV1FnWTJocGJHUTdJRVJQVFNBbklDdGNiaUFnSUNBZ0lDQWdKMlZzWlcxbGJuUnpJR0Z5WlNCdWIzUWdkbUZzYVdRZ1kyaHBiR1J5Wlc0Z2IyWWdVbVZoWTNRZ1kyOXRjRzl1Wlc1MGN5NG5YRzRnSUNBZ0lDQXBJRG9nYVc1MllYSnBZVzUwS0dOb2FXeGtjbVZ1TG01dlpHVlVlWEJsSUNFOVBTQXhLU2s3WEc0Z0lDQWdJQ0IyWVhJZ1puSmhaMjFsYm5RZ1BTQlNaV0ZqZEVaeVlXZHRaVzUwTG1WNGRISmhZM1FvWTJocGJHUnlaVzRwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJR1p5WVdkdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaG1jbUZuYldWdWRDNW9ZWE5QZDI1UWNtOXdaWEowZVNoclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaHBiR1FnUFNCbWNtRm5iV1Z1ZEZ0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUc1bGVIUk9ZVzFsSUQwZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0c1aGJXVlRiMFpoY2lBaFBUMGdKeWNnUHlCdVlXMWxVMjlHWVhJZ0t5QlRWVUpUUlZCQlVrRlVUMUlnT2lCVFJWQkJVa0ZVVDFJcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkeVlYQlZjMlZ5VUhKdmRtbGtaV1JMWlhrb2EyVjVLU0FySUZOVlFsTkZVRUZTUVZSUFVpQXJYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUkRiMjF3YjI1bGJuUkxaWGtvWTJocGJHUXNJREFwWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMFNXNWtaWGdnUFNCcGJtUmxlRk52Um1GeUlDc2djM1ZpZEhKbFpVTnZkVzUwTzF4dUlDQWdJQ0FnSUNBZ0lITjFZblJ5WldWRGIzVnVkQ0FyUFNCMGNtRjJaWEp6WlVGc2JFTm9hV3hrY21WdVNXMXdiQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9hV3hrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVY0ZEU1aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBTVzVrWlhnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZWFpsY25ObFEyOXVkR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjM1ZpZEhKbFpVTnZkVzUwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRlJ5WVhabGNuTmxjeUJqYUdsc1pISmxiaUIwYUdGMElHRnlaU0IwZVhCcFkyRnNiSGtnYzNCbFkybG1hV1ZrSUdGeklHQndjbTl3Y3k1amFHbHNaSEpsYm1Bc0lHSjFkRnh1SUNvZ2JXbG5hSFFnWVd4emJ5QmlaU0J6Y0dWamFXWnBaV1FnZEdoeWIzVm5hQ0JoZEhSeWFXSjFkR1Z6T2x4dUlDcGNiaUFxSUMwZ1lIUnlZWFpsY25ObFFXeHNRMmhwYkdSeVpXNG9kR2hwY3k1d2NtOXdjeTVqYUdsc1pISmxiaXdnTGk0dUtXQmNiaUFxSUMwZ1lIUnlZWFpsY25ObFFXeHNRMmhwYkdSeVpXNG9kR2hwY3k1d2NtOXdjeTVzWldaMFVHRnVaV3hEYUdsc1pISmxiaXdnTGk0dUtXQmNiaUFxWEc0Z0tpQlVhR1VnWUhSeVlYWmxjbk5sUTI5dWRHVjRkR0FnYVhNZ1lXNGdiM0IwYVc5dVlXd2dZWEpuZFcxbGJuUWdkR2hoZENCcGN5QndZWE56WldRZ2RHaHliM1ZuYUNCMGFHVmNiaUFxSUdWdWRHbHlaU0IwY21GMlpYSnpZV3d1SUVsMElHTmhiaUJpWlNCMWMyVmtJSFJ2SUhOMGIzSmxJR0ZqWTNWdGRXeGhkR2x2Ym5NZ2IzSWdZVzU1ZEdocGJtY2daV3h6WlNCMGFHRjBYRzRnS2lCMGFHVWdZMkZzYkdKaFkyc2diV2xuYUhRZ1ptbHVaQ0J5Wld4bGRtRnVkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlejhxZlNCamFHbHNaSEpsYmlCRGFHbHNaSEpsYmlCMGNtVmxJRzlpYW1WamRDNWNiaUFxSUVCd1lYSmhiU0I3SVdaMWJtTjBhVzl1ZlNCallXeHNZbUZqYXlCVWJ5QnBiblp2YTJVZ2RYQnZiaUIwY21GMlpYSnphVzVuSUdWaFkyZ2dZMmhwYkdRdVhHNGdLaUJBY0dGeVlXMGdlejhxZlNCMGNtRjJaWEp6WlVOdmJuUmxlSFFnUTI5dWRHVjRkQ0JtYjNJZ2RISmhkbVZ5YzJGc0xseHVJQ29nUUhKbGRIVnliaUI3SVc1MWJXSmxjbjBnVkdobElHNTFiV0psY2lCdlppQmphR2xzWkhKbGJpQnBiaUIwYUdseklITjFZblJ5WldVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhSeVlYWmxjbk5sUVd4c1EyaHBiR1J5Wlc0b1kyaHBiR1J5Wlc0c0lHTmhiR3hpWVdOckxDQjBjbUYyWlhKelpVTnZiblJsZUhRcElIdGNiaUFnYVdZZ0tHTm9hV3hrY21WdUlEMDlJRzUxYkd3cElIdGNiaUFnSUNCeVpYUjFjbTRnTUR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMGNtRjJaWEp6WlVGc2JFTm9hV3hrY21WdVNXMXdiQ2hqYUdsc1pISmxiaXdnSnljc0lEQXNJR05oYkd4aVlXTnJMQ0IwY21GMlpYSnpaVU52Ym5SbGVIUXBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIUnlZWFpsY25ObFFXeHNRMmhwYkdSeVpXNDdYRzRpWFgwPSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG5cInVzZSBzdHJpY3RcIjt2YXIgZW1wdHlGdW5jdGlvbj1yZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpLHdhcm5pbmc9ZW1wdHlGdW5jdGlvbjtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYod2FybmluZz1mdW5jdGlvbihjb25kaXRpb24sZm9ybWF0KXtmb3IodmFyIGFyZ3M9W10sJF9fMD0yLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18xPiRfXzA7JF9fMCsrKWFyZ3MucHVzaChhcmd1bWVudHNbJF9fMF0pO2lmKHZvaWQgMD09PWZvcm1hdCl0aHJvdyBuZXcgRXJyb3IoXCJgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyBtZXNzYWdlIGFyZ3VtZW50XCIpO2lmKGZvcm1hdC5sZW5ndGg8MTB8fC9eW3NcXFddKiQvLnRlc3QoZm9ybWF0KSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyB3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46IFwiK2Zvcm1hdCk7aWYoMCE9PWZvcm1hdC5pbmRleE9mKFwiRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogXCIpJiYhY29uZGl0aW9uKXt2YXIgYXJnSW5kZXg9MCxtZXNzYWdlPVwiV2FybmluZzogXCIrZm9ybWF0LnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gYXJnc1thcmdJbmRleCsrXX0pO2NvbnNvbGUud2FybihtZXNzYWdlKTt0cnl7dGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpfWNhdGNoKHgpe319fSksbW9kdWxlLmV4cG9ydHM9d2FybmluZztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXphVzF2Ym1odmJHMWxjeTlUYVhSbGN5OXdaWEp6YjI1aGJDOWpiMnh2Y2kxM2IzSmtMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmpkQzlzYVdJdmQyRnlibWx1Wnk1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJWMEVzV1VGRlFTeEpRVUZKTEdWQlFXZENMRkZCUVZFc2JVSkJVM2hDTEZGQlFWVXNZVUZGVml4blFrRkJhVUlzVVVGQlVTeEpRVUZKTEZkQlF5OUNMRkZCUVZVc1UwRkJVeXhWUVVGWExGRkJRVlVzU1VGQlN5eEhRVUZKTEZOQlFWRXNTMEZCU3l4RlFVRkZMRXRCUVVzc1ZVRkJWU3hQUVVGWkxFdEJRVXdzUzBGQlZTeFBRVUZSTEV0QlFVc3NTMEZCU3l4VlFVRlZMRTFCUXpGSUxFbEJRV1VzVTBGQldDeFBRVU5HTEV0QlFVMHNTVUZCU1N4UFFVTlNMRFJGUVV0S0xFbEJRVWtzVDBGQlR5eFBRVUZUTEVsQlFVMHNWMEZCVnl4TFFVRkxMRkZCUTNoRExFdEJRVTBzU1VGQlNTeFBRVU5TTEc5SVFVTXdSQ3hQUVVrNVJDeEpRVUZ6UkN4SlFVRnNSQ3hQUVVGUExGRkJRVkVzYVVOQlNXUXNWVUZCVnl4RFFVTmtMRWRCUVVrc1ZVRkJWeXhGUVVOWUxGRkJRVlVzV1VGQll5eFBRVUZQTEZGQlFWRXNUVUZCVHl4WFFVRmhMRTFCUVU4c1RVRkJTeXhoUVVNelJTeFRRVUZSTEV0QlFVc3NVVUZEWWl4TFFVbEZMRXRCUVUwc1NVRkJTU3hQUVVGTkxGTkJRMmhDTEUxQlFVMHNVVUZMWkN4UFFVRlBMRkZCUVZVaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TVRRdE1qQXhOU3dnUm1GalpXSnZiMnNzSUVsdVl5NWNiaUFxSUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1ZHaHBjeUJ6YjNWeVkyVWdZMjlrWlNCcGN5QnNhV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRbE5FTFhOMGVXeGxJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVJRUZ1SUdGa1pHbDBhVzl1WVd3Z1ozSmhiblJjYmlBcUlHOW1JSEJoZEdWdWRDQnlhV2RvZEhNZ1kyRnVJR0psSUdadmRXNWtJR2x1SUhSb1pTQlFRVlJGVGxSVElHWnBiR1VnYVc0Z2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ3BjYmlBcUlFQndjbTkyYVdSbGMwMXZaSFZzWlNCM1lYSnVhVzVuWEc0Z0tpOWNibHh1WENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5aaGNpQmxiWEIwZVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNoY0lpNHZaVzF3ZEhsR2RXNWpkR2x2Ymx3aUtUdGNibHh1THlvcVhHNGdLaUJUYVcxcGJHRnlJSFJ2SUdsdWRtRnlhV0Z1ZENCaWRYUWdiMjVzZVNCc2IyZHpJR0VnZDJGeWJtbHVaeUJwWmlCMGFHVWdZMjl1WkdsMGFXOXVJR2x6SUc1dmRDQnRaWFF1WEc0Z0tpQlVhR2x6SUdOaGJpQmlaU0IxYzJWa0lIUnZJR3h2WnlCcGMzTjFaWE1nYVc0Z1pHVjJaV3h2Y0cxbGJuUWdaVzUyYVhKdmJtMWxiblJ6SUdsdUlHTnlhWFJwWTJGc1hHNGdLaUJ3WVhSb2N5NGdVbVZ0YjNacGJtY2dkR2hsSUd4dloyZHBibWNnWTI5a1pTQm1iM0lnY0hKdlpIVmpkR2x2YmlCbGJuWnBjbTl1YldWdWRITWdkMmxzYkNCclpXVndJSFJvWlZ4dUlDb2djMkZ0WlNCc2IyZHBZeUJoYm1RZ1ptOXNiRzkzSUhSb1pTQnpZVzFsSUdOdlpHVWdjR0YwYUhNdVhHNGdLaTljYmx4dWRtRnlJSGRoY201cGJtY2dQU0JsYlhCMGVVWjFibU4wYVc5dU8xeHVYRzVwWmlBb1hDSndjbTlrZFdOMGFXOXVYQ0lnSVQwOUlIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdLU0I3WEc0Z0lIZGhjbTVwYm1jZ1BTQm1kVzVqZEdsdmJpaGpiMjVrYVhScGIyNHNJR1p2Y20xaGRDQXBJSHRtYjNJZ0tIWmhjaUJoY21kelBWdGRMQ1JmWHpBOU1pd2tYMTh4UFdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SkY5Zk1Ed2tYMTh4T3lSZlh6QXJLeWtnWVhKbmN5NXdkWE5vS0dGeVozVnRaVzUwYzFza1gxOHdYU2s3WEc0Z0lDQWdhV1lnS0dadmNtMWhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDZGdkMkZ5Ym1sdVp5aGpiMjVrYVhScGIyNHNJR1p2Y20xaGRDd2dMaTR1WVhKbmN5bGdJSEpsY1hWcGNtVnpJR0VnZDJGeWJtbHVaeUFuSUN0Y2JpQWdJQ0FnSUNBZ0oyMWxjM05oWjJVZ1lYSm5kVzFsYm5RblhHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaG1iM0p0WVhRdWJHVnVaM1JvSUR3Z01UQWdmSHdnTDE1YmMxeGNWMTBxSkM4dWRHVnpkQ2htYjNKdFlYUXBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ2RVYUdVZ2QyRnlibWx1WnlCbWIzSnRZWFFnYzJodmRXeGtJR0psSUdGaWJHVWdkRzhnZFc1cGNYVmxiSGtnYVdSbGJuUnBabmtnZEdocGN5QW5JQ3RjYmlBZ0lDQWdJQ0FnSjNkaGNtNXBibWN1SUZCc1pXRnpaU3dnZFhObElHRWdiVzl5WlNCa1pYTmpjbWx3ZEdsMlpTQm1iM0p0WVhRZ2RHaGhiam9nSnlBcklHWnZjbTFoZEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1ptOXliV0YwTG1sdVpHVjRUMllvSjBaaGFXeGxaQ0JEYjIxd2IzTnBkR1VnY0hKdmNGUjVjR1U2SUNjcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3SUM4dklFbG5ibTl5WlNCRGIyMXdiM05wZEdWRGIyMXdiMjVsYm5RZ2NISnZjSFI1Y0dVZ1kyaGxZMnN1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGamIyNWthWFJwYjI0cElIdGNiaUFnSUNBZ0lIWmhjaUJoY21kSmJtUmxlQ0E5SURBN1hHNGdJQ0FnSUNCMllYSWdiV1Z6YzJGblpTQTlJQ2RYWVhKdWFXNW5PaUFuSUNzZ1ptOXliV0YwTG5KbGNHeGhZMlVvTHlWekwyY3NJR1oxYm1OMGFXOXVLQ2tnSUh0eVpYUjFjbTRnWVhKbmMxdGhjbWRKYm1SbGVDc3JYVHQ5S1R0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUM4dklDMHRMU0JYWld4amIyMWxJSFJ2SUdSbFluVm5aMmx1WnlCU1pXRmpkQ0F0TFMxY2JpQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCbGNuSnZjaUIzWVhNZ2RHaHliM2R1SUdGeklHRWdZMjl1ZG1WdWFXVnVZMlVnYzI4Z2RHaGhkQ0I1YjNVZ1kyRnVJSFZ6WlNCMGFHbHpJSE4wWVdOclhHNGdJQ0FnSUNBZ0lDOHZJSFJ2SUdacGJtUWdkR2hsSUdOaGJHeHphWFJsSUhSb1lYUWdZMkYxYzJWa0lIUm9hWE1nZDJGeWJtbHVaeUIwYnlCbWFYSmxMbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQjlJR05oZEdOb0tIZ3BJSHQ5WEc0Z0lDQWdmVnh1SUNCOU8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhkaGNtNXBibWM3WEc0aVhYMD0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL1JlYWN0Jyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3JjJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vXG4vLyBXZSBzdG9yZSBvdXIgRUUgb2JqZWN0cyBpbiBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBgfmAgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Qgb3ZlcnJpZGRlbiBvclxuLy8gdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy8gV2UgYWxzbyBhc3N1bWUgdGhhdCBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgYXZhaWxhYmxlIHdoZW4gdGhlIGV2ZW50IG5hbWVcbi8vIGlzIGFuIEVTNiBTeW1ib2wuXG4vL1xudmFyIHByZWZpeCA9IHR5cGVvZiBPYmplY3QuY3JlYXRlICE9PSAnZnVuY3Rpb24nID8gJ34nIDogZmFsc2U7XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgRXZlbnRFbWl0dGVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEV2ZW50IGhhbmRsZXIgdG8gYmUgY2FsbGVkLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBDb250ZXh0IGZvciBmdW5jdGlvbiBleGVjdXRpb24uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSBlbWl0IG9uY2VcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogTWluaW1hbCBFdmVudEVtaXR0ZXIgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7IC8qIE5vdGhpbmcgdG8gc2V0ICovIH1cblxuLyoqXG4gKiBIb2xkcyB0aGUgYXNzaWduZWQgRXZlbnRFbWl0dGVycyBieSBuYW1lLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0dXJuIGEgbGlzdCBvZiBhc3NpZ25lZCBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBldmVudHMgdGhhdCBzaG91bGQgYmUgbGlzdGVkLlxuICogQHBhcmFtIHtCb29sZWFufSBleGlzdHMgV2Ugb25seSBuZWVkIHRvIGtub3cgaWYgdGhlcmUgYXJlIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtBcnJheXxCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQsIGV4aXN0cykge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgYXZhaWxhYmxlID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChleGlzdHMpIHJldHVybiAhIWF2YWlsYWJsZTtcbiAgaWYgKCFhdmFpbGFibGUpIHJldHVybiBbXTtcbiAgaWYgKGF2YWlsYWJsZS5mbikgcmV0dXJuIFthdmFpbGFibGUuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXZhaWxhYmxlLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGF2YWlsYWJsZVtpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogRW1pdCBhbiBldmVudCB0byBhbGwgcmVnaXN0ZXJlZCBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJbmRpY2F0aW9uIGlmIHdlJ3ZlIGVtaXR0ZWQgYW4gZXZlbnQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IEV2ZW50TGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0b259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCB0aGlzKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cykgdGhpcy5fZXZlbnRzID0gcHJlZml4ID8ge30gOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyO1xuICBlbHNlIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdLmZuKSB0aGlzLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgICBlbHNlIHRoaXMuX2V2ZW50c1tldnRdID0gW1xuICAgICAgdGhpcy5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXG4gICAgXTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYW4gRXZlbnRMaXN0ZW5lciB0aGF0J3Mgb25seSBjYWxsZWQgb25jZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBDYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgVGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMsIHRydWUpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKSB0aGlzLl9ldmVudHMgPSBwcmVmaXggPyB7fSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHRoaXMuX2V2ZW50c1tldnRdID0gbGlzdGVuZXI7XG4gIGVsc2Uge1xuICAgIGlmICghdGhpcy5fZXZlbnRzW2V2dF0uZm4pIHRoaXMuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIGVsc2UgdGhpcy5fZXZlbnRzW2V2dF0gPSBbXG4gICAgICB0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBldmVudCB3ZSB3YW50IHRvIHJlbW92ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciB0aGF0IHdlIG5lZWQgdG8gZmluZC5cbiAqIEBwYXJhbSB7TWl4ZWR9IGNvbnRleHQgT25seSByZW1vdmUgbGlzdGVuZXJzIG1hdGNoaW5nIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmNlIGxpc3RlbmVycy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGV2ZW50cyA9IFtdO1xuXG4gIGlmIChmbikge1xuICAgIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICAgIGlmIChcbiAgICAgICAgICAgbGlzdGVuZXJzLmZuICE9PSBmblxuICAgICAgICB8fCAob25jZSAmJiAhbGlzdGVuZXJzLm9uY2UpXG4gICAgICAgIHx8IChjb250ZXh0ICYmIGxpc3RlbmVycy5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm5cbiAgICAgICAgICB8fCAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpXG4gICAgICAgICAgfHwgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICAgICkge1xuICAgICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gIC8vXG4gIGlmIChldmVudHMubGVuZ3RoKSB7XG4gICAgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZ0XTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycyBvciBvbmx5IHRoZSBsaXN0ZW5lcnMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBldmVudCB3YW50IHRvIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIGlmICghdGhpcy5fZXZlbnRzKSByZXR1cm4gdGhpcztcblxuICBpZiAoZXZlbnQpIGRlbGV0ZSB0aGlzLl9ldmVudHNbcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudF07XG4gIGVsc2UgdGhpcy5fZXZlbnRzID0gcHJlZml4ID8ge30gOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgYXBwbHkgYW55bW9yZS5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwiLyoqXG4gKiBBIG1vZHVsZSBvZiBtZXRob2RzIHRoYXQgeW91IHdhbnQgdG8gaW5jbHVkZSBpbiBhbGwgYWN0aW9ucy5cbiAqIFRoaXMgbW9kdWxlIGlzIGNvbnN1bWVkIGJ5IGBjcmVhdGVBY3Rpb25gLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbn07XG4iLCJleHBvcnRzLmNyZWF0ZWRTdG9yZXMgPSBbXTtcblxuZXhwb3J0cy5jcmVhdGVkQWN0aW9ucyA9IFtdO1xuXG5leHBvcnRzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgd2hpbGUoZXhwb3J0cy5jcmVhdGVkU3RvcmVzLmxlbmd0aCkge1xuICAgICAgICBleHBvcnRzLmNyZWF0ZWRTdG9yZXMucG9wKCk7XG4gICAgfVxuICAgIHdoaWxlKGV4cG9ydHMuY3JlYXRlZEFjdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIGV4cG9ydHMuY3JlYXRlZEFjdGlvbnMucG9wKCk7XG4gICAgfVxufTtcbiIsInZhciBfID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIG1ha2VyID0gcmVxdWlyZSgnLi9qb2lucycpLmluc3RhbmNlSm9pbkNyZWF0b3I7XG5cbi8qKlxuICogRXh0cmFjdCBjaGlsZCBsaXN0ZW5hYmxlcyBmcm9tIGEgcGFyZW50IGZyb20gdGhlaXJcbiAqIGNoaWxkcmVuIHByb3BlcnR5IGFuZCByZXR1cm4gdGhlbSBpbiBhIGtleWVkIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsaXN0ZW5hYmxlIFRoZSBwYXJlbnQgbGlzdGVuYWJsZVxuICovXG52YXIgbWFwQ2hpbGRMaXN0ZW5hYmxlcyA9IGZ1bmN0aW9uKGxpc3RlbmFibGUpIHtcbiAgICB2YXIgaSA9IDAsIGNoaWxkcmVuID0ge30sIGNoaWxkTmFtZTtcbiAgICBmb3IgKDtpIDwgKGxpc3RlbmFibGUuY2hpbGRyZW58fFtdKS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjaGlsZE5hbWUgPSBsaXN0ZW5hYmxlLmNoaWxkcmVuW2ldO1xuICAgICAgICBpZihsaXN0ZW5hYmxlW2NoaWxkTmFtZV0pe1xuICAgICAgICAgICAgY2hpbGRyZW5bY2hpbGROYW1lXSA9IGxpc3RlbmFibGVbY2hpbGROYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG59O1xuXG4vKipcbiAqIE1ha2UgYSBmbGF0IGRpY3Rpb25hcnkgb2YgYWxsIGxpc3RlbmFibGVzIGluY2x1ZGluZyB0aGVpclxuICogcG9zc2libGUgY2hpbGRyZW4gKHJlY3Vyc2l2ZWx5KSwgY29uY2F0ZW5hdGluZyBuYW1lcyBpbiBjYW1lbENhc2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGxpc3RlbmFibGVzIFRoZSB0b3AtbGV2ZWwgbGlzdGVuYWJsZXNcbiAqL1xudmFyIGZsYXR0ZW5MaXN0ZW5hYmxlcyA9IGZ1bmN0aW9uKGxpc3RlbmFibGVzKSB7XG4gICAgdmFyIGZsYXR0ZW5lZCA9IHt9O1xuICAgIGZvcih2YXIga2V5IGluIGxpc3RlbmFibGVzKXtcbiAgICAgICAgdmFyIGxpc3RlbmFibGUgPSBsaXN0ZW5hYmxlc1trZXldO1xuICAgICAgICB2YXIgY2hpbGRNYXAgPSBtYXBDaGlsZExpc3RlbmFibGVzKGxpc3RlbmFibGUpO1xuXG4gICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGZsYXR0ZW4gY2hpbGRyZW5cbiAgICAgICAgdmFyIGNoaWxkcmVuID0gZmxhdHRlbkxpc3RlbmFibGVzKGNoaWxkTWFwKTtcblxuICAgICAgICAvLyBhZGQgdGhlIHByaW1hcnkgbGlzdGVuYWJsZSBhbmQgY2hpbHJlblxuICAgICAgICBmbGF0dGVuZWRba2V5XSA9IGxpc3RlbmFibGU7XG4gICAgICAgIGZvcih2YXIgY2hpbGRLZXkgaW4gY2hpbGRyZW4pe1xuICAgICAgICAgICAgdmFyIGNoaWxkTGlzdGVuYWJsZSA9IGNoaWxkcmVuW2NoaWxkS2V5XTtcbiAgICAgICAgICAgIGZsYXR0ZW5lZFtrZXkgKyBfLmNhcGl0YWxpemUoY2hpbGRLZXkpXSA9IGNoaWxkTGlzdGVuYWJsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmbGF0dGVuZWQ7XG59O1xuXG4vKipcbiAqIEEgbW9kdWxlIG9mIG1ldGhvZHMgcmVsYXRlZCB0byBsaXN0ZW5pbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IGB2YWxpZGF0ZUxpc3RlbmluZ2BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QWN0aW9ufFN0b3JlfSBsaXN0ZW5hYmxlIFRoZSBsaXN0ZW5hYmxlIHdlIHdhbnQgdG8gc2VhcmNoIGZvclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUaGUgcmVzdWx0IG9mIGEgcmVjdXJzaXZlIHNlYXJjaCBhbW9uZyBgdGhpcy5zdWJzY3JpcHRpb25zYFxuICAgICAqL1xuICAgIGhhc0xpc3RlbmVyOiBmdW5jdGlvbihsaXN0ZW5hYmxlKSB7XG4gICAgICAgIHZhciBpID0gMCwgaiwgbGlzdGVuZXIsIGxpc3RlbmFibGVzO1xuICAgICAgICBmb3IgKDtpIDwgKHRoaXMuc3Vic2NyaXB0aW9uc3x8W10pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsaXN0ZW5hYmxlcyA9IFtdLmNvbmNhdCh0aGlzLnN1YnNjcmlwdGlvbnNbaV0ubGlzdGVuYWJsZSk7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGlzdGVuYWJsZXMubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuYWJsZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5hYmxlIHx8IGxpc3RlbmVyLmhhc0xpc3RlbmVyICYmIGxpc3RlbmVyLmhhc0xpc3RlbmVyKGxpc3RlbmFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEEgY29udmVuaWVuY2UgbWV0aG9kIHRoYXQgbGlzdGVucyB0byBhbGwgbGlzdGVuYWJsZXMgaW4gdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsaXN0ZW5hYmxlcyBBbiBvYmplY3Qgb2YgbGlzdGVuYWJsZXMuIEtleXMgd2lsbCBiZSB1c2VkIGFzIGNhbGxiYWNrIG1ldGhvZCBuYW1lcy5cbiAgICAgKi9cbiAgICBsaXN0ZW5Ub01hbnk6IGZ1bmN0aW9uKGxpc3RlbmFibGVzKXtcbiAgICAgICAgdmFyIGFsbExpc3RlbmFibGVzID0gZmxhdHRlbkxpc3RlbmFibGVzKGxpc3RlbmFibGVzKTtcbiAgICAgICAgZm9yKHZhciBrZXkgaW4gYWxsTGlzdGVuYWJsZXMpe1xuICAgICAgICAgICAgdmFyIGNibmFtZSA9IF8uY2FsbGJhY2tOYW1lKGtleSksXG4gICAgICAgICAgICAgICAgbG9jYWxuYW1lID0gdGhpc1tjYm5hbWVdID8gY2JuYW1lIDogdGhpc1trZXldID8ga2V5IDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGxvY2FsbmFtZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhhbGxMaXN0ZW5hYmxlc1trZXldLGxvY2FsbmFtZSx0aGlzW2NibmFtZStcIkRlZmF1bHRcIl18fHRoaXNbbG9jYWxuYW1lK1wiRGVmYXVsdFwiXXx8bG9jYWxuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGN1cnJlbnQgY29udGV4dCBjYW4gbGlzdGVuIHRvIHRoZSBzdXBwbGllZCBsaXN0ZW5hYmxlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FjdGlvbnxTdG9yZX0gbGlzdGVuYWJsZSBBbiBBY3Rpb24gb3IgU3RvcmUgdGhhdCBzaG91bGQgYmVcbiAgICAgKiAgbGlzdGVuZWQgdG8uXG4gICAgICogQHJldHVybnMge1N0cmluZ3xVbmRlZmluZWR9IEFuIGVycm9yIG1lc3NhZ2UsIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSB3YXMgbm8gcHJvYmxlbS5cbiAgICAgKi9cbiAgICB2YWxpZGF0ZUxpc3RlbmluZzogZnVuY3Rpb24obGlzdGVuYWJsZSl7XG4gICAgICAgIGlmIChsaXN0ZW5hYmxlID09PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJMaXN0ZW5lciBpcyBub3QgYWJsZSB0byBsaXN0ZW4gdG8gaXRzZWxmXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obGlzdGVuYWJsZS5saXN0ZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbGlzdGVuYWJsZSArIFwiIGlzIG1pc3NpbmcgYSBsaXN0ZW4gbWV0aG9kXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmFibGUuaGFzTGlzdGVuZXIgJiYgbGlzdGVuYWJsZS5oYXNMaXN0ZW5lcih0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiTGlzdGVuZXIgY2Fubm90IGxpc3RlbiB0byB0aGlzIGxpc3RlbmFibGUgYmVjYXVzZSBvZiBjaXJjdWxhciBsb29wXCI7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCBhIHN1YnNjcmlwdGlvbiB0byB0aGUgZ2l2ZW4gbGlzdGVuYWJsZSBmb3IgdGhlIGNvbnRleHQgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FjdGlvbnxTdG9yZX0gbGlzdGVuYWJsZSBBbiBBY3Rpb24gb3IgU3RvcmUgdGhhdCBzaG91bGQgYmVcbiAgICAgKiAgbGlzdGVuZWQgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBldmVudCBoYW5kbGVyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGRlZmF1bHRDYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gcmVnaXN0ZXIgYXMgZGVmYXVsdCBoYW5kbGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBzdWJzY3JpcHRpb24gb2JqIHdoZXJlIGBzdG9wYCBpcyBhbiB1bnN1YiBmdW5jdGlvbiBhbmQgYGxpc3RlbmFibGVgIGlzIHRoZSBvYmplY3QgYmVpbmcgbGlzdGVuZWQgdG9cbiAgICAgKi9cbiAgICBsaXN0ZW5UbzogZnVuY3Rpb24obGlzdGVuYWJsZSwgY2FsbGJhY2ssIGRlZmF1bHRDYWxsYmFjaykge1xuICAgICAgICB2YXIgZGVzdWIsIHVuc3Vic2NyaWJlciwgc3Vic2NyaXB0aW9ub2JqLCBzdWJzID0gdGhpcy5zdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zIHx8IFtdO1xuICAgICAgICBfLnRocm93SWYodGhpcy52YWxpZGF0ZUxpc3RlbmluZyhsaXN0ZW5hYmxlKSk7XG4gICAgICAgIHRoaXMuZmV0Y2hJbml0aWFsU3RhdGUobGlzdGVuYWJsZSwgZGVmYXVsdENhbGxiYWNrKTtcbiAgICAgICAgZGVzdWIgPSBsaXN0ZW5hYmxlLmxpc3Rlbih0aGlzW2NhbGxiYWNrXXx8Y2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICB1bnN1YnNjcmliZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHN1YnMuaW5kZXhPZihzdWJzY3JpcHRpb25vYmopO1xuICAgICAgICAgICAgXy50aHJvd0lmKGluZGV4ID09PSAtMSwnVHJpZWQgdG8gcmVtb3ZlIGxpc3RlbiBhbHJlYWR5IGdvbmUgZnJvbSBzdWJzY3JpcHRpb25zIGxpc3QhJyk7XG4gICAgICAgICAgICBzdWJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBkZXN1YigpO1xuICAgICAgICB9O1xuICAgICAgICBzdWJzY3JpcHRpb25vYmogPSB7XG4gICAgICAgICAgICBzdG9wOiB1bnN1YnNjcmliZXIsXG4gICAgICAgICAgICBsaXN0ZW5hYmxlOiBsaXN0ZW5hYmxlXG4gICAgICAgIH07XG4gICAgICAgIHN1YnMucHVzaChzdWJzY3JpcHRpb25vYmopO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9ub2JqO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdG9wcyBsaXN0ZW5pbmcgdG8gYSBzaW5nbGUgbGlzdGVuYWJsZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtBY3Rpb258U3RvcmV9IGxpc3RlbmFibGUgVGhlIGFjdGlvbiBvciBzdG9yZSB3ZSBubyBsb25nZXIgd2FudCB0byBsaXN0ZW4gdG9cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiBhIHN1YnNjcmlwdGlvbiB3YXMgZm91bmQgYW5kIHJlbW92ZWQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBzdG9wTGlzdGVuaW5nVG86IGZ1bmN0aW9uKGxpc3RlbmFibGUpe1xuICAgICAgICB2YXIgc3ViLCBpID0gMCwgc3VicyA9IHRoaXMuc3Vic2NyaXB0aW9ucyB8fCBbXTtcbiAgICAgICAgZm9yKDtpIDwgc3Vicy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBzdWIgPSBzdWJzW2ldO1xuICAgICAgICAgICAgaWYgKHN1Yi5saXN0ZW5hYmxlID09PSBsaXN0ZW5hYmxlKXtcbiAgICAgICAgICAgICAgICBzdWIuc3RvcCgpO1xuICAgICAgICAgICAgICAgIF8udGhyb3dJZihzdWJzLmluZGV4T2Yoc3ViKSE9PS0xLCdGYWlsZWQgdG8gcmVtb3ZlIGxpc3RlbiBmcm9tIHN1YnNjcmlwdGlvbnMgbGlzdCEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFsbCBzdWJzY3JpcHRpb25zIGFuZCBlbXB0aWVzIHN1YnNjcmlwdGlvbnMgYXJyYXlcbiAgICAgKi9cbiAgICBzdG9wTGlzdGVuaW5nVG9BbGw6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciByZW1haW5pbmcsIHN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgICAgIHdoaWxlKChyZW1haW5pbmc9c3Vicy5sZW5ndGgpKXtcbiAgICAgICAgICAgIHN1YnNbMF0uc3RvcCgpO1xuICAgICAgICAgICAgXy50aHJvd0lmKHN1YnMubGVuZ3RoIT09cmVtYWluaW5nLTEsJ0ZhaWxlZCB0byByZW1vdmUgbGlzdGVuIGZyb20gc3Vic2NyaXB0aW9ucyBsaXN0IScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgaW4gYGxpc3RlblRvYC4gRmV0Y2hlcyBpbml0aWFsIGRhdGEgZnJvbSBhIHB1Ymxpc2hlciBpZiBpdCBoYXMgYSBgZ2V0SW5pdGlhbFN0YXRlYCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtBY3Rpb258U3RvcmV9IGxpc3RlbmFibGUgVGhlIHB1Ymxpc2hlciB3ZSB3YW50IHRvIGdldCBpbml0aWFsIHN0YXRlIGZyb21cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZGVmYXVsdENhbGxiYWNrIFRoZSBtZXRob2QgdG8gcmVjZWl2ZSB0aGUgZGF0YVxuICAgICAqL1xuICAgIGZldGNoSW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAobGlzdGVuYWJsZSwgZGVmYXVsdENhbGxiYWNrKSB7XG4gICAgICAgIGRlZmF1bHRDYWxsYmFjayA9IChkZWZhdWx0Q2FsbGJhY2sgJiYgdGhpc1tkZWZhdWx0Q2FsbGJhY2tdKSB8fCBkZWZhdWx0Q2FsbGJhY2s7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZGVmYXVsdENhbGxiYWNrKSAmJiBfLmlzRnVuY3Rpb24obGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUpKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBfLmlzRnVuY3Rpb24oZGF0YS50aGVuKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhbGxiYWNrLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2FsbGJhY2suY2FsbCh0aGlzLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgb25jZSBhbGwgbGlzdGVuYWJsZXMgaGF2ZSB0cmlnZ2VyZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgKiBJdCB3aWxsIGJlIGludm9rZWQgd2l0aCB0aGUgbGFzdCBlbWlzc2lvbiBmcm9tIGVhY2ggbGlzdGVuYWJsZS5cbiAgICAgKiBAcGFyYW0gey4uLlB1Ymxpc2hlcnN9IHB1Ymxpc2hlcnMgUHVibGlzaGVycyB0aGF0IHNob3VsZCBiZSB0cmFja2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBjYWxsYmFjayBUaGUgbWV0aG9kIHRvIGNhbGwgd2hlbiBhbGwgcHVibGlzaGVycyBoYXZlIGVtaXR0ZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHN1YnNjcmlwdGlvbiBvYmogd2hlcmUgYHN0b3BgIGlzIGFuIHVuc3ViIGZ1bmN0aW9uIGFuZCBgbGlzdGVuYWJsZWAgaXMgYW4gYXJyYXkgb2YgbGlzdGVuYWJsZXNcbiAgICAgKi9cbiAgICBqb2luVHJhaWxpbmc6IG1ha2VyKFwibGFzdFwiKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBvbmNlIGFsbCBsaXN0ZW5hYmxlcyBoYXZlIHRyaWdnZXJlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAqIEl0IHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBmaXJzdCBlbWlzc2lvbiBmcm9tIGVhY2ggbGlzdGVuYWJsZS5cbiAgICAgKiBAcGFyYW0gey4uLlB1Ymxpc2hlcnN9IHB1Ymxpc2hlcnMgUHVibGlzaGVycyB0aGF0IHNob3VsZCBiZSB0cmFja2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBjYWxsYmFjayBUaGUgbWV0aG9kIHRvIGNhbGwgd2hlbiBhbGwgcHVibGlzaGVycyBoYXZlIGVtaXR0ZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHN1YnNjcmlwdGlvbiBvYmogd2hlcmUgYHN0b3BgIGlzIGFuIHVuc3ViIGZ1bmN0aW9uIGFuZCBgbGlzdGVuYWJsZWAgaXMgYW4gYXJyYXkgb2YgbGlzdGVuYWJsZXNcbiAgICAgKi9cbiAgICBqb2luTGVhZGluZzogbWFrZXIoXCJmaXJzdFwiKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBvbmNlIGFsbCBsaXN0ZW5hYmxlcyBoYXZlIHRyaWdnZXJlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAqIEl0IHdpbGwgYmUgaW52b2tlZCB3aXRoIGFsbCBlbWlzc2lvbiBmcm9tIGVhY2ggbGlzdGVuYWJsZS5cbiAgICAgKiBAcGFyYW0gey4uLlB1Ymxpc2hlcnN9IHB1Ymxpc2hlcnMgUHVibGlzaGVycyB0aGF0IHNob3VsZCBiZSB0cmFja2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBjYWxsYmFjayBUaGUgbWV0aG9kIHRvIGNhbGwgd2hlbiBhbGwgcHVibGlzaGVycyBoYXZlIGVtaXR0ZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHN1YnNjcmlwdGlvbiBvYmogd2hlcmUgYHN0b3BgIGlzIGFuIHVuc3ViIGZ1bmN0aW9uIGFuZCBgbGlzdGVuYWJsZWAgaXMgYW4gYXJyYXkgb2YgbGlzdGVuYWJsZXNcbiAgICAgKi9cbiAgICBqb2luQ29uY2F0OiBtYWtlcihcImFsbFwiKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBvbmNlIGFsbCBsaXN0ZW5hYmxlcyBoYXZlIHRyaWdnZXJlZC5cbiAgICAgKiBJZiBhIGNhbGxiYWNrIHRyaWdnZXJzIHR3aWNlIGJlZm9yZSB0aGF0IGhhcHBlbnMsIGFuIGVycm9yIGlzIHRocm93bi5cbiAgICAgKiBAcGFyYW0gey4uLlB1Ymxpc2hlcnN9IHB1Ymxpc2hlcnMgUHVibGlzaGVycyB0aGF0IHNob3VsZCBiZSB0cmFja2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBjYWxsYmFjayBUaGUgbWV0aG9kIHRvIGNhbGwgd2hlbiBhbGwgcHVibGlzaGVycyBoYXZlIGVtaXR0ZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHN1YnNjcmlwdGlvbiBvYmogd2hlcmUgYHN0b3BgIGlzIGFuIHVuc3ViIGZ1bmN0aW9uIGFuZCBgbGlzdGVuYWJsZWAgaXMgYW4gYXJyYXkgb2YgbGlzdGVuYWJsZXNcbiAgICAgKi9cbiAgICBqb2luU3RyaWN0OiBtYWtlcihcInN0cmljdFwiKVxufTtcbiIsInZhciBfID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIExpc3RlbmVyTWV0aG9kcyA9IHJlcXVpcmUoJy4vTGlzdGVuZXJNZXRob2RzJyk7XG5cbi8qKlxuICogQSBtb2R1bGUgbWVhbnQgdG8gYmUgY29uc3VtZWQgYXMgYSBtaXhpbiBieSBhIFJlYWN0IGNvbXBvbmVudC4gU3VwcGxpZXMgdGhlIG1ldGhvZHMgZnJvbVxuICogYExpc3RlbmVyTWV0aG9kc2AgbWl4aW4gYW5kIHRha2VzIGNhcmUgb2YgdGVhcmRvd24gb2Ygc3Vic2NyaXB0aW9ucy5cbiAqIE5vdGUgdGhhdCBpZiB5b3UncmUgdXNpbmcgdGhlIGBjb25uZWN0YCBtaXhpbiB5b3UgZG9uJ3QgbmVlZCB0aGlzIG1peGluLCBhcyBjb25uZWN0IHdpbGxcbiAqIGltcG9ydCBldmVyeXRoaW5nIHRoaXMgbWl4aW4gY29udGFpbnMhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gXy5leHRlbmQoe1xuXG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIGFsbCBsaXN0ZW5lciBwcmV2aW91c2x5IHJlZ2lzdGVyZWQuXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IExpc3RlbmVyTWV0aG9kcy5zdG9wTGlzdGVuaW5nVG9BbGxcblxufSwgTGlzdGVuZXJNZXRob2RzKTtcbiIsInZhciBfID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKipcbiAqIEEgbW9kdWxlIG9mIG1ldGhvZHMgZm9yIG9iamVjdCB0aGF0IHlvdSB3YW50IHRvIGJlIGFibGUgdG8gbGlzdGVuIHRvLlxuICogVGhpcyBtb2R1bGUgaXMgY29uc3VtZWQgYnkgYGNyZWF0ZVN0b3JlYCBhbmQgYGNyZWF0ZUFjdGlvbmBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBIb29rIHVzZWQgYnkgdGhlIHB1Ymxpc2hlciB0aGF0IGlzIGludm9rZWQgYmVmb3JlIGVtaXR0aW5nXG4gICAgICogYW5kIGJlZm9yZSBgc2hvdWxkRW1pdGAuIFRoZSBhcmd1bWVudHMgYXJlIHRoZSBvbmVzIHRoYXQgdGhlIGFjdGlvblxuICAgICAqIGlzIGludm9rZWQgd2l0aC4gSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHNvbWV0aGluZyBvdGhlciB0aGFuXG4gICAgICogdW5kZWZpbmVkLCB0aGF0IHdpbGwgYmUgcGFzc2VkIG9uIGFzIGFyZ3VtZW50cyBmb3Igc2hvdWxkRW1pdCBhbmRcbiAgICAgKiBlbWlzc2lvbi5cbiAgICAgKi9cbiAgICBwcmVFbWl0OiBmdW5jdGlvbigpIHt9LFxuXG4gICAgLyoqXG4gICAgICogSG9vayB1c2VkIGJ5IHRoZSBwdWJsaXNoZXIgYWZ0ZXIgYHByZUVtaXRgIHRvIGRldGVybWluZSBpZiB0aGVcbiAgICAgKiBldmVudCBzaG91bGQgYmUgZW1pdHRlZCB3aXRoIGdpdmVuIGFyZ3VtZW50cy4gVGhpcyBtYXkgYmUgb3ZlcnJpZGRlblxuICAgICAqIGluIHlvdXIgYXBwbGljYXRpb24sIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gYWx3YXlzIHJldHVybnMgdHJ1ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIGV2ZW50IHNob3VsZCBiZSBlbWl0dGVkXG4gICAgICovXG4gICAgc2hvdWxkRW1pdDogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGFjdGlvbiB0cmlnZ2VyZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBldmVudCBoYW5kbGVyXG4gICAgICogQHBhcmFtIHtNaXhlZH0gW29wdGlvbmFsXSBiaW5kQ29udGV4dCBUaGUgY29udGV4dCB0byBiaW5kIHRoZSBjYWxsYmFjayB3aXRoXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBDYWxsYmFjayB0aGF0IHVuc3Vic2NyaWJlcyB0aGUgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVyXG4gICAgICovXG4gICAgbGlzdGVuOiBmdW5jdGlvbihjYWxsYmFjaywgYmluZENvbnRleHQpIHtcbiAgICAgICAgYmluZENvbnRleHQgPSBiaW5kQ29udGV4dCB8fCB0aGlzO1xuICAgICAgICB2YXIgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgaWYgKGFib3J0ZWQpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGJpbmRDb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfSwgbWUgPSB0aGlzLCBhYm9ydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW1pdHRlci5hZGRMaXN0ZW5lcih0aGlzLmV2ZW50TGFiZWwsIGV2ZW50SGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbWUuZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihtZS5ldmVudExhYmVsLCBldmVudEhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggaGFuZGxlcnMgdG8gcHJvbWlzZSB0aGF0IHRyaWdnZXIgdGhlIGNvbXBsZXRlZCBhbmQgZmFpbGVkXG4gICAgICogY2hpbGQgcHVibGlzaGVycywgaWYgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFRoZSBwcm9taXNlIHRvIGF0dGFjaCB0b1xuICAgICAqL1xuICAgIHByb21pc2U6IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcblxuICAgICAgICB2YXIgY2FuSGFuZGxlUHJvbWlzZSA9XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmluZGV4T2YoJ2NvbXBsZXRlZCcpID49IDAgJiZcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uaW5kZXhPZignZmFpbGVkJykgPj0gMDtcblxuICAgICAgICBpZiAoIWNhbkhhbmRsZVByb21pc2Upe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQdWJsaXNoZXIgbXVzdCBoYXZlIFwiY29tcGxldGVkXCIgYW5kIFwiZmFpbGVkXCIgY2hpbGQgcHVibGlzaGVycycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUuY29tcGxldGVkKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtZS5mYWlsZWQoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGFjdGlvbiB0cmlnZ2VyZWQsIHdoaWNoIHNob3VsZFxuICAgICAqIHJldHVybiBhIHByb21pc2UgdGhhdCBpbiB0dXJuIGlzIHBhc3NlZCB0byBgdGhpcy5wcm9taXNlYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyIGFzIGV2ZW50IGhhbmRsZXJcbiAgICAgKi9cbiAgICBsaXN0ZW5BbmRQcm9taXNlOiBmdW5jdGlvbihjYWxsYmFjaywgYmluZENvbnRleHQpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgYmluZENvbnRleHQgPSBiaW5kQ29udGV4dCB8fCB0aGlzO1xuICAgICAgICB0aGlzLndpbGxDYWxsUHJvbWlzZSA9ICh0aGlzLndpbGxDYWxsUHJvbWlzZSB8fCAwKSArIDE7XG5cbiAgICAgICAgdmFyIHJlbW92ZUxpc3RlbiA9IHRoaXMubGlzdGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHByb21pc2UgYnV0IGdvdCAnICsgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gY2FsbGJhY2suYXBwbHkoYmluZENvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIG1lLnByb21pc2UuY2FsbChtZSwgcHJvbWlzZSk7XG4gICAgICAgIH0sIGJpbmRDb250ZXh0KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG1lLndpbGxDYWxsUHJvbWlzZS0tO1xuICAgICAgICAgIHJlbW92ZUxpc3Rlbi5jYWxsKG1lKTtcbiAgICAgICAgfTtcblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgYW4gZXZlbnQgdXNpbmcgYHRoaXMuZW1pdHRlcmAgKGlmIGBzaG91bGRFbWl0YCBhZ3JlZXMpXG4gICAgICovXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgcHJlID0gdGhpcy5wcmVFbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBhcmdzID0gcHJlID09PSB1bmRlZmluZWQgPyBhcmdzIDogXy5pc0FyZ3VtZW50cyhwcmUpID8gcHJlIDogW10uY29uY2F0KHByZSk7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZEVtaXQuYXBwbHkodGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KHRoaXMuZXZlbnRMYWJlbCwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJpZXMgdG8gcHVibGlzaCB0aGUgZXZlbnQgb24gdGhlIG5leHQgdGlja1xuICAgICAqL1xuICAgIHRyaWdnZXJBc3luYzogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsbWUgPSB0aGlzO1xuICAgICAgICBfLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbWUudHJpZ2dlci5hcHBseShtZSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgUHJvbWlzZSBmb3IgdGhlIHRyaWdnZXJlZCBhY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICogICBSZXNvbHZlZCBieSBjb21wbGV0ZWQgY2hpbGQgYWN0aW9uLlxuICAgICAqICAgUmVqZWN0ZWQgYnkgZmFpbGVkIGNoaWxkIGFjdGlvbi5cbiAgICAgKiAgIElmIGxpc3RlbkFuZFByb21pc2UnZCwgdGhlbiBwcm9taXNlIGFzc29jaWF0ZWQgdG8gdGhpcyB0cmlnZ2VyLlxuICAgICAqICAgT3RoZXJ3aXNlLCB0aGUgcHJvbWlzZSBpcyBmb3IgbmV4dCBjaGlsZCBhY3Rpb24gY29tcGxldGlvbi5cbiAgICAgKi9cbiAgICB0cmlnZ2VyUHJvbWlzZTogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgdmFyIGNhbkhhbmRsZVByb21pc2UgPVxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5pbmRleE9mKCdjb21wbGV0ZWQnKSA+PSAwICYmXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmluZGV4T2YoJ2ZhaWxlZCcpID49IDA7XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSBfLmNyZWF0ZVByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAvLyBJZiBgbGlzdGVuQW5kUHJvbWlzZWAgaXMgbGlzdGVuaW5nXG4gICAgICAgICAgICAvLyBwYXRjaCBgcHJvbWlzZWAgdy8gY29udGV4dC1sb2FkZWQgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgICAgIGlmIChtZS53aWxsQ2FsbFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBfLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkX3Byb21pc2VfbWV0aG9kID0gbWUucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgbWUucHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhY2sgdG8geW91ciByZWd1bGFybHkgc2NoZWR1bGUgcHJvZ3JhbW1pbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5wcm9taXNlID0gb2xkX3Byb21pc2VfbWV0aG9kO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lLnByb21pc2UuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG1lLnRyaWdnZXIuYXBwbHkobWUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhbkhhbmRsZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlU3VjY2VzcyA9IG1lLmNvbXBsZXRlZC5saXN0ZW4oZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVTdWNjZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZUZhaWxlZCA9IG1lLmZhaWxlZC5saXN0ZW4oZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVTdWNjZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoYXJncyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLnRyaWdnZXJBc3luYy5hcHBseShtZSwgYXJncyk7XG5cbiAgICAgICAgICAgIGlmICghY2FuSGFuZGxlUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxufTtcbiIsIi8qKlxuICogQSBtb2R1bGUgb2YgbWV0aG9kcyB0aGF0IHlvdSB3YW50IHRvIGluY2x1ZGUgaW4gYWxsIHN0b3Jlcy5cbiAqIFRoaXMgbW9kdWxlIGlzIGNvbnN1bWVkIGJ5IGBjcmVhdGVTdG9yZWAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RvcmUsIGRlZmluaXRpb24pIHtcbiAgZm9yICh2YXIgbmFtZSBpbiBkZWZpbml0aW9uKSB7XG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZmluaXRpb24sIG5hbWUpO1xuXG4gICAgICAgIGlmICghcHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlIHx8IHR5cGVvZiBwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWUgIT09ICdmdW5jdGlvbicgfHwgIWRlZmluaXRpb24uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RvcmVbbmFtZV0gPSBkZWZpbml0aW9uW25hbWVdLmJpbmQoc3RvcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IGRlZmluaXRpb25bbmFtZV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ2Z1bmN0aW9uJyB8fCAhZGVmaW5pdGlvbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdG9yZVtuYW1lXSA9IHByb3BlcnR5LmJpbmQoc3RvcmUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdG9yZTtcbn07XG4iLCJ2YXIgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1ldGhvZHMnKSxcbiAgICBMaXN0ZW5lck1peGluID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1peGluJyksXG4gICAgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0ZW5hYmxlLGtleSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5vYmplY3QoW2tleV0sW2xpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKCldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfLmV4dGVuZCh0aGlzLExpc3RlbmVyTWV0aG9kcyk7XG4gICAgICAgICAgICB2YXIgbWUgPSB0aGlzLCBjYiA9IChrZXkgPT09IHVuZGVmaW5lZCA/IHRoaXMuc2V0U3RhdGUgOiBmdW5jdGlvbih2KXtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lLmlzTW91bnRlZCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBtZS5pc01vdW50ZWQoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5zZXRTdGF0ZShfLm9iamVjdChba2V5XSxbdl0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obGlzdGVuYWJsZSxjYik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBMaXN0ZW5lck1peGluLmNvbXBvbmVudFdpbGxVbm1vdW50XG4gICAgfTtcbn07XG4iLCJ2YXIgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1ldGhvZHMnKSxcbiAgICBMaXN0ZW5lck1peGluID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1peGluJyksXG4gICAgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0ZW5hYmxlLCBrZXksIGZpbHRlckZ1bmMpIHtcbiAgICBmaWx0ZXJGdW5jID0gXy5pc0Z1bmN0aW9uKGtleSkgPyBrZXkgOiBmaWx0ZXJGdW5jO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uaXNGdW5jdGlvbihrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlckZ1bmMuY2FsbCh0aGlzLCBsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIGluaXRpYWwgcGF5bG9hZCBmcm9tIHN0b3JlLlxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmaWx0ZXJGdW5jLmNhbGwodGhpcywgbGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUoKSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihyZXN1bHQpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfLm9iamVjdChba2V5XSwgW3Jlc3VsdF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF8uZXh0ZW5kKHRoaXMsIExpc3RlbmVyTWV0aG9kcyk7XG4gICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGNiID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2V0U3RhdGUoZmlsdGVyRnVuYy5jYWxsKG1lLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmaWx0ZXJGdW5jLmNhbGwobWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2V0U3RhdGUoXy5vYmplY3QoW2tleV0sIFtyZXN1bHRdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhsaXN0ZW5hYmxlLCBjYik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBMaXN0ZW5lck1peGluLmNvbXBvbmVudFdpbGxVbm1vdW50XG4gICAgfTtcbn07XG5cbiIsInZhciBfID0gcmVxdWlyZSgnLi91dGlscycpLFxuICAgIEFjdGlvbk1ldGhvZHMgPSByZXF1aXJlKCcuL0FjdGlvbk1ldGhvZHMnKSxcbiAgICBQdWJsaXNoZXJNZXRob2RzID0gcmVxdWlyZSgnLi9QdWJsaXNoZXJNZXRob2RzJyksXG4gICAgS2VlcCA9IHJlcXVpcmUoJy4vS2VlcCcpLFxuICAgIGFsbG93ZWQgPSB7cHJlRW1pdDoxLHNob3VsZEVtaXQ6MX07XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhY3Rpb24gZnVuY3RvciBvYmplY3QuIEl0IGlzIG1peGVkIGluIHdpdGggZnVuY3Rpb25zXG4gKiBmcm9tIHRoZSBgUHVibGlzaGVyTWV0aG9kc2AgbWl4aW4uIGBwcmVFbWl0YCBhbmQgYHNob3VsZEVtaXRgIG1heVxuICogYmUgb3ZlcnJpZGRlbiBpbiB0aGUgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb24gVGhlIGFjdGlvbiBvYmplY3QgZGVmaW5pdGlvblxuICovXG52YXIgY3JlYXRlQWN0aW9uID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuXG4gICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24gfHwge307XG4gICAgaWYgKCFfLmlzT2JqZWN0KGRlZmluaXRpb24pKXtcbiAgICAgICAgZGVmaW5pdGlvbiA9IHthY3Rpb25OYW1lOiBkZWZpbml0aW9ufTtcbiAgICB9XG5cbiAgICBmb3IodmFyIGEgaW4gQWN0aW9uTWV0aG9kcyl7XG4gICAgICAgIGlmICghYWxsb3dlZFthXSAmJiBQdWJsaXNoZXJNZXRob2RzW2FdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3ZlcnJpZGUgQVBJIG1ldGhvZCBcIiArIGEgK1xuICAgICAgICAgICAgICAgIFwiIGluIFJlZmx1eC5BY3Rpb25NZXRob2RzLiBVc2UgYW5vdGhlciBtZXRob2QgbmFtZSBvciBvdmVycmlkZSBpdCBvbiBSZWZsdXguUHVibGlzaGVyTWV0aG9kcyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yKHZhciBkIGluIGRlZmluaXRpb24pe1xuICAgICAgICBpZiAoIWFsbG93ZWRbZF0gJiYgUHVibGlzaGVyTWV0aG9kc1tkXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG92ZXJyaWRlIEFQSSBtZXRob2QgXCIgKyBkICtcbiAgICAgICAgICAgICAgICBcIiBpbiBhY3Rpb24gY3JlYXRpb24uIFVzZSBhbm90aGVyIG1ldGhvZCBuYW1lIG9yIG92ZXJyaWRlIGl0IG9uIFJlZmx1eC5QdWJsaXNoZXJNZXRob2RzIGluc3RlYWQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWZpbml0aW9uLmNoaWxkcmVuID0gZGVmaW5pdGlvbi5jaGlsZHJlbiB8fCBbXTtcbiAgICBpZiAoZGVmaW5pdGlvbi5hc3luY1Jlc3VsdCl7XG4gICAgICAgIGRlZmluaXRpb24uY2hpbGRyZW4gPSBkZWZpbml0aW9uLmNoaWxkcmVuLmNvbmNhdChbXCJjb21wbGV0ZWRcIixcImZhaWxlZFwiXSk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwLCBjaGlsZEFjdGlvbnMgPSB7fTtcbiAgICBmb3IgKDsgaSA8IGRlZmluaXRpb24uY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5hbWUgPSBkZWZpbml0aW9uLmNoaWxkcmVuW2ldO1xuICAgICAgICBjaGlsZEFjdGlvbnNbbmFtZV0gPSBjcmVhdGVBY3Rpb24obmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQgPSBfLmV4dGVuZCh7XG4gICAgICAgIGV2ZW50TGFiZWw6IFwiYWN0aW9uXCIsXG4gICAgICAgIGVtaXR0ZXI6IG5ldyBfLkV2ZW50RW1pdHRlcigpLFxuICAgICAgICBfaXNBY3Rpb246IHRydWVcbiAgICB9LCBQdWJsaXNoZXJNZXRob2RzLCBBY3Rpb25NZXRob2RzLCBkZWZpbml0aW9uKTtcblxuICAgIHZhciBmdW5jdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0cmlnZ2VyVHlwZSA9IGZ1bmN0b3Iuc3luYyA/IFwidHJpZ2dlclwiIDpcbiAgICAgICAgICAgICggXy5lbnZpcm9ubWVudC5oYXNQcm9taXNlcyA/IFwidHJpZ2dlclByb21pc2VcIiA6IFwidHJpZ2dlckFzeW5jXCIgKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0b3JbdHJpZ2dlclR5cGVdLmFwcGx5KGZ1bmN0b3IsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIF8uZXh0ZW5kKGZ1bmN0b3IsY2hpbGRBY3Rpb25zLGNvbnRleHQpO1xuXG4gICAgS2VlcC5jcmVhdGVkQWN0aW9ucy5wdXNoKGZ1bmN0b3IpO1xuXG4gICAgcmV0dXJuIGZ1bmN0b3I7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQWN0aW9uO1xuIiwidmFyIF8gPSByZXF1aXJlKCcuL3V0aWxzJyksXG4gICAgS2VlcCA9IHJlcXVpcmUoJy4vS2VlcCcpLFxuICAgIG1peGVyID0gcmVxdWlyZSgnLi9taXhlcicpLFxuICAgIGFsbG93ZWQgPSB7cHJlRW1pdDoxLHNob3VsZEVtaXQ6MX0sXG4gICAgYmluZE1ldGhvZHMgPSByZXF1aXJlKCcuL2JpbmRNZXRob2RzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBldmVudCBlbWl0dGluZyBEYXRhIFN0b3JlLiBJdCBpcyBtaXhlZCBpbiB3aXRoIGZ1bmN0aW9uc1xuICogZnJvbSB0aGUgYExpc3RlbmVyTWV0aG9kc2AgYW5kIGBQdWJsaXNoZXJNZXRob2RzYCBtaXhpbnMuIGBwcmVFbWl0YFxuICogYW5kIGBzaG91bGRFbWl0YCBtYXkgYmUgb3ZlcnJpZGRlbiBpbiB0aGUgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb24gVGhlIGRhdGEgc3RvcmUgb2JqZWN0IGRlZmluaXRpb25cbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBkYXRhIHN0b3JlIGluc3RhbmNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuXG4gICAgdmFyIFN0b3JlTWV0aG9kcyA9IHJlcXVpcmUoJy4vU3RvcmVNZXRob2RzJyksXG4gICAgICAgIFB1Ymxpc2hlck1ldGhvZHMgPSByZXF1aXJlKCcuL1B1Ymxpc2hlck1ldGhvZHMnKSxcbiAgICAgICAgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1ldGhvZHMnKTtcblxuICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uIHx8IHt9O1xuXG4gICAgZm9yKHZhciBhIGluIFN0b3JlTWV0aG9kcyl7XG4gICAgICAgIGlmICghYWxsb3dlZFthXSAmJiAoUHVibGlzaGVyTWV0aG9kc1thXSB8fCBMaXN0ZW5lck1ldGhvZHNbYV0pKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBvdmVycmlkZSBBUEkgbWV0aG9kIFwiICsgYSArXG4gICAgICAgICAgICAgICAgXCIgaW4gUmVmbHV4LlN0b3JlTWV0aG9kcy4gVXNlIGFub3RoZXIgbWV0aG9kIG5hbWUgb3Igb3ZlcnJpZGUgaXQgb24gUmVmbHV4LlB1Ymxpc2hlck1ldGhvZHMgLyBSZWZsdXguTGlzdGVuZXJNZXRob2RzIGluc3RlYWQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IodmFyIGQgaW4gZGVmaW5pdGlvbil7XG4gICAgICAgIGlmICghYWxsb3dlZFtkXSAmJiAoUHVibGlzaGVyTWV0aG9kc1tkXSB8fCBMaXN0ZW5lck1ldGhvZHNbZF0pKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBvdmVycmlkZSBBUEkgbWV0aG9kIFwiICsgZCArXG4gICAgICAgICAgICAgICAgXCIgaW4gc3RvcmUgY3JlYXRpb24uIFVzZSBhbm90aGVyIG1ldGhvZCBuYW1lIG9yIG92ZXJyaWRlIGl0IG9uIFJlZmx1eC5QdWJsaXNoZXJNZXRob2RzIC8gUmVmbHV4Lkxpc3RlbmVyTWV0aG9kcyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVmaW5pdGlvbiA9IG1peGVyKGRlZmluaXRpb24pO1xuXG4gICAgZnVuY3Rpb24gU3RvcmUoKSB7XG4gICAgICAgIHZhciBpPTAsIGFycjtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBfLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmV2ZW50TGFiZWwgPSBcImNoYW5nZVwiO1xuICAgICAgICBiaW5kTWV0aG9kcyh0aGlzLCBkZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuaW5pdCAmJiBfLmlzRnVuY3Rpb24odGhpcy5pbml0KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGlzdGVuYWJsZXMpe1xuICAgICAgICAgICAgYXJyID0gW10uY29uY2F0KHRoaXMubGlzdGVuYWJsZXMpO1xuICAgICAgICAgICAgZm9yKDtpIDwgYXJyLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG9NYW55KGFycltpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfLmV4dGVuZChTdG9yZS5wcm90b3R5cGUsIExpc3RlbmVyTWV0aG9kcywgUHVibGlzaGVyTWV0aG9kcywgU3RvcmVNZXRob2RzLCBkZWZpbml0aW9uKTtcblxuICAgIHZhciBzdG9yZSA9IG5ldyBTdG9yZSgpO1xuICAgIEtlZXAuY3JlYXRlZFN0b3Jlcy5wdXNoKHN0b3JlKTtcblxuICAgIHJldHVybiBzdG9yZTtcbn07XG4iLCJleHBvcnRzLkFjdGlvbk1ldGhvZHMgPSByZXF1aXJlKCcuL0FjdGlvbk1ldGhvZHMnKTtcblxuZXhwb3J0cy5MaXN0ZW5lck1ldGhvZHMgPSByZXF1aXJlKCcuL0xpc3RlbmVyTWV0aG9kcycpO1xuXG5leHBvcnRzLlB1Ymxpc2hlck1ldGhvZHMgPSByZXF1aXJlKCcuL1B1Ymxpc2hlck1ldGhvZHMnKTtcblxuZXhwb3J0cy5TdG9yZU1ldGhvZHMgPSByZXF1aXJlKCcuL1N0b3JlTWV0aG9kcycpO1xuXG5leHBvcnRzLmNyZWF0ZUFjdGlvbiA9IHJlcXVpcmUoJy4vY3JlYXRlQWN0aW9uJyk7XG5cbmV4cG9ydHMuY3JlYXRlU3RvcmUgPSByZXF1aXJlKCcuL2NyZWF0ZVN0b3JlJyk7XG5cbmV4cG9ydHMuY29ubmVjdCA9IHJlcXVpcmUoJy4vY29ubmVjdCcpO1xuXG5leHBvcnRzLmNvbm5lY3RGaWx0ZXIgPSByZXF1aXJlKCcuL2Nvbm5lY3RGaWx0ZXInKTtcblxuZXhwb3J0cy5MaXN0ZW5lck1peGluID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1peGluJyk7XG5cbmV4cG9ydHMubGlzdGVuVG8gPSByZXF1aXJlKCcuL2xpc3RlblRvJyk7XG5cbmV4cG9ydHMubGlzdGVuVG9NYW55ID0gcmVxdWlyZSgnLi9saXN0ZW5Ub01hbnknKTtcblxuXG52YXIgbWFrZXIgPSByZXF1aXJlKCcuL2pvaW5zJykuc3RhdGljSm9pbkNyZWF0b3I7XG5cbmV4cG9ydHMuam9pblRyYWlsaW5nID0gZXhwb3J0cy5hbGwgPSBtYWtlcihcImxhc3RcIik7IC8vIFJlZmx1eC5hbGwgYWxpYXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuZXhwb3J0cy5qb2luTGVhZGluZyA9IG1ha2VyKFwiZmlyc3RcIik7XG5cbmV4cG9ydHMuam9pblN0cmljdCA9IG1ha2VyKFwic3RyaWN0XCIpO1xuXG5leHBvcnRzLmpvaW5Db25jYXQgPSBtYWtlcihcImFsbFwiKTtcblxudmFyIF8gPSBleHBvcnRzLnV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5leHBvcnRzLkV2ZW50RW1pdHRlciA9IF8uRXZlbnRFbWl0dGVyO1xuXG5leHBvcnRzLlByb21pc2UgPSBfLlByb21pc2U7XG5cbi8qKlxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc2V0IG9mIGFjdGlvbnNcbiAqXG4gKiBAcGFyYW0gZGVmaW5pdGlvbnMgdGhlIGRlZmluaXRpb25zIGZvciB0aGUgYWN0aW9ucyB0byBiZSBjcmVhdGVkXG4gKiBAcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhY3Rpb25zIG9mIGNvcnJlc3BvbmRpbmcgYWN0aW9uIG5hbWVzXG4gKi9cbmV4cG9ydHMuY3JlYXRlQWN0aW9ucyA9IGZ1bmN0aW9uKGRlZmluaXRpb25zKSB7XG4gICAgdmFyIGFjdGlvbnMgPSB7fTtcbiAgICBmb3IgKHZhciBrIGluIGRlZmluaXRpb25zKXtcbiAgICAgICAgaWYgKGRlZmluaXRpb25zLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gZGVmaW5pdGlvbnNba10sXG4gICAgICAgICAgICAgICAgYWN0aW9uTmFtZSA9IF8uaXNPYmplY3QodmFsKSA/IGsgOiB2YWw7XG5cbiAgICAgICAgICAgIGFjdGlvbnNbYWN0aW9uTmFtZV0gPSBleHBvcnRzLmNyZWF0ZUFjdGlvbih2YWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY3Rpb25zO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBldmVudG1pdHRlciB0aGF0IFJlZmx1eCB1c2VzXG4gKi9cbmV4cG9ydHMuc2V0RXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBfLkV2ZW50RW1pdHRlciA9IGN0eDtcbn07XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBQcm9taXNlIGxpYnJhcnkgdGhhdCBSZWZsdXggdXNlc1xuICovXG5leHBvcnRzLnNldFByb21pc2UgPSBmdW5jdGlvbihjdHgpIHtcbiAgICBleHBvcnRzLlByb21pc2UgPSBfLlByb21pc2UgPSBjdHg7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgUHJvbWlzZSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBuZXcgcHJvbWlzZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgaGFzIHRoZSBzaWduYXR1cmUgYGZ1bmN0aW9uKHJlc29sdmVyKSB7IHJldHVybiBbbmV3IFByb21pc2VdOyB9YFxuICovXG5leHBvcnRzLnNldFByb21pc2VGYWN0b3J5ID0gZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIF8uY3JlYXRlUHJvbWlzZSA9IGZhY3Rvcnk7XG59O1xuXG5cbi8qKlxuICogU2V0cyB0aGUgbWV0aG9kIHVzZWQgZm9yIGRlZmVycmluZyBhY3Rpb25zIGFuZCBzdG9yZXNcbiAqL1xuZXhwb3J0cy5uZXh0VGljayA9IGZ1bmN0aW9uKG5leHRUaWNrKSB7XG4gICAgXy5uZXh0VGljayA9IG5leHRUaWNrO1xufTtcblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgc2V0IG9mIGNyZWF0ZWQgYWN0aW9ucyBhbmQgc3RvcmVzIGZvciBpbnRyb3NwZWN0aW9uXG4gKi9cbmV4cG9ydHMuX19rZWVwID0gcmVxdWlyZSgnLi9LZWVwJyk7XG5cbi8qKlxuICogV2FybiBpZiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBub3QgYXZhaWxhYmxlXG4gKi9cbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgbm90IGF2YWlsYWJsZS4gJyArXG4gICAgJ0VTNSBzaGltIHJlcXVpcmVkLiAnICtcbiAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Nwb2lrZS9yZWZsdXhqcyNlczUnXG4gICk7XG59XG4iLCIvKipcbiAqIEludGVybmFsIG1vZHVsZSB1c2VkIHRvIGNyZWF0ZSBzdGF0aWMgYW5kIGluc3RhbmNlIGpvaW4gbWV0aG9kc1xuICovXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICBfID0gcmVxdWlyZShcIi4vdXRpbHNcIiksXG4gICAgY3JlYXRlU3RvcmUgPSByZXF1aXJlKFwiLi9jcmVhdGVTdG9yZVwiKSxcbiAgICBzdHJhdGVneU1ldGhvZE5hbWVzID0ge1xuICAgICAgICBzdHJpY3Q6IFwiam9pblN0cmljdFwiLFxuICAgICAgICBmaXJzdDogXCJqb2luTGVhZGluZ1wiLFxuICAgICAgICBsYXN0OiBcImpvaW5UcmFpbGluZ1wiLFxuICAgICAgICBhbGw6IFwiam9pbkNvbmNhdFwiXG4gICAgfTtcblxuLyoqXG4gKiBVc2VkIGluIGBpbmRleC5qc2AgdG8gY3JlYXRlIHRoZSBzdGF0aWMgam9pbiBtZXRob2RzXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyYXRlZ3kgV2hpY2ggc3RyYXRlZ3kgdG8gdXNlIHdoZW4gdHJhY2tpbmcgbGlzdGVuYWJsZSB0cmlnZ2VyIGFyZ3VtZW50c1xuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0YXRpYyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RvcmUgd2l0aCBhIGpvaW4gbGlzdGVuIG9uIHRoZSBnaXZlbiBsaXN0ZW5hYmxlcyB1c2luZyB0aGUgZ2l2ZW4gc3RyYXRlZ3lcbiAqL1xuZXhwb3J0cy5zdGF0aWNKb2luQ3JlYXRvciA9IGZ1bmN0aW9uKHN0cmF0ZWd5KXtcbiAgICByZXR1cm4gZnVuY3Rpb24oLyogbGlzdGVuYWJsZXMuLi4gKi8pIHtcbiAgICAgICAgdmFyIGxpc3RlbmFibGVzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gY3JlYXRlU3RvcmUoe1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0aGlzW3N0cmF0ZWd5TWV0aG9kTmFtZXNbc3RyYXRlZ3ldXS5hcHBseSh0aGlzLGxpc3RlbmFibGVzLmNvbmNhdChcInRyaWdnZXJBc3luY1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuXG4vKipcbiAqIFVzZWQgaW4gYExpc3RlbmVyTWV0aG9kcy5qc2AgdG8gY3JlYXRlIHRoZSBpbnN0YW5jZSBqb2luIG1ldGhvZHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJhdGVneSBXaGljaCBzdHJhdGVneSB0byB1c2Ugd2hlbiB0cmFja2luZyBsaXN0ZW5hYmxlIHRyaWdnZXIgYXJndW1lbnRzXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEFuIGluc3RhbmNlIG1ldGhvZCB3aGljaCBzZXRzIHVwIGEgam9pbiBsaXN0ZW4gb24gdGhlIGdpdmVuIGxpc3RlbmFibGVzIHVzaW5nIHRoZSBnaXZlbiBzdHJhdGVneVxuICovXG5leHBvcnRzLmluc3RhbmNlSm9pbkNyZWF0b3IgPSBmdW5jdGlvbihzdHJhdGVneSl7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKC8qIGxpc3RlbmFibGVzLi4uLCBjYWxsYmFjayovKXtcbiAgICAgICAgXy50aHJvd0lmKGFyZ3VtZW50cy5sZW5ndGggPCAyLCdDYW5ub3QgY3JlYXRlIGEgam9pbiB3aXRoIGxlc3MgdGhhbiAyIGxpc3RlbmFibGVzIScpO1xuICAgICAgICB2YXIgbGlzdGVuYWJsZXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICBjYWxsYmFjayA9IGxpc3RlbmFibGVzLnBvcCgpLFxuICAgICAgICAgICAgbnVtYmVyT2ZMaXN0ZW5hYmxlcyA9IGxpc3RlbmFibGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGpvaW4gPSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZMaXN0ZW5hYmxlczogbnVtYmVyT2ZMaXN0ZW5hYmxlcyxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogdGhpc1tjYWxsYmFja118fGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIHN0cmF0ZWd5OiBzdHJhdGVneVxuICAgICAgICAgICAgfSwgaSwgY2FuY2VscyA9IFtdLCBzdWJvYmo7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZkxpc3RlbmFibGVzOyBpKyspIHtcbiAgICAgICAgICAgIF8udGhyb3dJZih0aGlzLnZhbGlkYXRlTGlzdGVuaW5nKGxpc3RlbmFibGVzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bWJlck9mTGlzdGVuYWJsZXM7IGkrKykge1xuICAgICAgICAgICAgY2FuY2Vscy5wdXNoKGxpc3RlbmFibGVzW2ldLmxpc3RlbihuZXdMaXN0ZW5lcihpLGpvaW4pLHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXNldChqb2luKTtcbiAgICAgICAgc3Vib2JqID0ge2xpc3RlbmFibGU6IGxpc3RlbmFibGVzfTtcbiAgICAgICAgc3Vib2JqLnN0b3AgPSBtYWtlU3RvcHBlcihzdWJvYmosY2FuY2Vscyx0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gKHRoaXMuc3Vic2NyaXB0aW9ucyB8fCBbXSkuY29uY2F0KHN1Ym9iaik7XG4gICAgICAgIHJldHVybiBzdWJvYmo7XG4gICAgfTtcbn07XG5cbi8vIC0tLS0gaW50ZXJuYWwgam9pbiBmdW5jdGlvbnMgLS0tLVxuXG5mdW5jdGlvbiBtYWtlU3RvcHBlcihzdWJvYmosY2FuY2Vscyxjb250ZXh0KXtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBzdWJzID0gY29udGV4dC5zdWJzY3JpcHRpb25zLFxuICAgICAgICAgICAgaW5kZXggPSAoc3VicyA/IHN1YnMuaW5kZXhPZihzdWJvYmopIDogLTEpO1xuICAgICAgICBfLnRocm93SWYoaW5kZXggPT09IC0xLCdUcmllZCB0byByZW1vdmUgam9pbiBhbHJlYWR5IGdvbmUgZnJvbSBzdWJzY3JpcHRpb25zIGxpc3QhJyk7XG4gICAgICAgIGZvcihpPTA7aSA8IGNhbmNlbHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY2FuY2Vsc1tpXSgpO1xuICAgICAgICB9XG4gICAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiByZXNldChqb2luKSB7XG4gICAgam9pbi5saXN0ZW5hYmxlc0VtaXR0ZWQgPSBuZXcgQXJyYXkoam9pbi5udW1iZXJPZkxpc3RlbmFibGVzKTtcbiAgICBqb2luLmFyZ3MgPSBuZXcgQXJyYXkoam9pbi5udW1iZXJPZkxpc3RlbmFibGVzKTtcbn1cblxuZnVuY3Rpb24gbmV3TGlzdGVuZXIoaSxqb2luKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FsbGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChqb2luLmxpc3RlbmFibGVzRW1pdHRlZFtpXSl7XG4gICAgICAgICAgICBzd2l0Y2goam9pbi5zdHJhdGVneSl7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmljdFwiOiB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpY3Qgam9pbiBmYWlsZWQgYmVjYXVzZSBsaXN0ZW5lciB0cmlnZ2VyZWQgdHdpY2UuXCIpO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsYXN0XCI6IGpvaW4uYXJnc1tpXSA9IGNhbGxhcmdzOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWxsXCI6IGpvaW4uYXJnc1tpXS5wdXNoKGNhbGxhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGpvaW4ubGlzdGVuYWJsZXNFbWl0dGVkW2ldID0gdHJ1ZTtcbiAgICAgICAgICAgIGpvaW4uYXJnc1tpXSA9IChqb2luLnN0cmF0ZWd5PT09XCJhbGxcIj9bY2FsbGFyZ3NdOmNhbGxhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbWl0SWZBbGxMaXN0ZW5hYmxlc0VtaXR0ZWQoam9pbik7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZW1pdElmQWxsTGlzdGVuYWJsZXNFbWl0dGVkKGpvaW4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpvaW4ubnVtYmVyT2ZMaXN0ZW5hYmxlczsgaSsrKSB7XG4gICAgICAgIGlmICgham9pbi5saXN0ZW5hYmxlc0VtaXR0ZWRbaV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBqb2luLmNhbGxiYWNrLmFwcGx5KGpvaW4ubGlzdGVuZXIsam9pbi5hcmdzKTtcbiAgICByZXNldChqb2luKTtcbn1cbiIsInZhciBMaXN0ZW5lck1ldGhvZHMgPSByZXF1aXJlKCcuL0xpc3RlbmVyTWV0aG9kcycpO1xuXG4vKipcbiAqIEEgbWl4aW4gZmFjdG9yeSBmb3IgYSBSZWFjdCBjb21wb25lbnQuIE1lYW50IGFzIGEgbW9yZSBjb252ZW5pZW50IHdheSBvZiB1c2luZyB0aGUgYExpc3RlbmVyTWl4aW5gLFxuICogd2l0aG91dCBoYXZpbmcgdG8gbWFudWFsbHkgc2V0IGxpc3RlbmVycyBpbiB0aGUgYGNvbXBvbmVudERpZE1vdW50YCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtBY3Rpb258U3RvcmV9IGxpc3RlbmFibGUgQW4gQWN0aW9uIG9yIFN0b3JlIHRoYXQgc2hvdWxkIGJlXG4gKiAgbGlzdGVuZWQgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyIGFzIGV2ZW50IGhhbmRsZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBkZWZhdWx0Q2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyIGFzIGRlZmF1bHQgaGFuZGxlclxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IHRvIGJlIHVzZWQgYXMgYSBtaXhpbiwgd2hpY2ggc2V0cyB1cCB0aGUgbGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBsaXN0ZW5hYmxlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3RlbmFibGUsY2FsbGJhY2ssaW5pdGlhbCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB1cCB0aGUgbWl4aW4gYmVmb3JlIHRoZSBpbml0aWFsIHJlbmRlcmluZyBvY2N1cnMuIEltcG9ydCBtZXRob2RzIGZyb20gYExpc3RlbmVyTWV0aG9kc2BcbiAgICAgICAgICogYW5kIHRoZW4gbWFrZSB0aGUgY2FsbCB0byBgbGlzdGVuVG9gIHdpdGggdGhlIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yKHZhciBtIGluIExpc3RlbmVyTWV0aG9kcyl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbbV0gIT09IExpc3RlbmVyTWV0aG9kc1ttXSl7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW21dKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiQ2FuJ3QgaGF2ZSBvdGhlciBwcm9wZXJ0eSAnXCIrbStcIicgd2hlbiB1c2luZyBSZWZsdXgubGlzdGVuVG8hXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1ttXSA9IExpc3RlbmVyTWV0aG9kc1ttXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxpc3RlblRvKGxpc3RlbmFibGUsY2FsbGJhY2ssaW5pdGlhbCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhbnMgdXAgYWxsIGxpc3RlbmVyIHByZXZpb3VzbHkgcmVnaXN0ZXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBMaXN0ZW5lck1ldGhvZHMuc3RvcExpc3RlbmluZ1RvQWxsXG4gICAgfTtcbn07XG4iLCJ2YXIgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1ldGhvZHMnKTtcblxuLyoqXG4gKiBBIG1peGluIGZhY3RvcnkgZm9yIGEgUmVhY3QgY29tcG9uZW50LiBNZWFudCBhcyBhIG1vcmUgY29udmVuaWVudCB3YXkgb2YgdXNpbmcgdGhlIGBsaXN0ZW5lck1peGluYCxcbiAqIHdpdGhvdXQgaGF2aW5nIHRvIG1hbnVhbGx5IHNldCBsaXN0ZW5lcnMgaW4gdGhlIGBjb21wb25lbnREaWRNb3VudGAgbWV0aG9kLiBUaGlzIHZlcnNpb24gaXMgdXNlZFxuICogdG8gYXV0b21hdGljYWxseSBzZXQgdXAgYSBgbGlzdGVuVG9NYW55YCBjYWxsLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsaXN0ZW5hYmxlcyBBbiBvYmplY3Qgb2YgbGlzdGVuYWJsZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCB0byBiZSB1c2VkIGFzIGEgbWl4aW4sIHdoaWNoIHNldHMgdXAgdGhlIGxpc3RlbmVycyBmb3IgdGhlIGdpdmVuIGxpc3RlbmFibGVzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3RlbmFibGVzKXtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHVwIHRoZSBtaXhpbiBiZWZvcmUgdGhlIGluaXRpYWwgcmVuZGVyaW5nIG9jY3Vycy4gSW1wb3J0IG1ldGhvZHMgZnJvbSBgTGlzdGVuZXJNZXRob2RzYFxuICAgICAgICAgKiBhbmQgdGhlbiBtYWtlIHRoZSBjYWxsIHRvIGBsaXN0ZW5Ub2Agd2l0aCB0aGUgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IGZ1bmN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IodmFyIG0gaW4gTGlzdGVuZXJNZXRob2RzKXtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1ttXSAhPT0gTGlzdGVuZXJNZXRob2RzW21dKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbbV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJDYW4ndCBoYXZlIG90aGVyIHByb3BlcnR5ICdcIittK1wiJyB3aGVuIHVzaW5nIFJlZmx1eC5saXN0ZW5Ub01hbnkhXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpc1ttXSA9IExpc3RlbmVyTWV0aG9kc1ttXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxpc3RlblRvTWFueShsaXN0ZW5hYmxlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhbnMgdXAgYWxsIGxpc3RlbmVyIHByZXZpb3VzbHkgcmVnaXN0ZXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBMaXN0ZW5lck1ldGhvZHMuc3RvcExpc3RlbmluZ1RvQWxsXG4gICAgfTtcbn07XG4iLCJ2YXIgXyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtaXgoZGVmKSB7XG4gICAgdmFyIGNvbXBvc2VkID0ge1xuICAgICAgICBpbml0OiBbXSxcbiAgICAgICAgcHJlRW1pdDogW10sXG4gICAgICAgIHNob3VsZEVtaXQ6IFtdXG4gICAgfTtcblxuICAgIHZhciB1cGRhdGVkID0gKGZ1bmN0aW9uIG1peERlZihtaXhpbikge1xuICAgICAgICB2YXIgbWl4ZWQgPSB7fTtcbiAgICAgICAgaWYgKG1peGluLm1peGlucykge1xuICAgICAgICAgICAgbWl4aW4ubWl4aW5zLmZvckVhY2goZnVuY3Rpb24gKHN1Yk1peGluKSB7XG4gICAgICAgICAgICAgICAgXy5leHRlbmQobWl4ZWQsIG1peERlZihzdWJNaXhpbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXy5leHRlbmQobWl4ZWQsIG1peGluKTtcbiAgICAgICAgT2JqZWN0LmtleXMoY29tcG9zZWQpLmZvckVhY2goZnVuY3Rpb24gKGNvbXBvc2FibGUpIHtcbiAgICAgICAgICAgIGlmIChtaXhpbi5oYXNPd25Qcm9wZXJ0eShjb21wb3NhYmxlKSkge1xuICAgICAgICAgICAgICAgIGNvbXBvc2VkW2NvbXBvc2FibGVdLnB1c2gobWl4aW5bY29tcG9zYWJsZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1peGVkO1xuICAgIH0oZGVmKSk7XG5cbiAgICBpZiAoY29tcG9zZWQuaW5pdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHVwZGF0ZWQuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgY29tcG9zZWQuaW5pdC5mb3JFYWNoKGZ1bmN0aW9uIChpbml0KSB7XG4gICAgICAgICAgICAgICAgaW5pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoY29tcG9zZWQucHJlRW1pdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHVwZGF0ZWQucHJlRW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wb3NlZC5wcmVFbWl0LnJlZHVjZShmdW5jdGlvbiAoYXJncywgcHJlRW1pdCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHByZUVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBhcmdzIDogW25ld1ZhbHVlXTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGNvbXBvc2VkLnNob3VsZEVtaXQubGVuZ3RoID4gMSkge1xuICAgICAgICB1cGRhdGVkLnNob3VsZEVtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiAhY29tcG9zZWQuc2hvdWxkRW1pdC5zb21lKGZ1bmN0aW9uIChzaG91bGRFbWl0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFzaG91bGRFbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKGNvbXBvc2VkKS5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb3NhYmxlKSB7XG4gICAgICAgIGlmIChjb21wb3NlZFtjb21wb3NhYmxlXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHVwZGF0ZWRbY29tcG9zYWJsZV0gPSBjb21wb3NlZFtjb21wb3NhYmxlXVswXTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVwZGF0ZWQ7XG59O1xuIiwiZXhwb3J0cy5lbnZpcm9ubWVudCA9IHt9O1xuXG4vKlxuICogaXNPYmplY3QsIGV4dGVuZCwgaXNGdW5jdGlvbiwgaXNBcmd1bWVudHMgYXJlIHRha2VuIGZyb20gdW5kZXNjb3JlL2xvZGFzaCBpblxuICogb3JkZXIgdG8gcmVtb3ZlIHRoZSBkZXBlbmRlbmN5XG4gKi9cbnZhciBpc09iamVjdCA9IGV4cG9ydHMuaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG59O1xuXG5leHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICB2YXIgc291cmNlLCBwcm9wO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHByb3ApO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufTtcblxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcblxuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudGVtaXR0ZXIzJyk7XG5cbmV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufTtcblxuZXhwb3J0cy5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyaW5nKXtcbiAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3N0cmluZy5zbGljZSgxKTtcbn07XG5cbmV4cG9ydHMuY2FsbGJhY2tOYW1lID0gZnVuY3Rpb24oc3RyaW5nKXtcbiAgICByZXR1cm4gXCJvblwiK2V4cG9ydHMuY2FwaXRhbGl6ZShzdHJpbmcpO1xufTtcblxuZXhwb3J0cy5vYmplY3QgPSBmdW5jdGlvbihrZXlzLHZhbHMpe1xuICAgIHZhciBvPXt9LCBpPTA7XG4gICAgZm9yKDtpIDwga2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIG9ba2V5c1tpXV0gPSB2YWxzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbztcbn07XG5cbnRyeSB7XG4gICAgZXhwb3J0cy5Qcm9taXNlID0gUHJvbWlzZTtcbiAgICBleHBvcnRzLmNyZWF0ZVByb21pc2UgPSBmdW5jdGlvbihyZXNvbHZlcikge1xuICAgICAgICByZXR1cm4gbmV3IGV4cG9ydHMuUHJvbWlzZShyZXNvbHZlcik7XG4gICAgfTtcbn0gY2F0Y2ggKGVycikge1xuICAgIC8vIFJlZmVyZW5jZUVycm9yLCBQcm9taXNlIGlzIG5vdCBkZWZpbmVkXG4gICAgZXhwb3J0cy5Qcm9taXNlID0gbnVsbDtcbiAgICBleHBvcnRzLmNyZWF0ZVByb21pc2UgPSBmdW5jdGlvbigpIHt9O1xufVxuZXhwb3J0cy5lbnZpcm9ubWVudC5oYXNQcm9taXNlcyA9ICEhZXhwb3J0cy5Qcm9taXNlO1xuXG5leHBvcnRzLmlzQXJndW1lbnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAoJ2NhbGxlZScgaW4gdmFsdWUpICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInO1xufTtcblxuZXhwb3J0cy50aHJvd0lmID0gZnVuY3Rpb24odmFsLG1zZyl7XG4gICAgaWYgKHZhbCl7XG4gICAgICAgIHRocm93IEVycm9yKG1zZ3x8dmFsKTtcbiAgICB9XG59O1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgaWYgKHNlbGYuZmV0Y2gpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIGxpc3QgPSB0aGlzLm1hcFtuYW1lXVxuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdXG4gICAgICB0aGlzLm1hcFtuYW1lXSA9IGxpc3RcbiAgICB9XG4gICAgbGlzdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXNbMF0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gW25vcm1hbGl6ZVZhbHVlKHZhbHVlKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcylcbiAgICAgIH0sIHRoaXMpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKCk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmXG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG5cbiAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keVxuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG5cbiAgICAgIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkID8gcmVqZWN0ZWQgOiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgICByZXR1cm4gKG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xKSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QodXJsLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB0aGlzLnVybCA9IHVybFxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgJ29taXQnXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnKVxuICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIG9wdGlvbnMuYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShvcHRpb25zLmJvZHkpXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlcnMoeGhyKSB7XG4gICAgdmFyIGhlYWQgPSBuZXcgSGVhZGVycygpXG4gICAgdmFyIHBhaXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnRyaW0oKS5zcGxpdCgnXFxuJylcbiAgICBwYWlycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdmFyIHNwbGl0ID0gaGVhZGVyLnRyaW0oKS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gc3BsaXQuc2hpZnQoKS50cmltKClcbiAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWQuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfSlcbiAgICByZXR1cm4gaGVhZFxuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnVybCA9IG51bGxcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzXG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICAgIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dFxuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgPyBvcHRpb25zLmhlYWRlcnMgOiBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzO1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2U7XG5cbiAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gICAgLy8gVE9ETzogUmVxdWVzdCBjb25zdHJ1Y3RvciBzaG91bGQgYWNjZXB0IGlucHV0LCBpbml0XG4gICAgdmFyIHJlcXVlc3RcbiAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkgJiYgIWluaXQpIHtcbiAgICAgIHJlcXVlc3QgPSBpbnB1dFxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIGZ1bmN0aW9uIHJlc3BvbnNlVVJMKCkge1xuICAgICAgICBpZiAoJ3Jlc3BvbnNlVVJMJyBpbiB4aHIpIHtcbiAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVVJMXG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdm9pZCBzZWN1cml0eSB3YXJuaW5ncyBvbiBnZXRSZXNwb25zZUhlYWRlciB3aGVuIG5vdCBhbGxvd2VkIGJ5IENPUlNcbiAgICAgICAgaWYgKC9eWC1SZXF1ZXN0LVVSTDovbS50ZXN0KHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpIHtcbiAgICAgICAgICByZXR1cm4geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVJlcXVlc3QtVVJMJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhdHVzID0gKHhoci5zdGF0dXMgPT09IDEyMjMpID8gMjA0IDogeGhyLnN0YXR1c1xuICAgICAgICBpZiAoc3RhdHVzIDwgMTAwIHx8IHN0YXR1cyA+IDU5OSkge1xuICAgICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogaGVhZGVycyh4aHIpLFxuICAgICAgICAgIHVybDogcmVzcG9uc2VVUkwoKVxuICAgICAgICB9XG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKCk7XG4iLCJsZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5cbmxldCBhbmltRnJhbWU7XG5cbmNvbnN0IFRJTUVfRFVSQVRJT04gPSA0MDAwO1xuXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuLi9tb2R1bGVzJztcblxubGV0IEFjdGlvbnMgPSBSZWZsdXguY3JlYXRlQWN0aW9ucyh7XG4gICdjb3JyZWN0QW5zd2VyJzoge30sXG4gICdpbmNvcnJlY3RBbnN3ZXInOiB7fSxcbiAgJ3N0YXJ0VGltZXInIDoge30sXG4gICdwcm9ncmVzc1RpbWVyJyA6IHt9LFxuICAnc3RvcFRpbWVyJyA6IHt9LFxuICAncmVzdGFydEFwcCc6IHt9LFxuICAnc2V0RWxhcHNlZCc6IHt9XG59KTtcblxuQWN0aW9ucy5zdGFydFRpbWVyLmxpc3RlbigoKSA9PiB7XG5cdGxldCBzdGFydCA9IERhdGUubm93KCk7XG5cdGFuaW1GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiByYWYoKSB7XG5cdFx0bGV0IGVsYXBzZSA9IERhdGUubm93KCkgLSBzdGFydDtcblx0XHRpZiAoZWxhcHNlID4gVElNRV9EVVJBVElPTikge1xuXHRcdFx0Y29uc29sZS5sb2coJ1NUT1BQSU5HIFRIRSBUSU1FUicpO1xuXHRcdFx0QWN0aW9ucy5zdG9wVGltZXIoKTtcblx0XHRcdEFjdGlvbnMucHJvZ3Jlc3NUaW1lcihUSU1FX0RVUkFUSU9OKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QWN0aW9ucy5wcm9ncmVzc1RpbWVyKGVsYXBzZSk7XG5cdFx0fVxuXHRcdGFuaW1GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyYWYpO1xuXHR9KTtcbn0pO1xuXG5BY3Rpb25zLnN0b3BUaW1lci5saXN0ZW4oKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbUZyYW1lKSk7XG5cbmxldCByZXNldFRpbWVyID0gKCkgPT4ge1xuXHRBY3Rpb25zLnN0b3BUaW1lcigpO1xuXHRBY3Rpb25zLnN0YXJ0VGltZXIoKTtcbn1cblxuQWN0aW9ucy5jb3JyZWN0QW5zd2VyLmxpc3RlbihyZXNldFRpbWVyKTtcbkFjdGlvbnMuaW5jb3JyZWN0QW5zd2VyLmxpc3RlbihyZXNldFRpbWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgQWN0aW9ucztcbiIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5sZXQgQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvYWN0aW9ucycpO1xuXG4vL1N0b3Jlc1xubGV0IFN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL3N0b3JlJyk7XG5cbmltcG9ydCB7IEdhbWUsIFRpbWVyLCBTY29yZSB9IGZyb20gJy4vJztcblxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnLi4vbW9kdWxlcyc7XG5cbmxldCBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgbWl4aW5zOiBbXG4gICAgUmVmbHV4LmNvbm5lY3QoU3RvcmUpXG4gIF0sXG4gIHJlbmRlcigpe1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDE+Q29sb3VyIFdvcmQgLSA8c3Bhbj5jaG9vc2UgdGhlIGNvbG91ciwgbm90IHRoZSB3b3JkLjwvc3Bhbj48L2gxPlxuICAgICAgICA8R2FtZSBjb2xvcnM9e3RoaXMuc3RhdGUuY29sb3JzfSBjb3JyZWN0Q29sb3I9e3RoaXMuc3RhdGUuY29ycmVjdENvbG9yfS8+XG4gICAgICAgIDxUaW1lciBzdGFydD17dGhpcy5zdGF0ZS5zdGFydH0gZWxhcHNlZD17IHRoaXMuc3RhdGUuZWxhcHNlZCB9Lz5cbiAgICAgICAgPFNjb3JlIHNjb3JlPXt0aGlzLnN0YXRlLnNjb3JlfS8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJsZXQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xubGV0IFJlZmx1eCA9IHJlcXVpcmUoJ3JlZmx1eCcpO1xubGV0IEFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL2FjdGlvbnMnKTtcblxuLy9TdG9yZXNcbmxldCBTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9zdG9yZScpO1xuXG5pbXBvcnQgeyBzaHVmZmxlLCBjb2xvcnMgfSBmcm9tICcuLi9tb2R1bGVzJztcblxubGV0IEdhbWUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuY29sb3JzID09PSB0aGlzLnByb3BzLmNvbG9ycykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LCAgXG5cbiAgcmVuZGVyKCl7XG4gICAgLy8gb2JqZWN0IGRlc3RydWN0dXJpbmdcbiAgICBsZXQgeyBjb2xvcnMsIGNvcnJlY3RDb2xvciB9ID0gdGhpcy5wcm9wcztcbiAgICB2YXIgd29yZCA9IGNvbG9yc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xvcnMubGVuZ3RoKV07XG4gICAgdmFyIHNodWZmbGVkQ29sb3JzID0gc2h1ZmZsZShjb2xvcnMpO1xuICAgIHZhciBjb2xvckxpc3QgPSBzaHVmZmxlZENvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yLCBpKSB7XG4gICAgICAvLyB0ZXJuYXJ5IG9wZXJhdG9yXG4gICAgICBsZXQgb25DbGlja0hhbmRsZXIgPSBjb2xvciA9PT0gY29ycmVjdENvbG9yID8gQWN0aW9ucy5jb3JyZWN0QW5zd2VyIDogQWN0aW9ucy5pbmNvcnJlY3RBbnN3ZXI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkgY2xhc3NOYW1lPXsnYmctJysgY29sb3IgKyAnIGNvbG9yLWl0ZW0nfSBvbkNsaWNrPXtvbkNsaWNrSGFuZGxlcn0+XG4gICAgICAgICAgPGE+PHNwYW4+e2NvbG9yfTwvc3Bhbj48L2E+XG4gICAgICAgIDwvbGk+XG4gICAgICApXG4gICAgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYW1lLXdyYXBwZXJcIj5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT17J2NvbG9yLScgKyBjb3JyZWN0Q29sb3IgKyAnJ30+e3dvcmR9PC9oMj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImNvbG9yLWNob2ljZS11bFwiPntjb2xvckxpc3R9PC91bD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWU7XG4iLCJleHBvcnQgeyBkZWZhdWx0IGFzIEFwcCB9IGZyb20gJy4vQXBwLmpzeCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdhbWUgfSBmcm9tICcuL2dhbWUuanN4JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVGltZXIgfSBmcm9tICcuL3RpbWVyLmpzeCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNjb3JlIH0gZnJvbSAnLi9zY29yZS5qc3gnOyIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5sZXQgQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvYWN0aW9ucycpO1xuXG4vL1N0b3Jlc1xubGV0IFN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL3N0b3JlJyk7XG5cbmltcG9ydCB7IHNodWZmbGUgfSBmcm9tICcuLi9tb2R1bGVzJztcblxuXG5sZXQgU2NvcmUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgbWl4aW5zOiBbXG4gICAgUmVmbHV4LmNvbm5lY3QoU3RvcmUpXG4gIF0sXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc2NvcmUgPT09IHRoaXMucHJvcHMuc2NvcmUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY29yZS13cmFwXCI+XG4gICAgICAgIDxwPlNjb3JlOiB7dGhpcy5wcm9wcy5zY29yZX08L3A+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTY29yZTtcbiIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5sZXQgQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvYWN0aW9ucycpO1xuXG52YXIgY291bnRlciA9IDA7XG5cbi8vU3RvcmVzXG5sZXQgU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvc3RvcmUnKTtcblxubGV0IFRpbWVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnNvbGUubG9nKCdjb21wb25lbnREaWRNb3VudCcpO1xuICAgIEFjdGlvbnMuc3RhcnRUaW1lcigpO1xuICB9LFxuXG4gIHJlbmRlcigpe1xuICAgIHZhciB7IGVsYXBzZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHBlcmNlbnRhZ2VUaW1lID0gKChlbGFwc2VkIC8gNDAwMCkgKiAxMDApLnRvRml4ZWQoNSk7XG4gICAgdmFyIHRpbWVyU3R5bGUgPSB7XG4gICAgICB3aWR0aDogcGVyY2VudGFnZVRpbWUgKyAnJSdcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGltZXItd3JhcFwiPlxuICAgICAgICA8ZGl2IHN0eWxlPXt0aW1lclN0eWxlfSBjbGFzc05hbWU9XCJiYXJcIj48L2Rpdj5cbiAgICAgICAgPGEgb25DbGljaz17dGhpcy5zdGFydFRpbWVyfT5QbGF5IGFnYWluPzwvYT5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFRpbWVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xhc3NTZXQob2JqKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhvYmopLmZpbHRlcihrZXkgPT4gb2JqW2tleV0pLmpvaW4oJyAnKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9ycygpIHtcblx0cmV0dXJuIFsnYmx1ZScsICdyZWQnLCAnZ3JlZW4nLCAnb3JhbmdlJ107XG59XG4iLCJpbXBvcnQgc2h1ZmZsZSBmcm9tICcuL3NodWZmbGUnO1xuaW1wb3J0IGNsYXNzU2V0IGZyb20gJy4vY2xhc3NTZXQnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0c2h1ZmZsZSxcblx0Y2xhc3NTZXQsXG5cdGNvbG9yc1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2h1ZmZsZShhcnJheSkge1xuXHR2YXIgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoLCB0ZW1wb3JhcnlWYWx1ZSwgcmFuZG9tSW5kZXggO1xuICB3aGlsZSAoMCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50SW5kZXgpO1xuICAgIGN1cnJlbnRJbmRleCAtPSAxO1xuICAgIHRlbXBvcmFyeVZhbHVlID0gYXJyYXlbY3VycmVudEluZGV4XTtcbiAgICBhcnJheVtjdXJyZW50SW5kZXhdID0gYXJyYXlbcmFuZG9tSW5kZXhdO1xuICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cbiIsImxldCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5sZXQgUmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5sZXQgQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvYWN0aW9ucycpO1xuXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICcuLi9tb2R1bGVzJztcblxuXG5sZXQgU3RvcmUgPSBSZWZsdXguY3JlYXRlU3RvcmUoe1xuICBsaXN0ZW5hYmxlczogW0FjdGlvbnNdLFxuLy9XaGVuZXZlciB5b3UgdHJpZ2dlciBhIHN0b3JlLCB5b3UgaGF2ZSB0byBrZWVwIGEgY29uc2l0ZW50IGRhdGEgc3RydWN0dXJlO1xuLy9UaGUgY29udGVudHMgb2YgdGhlIHN0b3JlIGFsd2F5cyBoYXMgdG8gYmUgdGhlIHNhbWUuIFxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5jb250ZW50cyA9IHtcbiAgICAgIHNjb3JlOiAwLFxuICAgICAgZWxhcHNlZDogMCxcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpXG4gICAgfTtcbiAgICB0aGlzLl9zaHVmZmxlQ29sb3JzKCk7XG4gIH0sXG5cbiAgX3NodWZmbGVDb2xvcnMoKSB7XG4gICAgdGhpcy5jb250ZW50cy5jb2xvcnMgPSBjb2xvcnMoKTtcbiAgICB0aGlzLmNvbnRlbnRzLmNvcnJlY3RDb2xvciA9IHRoaXMuY29udGVudHMuY29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuY29udGVudHMuY29sb3JzLmxlbmd0aCldO1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfSxcblxuICBvblByb2dyZXNzVGltZXIoZWxhcHNlZCkge1xuICAgIHRoaXMuY29udGVudHMuZWxhcHNlZCA9IGVsYXBzZWQ7XG4gICAgdGhpcy50cmlnZ2VyKHRoaXMuY29udGVudHMpO1xuICB9LFxuXG4gIG9uSW5jb3JyZWN0QW5zd2VyKCkge1xuICAgIHRoaXMuX3NodWZmbGVDb2xvcnMoKTtcbiAgICB0aGlzLmNvbnRlbnRzLnNjb3JlID0gMDtcbiAgICB0aGlzLnRyaWdnZXIodGhpcy5jb250ZW50cyk7XG4gIH0sXG5cbiAgb25Db3JyZWN0QW5zd2VyKCkge1xuICAgIHRoaXMuX3NodWZmbGVDb2xvcnMoKTtcbiAgICB0aGlzLmNvbnRlbnRzLnNjb3JlICsrO1xuICAgIHRoaXMudHJpZ2dlcih0aGlzLmNvbnRlbnRzKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdG9yZTtcbiJdfQ==
